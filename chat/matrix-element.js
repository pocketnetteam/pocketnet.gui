/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		2: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "matrix-element." + ({}[chunkId]||chunkId) + ".js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.name = 'ChunkLoadError';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["matrixElement_jsonp"] = window["matrixElement_jsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "5a74");
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "0023":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidStoreError = InvalidStoreError;
exports.InvalidCryptoStoreError = InvalidCryptoStoreError;
exports.KeySignatureUploadError = void 0; // can't just do InvalidStoreError extends Error
// because of http://babeljs.io/docs/usage/caveats/#classes

function InvalidStoreError(reason, value) {
  const message = `Store is invalid because ${reason}, ` + `please stop the client, delete all data and start the client again`;
  const instance = Reflect.construct(Error, [message]);
  Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));
  instance.reason = reason;
  instance.value = value;
  return instance;
}

InvalidStoreError.TOGGLED_LAZY_LOADING = "TOGGLED_LAZY_LOADING";
InvalidStoreError.prototype = Object.create(Error.prototype, {
  constructor: {
    value: Error,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Reflect.setPrototypeOf(InvalidStoreError, Error);

function InvalidCryptoStoreError(reason) {
  const message = `Crypto store is invalid because ${reason}, ` + `please stop the client, delete all data and start the client again`;
  const instance = Reflect.construct(Error, [message]);
  Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));
  instance.reason = reason;
  instance.name = 'InvalidCryptoStoreError';
  return instance;
}

InvalidCryptoStoreError.TOO_NEW = "TOO_NEW";
InvalidCryptoStoreError.prototype = Object.create(Error.prototype, {
  constructor: {
    value: Error,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
Reflect.setPrototypeOf(InvalidCryptoStoreError, Error);

class KeySignatureUploadError extends Error {
  constructor(message, value) {
    super(message);
    this.value = value;
  }

}

exports.KeySignatureUploadError = KeySignatureUploadError;

/***/ }),

/***/ "0086":
/***/ (function(module, exports, __webpack_require__) {

/**
 *
 * @author    Jerry Bendy
 * @since     4/12/2017
 */

function touchX(event) {
    if(event.type.indexOf('mouse') !== -1){
        return event.clientX;
    }
    return event.touches[0].clientX;
}

function touchY(event) {
    if(event.type.indexOf('mouse') !== -1){
        return event.clientY;
    }
    return event.touches[0].clientY;
}

var isPassiveSupported = (function() {
    var supportsPassive = false;
    try {
        var opts = Object.defineProperty({}, 'passive', {
            get: function() {
                supportsPassive = true;
            }
        });
        window.addEventListener('test', null, opts);
    } catch (e) {}
    return supportsPassive;
})();

// Save last touch time globally (touch start time or touch end time), if a `click` event triggered,
// and the time near by the last touch time, this `click` event will be ignored. This is used for
// resolve touch through issue.
var globalLastTouchTime = 0;

var vueTouchEvents = {
    install: function (Vue, constructorOptions) {

        var globalOptions = Object.assign({}, {
            disableClick: false,
            tapTolerance: 10,  // px
            swipeTolerance: 30,  // px
            touchHoldTolerance: 400,  // ms
            longTapTimeInterval: 400,  // ms
            touchClass: '',
            namespace: 'touch'
        }, constructorOptions);

        function touchStartEvent(event) {
            var $this = this.$$touchObj,
                isTouchEvent = event.type.indexOf('touch') >= 0,
                isMouseEvent = event.type.indexOf('mouse') >= 0,
                $el = this;

            if (isTouchEvent) {
                globalLastTouchTime = event.timeStamp;
            }

            if (isMouseEvent && globalLastTouchTime && event.timeStamp - globalLastTouchTime < 350) {
                return;
            }

            if ($this.touchStarted) {
                return;
            }

            addTouchClass(this);

            $this.touchStarted = true;

            $this.touchMoved = false;
            $this.swipeOutBounded = false;

            $this.startX = touchX(event);
            $this.startY = touchY(event);

            $this.currentX = 0;
            $this.currentY = 0;

            $this.touchStartTime = event.timeStamp;

            // Trigger touchhold event after `touchHoldTolerance`ms
            $this.touchHoldTimer = setTimeout(function() {
                $this.touchHoldTimer = null;
                triggerEvent(event, $el, 'touchhold');
            }, $this.options.touchHoldTolerance);

            triggerEvent(event, this, 'start');
        }

        function touchMoveEvent(event) {
            var $this = this.$$touchObj;

            $this.currentX = touchX(event);
            $this.currentY = touchY(event);

            if (!$this.touchMoved) {
                var tapTolerance = $this.options.tapTolerance;

                $this.touchMoved = Math.abs($this.startX - $this.currentX) > tapTolerance ||
                    Math.abs($this.startY - $this.currentY) > tapTolerance;

                if($this.touchMoved){
                    cancelTouchHoldTimer($this);
                    triggerEvent(event, this, 'moved');
                }

            } else if (!$this.swipeOutBounded) {
                var swipeOutBounded = $this.options.swipeTolerance;

                $this.swipeOutBounded = Math.abs($this.startX - $this.currentX) > swipeOutBounded &&
                    Math.abs($this.startY - $this.currentY) > swipeOutBounded;
            }

            if($this.touchMoved){
                triggerEvent(event, this, 'moving');
            }
        }

        function touchCancelEvent() {
            var $this = this.$$touchObj;

            cancelTouchHoldTimer($this);
            removeTouchClass(this);

            $this.touchStarted = $this.touchMoved = false;
            $this.startX = $this.startY = 0;
        }

        function touchEndEvent(event) {
            var $this = this.$$touchObj,
                isTouchEvent = event.type.indexOf('touch') >= 0,
                isMouseEvent = event.type.indexOf('mouse') >= 0;

            if (isTouchEvent) {
                globalLastTouchTime = event.timeStamp;
            }

            var touchholdEnd = isTouchEvent && !$this.touchHoldTimer;
            cancelTouchHoldTimer($this);

            $this.touchStarted = false;

            removeTouchClass(this);

            if (isMouseEvent && globalLastTouchTime && event.timeStamp - globalLastTouchTime < 350) {
                return;
            }

            // Fix #33, Trigger `end` event when touch stopped
            triggerEvent(event, this, 'end');

            if (!$this.touchMoved) {
                // detect if this is a longTap event or not
                if ($this.callbacks.longtap && event.timeStamp - $this.touchStartTime > $this.options.longTapTimeInterval) {
                    if (event.cancelable) {
                        event.preventDefault();
                    }
                    triggerEvent(event, this, 'longtap');

                } else if ($this.callbacks.touchhold && touchholdEnd) {
                    if (event.cancelable) {
                        event.preventDefault();
                    }
                    return;
                } else {
                    // emit tap event
                    triggerEvent(event, this, 'tap');
                }

            } else if (!$this.swipeOutBounded) {
                var swipeOutBounded = $this.options.swipeTolerance,
                    direction,
                    distanceY = Math.abs($this.startY - $this.currentY),
                    distanceX = Math.abs($this.startX - $this.currentX);

                if (distanceY > swipeOutBounded || distanceX > swipeOutBounded) {
                    if (distanceY > swipeOutBounded) {
                        direction = $this.startY > $this.currentY ? 'top' : 'bottom';
                    } else {
                        direction = $this.startX > $this.currentX ? 'left' : 'right';
                    }

                    // Only emit the specified event when it has modifiers
                    if ($this.callbacks['swipe.' + direction]) {
                        triggerEvent(event, this, 'swipe.' + direction, direction);
                    } else {
                        // Emit a common event when it has no any modifier
                        triggerEvent(event, this, 'swipe', direction);
                    }
                }
            }
        }

        function mouseEnterEvent() {
            addTouchClass(this);
        }

        function mouseLeaveEvent() {
            removeTouchClass(this);
        }

        function triggerEvent(e, $el, eventType, param) {
            var $this = $el.$$touchObj;

            // get the callback list
            var callbacks = $this && $this.callbacks[eventType] || [];
            if (callbacks.length === 0) {
                return null;
            }

            for (var i = 0; i < callbacks.length; i++) {
                var binding = callbacks[i];

                if (binding.modifiers.stop) {
                    e.stopPropagation();
                }

                if (binding.modifiers.prevent && e.cancelable) {
                    e.preventDefault();
                }

                // handle `self` modifier`
                if (binding.modifiers.self && e.target !== e.currentTarget) {
                    continue;
                }

                if (typeof binding.value === 'function') {
                    if (param) {
                        binding.value(param, e);
                    } else {
                        binding.value(e);
                    }
                }
            }
        }

        function addTouchClass($el) {
            var className = $el.$$touchObj.options.touchClass;
            className && $el.classList.add(className);
        }

        function removeTouchClass($el) {
            var className = $el.$$touchObj.options.touchClass;
            className && $el.classList.remove(className);
        }

        function cancelTouchHoldTimer($this) {
            if ($this.touchHoldTimer) {
                clearTimeout($this.touchHoldTimer);
                $this.touchHoldTimer = null;
            }
        }

        function buildTouchObj($el, extraOptions) {
            var touchObj = $el.$$touchObj || {
                // an object contains all callbacks registered,
                // key is event name, value is an array
                callbacks: {},
                // prevent bind twice, set to true when event bound
                hasBindTouchEvents: false,
                // default options, would be override by v-touch-options
                options: globalOptions
            };
            if (extraOptions) {
                touchObj.options = Object.assign({}, touchObj.options, extraOptions);
            }
            $el.$$touchObj = touchObj;
            return $el.$$touchObj;
        }

        Vue.directive(globalOptions.namespace, {
            bind: function ($el, binding) {
                // build a touch configuration object
                var $this = buildTouchObj($el);
                // declare passive option for the event listener. Defaults to { passive: true } if supported
                var passiveOpt = isPassiveSupported ? { passive: true } : false;
                // register callback
                var eventType = binding.arg || 'tap';
                switch (eventType) {
                    case 'swipe':
                        var _m = binding.modifiers;
                        if (_m.left || _m.right || _m.top || _m.bottom) {
                            for (var i in binding.modifiers) {
                                if (['left', 'right', 'top', 'bottom'].indexOf(i) >= 0) {
                                    var _e = 'swipe.' + i;
                                    $this.callbacks[_e] = $this.callbacks[_e] || [];
                                    $this.callbacks[_e].push(binding);
                                }
                            }
                        } else {
                            $this.callbacks.swipe = $this.callbacks.swipe || [];
                            $this.callbacks.swipe.push(binding);
                        }
                        break;
                    
                    case 'start':
                    case 'moving':
                        if (binding.modifiers.disablePassive) {
                            // change the passive option for the moving event if disablePassive modifier exists
                            passiveOpt = false;
                        }
                    // fallthrough
                    default:
                        $this.callbacks[eventType] = $this.callbacks[eventType] || [];
                        $this.callbacks[eventType].push(binding);
                }

                // prevent bind twice
                if ($this.hasBindTouchEvents) {
                    return;
                }

                $el.addEventListener('touchstart', touchStartEvent, passiveOpt);
                $el.addEventListener('touchmove', touchMoveEvent, passiveOpt);
                $el.addEventListener('touchcancel', touchCancelEvent);
                $el.addEventListener('touchend', touchEndEvent);

                if (!$this.options.disableClick) {
                    $el.addEventListener('mousedown', touchStartEvent);
                    $el.addEventListener('mousemove', touchMoveEvent);
                    $el.addEventListener('mouseup', touchEndEvent);
                    $el.addEventListener('mouseenter', mouseEnterEvent);
                    $el.addEventListener('mouseleave', mouseLeaveEvent);
                }

                // set bind mark to true
                $this.hasBindTouchEvents = true;
            },

            unbind: function ($el) {
                $el.removeEventListener('touchstart', touchStartEvent);
                $el.removeEventListener('touchmove', touchMoveEvent);
                $el.removeEventListener('touchcancel', touchCancelEvent);
                $el.removeEventListener('touchend', touchEndEvent);

                if ($el.$$touchObj && !$el.$$touchObj.options.disableClick) {
                    $el.removeEventListener('mousedown', touchStartEvent);
                    $el.removeEventListener('mousemove', touchMoveEvent);
                    $el.removeEventListener('mouseup', touchEndEvent);
                    $el.removeEventListener('mouseenter', mouseEnterEvent);
                    $el.removeEventListener('mouseleave', mouseLeaveEvent);
                }

                // remove vars
                delete $el.$$touchObj;
            }
        });

        Vue.directive(globalOptions.namespace + '-class', {
            bind: function ($el, binding) {
                buildTouchObj($el, {
                    touchClass: binding.value
                });
            }
        });

        Vue.directive(globalOptions.namespace + '-options', {
            bind: function($el, binding) {
                buildTouchObj($el, binding.value);
            }
        });
    }
};


/*
 * Exports
 */
if (true) {
    module.exports = vueTouchEvents;

} else {}


/***/ }),

/***/ "0095":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_bcf20e38_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8ba6");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_bcf20e38_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_bcf20e38_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_bcf20e38_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_bcf20e38_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "00ce":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__("5156")();

var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__("0f7c");
var hasOwn = __webpack_require__("a0d3");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "00e4":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_54a240c2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("d924");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_54a240c2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_54a240c2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_54a240c2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_54a240c2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "00ee":
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "0176":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");
var transformData = __webpack_require__("7769");
var isCancel = __webpack_require__("0a3f");
var defaults = __webpack_require__("8b5c");
var isAbsoluteURL = __webpack_require__("bfa8");
var combineURLs = __webpack_require__("4563");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "023f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * The STREAM online authenticated encryption construction.
 * See <https://eprint.iacr.org/2015/189.pdf> for definition.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const aead_1 = __webpack_require__("1467");
const webcrypto_1 = __webpack_require__("9060");
/** Size of a nonce required by STREAM in bytes */
exports.NONCE_SIZE = 8;
/** Byte flag indicating this is the last block in the STREAM (otherwise 0) */
exports.LAST_BLOCK_FLAG = 1;
/** Maximum value of the counter STREAM uses internally to identify messages */
exports.COUNTER_MAX = 0xFFFFFFFF;
/**
 * A STREAM encryptor with a 32-bit counter, generalized for any AEAD algorithm
 *
 * This corresponds to the ℰ stream encryptor object as defined in the paper
 * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance
 */
class StreamEncryptor {
    /** Create a new StreamEncryptor instance with the given key */
    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {
        return __awaiter(this, void 0, void 0, function* () {
            return new StreamEncryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);
        });
    }
    constructor(aead, nonce) {
        this._aead = aead;
        this._nonce_encoder = new NonceEncoder(nonce);
    }
    /** Encrypt and authenticate data using the selected AEAD algorithm */
    seal(plaintext, lastBlock = false, associatedData = new Uint8Array(0)) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._aead.seal(plaintext, this._nonce_encoder.next(lastBlock), associatedData);
        });
    }
    /** Make a best effort to wipe memory used by this instance */
    clear() {
        this._aead.clear();
        return this;
    }
}
exports.StreamEncryptor = StreamEncryptor;
/**
 * A STREAM decryptor with a 32-bit counter, generalized for any AEAD algorithm
 *
 * This corresponds to the 𝒟 stream decryptor object as defined in the paper
 * Online Authenticated-Encryption and its Nonce-Reuse Misuse-Resistance
 */
class StreamDecryptor {
    /** Create a new StreamDecryptor instance with the given key */
    static importKey(keyData, nonce, alg, provider = new webcrypto_1.WebCryptoProvider()) {
        return __awaiter(this, void 0, void 0, function* () {
            return new StreamDecryptor(yield aead_1.AEAD.importKey(keyData, alg, provider), nonce);
        });
    }
    constructor(aead, nonce) {
        this._aead = aead;
        this._nonce_encoder = new NonceEncoder(nonce);
    }
    /** Decrypt and authenticate data using the selected AEAD algorithm */
    open(ciphertext, lastBlock = false, associatedData = new Uint8Array(0)) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._aead.open(ciphertext, this._nonce_encoder.next(lastBlock), associatedData);
        });
    }
    /** Make a best effort to wipe memory used by this instance */
    clear() {
        this._aead.clear();
        return this;
    }
}
exports.StreamDecryptor = StreamDecryptor;
/** Computes STREAM nonces based on the current position in the STREAM. */
class NonceEncoder {
    constructor(noncePrefix) {
        if (noncePrefix.length !== exports.NONCE_SIZE) {
            throw new Error(`STREAM: nonce must be 8-bits (got ${noncePrefix.length}`);
        }
        this.buffer = new ArrayBuffer(exports.NONCE_SIZE + 4 + 1);
        this.view = new DataView(this.buffer);
        this.array = new Uint8Array(this.buffer);
        this.array.set(noncePrefix);
        this.counter = 0;
        this.finished = false;
    }
    /** Compute the next nonce value, incrementing the internal counter */
    next(lastBlock) {
        if (this.finished) {
            throw new Error("STREAM: already finished");
        }
        this.view.setInt32(8, this.counter, false);
        if (lastBlock) {
            this.view.setInt8(12, exports.LAST_BLOCK_FLAG);
            this.finished = true;
        }
        else {
            this.counter += 1;
            if (this.counter > exports.COUNTER_MAX) {
                throw new Error("STREAM counter overflowed");
            }
        }
        return this.array;
    }
}


/***/ }),

/***/ "03a5":
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():undefined}(window,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/dist/",n(n.s=23)}([function(t,e,n){"use strict";function o(t,e,n,o,i,r,s,a){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=n,u._compiled=!0),o&&(u.functional=!0),r&&(u._scopeId="data-v-"+r),s?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(s)},u._ssrRegister=c):i&&(c=a?function(){i.call(this,this.$root.$options.shadowRoot)}:i),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(t,e){return c.call(e),l(t,e)}}else{var f=u.beforeCreate;u.beforeCreate=f?[].concat(f,c):[c]}return{exports:t,options:u}}n.d(e,"a",function(){return o})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=e.DIALOG_TYPES={ALERT:"alert",CONFIRM:"confirm",PROMPT:"prompt"},i=e.CONFIRM_TYPES={BASIC:"basic",SOFT:"soft",HARD:"hard"};e.ANIMATION_TYPES={FADE:"dg-fade",ZOOM:"dg-zoom",BOUNCE:"dg-bounce"},e.CLASS_TYPES={MAIN_CONTENT:"mainContent",BODY:"body",TITLE:"title",FOOTER:"footer",OK_BTN:"okBtn",CANCEL_BTN:"cancelBtn"},e.DEFAULT_OPTIONS={html:!1,loader:!1,reverse:!1,backdropClose:!1,okText:"Continue",cancelText:"Close",view:null,type:i.BASIC,window:o.CONFIRM,message:"Proceed with the request?",clicksCount:3,animation:"zoom",customClass:"",verification:"continue",verificationHelp:'Type "[+:verification]" below to confirm',promptHelp:'Type in the box below and click "[+:okText]"'}},function(t,e,n){"use strict";n.r(e);var o=n(3),i=n.n(o);for(var r in o)"default"!==r&&function(t){n.d(e,t,function(){return o[t]})}(r);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t&&t.__esModule?t:{default:t}}(n(29)),i=n(16);e.default={data:function(){return{dialogsARR:[],registeredViews:{}}},created:function(){document.addEventListener("keydown",this.escapeKeyListener)},destroyed:function(){document.removeEventListener("keydown",this.escapeKeyListener)},watch:{dialogsARR:{handler:function(t){var e=document.getElementsByTagName("body")[0];e&&(t.length&&!e.classList.contains("dg-open")?e.classList.add("dg-open"):!t.length&&e&&e.classList.contains("dg-open")&&e.classList.remove("dg-open"))}}},methods:{commit:function(t){t.escapeKeyClose=!1,this.dialogsARR.push(t)},forceCloseAll:function(){var t=this;this.dialogsARR.forEach(function(e,n){return t.$delete(t.dialogsARR,n)})},destroyDialog:function(t){var e=(0,i.firstIndex)(this.dialogsARR,t,"id");-1!==e&&this.$delete(this.dialogsARR,e)},escapeKeyListener:function(t){if(27===t.keyCode){var e=-1+this.dialogsARR.length;e>-1&&this.$set(this.dialogsARR[e],"escapeKeyClose",!0)}}},components:{DialogWindow:o.default}}},function(t,e,n){"use strict";n.r(e);var o=n(5),i=n.n(o);for(var r in o)"default"!==r&&function(t){n.d(e,t,function(){return o[t]})}(r);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t&&t.__esModule?t:{default:t}}(n(30)),i=n(1);e.default={data:function(){return{show:!0,closed:!1,endedAnimations:[]}},props:{options:{type:Object,required:!0},escapeKeyClose:{type:Boolean,default:!1},registeredViews:{type:Object,default:function(){return{}}}},watch:{escapeKeyClose:function(t){!0===t&&(this.cancelBtnDisabled?this.proceed():this.cancel())}},computed:{animation:function(){var t=this.options.animation.toUpperCase();return i.ANIMATION_TYPES.hasOwnProperty(t)?i.ANIMATION_TYPES[t]:i.ANIMATION_TYPES.ZOOM},loaderEnabled:function(){return!!this.options.loader},dialogView:function(){return(this.options.view?this.registeredViews[this.options.view]:null)||o.default},isHardConfirm:function(){return this.options.window===i.DIALOG_TYPES.CONFIRM&&this.options.type===i.CONFIRM_TYPES.HARD},isPrompt:function(){return this.options.window===i.DIALOG_TYPES.PROMPT}},methods:{closeAtOutsideClick:function(){!0===this.options.backdropClose&&(this.cancelBtnDisabled?this.proceed():this.cancel())},proceed:function(){this.loaderEnabled?(this.switchLoadingState(!0),this.options.promiseResolver({close:this.close,loading:this.switchLoadingState})):(this.options.promiseResolver(!0),this.close())},cancel:function(){!0!==this.loading&&this.close()},close:function(){this.show=!1,this.closed=!0},animationEnded:function(t){this.endedAnimations.push(t),-1!==this.endedAnimations.indexOf("backdrop")&&-1!==this.endedAnimations.indexOf("content")&&(this.options.promiseRejecter(!1),this.$emit("close",this.options.id))}},beforeDestroy:function(){!1===this.closed&&(this.cancelBtnDisabled?this.proceed():this.cancel())}}},function(t,e,n){"use strict";n.r(e);var o=n(7),i=n.n(o);for(var r in o)"default"!==r&&function(t){n.d(e,t,function(){return o[t]})}(r);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=s(n(13)),i=s(n(31)),r=s(n(32));function s(t){return t&&t.__esModule?t:{default:t}}e.default={data:function(){return{}},mixins:[o.default],mounted:function(){this.isHardConfirm&&this.$refs.inputElem&&this.$refs.inputElem.focus()},components:{CancelBtn:r.default,OkBtn:i.default}}},function(t,e,n){"use strict";n.r(e);var o=n(9),i=n.n(o);for(var r in o)"default"!==r&&function(t){n.d(e,t,function(){return o[t]})}(r);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){return t&&t.__esModule?t:{default:t}}(n(36)),i=n(1);e.default={data:function(){return{clicks_count:0}},props:{enabled:{required:!1,type:Boolean,default:!0},options:{required:!0,type:Object},focus:{required:!1,type:Boolean,default:!1},loading:{required:!1,type:Boolean,default:!1}},mounted:function(){this.focus&&this.$refs.btn.focus()},computed:{soft_confirm:function(){return this.options.type===i.CONFIRM_TYPES.SOFT},hard_confirm:function(){return this.options.type===i.CONFIRM_TYPES.HARD},is_disabled:function(){return this.$parent.okBtnDisabled},clicks_remaining:function(){return Math.max(this.options.clicksCount-this.clicks_count,0)}},methods:{proceed:function(){!this.is_disabled&&this.validateProceed()&&this.$emit("click")},validateProceed:function(){switch(this.options.type){case i.CONFIRM_TYPES.SOFT:return this.clicks_count++,this.clicks_count>=this.options.clicksCount;case i.CONFIRM_TYPES.BASIC:default:return!0}}},components:{BtnLoader:o.default}}},function(t,e,n){"use strict";n.r(e);var o=n(11),i=n.n(o);for(var r in o)"default"!==r&&function(t){n.d(e,t,function(){return o[t]})}(r);e.default=i.a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{enabled:{required:!1,type:Boolean,default:!0},options:{required:!0,type:Object},focus:{required:!1,type:Boolean,default:!1},loading:{required:!1,type:Boolean,default:!1}},mounted:function(){this.focus&&this.$refs.btn.focus()}}},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),i=s(n(14)),r=s(n(15));function s(t){return t&&t.__esModule?t:{default:t}}e.default={data:function(){return{input:"",loading:!1}},props:{options:{type:Object,required:!0}},computed:{loaderEnabled:function(){return!!this.options.loader},isHardConfirm:function(){return this.options.window===o.DIALOG_TYPES.CONFIRM&&this.options.type===o.CONFIRM_TYPES.HARD},isPrompt:function(){return this.options.window===o.DIALOG_TYPES.PROMPT},leftBtnComponent:function(){return!1===this.options.reverse?"cancel-btn":"ok-btn"},rightBtnComponent:function(){return!0===this.options.reverse?"cancel-btn":"ok-btn"},hardConfirmHelpText:function(){var t=this;return this.options.verificationHelp.replace(/\[\+:(\w+)]/g,function(e,n){return t.options[n]||e})},promptHelpText:function(){var t=this;return this.options.promptHelp.replace(/\[\+:(\w+)]/g,function(e,n){return t.options[n]||e})}},mounted:function(){this.isHardConfirm&&this.$refs.inputElem&&this.$refs.inputElem.focus()},methods:{clickRightBtn:function(){this.options.reverse?this.cancel():this.proceed(this.getDefaultData())},clickLeftBtn:function(){this.options.reverse?this.proceed(this.getDefaultData()):this.cancel()},submitDialogForm:function(){this.okBtnDisabled||this.proceed(this.getDefaultData())},getDefaultData:function(){return this.isPrompt?this.input:null},proceed:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.loaderEnabled?(this.switchLoadingState(!0),this.options.promiseResolver({close:this.close,loading:this.switchLoadingState,data:t})):(this.options.promiseResolver({data:t}),this.close())},cancel:function(){!0!==this.loading&&this.close()},switchLoadingState:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;null===t&&(t=!this.loading),this.loading=!!t},close:function(){this.$emit("close")}},mixins:[i.default,r.default]}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default={computed:{messageHasTitle:function(){var t=this.options.message;return"object"===(void 0===t?"undefined":o(t))&&null!==t&&t.title},messageTitle:function(){return this.messageHasTitle?this.options.message.title:null},messageBody:function(){var t=this.options.message;return"string"==typeof t?t:t.body||""}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1);e.default={computed:{cancelBtnDisabled:function(){return this.options.window===o.DIALOG_TYPES.ALERT},okBtnDisabled:function(){return this.options.window===o.DIALOG_TYPES.CONFIRM&&this.options.type===o.CONFIRM_TYPES.HARD&&this.input!==this.options.verification},leftBtnEnabled:function(){return!1===this.cancelBtnDisabled||!0===this.options.reverse},rightBtnEnabled:function(){return!1===this.cancelBtnDisabled||!1===this.options.reverse},leftBtnFocus:function(){return!this.isHardConfirm&&!0===this.options.reverse},rightBtnFocus:function(){return!this.isHardConfirm&&!1===this.options.reverse},leftBtnText:function(){return this.options.reverse?this.options.okText:this.options.cancelText},rightBtnText:function(){return this.options.reverse?this.options.cancelText:this.options.okText}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getElem=function(t){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?document.querySelectorAll(t):document.querySelector(t)};e.noop=function(){};var o=e.cloneObj=function(t){return Object.assign({},t)};e.mergeObjs=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);return Object.assign.apply(Object,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(t.map(o)))},e.clickNode=function(t){if(document.createEvent){var e=document.createEvent("MouseEvents");e.initEvent("click",!0,!1),t.dispatchEvent(e)}else document.createEventObject?t.fireEvent("onclick"):"function"==typeof t.onclick&&t.onclick()},e.firstIndex=function(t,e,n){var o=void 0,i=t.length;for(o=0;o<i;o++)if(t[o][n]===e)return o;return-1}},function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",t._l(t.dialogsARR,function(e){return n("dialog-window",{key:e.id,attrs:{options:e,escapeKeyClose:e.escapeKeyClose,registeredViews:t.registeredViews},on:{close:t.destroyDialog}})}))},i=[];n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i})},function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{class:t.options.customClass},[n("transition",{attrs:{name:"dg-backdrop",appear:""},on:{"after-leave":function(e){t.animationEnded("backdrop")}}},[t.show?n("div",{staticClass:"dg-backdrop"}):t._e()]),t._v(" "),n("transition",{attrs:{name:t.animation,appear:""},on:{"after-leave":function(e){t.animationEnded("content")}}},[t.show?n("div",{class:["dg-container",{"dg-container--has-input":t.isHardConfirm||t.isPrompt}],on:{click:t.closeAtOutsideClick}},[n("div",{staticClass:"dg-content-cont dg-content-cont--floating"},[n("div",{staticClass:"dg-main-content",on:{click:function(t){t.stopPropagation()}}},[n(t.dialogView,{tag:"component",attrs:{options:t.options},on:{close:t.close}})],1)])]):t._e()])],1)},i=[];n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i})},function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"dg-view-wrapper"},[n("div",{class:["dg-content-body",{"dg-content-body--has-title":t.messageHasTitle}]},[t.messageHasTitle?[t.options.html?n("h6",{staticClass:"dg-title",domProps:{innerHTML:t._s(t.messageTitle)}}):n("h6",{staticClass:"dg-title"},[t._v(t._s(t.messageTitle))])]:t._e(),t._v(" "),t.options.html?n("div",{staticClass:"dg-content",domProps:{innerHTML:t._s(t.messageBody)}}):n("div",{staticClass:"dg-content"},[t._v(t._s(t.messageBody))]),t._v(" "),t.isHardConfirm||t.isPrompt?n("form",{staticClass:"dg-form",attrs:{autocomplete:"off"},on:{submit:function(e){return e.preventDefault(),t.submitDialogForm(e)}}},[n("label",{staticStyle:{"font-size":"13px"},attrs:{for:"dg-input-elem"}},[t._v(t._s(t.isPrompt?t.promptHelpText:t.hardConfirmHelpText))]),t._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:t.input,expression:"input"}],ref:"inputElem",staticStyle:{width:"100%","margin-top":"10px",padding:"5px 15px","font-size":"16px","border-radius":"4px",border:"2px solid #eee"},attrs:{type:"text",placeholder:t.isPrompt?"":t.options.verification,autocomplete:"off",id:"dg-input-elem"},domProps:{value:t.input},on:{input:function(e){e.target.composing||(t.input=e.target.value)}}})]):t._e()],2),t._v(" "),n("div",{staticClass:"dg-content-footer"},[n(t.leftBtnComponent,{tag:"button",attrs:{loading:t.loading,enabled:t.leftBtnEnabled,options:t.options,focus:t.leftBtnFocus},on:{click:function(e){t.clickLeftBtn()}}},[t.options.html?n("span",{domProps:{innerHTML:t._s(t.leftBtnText)}}):n("span",[t._v(t._s(t.leftBtnText))])]),t._v(" "),n(t.rightBtnComponent,{tag:"button",attrs:{loading:t.loading,enabled:t.rightBtnEnabled,options:t.options,focus:t.rightBtnFocus},on:{click:function(e){t.clickRightBtn()}}},[t.options.html?n("span",{domProps:{innerHTML:t._s(t.rightBtnText)}}):n("span",[t._v(t._s(t.rightBtnText))])]),t._v(" "),n("div",{staticClass:"dg-clear"})])])},i=[];n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i})},function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.enabled?n("button",{ref:"btn",class:["dg-btn","dg-btn--ok",{"dg-btn--loading":t.loading},{"dg-pull-right":!t.options.reverse}],attrs:{disabled:t.is_disabled},on:{click:function(e){e.preventDefault(),t.proceed()}}},[n("span",{staticClass:"dg-btn-content"},[t._t("default"),t._v(" "),t.soft_confirm?n("span",[t._v("("+t._s(t.clicks_remaining)+")")]):t._e()],2),t._v(" "),t.loading?n("btn-loader",{tag:"span"}):t._e()]):t._e()},i=[];n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i})},function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return t.enabled?n("button",{ref:"btn",class:["dg-btn","dg-btn--cancel",{"dg-pull-right":t.options.reverse}],on:{click:function(e){e.preventDefault(),t.$emit("click")}}},[t._t("default")],2):t._e()},i=[];n.d(e,"a",function(){return o}),n.d(e,"b",function(){return i})},function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=c(n(24)),i=c(n(28)),r=n(1),s=c(n(35)),a=n(16);function c(t){return t&&t.__esModule?t:{default:t}}var u={},l=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.Vue=t,this.mounted=!1,this.$root={},this.registeredViews={},this.globalOptions=(0,a.mergeObjs)(r.DEFAULT_OPTIONS,e)};l.prototype.mountIfNotMounted=function(){var t=this;!0!==this.mounted&&(this.$root=function(){var e=t.Vue.extend(i.default),n=document.createElement("div");document.querySelector("body").appendChild(n);var o=new e;return o.registeredViews=t.registeredComponents(),o.$mount(n)}(),this.mounted=!0)},l.prototype.registeredComponents=function(){return u},l.prototype.registerComponent=function(t,e){this.mounted&&this.destroy(),u[t]=e},l.prototype.destroy=function(){if(!0===this.mounted){this.$root.forceCloseAll();var t=this.$root.$el;this.$root.$destroy(),this.$root.$off(),t.remove(),this.mounted=!1}},l.prototype.alert=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t&&(e.message=t),this.open(r.DIALOG_TYPES.ALERT,e)},l.prototype.prompt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t&&(e.message=t),this.open(r.DIALOG_TYPES.PROMPT,e)},l.prototype.confirm=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return t&&(e.message=t),this.open(r.DIALOG_TYPES.CONFIRM,e)},l.prototype.open=function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.mountIfNotMounted(),new o.default(function(o,i){n.id="dialog."+Date.now(),n.window=t,n.promiseResolver=o,n.promiseRejecter=i,e.$root.commit((0,a.mergeObjs)(e.globalOptions,n))})},l.install=function(t,e){var n=new s.default(t);t.directive("confirm",n.confirmDefinition),t.dialog=new l(t,e),Object.defineProperties(t.prototype,{$dialog:{get:function(){return t.dialog}}})},e.default=l},function(t,e,n){(function(e){!function(n){var o=setTimeout;function i(){}function r(t){if(!(this instanceof r))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(t,this)}function s(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,r._immediateFn(function(){var n=1===t._state?e.onFulfilled:e.onRejected;if(null!==n){var o;try{o=n(t._value)}catch(t){return void c(e.promise,t)}a(e.promise,o)}else(1===t._state?a:c)(e.promise,t._value)})):t._deferreds.push(e)}function a(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var n=e.then;if(e instanceof r)return t._state=3,t._value=e,void u(t);if("function"==typeof n)return void l(function(t,e){return function(){t.apply(e,arguments)}}(n,e),t)}t._state=1,t._value=e,u(t)}catch(e){c(t,e)}}function c(t,e){t._state=2,t._value=e,u(t)}function u(t){2===t._state&&0===t._deferreds.length&&r._immediateFn(function(){t._handled||r._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)s(t,t._deferreds[e]);t._deferreds=null}function l(t,e){var n=!1;try{t(function(t){n||(n=!0,a(e,t))},function(t){n||(n=!0,c(e,t))})}catch(t){if(n)return;n=!0,c(e,t)}}r.prototype.catch=function(t){return this.then(null,t)},r.prototype.then=function(t,e){var n=new this.constructor(i);return s(this,new function(t,e,n){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(t,e,n)),n},r.all=function(t){return new r(function(e,n){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var o=Array.prototype.slice.call(t);if(0===o.length)return e([]);var i=o.length;function r(t,s){try{if(s&&("object"==typeof s||"function"==typeof s)){var a=s.then;if("function"==typeof a)return void a.call(s,function(e){r(t,e)},n)}o[t]=s,0==--i&&e(o)}catch(t){n(t)}}for(var s=0;s<o.length;s++)r(s,o[s])})},r.resolve=function(t){return t&&"object"==typeof t&&t.constructor===r?t:new r(function(e){e(t)})},r.reject=function(t){return new r(function(e,n){n(t)})},r.race=function(t){return new r(function(e,n){for(var o=0,i=t.length;o<i;o++)t[o].then(e,n)})},r._immediateFn="function"==typeof e&&function(t){e(t)}||function(t){o(t,0)},r._unhandledRejectionFn=function(t){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},r._setImmediateFn=function(t){r._immediateFn=t},r._setUnhandledRejectionFn=function(t){r._unhandledRejectionFn=t},void 0!==t&&t.exports?t.exports=r:n.Promise||(n.Promise=r)}(this)}).call(this,n(25).setImmediate)},function(t,e,n){(function(t){var o=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function r(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new r(i.call(setTimeout,o,arguments),clearTimeout)},e.setInterval=function(){return new r(i.call(setInterval,o,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(o,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(26),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(22))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var o,i=1,r={},s=!1,a=t.document,c=Object.getPrototypeOf&&Object.getPrototypeOf(t);c=c&&c.setTimeout?c:t,"[object process]"==={}.toString.call(t.process)?o=function(t){e.nextTick(function(){l(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?function(){var e="setImmediate$"+Math.random()+"$",n=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(e)&&l(+n.data.slice(e.length))};t.addEventListener?t.addEventListener("message",n,!1):t.attachEvent("onmessage",n),o=function(n){t.postMessage(e+n,"*")}}():t.MessageChannel?function(){var t=new MessageChannel;t.port1.onmessage=function(t){l(t.data)},o=function(e){t.port2.postMessage(e)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var t=a.documentElement;o=function(e){var n=a.createElement("script");n.onreadystatechange=function(){l(e),n.onreadystatechange=null,t.removeChild(n),n=null},t.appendChild(n)}}():o=function(t){setTimeout(l,0,t)},c.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var s={callback:t,args:e};return r[i]=s,o(i),i++},c.clearImmediate=u}function u(t){delete r[t]}function l(t){if(s)setTimeout(l,0,t);else{var e=r[t];if(e){s=!0;try{!function(t){var e=t.callback,o=t.args;switch(o.length){case 0:e();break;case 1:e(o[0]);break;case 2:e(o[0],o[1]);break;case 3:e(o[0],o[1],o[2]);break;default:e.apply(n,o)}}(e)}finally{u(t),s=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(22),n(27))},function(t,e){var n,o,i=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(t){n=r}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(t){o=s}}();var c,u=[],l=!1,f=-1;function d(){l&&c&&(l=!1,c.length?u=c.concat(u):f=-1,u.length&&p())}function p(){if(!l){var t=a(d);l=!0;for(var e=u.length;e;){for(c=u,u=[];++f<e;)c&&c[f].run();f=-1,e=u.length}c=null,l=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new h(t,e)),1!==u.length||l||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){"use strict";n.r(e);var o=n(17),i=n(2);for(var r in i)"default"!==r&&function(t){n.d(e,t,function(){return i[t]})}(r);n(33);var s=n(0),a=Object(s.a)(i.default,o.a,o.b,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";n.r(e);var o=n(18),i=n(4);for(var r in i)"default"!==r&&function(t){n.d(e,t,function(){return i[t]})}(r);var s=n(0),a=Object(s.a)(i.default,o.a,o.b,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";n.r(e);var o=n(19),i=n(6);for(var r in i)"default"!==r&&function(t){n.d(e,t,function(){return i[t]})}(r);var s=n(0),a=Object(s.a)(i.default,o.a,o.b,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";n.r(e);var o=n(20),i=n(8);for(var r in i)"default"!==r&&function(t){n.d(e,t,function(){return i[t]})}(r);var s=n(0),a=Object(s.a)(i.default,o.a,o.b,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";n.r(e);var o=n(21),i=n(10);for(var r in i)"default"!==r&&function(t){n.d(e,t,function(){return i[t]})}(r);var s=n(0),a=Object(s.a)(i.default,o.a,o.b,!1,null,null,null);e.default=a.exports},function(t,e,n){"use strict";var o=n(12);n.n(o).a},,function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=n(16),s=n(1),a=function(t){Object.defineProperties(this,{Vue:{get:function(){return t}},confirmDefinition:{get:this.defineConfirm}})};a.prototype.getConfirmMessage=function(t){return t.value&&t.value.message?t.value.message:"string"==typeof t.value?t.value:null},a.prototype.getOptions=function(t){var e="object"===i(t.value)?(0,r.cloneObj)(t.value):{};return delete e.ok,delete e.cancel,t.arg&&s.CONFIRM_TYPES.hasOwnProperty(t.arg.toUpperCase())&&(e.type=s.CONFIRM_TYPES[t.arg.toUpperCase()]),e},a.prototype.getThenCallback=function(t,e){return t.value&&t.value.ok?function(n){return t.value.ok(o({},n,{node:e}))}:function(t){t.loading&&t.close(),e.removeEventListener("click",e.VuejsDialog.clickHandler,!0),(0,r.clickNode)(e),e.addEventListener("click",e.VuejsDialog.clickHandler,!0)}},a.prototype.getCatchCallback=function(t){return t.value&&t.value.cancel?t.value.cancel:r.noop},a.prototype.clickHandler=function(t,e,n){t.preventDefault(),t.stopImmediatePropagation();var o=this.getOptions(n),i=this.getConfirmMessage(n),r=this.getThenCallback(n,e),s=this.getCatchCallback(n);this.Vue.dialog.confirm(i,o).then(r).catch(s)},a.prototype.defineConfirm=function(){var t=this,e={bind:function(e,n){e.VuejsDialog=e.VuejsDialog||{},e.VuejsDialog.clickHandler=function(o){return t.clickHandler(o,e,n)},e.addEventListener("click",e.VuejsDialog.clickHandler,!0)},unbind:function(t){t.removeEventListener("click",t.VuejsDialog.clickHandler,!0)}};return e},e.default=a},function(t,e,n){"use strict";n.r(e);var o=n(0),i=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"dg-btn-loader"},[e("span",{staticClass:"dg-circles"},[e("span",{staticClass:"dg-circle"}),this._v(" "),e("span",{staticClass:"dg-circle"}),this._v(" "),e("span",{staticClass:"dg-circle"})])])}],!1,null,null,null);e.default=i.exports}])});

/***/ }),

/***/ "044b":
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

module.exports = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}


/***/ }),

/***/ "0594":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Room = Room;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _events = __webpack_require__("faa1");

var _eventTimelineSet = __webpack_require__("6386");

var _eventTimeline = __webpack_require__("e685");

var _contentRepo = __webpack_require__("07df");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _event = __webpack_require__("a120");

var _roomMember = __webpack_require__("2b60");

var _roomSummary = __webpack_require__("4400");

var _logger = __webpack_require__("63c7");

var _ReEmitter = __webpack_require__("3da4");

var _event2 = __webpack_require__("d613");

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
} // These constants are used as sane defaults when the homeserver doesn't support
// the m.room_versions capability. In practice, KNOWN_SAFE_ROOM_VERSION should be
// the same as the common default room version whereas SAFE_ROOM_VERSIONS are the
// room versions which are considered okay for people to run without being asked
// to upgrade (ie: "stable"). Eventually, we should remove these when all homeservers
// return an m.room_versions capability.


const KNOWN_SAFE_ROOM_VERSION = '6';
const SAFE_ROOM_VERSIONS = ['1', '2', '3', '4', '5', '6'];

function synthesizeReceipt(userId, event, receiptType) {
  // console.log("synthesizing receipt for "+event.getId());
  // This is really ugly because JS has no way to express an object literal
  // where the name of a key comes from an expression
  const fakeReceipt = {
    content: {},
    type: "m.receipt",
    room_id: event.getRoomId()
  };
  fakeReceipt.content[event.getId()] = {};
  fakeReceipt.content[event.getId()][receiptType] = {};
  fakeReceipt.content[event.getId()][receiptType][userId] = {
    ts: event.getTs()
  };
  return new _event.MatrixEvent(fakeReceipt);
}
/**
 * Construct a new Room.
 *
 * <p>For a room, we store an ordered sequence of timelines, which may or may not
 * be continuous. Each timeline lists a series of events, as well as tracking
 * the room state at the start and the end of the timeline. It also tracks
 * forward and backward pagination tokens, as well as containing links to the
 * next timeline in the sequence.
 *
 * <p>There is one special timeline - the 'live' timeline, which represents the
 * timeline to which events are being added in real-time as they are received
 * from the /sync API. Note that you should not retain references to this
 * timeline - even if it is the current timeline right now, it may not remain
 * so if the server gives us a timeline gap in /sync.
 *
 * <p>In order that we can find events from their ids later, we also maintain a
 * map from event_id to timeline and index.
 *
 * @constructor
 * @alias module:models/room
 * @param {string} roomId Required. The ID of this room.
 * @param {MatrixClient} client Required. The client, used to lazy load members.
 * @param {string} myUserId Required. The ID of the syncing user.
 * @param {Object=} opts Configuration options
 * @param {*} opts.storageToken Optional. The token which a data store can use
 * to remember the state of the room. What this means is dependent on the store
 * implementation.
 *
 * @param {String=} opts.pendingEventOrdering Controls where pending messages
 * appear in a room's timeline. If "<b>chronological</b>", messages will appear
 * in the timeline when the call to <code>sendEvent</code> was made. If
 * "<b>detached</b>", pending messages will appear in a separate list,
 * accessbile via {@link module:models/room#getPendingEvents}. Default:
 * "chronological".
 * @param {boolean} [opts.timelineSupport = false] Set to true to enable improved
 * timeline support.
 * @param {boolean} [opts.unstableClientRelationAggregation = false]
 * Optional. Set to true to enable client-side aggregation of event relations
 * via `EventTimelineSet#getRelationsForEvent`.
 * This feature is currently unstable and the API may change without notice.
 *
 * @prop {string} roomId The ID of this room.
 * @prop {string} name The human-readable display name for this room.
 * @prop {Array<MatrixEvent>} timeline The live event timeline for this room,
 * with the oldest event at index 0. Present for backwards compatibility -
 * prefer getLiveTimeline().getEvents().
 * @prop {object} tags Dict of room tags; the keys are the tag name and the values
 * are any metadata associated with the tag - e.g. { "fav" : { order: 1 } }
 * @prop {object} accountData Dict of per-room account_data events; the keys are the
 * event type and the values are the events.
 * @prop {RoomState} oldState The state of the room at the time of the oldest
 * event in the live timeline. Present for backwards compatibility -
 * prefer getLiveTimeline().getState(EventTimeline.BACKWARDS).
 * @prop {RoomState} currentState The state of the room at the time of the
 * newest event in the timeline. Present for backwards compatibility -
 * prefer getLiveTimeline().getState(EventTimeline.FORWARDS).
 * @prop {RoomSummary} summary The room summary.
 * @prop {*} storageToken A token which a data store can use to remember
 * the state of the room.
 */


function Room(roomId, client, myUserId, opts) {
  var _this = this;

  opts = opts || {};
  opts.pendingEventOrdering = opts.pendingEventOrdering || "chronological";
  this._client = client; // In some cases, we add listeners for every displayed Matrix event, so it's
  // common to have quite a few more than the default limit.

  this.setMaxListeners(100);
  this.reEmitter = new _ReEmitter.ReEmitter(this);

  if (["chronological", "detached"].indexOf(opts.pendingEventOrdering) === -1) {
    throw new Error("opts.pendingEventOrdering MUST be either 'chronological' or " + "'detached'. Got: '" + opts.pendingEventOrdering + "'");
  }

  this.myUserId = myUserId;
  this.roomId = roomId;
  this.name = roomId;
  this.tags = {// $tagName: { $metadata: $value },
    // $tagName: { $metadata: $value },
  };
  this.accountData = {// $eventType: $event
  };
  this.summary = null;
  this.storageToken = opts.storageToken;
  this._opts = opts;
  this._txnToEvent = {}; // Pending in-flight requests { string: MatrixEvent }
  // receipts should clobber based on receipt_type and user_id pairs hence
  // the form of this structure. This is sub-optimal for the exposed APIs
  // which pass in an event ID and get back some receipts, so we also store
  // a pre-cached list for this purpose.

  this._receipts = {// receipt_type: {
    //   user_id: {
    //     eventId: <event_id>,
    //     data: <receipt_data>
    //   }
    // }
  };
  this._receiptCacheByEventId = {// $event_id: [{
    //   type: $type,
    //   userId: $user_id,
    //   data: <receipt data>
    // }]
  }; // only receipts that came from the server, not synthesized ones

  this._realReceipts = {};
  this._notificationCounts = {}; // all our per-room timeline sets. the first one is the unfiltered ones;
  // the subsequent ones are the filtered ones in no particular order.

  this._timelineSets = [new _eventTimelineSet.EventTimelineSet(this, opts)];
  this.reEmitter.reEmit(this.getUnfilteredTimelineSet(), ["Room.timeline", "Room.timelineReset"]);

  this._fixUpLegacyTimelineFields(); // any filtered timeline sets we're maintaining for this room


  this._filteredTimelineSets = {// filter_id: timelineSet
  };

  if (this._opts.pendingEventOrdering == "detached") {
    this._pendingEventList = [];

    const serializedPendingEventList = client._sessionStore.store.getItem(pendingEventsKey(this.roomId));

    if (serializedPendingEventList) {
      JSON.parse(serializedPendingEventList).forEach( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (serializedEvent) {
          const event = new _event.MatrixEvent(serializedEvent);

          if (event.getType() === "m.room.encrypted") {
            yield event.attemptDecryption(_this._client._crypto);
          }

          event.setStatus(_event.EventStatus.NOT_SENT);

          _this.addPendingEvent(event, event.getTxnId());
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  } // read by megolm; boolean value - null indicates "use global value"


  this._blacklistUnverifiedDevices = null;
  this._selfMembership = null;
  this._summaryHeroes = null; // awaited by getEncryptionTargetMembers while room members are loading

  if (!this._opts.lazyLoadMembers) {
    this._membersPromise = Promise.resolve();
  } else {
    this._membersPromise = null;
  }
}
/**
 * @param {string} roomId ID of the current room
 * @returns {string} Storage key to retrieve pending events
 */


function pendingEventsKey(roomId) {
  return `mx_pending_events_${roomId}`;
}

utils.inherits(Room, _events.EventEmitter);
/**
 * Gets the version of the room
 * @returns {string} The version of the room, or null if it could not be determined
 */

Room.prototype.getVersion = function () {
  const createEvent = this.currentState.getStateEvents("m.room.create", "");

  if (!createEvent) {
    _logger.logger.warn("Room " + this.roomId + " does not have an m.room.create event");

    return '1';
  }

  const ver = createEvent.getContent()['room_version'];
  if (ver === undefined) return '1';
  return ver;
};
/**
 * Determines whether this room needs to be upgraded to a new version
 * @returns {string?} What version the room should be upgraded to, or null if
 *     the room does not require upgrading at this time.
 * @deprecated Use #getRecommendedVersion() instead
 */


Room.prototype.shouldUpgradeToVersion = function () {
  // TODO: Remove this function.
  // This makes assumptions about which versions are safe, and can easily
  // be wrong. Instead, people are encouraged to use getRecommendedVersion
  // which determines a safer value. This function doesn't use that function
  // because this is not async-capable, and to avoid breaking the contract
  // we're deprecating this.
  if (!SAFE_ROOM_VERSIONS.includes(this.getVersion())) {
    return KNOWN_SAFE_ROOM_VERSION;
  }

  return null;
};
/**
 * Determines the recommended room version for the room. This returns an
 * object with 3 properties: <code>version</code> as the new version the
 * room should be upgraded to (may be the same as the current version);
 * <code>needsUpgrade</code> to indicate if the room actually can be
 * upgraded (ie: does the current version not match?); and <code>urgent</code>
 * to indicate if the new version patches a vulnerability in a previous
 * version.
 * @returns {Promise<{version: string, needsUpgrade: bool, urgent: bool}>}
 * Resolves to the version the room should be upgraded to.
 */


Room.prototype.getRecommendedVersion = /*#__PURE__*/_asyncToGenerator(function* () {
  const capabilities = yield this._client.getCapabilities();
  let versionCap = capabilities["m.room_versions"];

  if (!versionCap) {
    versionCap = {
      default: KNOWN_SAFE_ROOM_VERSION,
      available: {}
    };

    for (const safeVer of SAFE_ROOM_VERSIONS) {
      versionCap.available[safeVer] = "stable";
    }
  }

  let result = this._checkVersionAgainstCapability(versionCap);

  if (result.urgent && result.needsUpgrade) {
    // Something doesn't feel right: we shouldn't need to update
    // because the version we're on should be in the protocol's
    // namespace. This usually means that the server was updated
    // before the client was, making us think the newest possible
    // room version is not stable. As a solution, we'll refresh
    // the capability we're using to determine this.
    _logger.logger.warn("Refreshing room version capability because the server looks " + "to be supporting a newer room version we don't know about.");

    const caps = yield this._client.getCapabilities(true);
    versionCap = caps["m.room_versions"];

    if (!versionCap) {
      _logger.logger.warn("No room version capability - assuming upgrade required.");

      return result;
    } else {
      result = this._checkVersionAgainstCapability(versionCap);
    }
  }

  return result;
});

Room.prototype._checkVersionAgainstCapability = function (versionCap) {
  const currentVersion = this.getVersion();

  _logger.logger.log(`[${this.roomId}] Current version: ${currentVersion}`);

  _logger.logger.log(`[${this.roomId}] Version capability: `, versionCap);

  const result = {
    version: currentVersion,
    needsUpgrade: false,
    urgent: false
  }; // If the room is on the default version then nothing needs to change

  if (currentVersion === versionCap.default) return result;
  const stableVersions = Object.keys(versionCap.available).filter(v => versionCap.available[v] === 'stable'); // Check if the room is on an unstable version. We determine urgency based
  // off the version being in the Matrix spec namespace or not (if the version
  // is in the current namespace and unstable, the room is probably vulnerable).

  if (!stableVersions.includes(currentVersion)) {
    result.version = versionCap.default;
    result.needsUpgrade = true;
    result.urgent = !!this.getVersion().match(/^[0-9]+[0-9.]*$/g);

    if (result.urgent) {
      _logger.logger.warn(`URGENT upgrade required on ${this.roomId}`);
    } else {
      _logger.logger.warn(`Non-urgent upgrade required on ${this.roomId}`);
    }

    return result;
  } // The room is on a stable, but non-default, version by this point.
  // No upgrade needed.


  return result;
};
/**
 * Determines whether the given user is permitted to perform a room upgrade
 * @param {String} userId The ID of the user to test against
 * @returns {bool} True if the given user is permitted to upgrade the room
 */


Room.prototype.userMayUpgradeRoom = function (userId) {
  return this.currentState.maySendStateEvent("m.room.tombstone", userId);
};
/**
 * Get the list of pending sent events for this room
 *
 * @return {module:models/event.MatrixEvent[]} A list of the sent events
 * waiting for remote echo.
 *
 * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'
 */


Room.prototype.getPendingEvents = function () {
  if (this._opts.pendingEventOrdering !== "detached") {
    throw new Error("Cannot call getPendingEvents with pendingEventOrdering == " + this._opts.pendingEventOrdering);
  }

  return this._pendingEventList;
};
/**
 * Removes a pending event for this room
 *
 * @param {string} eventId
 * @return {boolean} True if an element was removed.
 */


Room.prototype.removePendingEvent = function (eventId) {
  if (this._opts.pendingEventOrdering !== "detached") {
    throw new Error("Cannot call removePendingEvent with pendingEventOrdering == " + this._opts.pendingEventOrdering);
  }

  const removed = utils.removeElement(this._pendingEventList, function (ev) {
    return ev.getId() == eventId;
  }, false);

  this._savePendingEvents();

  return removed;
};
/**
 * Check whether the pending event list contains a given event by ID.
 * If pending event ordering is not "detached" then this returns false.
 *
 * @param {string} eventId The event ID to check for.
 * @return {boolean}
 */


Room.prototype.hasPendingEvent = function (eventId) {
  if (this._opts.pendingEventOrdering !== "detached") {
    return false;
  }

  return this._pendingEventList.some(event => event.getId() === eventId);
};
/**
 * Get a specific event from the pending event list, if configured, null otherwise.
 *
 * @param {string} eventId The event ID to check for.
 * @return {MatrixEvent}
 */


Room.prototype.getPendingEvent = function (eventId) {
  if (this._opts.pendingEventOrdering !== "detached") {
    return null;
  }

  return this._pendingEventList.find(event => event.getId() === eventId);
};
/**
 * Get the live unfiltered timeline for this room.
 *
 * @return {module:models/event-timeline~EventTimeline} live timeline
 */


Room.prototype.getLiveTimeline = function () {
  return this.getUnfilteredTimelineSet().getLiveTimeline();
};
/**
 * Get the timestamp of the last message in the room
 *
 * @return {number} the timestamp of the last message in the room
 */


Room.prototype.getLastActiveTimestamp = function () {
  const timeline = this.getLiveTimeline();
  const events = timeline.getEvents();

  if (events.length) {
    const lastEvent = events[events.length - 1];
    return lastEvent.getTs();
  } else {
    return Number.MIN_SAFE_INTEGER;
  }
};
/**
 * @param {string} myUserId the user id for the logged in member
 * @return {string} the membership type (join | leave | invite) for the logged in user
 */


Room.prototype.getMyMembership = function () {
  return this._selfMembership;
};
/**
 * If this room is a DM we're invited to,
 * try to find out who invited us
 * @return {string} user id of the inviter
 */


Room.prototype.getDMInviter = function () {
  if (this.myUserId) {
    const me = this.getMember(this.myUserId);

    if (me) {
      return me.getDMInviter();
    }
  }

  if (this._selfMembership === "invite") {
    // fall back to summary information
    const memberCount = this.getInvitedAndJoinedMemberCount();

    if (memberCount == 2 && this._summaryHeroes.length) {
      return this._summaryHeroes[0];
    }
  }
};
/**
 * Assuming this room is a DM room, tries to guess with which user.
 * @return {string} user id of the other member (could be syncing user)
 */


Room.prototype.guessDMUserId = function () {
  const me = this.getMember(this.myUserId);

  if (me) {
    const inviterId = me.getDMInviter();

    if (inviterId) {
      return inviterId;
    }
  } // remember, we're assuming this room is a DM,
  // so returning the first member we find should be fine


  const hasHeroes = Array.isArray(this._summaryHeroes) && this._summaryHeroes.length;

  if (hasHeroes) {
    return this._summaryHeroes[0];
  }

  const members = this.currentState.getMembers();
  const anyMember = members.find(m => m.userId !== this.myUserId);

  if (anyMember) {
    return anyMember.userId;
  } // it really seems like I'm the only user in the room
  // so I probably created a room with just me in it
  // and marked it as a DM. Ok then


  return this.myUserId;
};

Room.prototype.getAvatarFallbackMember = function () {
  const memberCount = this.getInvitedAndJoinedMemberCount();

  if (memberCount > 2) {
    return;
  }

  const hasHeroes = Array.isArray(this._summaryHeroes) && this._summaryHeroes.length;

  if (hasHeroes) {
    const availableMember = this._summaryHeroes.map(userId => {
      return this.getMember(userId);
    }).find(member => !!member);

    if (availableMember) {
      return availableMember;
    }
  }

  const members = this.currentState.getMembers(); // could be different than memberCount
  // as this includes left members

  if (members.length <= 2) {
    const availableMember = members.find(m => {
      return m.userId !== this.myUserId;
    });

    if (availableMember) {
      return availableMember;
    }
  } // if all else fails, try falling back to a user,
  // and create a one-off member for it


  if (hasHeroes) {
    const availableUser = this._summaryHeroes.map(userId => {
      return this._client.getUser(userId);
    }).find(user => !!user);

    if (availableUser) {
      const member = new _roomMember.RoomMember(this.roomId, availableUser.userId);
      member.user = availableUser;
      return member;
    }
  }
};
/**
 * Sets the membership this room was received as during sync
 * @param {string} membership join | leave | invite
 */


Room.prototype.updateMyMembership = function (membership) {
  const prevMembership = this._selfMembership;
  this._selfMembership = membership;

  if (prevMembership !== membership) {
    if (membership === "leave") {
      this._cleanupAfterLeaving();
    }

    this.emit("Room.myMembership", this, membership, prevMembership);
  }
};

Room.prototype._loadMembersFromServer = /*#__PURE__*/_asyncToGenerator(function* () {
  const lastSyncToken = this._client.store.getSyncToken();

  const queryString = utils.encodeParams({
    not_membership: "leave",
    at: lastSyncToken
  });
  const path = utils.encodeUri("/rooms/$roomId/members?" + queryString, {
    $roomId: this.roomId
  });
  const http = this._client._http;
  const response = yield http.authedRequest(undefined, "GET", path);
  return response.chunk;
});
Room.prototype._loadMembers = /*#__PURE__*/_asyncToGenerator(function* () {
  // were the members loaded from the server?
  let fromServer = false;
  let rawMembersEvents = yield this._client.store.getOutOfBandMembers(this.roomId);

  if (rawMembersEvents === null) {
    fromServer = true;
    rawMembersEvents = yield this._loadMembersFromServer();

    _logger.logger.log(`LL: got ${rawMembersEvents.length} ` + `members from server for room ${this.roomId}`);
  }

  const memberEvents = rawMembersEvents.map(this._client.getEventMapper());
  return {
    memberEvents,
    fromServer
  };
});
/**
 * Preloads the member list in case lazy loading
 * of memberships is in use. Can be called multiple times,
 * it will only preload once.
 * @return {Promise} when preloading is done and
 * accessing the members on the room will take
 * all members in the room into account
 */

Room.prototype.loadMembersIfNeeded = function () {
  if (this._membersPromise) {
    return this._membersPromise;
  } // mark the state so that incoming messages while
  // the request is in flight get marked as superseding
  // the OOB members


  this.currentState.markOutOfBandMembersStarted();

  const inMemoryUpdate = this._loadMembers().then(result => {
    this.currentState.setOutOfBandMembers(result.memberEvents); // now the members are loaded, start to track the e2e devices if needed

    if (this._client.isCryptoEnabled() && this._client.isRoomEncrypted(this.roomId)) {
      this._client._crypto.trackRoomDevices(this.roomId);
    }

    return result.fromServer;
  }).catch(err => {
    // allow retries on fail
    this._membersPromise = null;
    this.currentState.markOutOfBandMembersFailed();
    throw err;
  }); // update members in storage, but don't wait for it


  inMemoryUpdate.then(fromServer => {
    if (fromServer) {
      const oobMembers = this.currentState.getMembers().filter(m => m.isOutOfBand()).map(m => m.events.member.event);

      _logger.logger.log(`LL: telling store to write ${oobMembers.length}` + ` members for room ${this.roomId}`);

      const store = this._client.store;
      return store.setOutOfBandMembers(this.roomId, oobMembers) // swallow any IDB error as we don't want to fail
      // because of this
      .catch(err => {
        _logger.logger.log("LL: storing OOB room members failed, oh well", err);
      });
    }
  }).catch(err => {
    // as this is not awaited anywhere,
    // at least show the error in the console
    _logger.logger.error(err);
  });
  this._membersPromise = inMemoryUpdate;
  return this._membersPromise;
};
/**
 * Removes the lazily loaded members from storage if needed
 */


Room.prototype.clearLoadedMembersIfNeeded = /*#__PURE__*/_asyncToGenerator(function* () {
  if (this._opts.lazyLoadMembers && this._membersPromise) {
    yield this.loadMembersIfNeeded();
    yield this._client.store.clearOutOfBandMembers(this.roomId);
    this.currentState.clearOutOfBandMembers();
    this._membersPromise = null;
  }
});
/**
 * called when sync receives this room in the leave section
 * to do cleanup after leaving a room. Possibly called multiple times.
 */

Room.prototype._cleanupAfterLeaving = function () {
  this.clearLoadedMembersIfNeeded().catch(err => {
    _logger.logger.error(`error after clearing loaded members from ` + `room ${this.roomId} after leaving`);

    _logger.logger.log(err);
  });
};
/**
 * Reset the live timeline of all timelineSets, and start new ones.
 *
 * <p>This is used when /sync returns a 'limited' timeline.
 *
 * @param {string=} backPaginationToken   token for back-paginating the new timeline
 * @param {string=} forwardPaginationToken token for forward-paginating the old live timeline,
 * if absent or null, all timelines are reset, removing old ones (including the previous live
 * timeline which would otherwise be unable to paginate forwards without this token).
 * Removing just the old live timeline whilst preserving previous ones is not supported.
 */


Room.prototype.resetLiveTimeline = function (backPaginationToken, forwardPaginationToken) {
  for (let i = 0; i < this._timelineSets.length; i++) {
    this._timelineSets[i].resetLiveTimeline(backPaginationToken, forwardPaginationToken);
  }

  this._fixUpLegacyTimelineFields();
};
/**
 * Fix up this.timeline, this.oldState and this.currentState
 *
 * @private
 */


Room.prototype._fixUpLegacyTimelineFields = function () {
  // maintain this.timeline as a reference to the live timeline,
  // and this.oldState and this.currentState as references to the
  // state at the start and end of that timeline. These are more
  // for backwards-compatibility than anything else.
  this.timeline = this.getLiveTimeline().getEvents();
  this.oldState = this.getLiveTimeline().getState(_eventTimeline.EventTimeline.BACKWARDS);
  this.currentState = this.getLiveTimeline().getState(_eventTimeline.EventTimeline.FORWARDS);
};
/**
 * Returns whether there are any devices in the room that are unverified
 *
 * Note: Callers should first check if crypto is enabled on this device. If it is
 * disabled, then we aren't tracking room devices at all, so we can't answer this, and an
 * error will be thrown.
 *
 * @return {bool} the result
 */


Room.prototype.hasUnverifiedDevices = /*#__PURE__*/_asyncToGenerator(function* () {
  if (!this._client.isRoomEncrypted(this.roomId)) {
    return false;
  }

  const e2eMembers = yield this.getEncryptionTargetMembers();

  for (const member of e2eMembers) {
    const devices = this._client.getStoredDevicesForUser(member.userId);

    if (devices.some(device => device.isUnverified())) {
      return true;
    }
  }

  return false;
});
/**
 * Return the timeline sets for this room.
 * @return {EventTimelineSet[]} array of timeline sets for this room
 */

Room.prototype.getTimelineSets = function () {
  return this._timelineSets;
};
/**
 * Helper to return the main unfiltered timeline set for this room
 * @return {EventTimelineSet} room's unfiltered timeline set
 */


Room.prototype.getUnfilteredTimelineSet = function () {
  return this._timelineSets[0];
};
/**
 * Get the timeline which contains the given event from the unfiltered set, if any
 *
 * @param {string} eventId  event ID to look for
 * @return {?module:models/event-timeline~EventTimeline} timeline containing
 * the given event, or null if unknown
 */


Room.prototype.getTimelineForEvent = function (eventId) {
  return this.getUnfilteredTimelineSet().getTimelineForEvent(eventId);
};
/**
 * Add a new timeline to this room's unfiltered timeline set
 *
 * @return {module:models/event-timeline~EventTimeline} newly-created timeline
 */


Room.prototype.addTimeline = function () {
  return this.getUnfilteredTimelineSet().addTimeline();
};
/**
 * Get an event which is stored in our unfiltered timeline set
 *
 * @param {string} eventId  event ID to look for
 * @return {?module:models/event.MatrixEvent} the given event, or undefined if unknown
 */


Room.prototype.findEventById = function (eventId) {
  return this.getUnfilteredTimelineSet().findEventById(eventId);
};
/**
 * Get one of the notification counts for this room
 * @param {String} type The type of notification count to get. default: 'total'
 * @return {Number} The notification count, or undefined if there is no count
 *                  for this type.
 */


Room.prototype.getUnreadNotificationCount = function (type) {
  type = type || 'total';
  return this._notificationCounts[type];
};
/**
 * Set one of the notification counts for this room
 * @param {String} type The type of notification count to set.
 * @param {Number} count The new count
 */


Room.prototype.setUnreadNotificationCount = function (type, count) {
  this._notificationCounts[type] = count;
};

Room.prototype.setSummary = function (summary) {
  const heroes = summary["m.heroes"];
  const joinedCount = summary["m.joined_member_count"];
  const invitedCount = summary["m.invited_member_count"];

  if (Number.isInteger(joinedCount)) {
    this.currentState.setJoinedMemberCount(joinedCount);
  }

  if (Number.isInteger(invitedCount)) {
    this.currentState.setInvitedMemberCount(invitedCount);
  }

  if (Array.isArray(heroes)) {
    // be cautious about trusting server values,
    // and make sure heroes doesn't contain our own id
    // just to be sure
    this._summaryHeroes = heroes.filter(userId => {
      return userId !== this.myUserId;
    });
  }
};
/**
 * Whether to send encrypted messages to devices within this room.
 * @param {Boolean} value true to blacklist unverified devices, null
 * to use the global value for this room.
 */


Room.prototype.setBlacklistUnverifiedDevices = function (value) {
  this._blacklistUnverifiedDevices = value;
};
/**
 * Whether to send encrypted messages to devices within this room.
 * @return {Boolean} true if blacklisting unverified devices, null
 * if the global value should be used for this room.
 */


Room.prototype.getBlacklistUnverifiedDevices = function () {
  return this._blacklistUnverifiedDevices;
};
/**
 * Get the avatar URL for a room if one was set.
 * @param {String} baseUrl The homeserver base URL. See
 * {@link module:client~MatrixClient#getHomeserverUrl}.
 * @param {Number} width The desired width of the thumbnail.
 * @param {Number} height The desired height of the thumbnail.
 * @param {string} resizeMethod The thumbnail resize method to use, either
 * "crop" or "scale".
 * @param {boolean} allowDefault True to allow an identicon for this room if an
 * avatar URL wasn't explicitly set. Default: true. (Deprecated)
 * @return {?string} the avatar URL or null.
 */


Room.prototype.getAvatarUrl = function (baseUrl, width, height, resizeMethod, allowDefault) {
  const roomAvatarEvent = this.currentState.getStateEvents(_event2.EventType.RoomAvatar, "");

  if (allowDefault === undefined) {
    allowDefault = true;
  }

  if (!roomAvatarEvent && !allowDefault) {
    return null;
  }

  const mainUrl = roomAvatarEvent ? roomAvatarEvent.getContent().url : null;

  if (mainUrl) {
    return (0, _contentRepo.getHttpUriForMxc)(baseUrl, mainUrl, width, height, resizeMethod);
  }

  return null;
};
/**
 * Get the mxc avatar url for the room, if one was set.
 * @return {string} the mxc avatar url or falsy
 */


Room.prototype.getMxcAvatarUrl = function () {
  const roomAvatarEvent = this.currentState.getStateEvents(_event2.EventType.RoomAvatar, "");
  return roomAvatarEvent ? roomAvatarEvent.getContent().url : null;
};
/**
 * Get the aliases this room has according to the room's state
 * The aliases returned by this function may not necessarily
 * still point to this room.
 * @return {array} The room's alias as an array of strings
 */


Room.prototype.getAliases = function () {
  const aliasStrings = [];
  const aliasEvents = this.currentState.getStateEvents("m.room.aliases");

  if (aliasEvents) {
    for (let i = 0; i < aliasEvents.length; ++i) {
      const aliasEvent = aliasEvents[i];

      if (utils.isArray(aliasEvent.getContent().aliases)) {
        const filteredAliases = aliasEvent.getContent().aliases.filter(a => {
          if (typeof a !== "string") return false;
          if (a[0] !== '#') return false;
          if (!a.endsWith(`:${aliasEvent.getStateKey()}`)) return false; // It's probably valid by here.

          return true;
        });
        Array.prototype.push.apply(aliasStrings, filteredAliases);
      }
    }
  }

  return aliasStrings;
};
/**
 * Get this room's canonical alias
 * The alias returned by this function may not necessarily
 * still point to this room.
 * @return {?string} The room's canonical alias, or null if there is none
 */


Room.prototype.getCanonicalAlias = function () {
  const canonicalAlias = this.currentState.getStateEvents("m.room.canonical_alias", "");

  if (canonicalAlias) {
    return canonicalAlias.getContent().alias || null;
  }

  return null;
};
/**
 * Get this room's alternative aliases
 * @return {array} The room's alternative aliases, or an empty array
 */


Room.prototype.getAltAliases = function () {
  const canonicalAlias = this.currentState.getStateEvents("m.room.canonical_alias", "");

  if (canonicalAlias) {
    return canonicalAlias.getContent().alt_aliases || [];
  }

  return [];
};
/**
 * Add events to a timeline
 *
 * <p>Will fire "Room.timeline" for each event added.
 *
 * @param {MatrixEvent[]} events A list of events to add.
 *
 * @param {boolean} toStartOfTimeline   True to add these events to the start
 * (oldest) instead of the end (newest) of the timeline. If true, the oldest
 * event will be the <b>last</b> element of 'events'.
 *
 * @param {module:models/event-timeline~EventTimeline} timeline   timeline to
 *    add events to.
 *
 * @param {string=} paginationToken   token for the next batch of events
 *
 * @fires module:client~MatrixClient#event:"Room.timeline"
 *
 */


Room.prototype.addEventsToTimeline = function (events, toStartOfTimeline, timeline, paginationToken) {
  timeline.getTimelineSet().addEventsToTimeline(events, toStartOfTimeline, timeline, paginationToken);
};
/**
 * Get a member from the current room state.
 * @param {string} userId The user ID of the member.
 * @return {RoomMember} The member or <code>null</code>.
 */


Room.prototype.getMember = function (userId) {
  return this.currentState.getMember(userId);
};
/**
 * Get a list of members whose membership state is "join".
 * @return {RoomMember[]} A list of currently joined members.
 */


Room.prototype.getJoinedMembers = function () {
  return this.getMembersWithMembership("join");
};
/**
 * Returns the number of joined members in this room
 * This method caches the result.
 * This is a wrapper around the method of the same name in roomState, returning
 * its result for the room's current state.
 * @return {integer} The number of members in this room whose membership is 'join'
 */


Room.prototype.getJoinedMemberCount = function () {
  return this.currentState.getJoinedMemberCount();
};
/**
 * Returns the number of invited members in this room
 * @return {integer} The number of members in this room whose membership is 'invite'
 */


Room.prototype.getInvitedMemberCount = function () {
  return this.currentState.getInvitedMemberCount();
};
/**
 * Returns the number of invited + joined members in this room
 * @return {integer} The number of members in this room whose membership is 'invite' or 'join'
 */


Room.prototype.getInvitedAndJoinedMemberCount = function () {
  return this.getInvitedMemberCount() + this.getJoinedMemberCount();
};
/**
 * Get a list of members with given membership state.
 * @param {string} membership The membership state.
 * @return {RoomMember[]} A list of members with the given membership state.
 */


Room.prototype.getMembersWithMembership = function (membership) {
  return utils.filter(this.currentState.getMembers(), function (m) {
    return m.membership === membership;
  });
};
/**
 * Get a list of members we should be encrypting for in this room
 * @return {Promise<RoomMember[]>} A list of members who
 * we should encrypt messages for in this room.
 */


Room.prototype.getEncryptionTargetMembers = /*#__PURE__*/_asyncToGenerator(function* () {
  yield this.loadMembersIfNeeded();
  let members = this.getMembersWithMembership("join");

  if (this.shouldEncryptForInvitedMembers()) {
    members = members.concat(this.getMembersWithMembership("invite"));
  }

  return members;
});
/**
 * Determine whether we should encrypt messages for invited users in this room
 * @return {boolean} if we should encrypt messages for invited users
 */

Room.prototype.shouldEncryptForInvitedMembers = function () {
  const ev = this.currentState.getStateEvents("m.room.history_visibility", "");
  return ev && ev.getContent() && ev.getContent().history_visibility !== "joined";
};
/**
 * Get the default room name (i.e. what a given user would see if the
 * room had no m.room.name)
 * @param {string} userId The userId from whose perspective we want
 * to calculate the default name
 * @return {string} The default room name
 */


Room.prototype.getDefaultRoomName = function (userId) {
  return calculateRoomName(this, userId, true);
};
/**
* Check if the given user_id has the given membership state.
* @param {string} userId The user ID to check.
* @param {string} membership The membership e.g. <code>'join'</code>
* @return {boolean} True if this user_id has the given membership state.
*/


Room.prototype.hasMembershipState = function (userId, membership) {
  const member = this.getMember(userId);

  if (!member) {
    return false;
  }

  return member.membership === membership;
};
/**
 * Add a timelineSet for this room with the given filter
 * @param {Filter} filter  The filter to be applied to this timelineSet
 * @return {EventTimelineSet}  The timelineSet
 */


Room.prototype.getOrCreateFilteredTimelineSet = function (filter) {
  if (this._filteredTimelineSets[filter.filterId]) {
    return this._filteredTimelineSets[filter.filterId];
  }

  const opts = Object.assign({
    filter: filter
  }, this._opts);
  const timelineSet = new _eventTimelineSet.EventTimelineSet(this, opts);
  this.reEmitter.reEmit(timelineSet, ["Room.timeline", "Room.timelineReset"]);
  this._filteredTimelineSets[filter.filterId] = timelineSet;

  this._timelineSets.push(timelineSet); // populate up the new timelineSet with filtered events from our live
  // unfiltered timeline.
  //
  // XXX: This is risky as our timeline
  // may have grown huge and so take a long time to filter.
  // see https://github.com/vector-im/vector-web/issues/2109


  const unfilteredLiveTimeline = this.getLiveTimeline();
  unfilteredLiveTimeline.getEvents().forEach(function (event) {
    timelineSet.addLiveEvent(event);
  }); // find the earliest unfiltered timeline

  let timeline = unfilteredLiveTimeline;

  while (timeline.getNeighbouringTimeline(_eventTimeline.EventTimeline.BACKWARDS)) {
    timeline = timeline.getNeighbouringTimeline(_eventTimeline.EventTimeline.BACKWARDS);
  }

  timelineSet.getLiveTimeline().setPaginationToken(timeline.getPaginationToken(_eventTimeline.EventTimeline.BACKWARDS), _eventTimeline.EventTimeline.BACKWARDS); // alternatively, we could try to do something like this to try and re-paginate
  // in the filtered events from nothing, but Mark says it's an abuse of the API
  // to do so:
  //
  // timelineSet.resetLiveTimeline(
  //      unfilteredLiveTimeline.getPaginationToken(EventTimeline.FORWARDS)
  // );

  return timelineSet;
};
/**
 * Forget the timelineSet for this room with the given filter
 *
 * @param {Filter} filter  the filter whose timelineSet is to be forgotten
 */


Room.prototype.removeFilteredTimelineSet = function (filter) {
  const timelineSet = this._filteredTimelineSets[filter.filterId];
  delete this._filteredTimelineSets[filter.filterId];

  const i = this._timelineSets.indexOf(timelineSet);

  if (i > -1) {
    this._timelineSets.splice(i, 1);
  }
};
/**
 * Add an event to the end of this room's live timelines. Will fire
 * "Room.timeline".
 *
 * @param {MatrixEvent} event Event to be added
 * @param {string?} duplicateStrategy 'ignore' or 'replace'
 * @param {boolean} fromCache whether the sync response came from cache
 * @fires module:client~MatrixClient#event:"Room.timeline"
 * @private
 */


Room.prototype._addLiveEvent = function (event, duplicateStrategy, fromCache) {
  if (event.isRedaction()) {
    const redactId = event.event.redacts; // if we know about this event, redact its contents now.

    const redactedEvent = this.getUnfilteredTimelineSet().findEventById(redactId);

    if (redactedEvent) {
      redactedEvent.makeRedacted(event); // If this is in the current state, replace it with the redacted version

      if (redactedEvent.getStateKey()) {
        const currentStateEvent = this.currentState.getStateEvents(redactedEvent.getType(), redactedEvent.getStateKey());

        if (currentStateEvent.getId() === redactedEvent.getId()) {
          this.currentState.setStateEvents([redactedEvent]);
        }
      }

      this.emit("Room.redaction", event, this); // TODO: we stash user displaynames (among other things) in
      // RoomMember objects which are then attached to other events
      // (in the sender and target fields). We should get those
      // RoomMember objects to update themselves when the events that
      // they are based on are changed.
    } // FIXME: apply redactions to notification list
    // NB: We continue to add the redaction event to the timeline so
    // clients can say "so and so redacted an event" if they wish to. Also
    // this may be needed to trigger an update.

  }

  if (event.getUnsigned().transaction_id) {
    const existingEvent = this._txnToEvent[event.getUnsigned().transaction_id];

    if (existingEvent) {
      // remote echo of an event we sent earlier
      this._handleRemoteEcho(event, existingEvent);

      return;
    }
  } // add to our timeline sets


  for (let i = 0; i < this._timelineSets.length; i++) {
    this._timelineSets[i].addLiveEvent(event, duplicateStrategy, fromCache);
  } // synthesize and inject implicit read receipts
  // Done after adding the event because otherwise the app would get a read receipt
  // pointing to an event that wasn't yet in the timeline
  // Don't synthesize RR for m.room.redaction as this causes the RR to go missing.


  if (event.sender && event.getType() !== "m.room.redaction") {
    this.addReceipt(synthesizeReceipt(event.sender.userId, event, "m.read"), true); // Any live events from a user could be taken as implicit
    // presence information: evidence that they are currently active.
    // ...except in a world where we use 'user.currentlyActive' to reduce
    // presence spam, this isn't very useful - we'll get a transition when
    // they are no longer currently active anyway. So don't bother to
    // reset the lastActiveAgo and lastPresenceTs from the RoomState's user.
  }
};
/**
 * Add a pending outgoing event to this room.
 *
 * <p>The event is added to either the pendingEventList, or the live timeline,
 * depending on the setting of opts.pendingEventOrdering.
 *
 * <p>This is an internal method, intended for use by MatrixClient.
 *
 * @param {module:models/event.MatrixEvent} event The event to add.
 *
 * @param {string} txnId   Transaction id for this outgoing event
 *
 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
 *
 * @throws if the event doesn't have status SENDING, or we aren't given a
 * unique transaction id.
 */


Room.prototype.addPendingEvent = function (event, txnId) {
  if (event.status !== _event.EventStatus.SENDING && event.status !== _event.EventStatus.NOT_SENT) {
    throw new Error("addPendingEvent called on an event with status " + event.status);
  }

  if (this._txnToEvent[txnId]) {
    throw new Error("addPendingEvent called on an event with known txnId " + txnId);
  } // call setEventMetadata to set up event.sender etc
  // as event is shared over all timelineSets, we set up its metadata based
  // on the unfiltered timelineSet.


  _eventTimeline.EventTimeline.setEventMetadata(event, this.getLiveTimeline().getState(_eventTimeline.EventTimeline.FORWARDS), false);

  this._txnToEvent[txnId] = event;

  if (this._opts.pendingEventOrdering == "detached") {
    if (this._pendingEventList.some(e => e.status === _event.EventStatus.NOT_SENT)) {
      _logger.logger.warn("Setting event as NOT_SENT due to messages in the same state");

      event.setStatus(_event.EventStatus.NOT_SENT);
    }

    this._pendingEventList.push(event);

    this._savePendingEvents();

    if (event.isRelation()) {
      // For pending events, add them to the relations collection immediately.
      // (The alternate case below already covers this as part of adding to
      // the timeline set.)
      this._aggregateNonLiveRelation(event);
    }

    if (event.isRedaction()) {
      const redactId = event.event.redacts;

      let redactedEvent = this._pendingEventList && this._pendingEventList.find(e => e.getId() === redactId);

      if (!redactedEvent) {
        redactedEvent = this.getUnfilteredTimelineSet().findEventById(redactId);
      }

      if (redactedEvent) {
        redactedEvent.markLocallyRedacted(event);
        this.emit("Room.redaction", event, this);
      }
    }
  } else {
    for (let i = 0; i < this._timelineSets.length; i++) {
      const timelineSet = this._timelineSets[i];

      if (timelineSet.getFilter()) {
        if (timelineSet.getFilter().filterRoomTimeline([event]).length) {
          timelineSet.addEventToTimeline(event, timelineSet.getLiveTimeline(), false);
        }
      } else {
        timelineSet.addEventToTimeline(event, timelineSet.getLiveTimeline(), false);
      }
    }
  }

  this.emit("Room.localEchoUpdated", event, this, null, null);
};
/**
 * Persists all pending events to local storage
 *
 * If the current room is encrypted only encrypted events will be persisted
 * all messages that are not yet encrypted will be discarded
 *
 * This is because the flow of EVENT_STATUS transition is
 * queued => sending => encrypting => sending => sent
 *
 * Steps 3 and 4 are skipped for unencrypted room.
 * It is better to discard an unencrypted message rather than persisting
 * it locally for everyone to read
 */


Room.prototype._savePendingEvents = function () {
  if (this._pendingEventList) {
    const pendingEvents = this._pendingEventList.map(event => {
      return _objectSpread(_objectSpread({}, event.event), {}, {
        txn_id: event.getTxnId()
      });
    }).filter(event => {
      // Filter out the unencrypted messages if the room is encrypted
      const isEventEncrypted = event.type === "m.room.encrypted";

      const isRoomEncrypted = this._client.isRoomEncrypted(this.roomId);

      return isEventEncrypted || !isRoomEncrypted;
    });

    const {
      store
    } = this._client._sessionStore;

    if (this._pendingEventList.length > 0) {
      store.setItem(pendingEventsKey(this.roomId), JSON.stringify(pendingEvents));
    } else {
      store.removeItem(pendingEventsKey(this.roomId));
    }
  }
};
/**
 * Used to aggregate the local echo for a relation, and also
 * for re-applying a relation after it's redaction has been cancelled,
 * as the local echo for the redaction of the relation would have
 * un-aggregated the relation. Note that this is different from regular messages,
 * which are just kept detached for their local echo.
 *
 * Also note that live events are aggregated in the live EventTimelineSet.
 * @param {module:models/event.MatrixEvent} event the relation event that needs to be aggregated.
 */


Room.prototype._aggregateNonLiveRelation = function (event) {
  // TODO: We should consider whether this means it would be a better
  // design to lift the relations handling up to the room instead.
  for (let i = 0; i < this._timelineSets.length; i++) {
    const timelineSet = this._timelineSets[i];

    if (timelineSet.getFilter()) {
      if (timelineSet.getFilter().filterRoomTimeline([event]).length) {
        timelineSet.aggregateRelations(event);
      }
    } else {
      timelineSet.aggregateRelations(event);
    }
  }
};
/**
 * Deal with the echo of a message we sent.
 *
 * <p>We move the event to the live timeline if it isn't there already, and
 * update it.
 *
 * @param {module:models/event.MatrixEvent} remoteEvent   The event received from
 *    /sync
 * @param {module:models/event.MatrixEvent} localEvent    The local echo, which
 *    should be either in the _pendingEventList or the timeline.
 *
 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
 * @private
 */


Room.prototype._handleRemoteEcho = function (remoteEvent, localEvent) {
  const oldEventId = localEvent.getId();
  const newEventId = remoteEvent.getId();
  const oldStatus = localEvent.status;

  _logger.logger.debug(`Got remote echo for event ${oldEventId} -> ${newEventId} ` + `old status ${oldStatus}`); // no longer pending


  delete this._txnToEvent[remoteEvent.getUnsigned().transaction_id]; // if it's in the pending list, remove it

  if (this._pendingEventList) {
    this.removePendingEvent(oldEventId);
  } // replace the event source (this will preserve the plaintext payload if
  // any, which is good, because we don't want to try decoding it again).


  localEvent.handleRemoteEcho(remoteEvent.event);

  for (let i = 0; i < this._timelineSets.length; i++) {
    const timelineSet = this._timelineSets[i]; // if it's already in the timeline, update the timeline map. If it's not, add it.

    timelineSet.handleRemoteEcho(localEvent, oldEventId, newEventId);
  }

  this.emit("Room.localEchoUpdated", localEvent, this, oldEventId, oldStatus);
};
/* a map from current event status to a list of allowed next statuses
 */


const ALLOWED_TRANSITIONS = {};
ALLOWED_TRANSITIONS[_event.EventStatus.ENCRYPTING] = [_event.EventStatus.SENDING, _event.EventStatus.NOT_SENT];
ALLOWED_TRANSITIONS[_event.EventStatus.SENDING] = [_event.EventStatus.ENCRYPTING, _event.EventStatus.QUEUED, _event.EventStatus.NOT_SENT, _event.EventStatus.SENT];
ALLOWED_TRANSITIONS[_event.EventStatus.QUEUED] = [_event.EventStatus.SENDING, _event.EventStatus.CANCELLED];
ALLOWED_TRANSITIONS[_event.EventStatus.SENT] = [];
ALLOWED_TRANSITIONS[_event.EventStatus.NOT_SENT] = [_event.EventStatus.SENDING, _event.EventStatus.QUEUED, _event.EventStatus.CANCELLED];
ALLOWED_TRANSITIONS[_event.EventStatus.CANCELLED] = [];
/**
 * Update the status / event id on a pending event, to reflect its transmission
 * progress.
 *
 * <p>This is an internal method.
 *
 * @param {MatrixEvent} event      local echo event
 * @param {EventStatus} newStatus  status to assign
 * @param {string} newEventId      new event id to assign. Ignored unless
 *    newStatus == EventStatus.SENT.
 * @fires module:client~MatrixClient#event:"Room.localEchoUpdated"
 */

Room.prototype.updatePendingEvent = function (event, newStatus, newEventId) {
  _logger.logger.log(`setting pendingEvent status to ${newStatus} in ${event.getRoomId()} ` + `event ID ${event.getId()} -> ${newEventId}`); // if the message was sent, we expect an event id


  if (newStatus == _event.EventStatus.SENT && !newEventId) {
    throw new Error("updatePendingEvent called with status=SENT, " + "but no new event id");
  } // SENT races against /sync, so we have to special-case it.


  if (newStatus == _event.EventStatus.SENT) {
    const timeline = this.getUnfilteredTimelineSet().eventIdToTimeline(newEventId);

    if (timeline) {
      // we've already received the event via the event stream.
      // nothing more to do here.
      return;
    }
  }

  const oldStatus = event.status;
  const oldEventId = event.getId();

  if (!oldStatus) {
    throw new Error("updatePendingEventStatus called on an event which is " + "not a local echo.");
  }

  const allowed = ALLOWED_TRANSITIONS[oldStatus];

  if (!allowed || allowed.indexOf(newStatus) < 0) {
    throw new Error("Invalid EventStatus transition " + oldStatus + "->" + newStatus);
  }

  event.setStatus(newStatus);

  if (newStatus == _event.EventStatus.SENT) {
    // update the event id
    event.replaceLocalEventId(newEventId); // if the event was already in the timeline (which will be the case if
    // opts.pendingEventOrdering==chronological), we need to update the
    // timeline map.

    for (let i = 0; i < this._timelineSets.length; i++) {
      this._timelineSets[i].replaceEventId(oldEventId, newEventId);
    }
  } else if (newStatus == _event.EventStatus.CANCELLED) {
    // remove it from the pending event list, or the timeline.
    if (this._pendingEventList) {
      const idx = this._pendingEventList.findIndex(ev => ev.getId() === oldEventId);

      if (idx !== -1) {
        const [removedEvent] = this._pendingEventList.splice(idx, 1);

        if (removedEvent.isRedaction()) {
          this._revertRedactionLocalEcho(removedEvent);
        }
      }
    }

    this.removeEvent(oldEventId);
  }

  this._savePendingEvents();

  this.emit("Room.localEchoUpdated", event, this, oldEventId, oldStatus);
};

Room.prototype._revertRedactionLocalEcho = function (redactionEvent) {
  const redactId = redactionEvent.event.redacts;

  if (!redactId) {
    return;
  }

  const redactedEvent = this.getUnfilteredTimelineSet().findEventById(redactId);

  if (redactedEvent) {
    redactedEvent.unmarkLocallyRedacted(); // re-render after undoing redaction

    this.emit("Room.redactionCancelled", redactionEvent, this); // reapply relation now redaction failed

    if (redactedEvent.isRelation()) {
      this._aggregateNonLiveRelation(redactedEvent);
    }
  }
};
/**
 * Add some events to this room. This can include state events, message
 * events and typing notifications. These events are treated as "live" so
 * they will go to the end of the timeline.
 *
 * @param {MatrixEvent[]} events A list of events to add.
 *
 * @param {string} duplicateStrategy Optional. Applies to events in the
 * timeline only. If this is 'replace' then if a duplicate is encountered, the
 * event passed to this function will replace the existing event in the
 * timeline. If this is not specified, or is 'ignore', then the event passed to
 * this function will be ignored entirely, preserving the existing event in the
 * timeline. Events are identical based on their event ID <b>only</b>.
 *
 * @param {boolean} fromCache whether the sync response came from cache
 * @throws If <code>duplicateStrategy</code> is not falsey, 'replace' or 'ignore'.
 */


Room.prototype.addLiveEvents = function (events, duplicateStrategy, fromCache) {
  let i;

  if (duplicateStrategy && ["replace", "ignore"].indexOf(duplicateStrategy) === -1) {
    throw new Error("duplicateStrategy MUST be either 'replace' or 'ignore'");
  } // sanity check that the live timeline is still live


  for (i = 0; i < this._timelineSets.length; i++) {
    const liveTimeline = this._timelineSets[i].getLiveTimeline();

    if (liveTimeline.getPaginationToken(_eventTimeline.EventTimeline.FORWARDS)) {
      throw new Error("live timeline " + i + " is no longer live - it has a pagination token " + "(" + liveTimeline.getPaginationToken(_eventTimeline.EventTimeline.FORWARDS) + ")");
    }

    if (liveTimeline.getNeighbouringTimeline(_eventTimeline.EventTimeline.FORWARDS)) {
      throw new Error("live timeline " + i + " is no longer live - " + "it has a neighbouring timeline");
    }
  }

  for (i = 0; i < events.length; i++) {
    // TODO: We should have a filter to say "only add state event
    // types X Y Z to the timeline".
    this._addLiveEvent(events[i], duplicateStrategy, fromCache);
  }
};
/**
 * Adds/handles ephemeral events such as typing notifications and read receipts.
 * @param {MatrixEvent[]} events A list of events to process
 */


Room.prototype.addEphemeralEvents = function (events) {
  for (const event of events) {
    if (event.getType() === 'm.typing') {
      this.currentState.setTypingEvent(event);
    } else if (event.getType() === 'm.receipt') {
      this.addReceipt(event);
    } // else ignore - life is too short for us to care about these events

  }
};
/**
 * Removes events from this room.
 * @param {String[]} eventIds A list of eventIds to remove.
 */


Room.prototype.removeEvents = function (eventIds) {
  for (let i = 0; i < eventIds.length; ++i) {
    this.removeEvent(eventIds[i]);
  }
};
/**
 * Removes a single event from this room.
 *
 * @param {String} eventId  The id of the event to remove
 *
 * @return {bool} true if the event was removed from any of the room's timeline sets
 */


Room.prototype.removeEvent = function (eventId) {
  let removedAny = false;

  for (let i = 0; i < this._timelineSets.length; i++) {
    const removed = this._timelineSets[i].removeEvent(eventId);

    if (removed) {
      if (removed.isRedaction()) {
        this._revertRedactionLocalEcho(removed);
      }

      removedAny = true;
    }
  }

  return removedAny;
};
/**
 * Recalculate various aspects of the room, including the room name and
 * room summary. Call this any time the room's current state is modified.
 * May fire "Room.name" if the room name is updated.
 * @fires module:client~MatrixClient#event:"Room.name"
 */


Room.prototype.recalculate = function () {
  // set fake stripped state events if this is an invite room so logic remains
  // consistent elsewhere.
  const self = this;
  const membershipEvent = this.currentState.getStateEvents("m.room.member", this.myUserId);

  if (membershipEvent && membershipEvent.getContent().membership === "invite") {
    const strippedStateEvents = membershipEvent.event.invite_room_state || [];
    utils.forEach(strippedStateEvents, function (strippedEvent) {
      const existingEvent = self.currentState.getStateEvents(strippedEvent.type, strippedEvent.state_key);

      if (!existingEvent) {
        // set the fake stripped event instead
        self.currentState.setStateEvents([new _event.MatrixEvent({
          type: strippedEvent.type,
          state_key: strippedEvent.state_key,
          content: strippedEvent.content,
          event_id: "$fake" + Date.now(),
          room_id: self.roomId,
          user_id: self.myUserId // technically a lie

        })]);
      }
    });
  }

  const oldName = this.name;
  this.name = calculateRoomName(this, this.myUserId);
  this.summary = new _roomSummary.RoomSummary(this.roomId, {
    title: this.name
  });

  if (oldName !== this.name) {
    this.emit("Room.name", this);
  }
};
/**
 * Get a list of user IDs who have <b>read up to</b> the given event.
 * @param {MatrixEvent} event the event to get read receipts for.
 * @return {String[]} A list of user IDs.
 */


Room.prototype.getUsersReadUpTo = function (event) {
  return this.getReceiptsForEvent(event).filter(function (receipt) {
    return receipt.type === "m.read";
  }).map(function (receipt) {
    return receipt.userId;
  });
};
/**
 * Get the ID of the event that a given user has read up to, or null if we
 * have received no read receipts from them.
 * @param {String} userId The user ID to get read receipt event ID for
 * @param {Boolean} ignoreSynthesized If true, return only receipts that have been
 *                                    sent by the server, not implicit ones generated
 *                                    by the JS SDK.
 * @return {String} ID of the latest event that the given user has read, or null.
 */


Room.prototype.getEventReadUpTo = function (userId, ignoreSynthesized) {
  let receipts = this._receipts;

  if (ignoreSynthesized) {
    receipts = this._realReceipts;
  }

  if (receipts["m.read"] === undefined || receipts["m.read"][userId] === undefined) {
    return null;
  }

  return receipts["m.read"][userId].eventId;
};
/**
 * Determines if the given user has read a particular event ID with the known
 * history of the room. This is not a definitive check as it relies only on
 * what is available to the room at the time of execution.
 * @param {String} userId The user ID to check the read state of.
 * @param {String} eventId The event ID to check if the user read.
 * @returns {Boolean} True if the user has read the event, false otherwise.
 */


Room.prototype.hasUserReadEvent = function (userId, eventId) {
  const readUpToId = this.getEventReadUpTo(userId, false);
  if (readUpToId === eventId) return true;

  if (this.timeline.length && this.timeline[this.timeline.length - 1].getSender() && this.timeline[this.timeline.length - 1].getSender() === userId) {
    // It doesn't matter where the event is in the timeline, the user has read
    // it because they've sent the latest event.
    return true;
  }

  for (let i = this.timeline.length - 1; i >= 0; --i) {
    const ev = this.timeline[i]; // If we encounter the target event first, the user hasn't read it
    // however if we encounter the readUpToId first then the user has read
    // it. These rules apply because we're iterating bottom-up.

    if (ev.getId() === eventId) return false;
    if (ev.getId() === readUpToId) return true;
  } // We don't know if the user has read it, so assume not.


  return false;
};
/**
 * Get a list of receipts for the given event.
 * @param {MatrixEvent} event the event to get receipts for
 * @return {Object[]} A list of receipts with a userId, type and data keys or
 * an empty list.
 */


Room.prototype.getReceiptsForEvent = function (event) {
  return this._receiptCacheByEventId[event.getId()] || [];
};
/**
 * Add a receipt event to the room.
 * @param {MatrixEvent} event The m.receipt event.
 * @param {Boolean} fake True if this event is implicit
 */


Room.prototype.addReceipt = function (event, fake) {
  // event content looks like:
  // content: {
  //   $event_id: {
  //     $receipt_type: {
  //       $user_id: {
  //         ts: $timestamp
  //       }
  //     }
  //   }
  // }
  if (fake === undefined) {
    fake = false;
  }

  if (!fake) {
    this._addReceiptsToStructure(event, this._realReceipts); // we don't bother caching real receipts by event ID
    // as there's nothing that would read it.

  }

  this._addReceiptsToStructure(event, this._receipts);

  this._receiptCacheByEventId = this._buildReceiptCache(this._receipts); // send events after we've regenerated the cache, otherwise things that
  // listened for the event would read from a stale cache

  this.emit("Room.receipt", event, this);
};
/**
 * Add a receipt event to the room.
 * @param {MatrixEvent} event The m.receipt event.
 * @param {Object} receipts The object to add receipts to
 */


Room.prototype._addReceiptsToStructure = function (event, receipts) {
  const self = this;
  utils.keys(event.getContent()).forEach(function (eventId) {
    utils.keys(event.getContent()[eventId]).forEach(function (receiptType) {
      utils.keys(event.getContent()[eventId][receiptType]).forEach(function (userId) {
        const receipt = event.getContent()[eventId][receiptType][userId];

        if (!receipts[receiptType]) {
          receipts[receiptType] = {};
        }

        const existingReceipt = receipts[receiptType][userId];

        if (!existingReceipt) {
          receipts[receiptType][userId] = {};
        } else {
          // we only want to add this receipt if we think it is later
          // than the one we already have. (This is managed
          // server-side, but because we synthesize RRs locally we
          // have to do it here too.)
          const ordering = self.getUnfilteredTimelineSet().compareEventOrdering(existingReceipt.eventId, eventId);

          if (ordering !== null && ordering >= 0) {
            return;
          }
        }

        receipts[receiptType][userId] = {
          eventId: eventId,
          data: receipt
        };
      });
    });
  });
};
/**
 * Build and return a map of receipts by event ID
 * @param {Object} receipts A map of receipts
 * @return {Object} Map of receipts by event ID
 */


Room.prototype._buildReceiptCache = function (receipts) {
  const receiptCacheByEventId = {};
  utils.keys(receipts).forEach(function (receiptType) {
    utils.keys(receipts[receiptType]).forEach(function (userId) {
      const receipt = receipts[receiptType][userId];

      if (!receiptCacheByEventId[receipt.eventId]) {
        receiptCacheByEventId[receipt.eventId] = [];
      }

      receiptCacheByEventId[receipt.eventId].push({
        userId: userId,
        type: receiptType,
        data: receipt.data
      });
    });
  });
  return receiptCacheByEventId;
};
/**
 * Add a temporary local-echo receipt to the room to reflect in the
 * client the fact that we've sent one.
 * @param {string} userId The user ID if the receipt sender
 * @param {MatrixEvent} e The event that is to be acknowledged
 * @param {string} receiptType The type of receipt
 */


Room.prototype._addLocalEchoReceipt = function (userId, e, receiptType) {
  this.addReceipt(synthesizeReceipt(userId, e, receiptType), true);
};
/**
 * Update the room-tag event for the room.  The previous one is overwritten.
 * @param {MatrixEvent} event the m.tag event
 */


Room.prototype.addTags = function (event) {
  // event content looks like:
  // content: {
  //    tags: {
  //       $tagName: { $metadata: $value },
  //       $tagName: { $metadata: $value },
  //    }
  // }
  // XXX: do we need to deep copy here?
  this.tags = event.getContent().tags || {}; // XXX: we could do a deep-comparison to see if the tags have really
  // changed - but do we want to bother?

  this.emit("Room.tags", event, this);
};
/**
 * Update the account_data events for this room, overwriting events of the same type.
 * @param {Array<MatrixEvent>} events an array of account_data events to add
 */


Room.prototype.addAccountData = function (events) {
  for (let i = 0; i < events.length; i++) {
    const event = events[i];

    if (event.getType() === "m.tag") {
      this.addTags(event);
    }

    const lastEvent = this.accountData[event.getType()];
    this.accountData[event.getType()] = event;
    this.emit("Room.accountData", event, this, lastEvent);
  }
};
/**
 * Access account_data event of given event type for this room
 * @param {string} type the type of account_data event to be accessed
 * @return {?MatrixEvent} the account_data event in question
 */


Room.prototype.getAccountData = function (type) {
  return this.accountData[type];
};
/**
 * Returns whether the syncing user has permission to send a message in the room
 * @return {boolean} true if the user should be permitted to send
 *                   message events into the room.
 */


Room.prototype.maySendMessage = function () {
  return this.getMyMembership() === 'join' && this.currentState.maySendEvent('m.room.message', this.myUserId);
};
/**
 * Returns whether the given user has permissions to issue an invite for this room.
 * @param {string} userId the ID of the Matrix user to check permissions for
 * @returns {boolean} true if the user should be permitted to issue invites for this room.
 */


Room.prototype.canInvite = function (userId) {
  let canInvite = this.getMyMembership() === "join";
  const powerLevelsEvent = this.currentState.getStateEvents(_event2.EventType.RoomPowerLevels, "");
  const powerLevels = powerLevelsEvent && powerLevelsEvent.getContent();
  const me = this.getMember(userId);

  if (powerLevels && me && powerLevels.invite > me.powerLevel) {
    canInvite = false;
  }

  return canInvite;
};
/**
 * Returns the join rule based on the m.room.join_rule state event, defaulting to `invite`.
 * @returns {string} the join_rule applied to this room
 */


Room.prototype.getJoinRule = function () {
  return this.currentState.getJoinRule();
};
/**
 * Returns the type of the room from the `m.room.create` event content or undefined if none is set
 * @returns {?string} the type of the room. Currently only RoomType.Space is known.
 */


Room.prototype.getType = function () {
  const createEvent = this.currentState.getStateEvents("m.room.create", "");

  if (!createEvent) {
    _logger.logger.warn("Room " + this.roomId + " does not have an m.room.create event");

    return undefined;
  }

  return createEvent.getContent()[_event2.RoomCreateTypeField];
};
/**
 * Returns whether the room is a space-room as defined by MSC1772.
 * @returns {boolean} true if the room's type is RoomType.Space
 */


Room.prototype.isSpaceRoom = function () {
  return this.getType() === _event2.RoomType.Space;
};
/**
 * This is an internal method. Calculates the name of the room from the current
 * room state.
 * @param {Room} room The matrix room.
 * @param {string} userId The client's user ID. Used to filter room members
 * correctly.
 * @param {bool} ignoreRoomNameEvent Return the implicit room name that we'd see if there
 * was no m.room.name event.
 * @return {string} The calculated room name.
 */


function calculateRoomName(room, userId, ignoreRoomNameEvent) {
  if (!ignoreRoomNameEvent) {
    // check for an alias, if any. for now, assume first alias is the
    // official one.
    const mRoomName = room.currentState.getStateEvents("m.room.name", "");

    if (mRoomName && mRoomName.getContent() && mRoomName.getContent().name) {
      return mRoomName.getContent().name;
    }
  }

  let alias = room.getCanonicalAlias();

  if (!alias) {
    const aliases = room.getAltAliases();

    if (aliases.length) {
      alias = aliases[0];
    }
  }

  if (alias) {
    return alias;
  }

  const joinedMemberCount = room.currentState.getJoinedMemberCount();
  const invitedMemberCount = room.currentState.getInvitedMemberCount(); // -1 because these numbers include the syncing user

  const inviteJoinCount = joinedMemberCount + invitedMemberCount - 1; // get members that are NOT ourselves and are actually in the room.

  let otherNames = null;

  if (room._summaryHeroes) {
    // if we have a summary, the member state events
    // should be in the room state
    otherNames = room._summaryHeroes.map(userId => {
      const member = room.getMember(userId);
      return member ? member.name : userId;
    });
  } else {
    let otherMembers = room.currentState.getMembers().filter(m => {
      return m.userId !== userId && (m.membership === "invite" || m.membership === "join");
    }); // make sure members have stable order

    otherMembers.sort((a, b) => a.userId.localeCompare(b.userId)); // only 5 first members, immitate _summaryHeroes

    otherMembers = otherMembers.slice(0, 5);
    otherNames = otherMembers.map(m => m.name);
  }

  if (inviteJoinCount) {
    return memberNamesToRoomName(otherNames, inviteJoinCount);
  }

  const myMembership = room.getMyMembership(); // if I have created a room and invited people throuh
  // 3rd party invites

  if (myMembership == 'join') {
    const thirdPartyInvites = room.currentState.getStateEvents("m.room.third_party_invite");

    if (thirdPartyInvites && thirdPartyInvites.length) {
      const thirdPartyNames = thirdPartyInvites.map(i => {
        return i.getContent().display_name;
      });
      return `Inviting ${memberNamesToRoomName(thirdPartyNames)}`;
    }
  } // let's try to figure out who was here before


  let leftNames = otherNames; // if we didn't have heroes, try finding them in the room state

  if (!leftNames.length) {
    leftNames = room.currentState.getMembers().filter(m => {
      return m.userId !== userId && m.membership !== "invite" && m.membership !== "join";
    }).map(m => m.name);
  }

  if (leftNames.length) {
    return `Empty room (was ${memberNamesToRoomName(leftNames)})`;
  } else {
    return "Empty room";
  }
}

function memberNamesToRoomName(names) {
  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : names.length + 1;
  const countWithoutMe = count - 1;

  if (!names.length) {
    return "Empty room";
  } else if (names.length === 1 && countWithoutMe <= 1) {
    return names[0];
  } else if (names.length === 2 && countWithoutMe <= 2) {
    return `${names[0]} and ${names[1]}`;
  } else {
    const plural = countWithoutMe > 1;

    if (plural) {
      return `${names[0]} and ${countWithoutMe} others`;
    } else {
      return `${names[0]} and 1 other`;
    }
  }
}
/**
 * Fires when an event we had previously received is redacted.
 *
 * (Note this is *not* fired when the redaction happens before we receive the
 * event).
 *
 * @event module:client~MatrixClient#"Room.redaction"
 * @param {MatrixEvent} event The matrix redaction event
 * @param {Room} room The room containing the redacted event
 */

/**
 * Fires when an event that was previously redacted isn't anymore.
 * This happens when the redaction couldn't be sent and
 * was subsequently cancelled by the user. Redactions have a local echo
 * which is undone in this scenario.
 *
 * @event module:client~MatrixClient#"Room.redactionCancelled"
 * @param {MatrixEvent} event The matrix redaction event that was cancelled.
 * @param {Room} room The room containing the unredacted event
 */

/**
 * Fires whenever the name of a room is updated.
 * @event module:client~MatrixClient#"Room.name"
 * @param {Room} room The room whose Room.name was updated.
 * @example
 * matrixClient.on("Room.name", function(room){
 *   var newName = room.name;
 * });
 */

/**
 * Fires whenever a receipt is received for a room
 * @event module:client~MatrixClient#"Room.receipt"
 * @param {event} event The receipt event
 * @param {Room} room The room whose receipts was updated.
 * @example
 * matrixClient.on("Room.receipt", function(event, room){
 *   var receiptContent = event.getContent();
 * });
 */

/**
 * Fires whenever a room's tags are updated.
 * @event module:client~MatrixClient#"Room.tags"
 * @param {event} event The tags event
 * @param {Room} room The room whose Room.tags was updated.
 * @example
 * matrixClient.on("Room.tags", function(event, room){
 *   var newTags = event.getContent().tags;
 *   if (newTags["favourite"]) showStar(room);
 * });
 */

/**
 * Fires whenever a room's account_data is updated.
 * @event module:client~MatrixClient#"Room.accountData"
 * @param {event} event The account_data event
 * @param {Room} room The room whose account_data was updated.
 * @param {MatrixEvent} prevEvent The event being replaced by
 * the new account data, if known.
 * @example
 * matrixClient.on("Room.accountData", function(event, room, oldEvent){
 *   if (event.getType() === "m.room.colorscheme") {
 *       applyColorScheme(event.getContents());
 *   }
 * });
 */

/**
 * Fires when the status of a transmitted event is updated.
 *
 * <p>When an event is first transmitted, a temporary copy of the event is
 * inserted into the timeline, with a temporary event id, and a status of
 * 'SENDING'.
 *
 * <p>Once the echo comes back from the server, the content of the event
 * (MatrixEvent.event) is replaced by the complete event from the homeserver,
 * thus updating its event id, as well as server-generated fields such as the
 * timestamp. Its status is set to null.
 *
 * <p>Once the /send request completes, if the remote echo has not already
 * arrived, the event is updated with a new event id and the status is set to
 * 'SENT'. The server-generated fields are of course not updated yet.
 *
 * <p>If the /send fails, In this case, the event's status is set to
 * 'NOT_SENT'. If it is later resent, the process starts again, setting the
 * status to 'SENDING'. Alternatively, the message may be cancelled, which
 * removes the event from the room, and sets the status to 'CANCELLED'.
 *
 * <p>This event is raised to reflect each of the transitions above.
 *
 * @event module:client~MatrixClient#"Room.localEchoUpdated"
 *
 * @param {MatrixEvent} event The matrix event which has been updated
 *
 * @param {Room} room The room containing the redacted event
 *
 * @param {string} oldEventId The previous event id (the temporary event id,
 *    except when updating a successfully-sent event when its echo arrives)
 *
 * @param {EventStatus} oldStatus The previous event status.
 */

/**
 * Fires when the logged in user's membership in the room is updated.
 *
 * @event module:models/room~Room#"Room.myMembership"
 * @param {Room} room The room in which the membership has been updated
 * @param {string} membership The new membership value
 * @param {string} prevMembership The previous membership value
 */

/***/ }),

/***/ "06cf":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var call = __webpack_require__("c65b");
var propertyIsEnumerableModule = __webpack_require__("d1e7");
var createPropertyDescriptor = __webpack_require__("5c6c");
var toIndexedObject = __webpack_require__("fc6a");
var toPropertyKey = __webpack_require__("a04b");
var hasOwn = __webpack_require__("1a2d");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "07c6":
/***/ (function(module, exports) {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),

/***/ "07df":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHttpUriForMxc = getHttpUriForMxc;

var utils = _interopRequireWildcard(__webpack_require__("3987"));
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module content-repo
 */

/**
 * Get the HTTP URL for an MXC URI.
 * @param {string} baseUrl The base homeserver url which has a content repo.
 * @param {string} mxc The mxc:// URI.
 * @param {Number} width The desired width of the thumbnail.
 * @param {Number} height The desired height of the thumbnail.
 * @param {string} resizeMethod The thumbnail resize method to use, either
 * "crop" or "scale".
 * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs
 * directly. Fetching such URLs will leak information about the user to
 * anyone they share a room with. If false, will return the emptry string
 * for such URLs.
 * @return {string} The complete URL to the content.
 */


function getHttpUriForMxc(baseUrl, mxc, width, height, resizeMethod, allowDirectLinks) {
  if (typeof mxc !== "string" || !mxc) {
    return '';
  }

  if (mxc.indexOf("mxc://") !== 0) {
    if (allowDirectLinks) {
      return mxc;
    } else {
      return '';
    }
  }

  let serverAndMediaId = mxc.slice(6); // strips mxc://

  let prefix = "/_matrix/media/r0/download/";
  const params = {};

  if (width) {
    params.width = Math.round(width);
  }

  if (height) {
    params.height = Math.round(height);
  }

  if (resizeMethod) {
    params.method = resizeMethod;
  }

  if (utils.keys(params).length > 0) {
    // these are thumbnailing params so they probably want the
    // thumbnailing API...
    prefix = "/_matrix/media/r0/thumbnail/";
  }

  const fragmentOffset = serverAndMediaId.indexOf("#");
  let fragment = "";

  if (fragmentOffset >= 0) {
    fragment = serverAndMediaId.substr(fragmentOffset);
    serverAndMediaId = serverAndMediaId.substr(0, fragmentOffset);
  }

  return baseUrl + prefix + serverAndMediaId + (utils.keys(params).length === 0 ? "" : "?" + utils.encodeParams(params)) + fragment;
}

/***/ }),

/***/ "07fa":
/***/ (function(module, exports, __webpack_require__) {

var toLength = __webpack_require__("50c4");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "0825":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Crea\",\"addGroupNamePlaceHolder\":\"Aggiungi il nome del gruppo\",\"addPublicChatName\":\"Aggiungi nome chat pubblica\",\"createPublicChat\":\"Crea chat pubblica\",\"chatTopic\":\"Argomento rinominato\",\"publicRoomTitle\":\"Stanza pubblica\",\"asModerator\":\"come moderatore\",\"marked\":\"contrassegnato\",\"unmarked\":\"non segnato\",\"removeBan\":\"Rimuovi divieto\",\"cancelModeration\":\"Rimuovere la moderazione\",\"uploadFiles\":\"Carica file\",\"header\":\"intestazione\",\"dragAndDropAFile\":\"Drag and drop file\",\"chatInvite\":\"Sei stato invitato a chattare con:\",\"cantJoin\":\"Non puoi entrare in chat con:\",\"chatInviteDecline\":\"Puoi unirti in chat o declinare l'invito\",\"creatorLeft\":\"Perché il creatore ha lasciato la chat\",\"encrypted\":\"Criptato\",\"noImages\":\"Non ci sono ancora immagini in questa chat\",\"noFiles\":\"Non ci sono ancora files in questa chat\",\"inviteUser\":\"Invita utente\",\"invite\":\"Invita\",\"add\":\"Aggiungi\",\"mute\":\"Disattiva audio\",\"unmute\":\"Riattiva audio\",\"leave\":\"Lascia\",\"Info\":\"Info\",\"new\":\"Nuovo\",\"typing\":\"sta scrivendo\",\"accNotFound\":\"La tua registrazione è in corso, attendi...\",\"emptyList\":\"la lista è vuota (filtrata o semplicemente vuota)\",\"welcome\":\"Benvenuto in chat\",\"startNewChat\":\"Inizia una nuova chat\",\"chats\":\"Chat\",\"shareWith\":\"Condividi con\",\"newChat\":\"Nuova chat\",\"moveToChat\":\"Sposta in chat\",\"queryNoResults\":\"La ricerca non ha dato risultati\",\"needMoreCharacters\":\"Scrivi più caratteri\",\"createGroup\":\"Crea gruppo\",\"unabletoDecrypt\":\"* Impossibile decifrare\",\"messageDeleted\":\"Messaggio eliminato\",\"sentImage\":\"Immagine inviata\",\"sentVoiceMessage\":\"inviato un messaggio vocale\",\"invitationToChat\":\"Invito alla chat\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"ha lasciato la chat\",\"joined\":\"si è aggiunto\",\"chatRenamed\":\"Chat rinominata in \",\"recentComment\":\"Commento recente: \",\"share\":\"CONDIVIDI\",\"followers\":\"Followers\",\"reputation\":\"Reputazione\",\"unsubscribe\":\"Annullare l'iscrizione\",\"following\":\"Following\",\"theme\":\"Tema:\",\"contacts\":\"Contatti\",\"phoneContacts\":\"Contatti del telefono\",\"chooseInviteMedia\":\"Scegli come vuoi invitare:\",\"admin\":\"Admin\",\"moderator\":\"Moderatore\",\"videocall\":\"Videochiamata\",\"call\":\"Chiama\",\"leaveAndDelete\":\"Lascia e Cancella\",\"donate\":\"Dona\",\"makeModerator\":\"Rendi moderatore\",\"ban\":\"Ban\",\"kick\":\"Butta fuori\",\"members\":\"Membri\",\"media\":\"Media\",\"files\":\"Files\",\"contactsList\":\"Lista contatti\",\"send\":\"invia\",\"pageCaption\":\"Didascalia pagina\",\"caption\":\"didascalia\",\"text\":\"testo\",\"placeholder\":\"placeholder\",\"sendTransactionTo\":\"Invia transazione a\",\"toBePaidByReceiver\":\"Da pagare da parte del ricevente\",\"toBePaidBySender\":\"Da pagare da parte del mittente\",\"source\":\"Fonte\",\"amount\":\"Importo\",\"receiver\":\"Ricevente\",\"message\":\"Messaggio\",\"includeFeesInAmount\":\"Includere le commissioni nell'importo\",\"transactionFees\":\"Commissioni di transazione\",\"totalAmount\":\"Importo totale\",\"balanceTooLow\":\"Saldo non sufficiente\",\"transactionError\":\"Errore. non è possibile effettuare la transazione\",\"calculateFees\":\"Calcolare le commissioni\",\"startChatWith\":\"Iniziare la chat con\",\"searchResult\":\"Risultato della ricerca\",\"joinedInTheChat\":\"si è unito alla chat\",\"invited\":\"invitato \",\"hasInvited\":\"invitato \",\"inTheChat\":\" nella chat\",\"banned\":\"bannato\",\"andRoom\":\"e stanza\",\"left\":\"ha lasciato\",\"theChat\":\" la chat \",\"made\":\"ha rest \",\"aModerator\":\" un moderatore\",\"editedChatNameTo \":\"ha modificato il nome della chat in \",\"somebody\":\"qualcuno\",\"sent\":\"inviato\",\"PKOINto\":\" PKOIN a \",\"response\":\"Risposta\",\"messagefrom\":\"Messaggio inoltrato da\",\"edited\":\"Modificato\",\"settings\":\"Impostazioni\",\"unauthorized\":\"Non autorizzato\",\"search\":\"Ricerca\",\"replyOnMessage\":\"Rispondi\",\"editMessage\":\"Modifica messaggio\",\"inviteFriend\":\"Invita amici\",\"emptyContactList\":\"La lista dei contatti è vuota\",\"joinApp\":\"Connettiti in una chat privata con me\",\"hasInvitedToJoin\":\"È privata e NON è collegata al tuo numero di telefono. Chattiamo!\",\"contactsempty\":\"Non hai ancora contatti, cercali e aggiungili\",\"usernotgen\":\"L'utente non ha ancora generato le sue chiavi di crittografia. Potrai chattare con loro quando le loro chiavi saranno generate..\",\"younotgen\":\"Per favore aspetta un minuto mentre generiamo le tue chiavi crittografiche\",\"messageRead\":\"Messaggio letto\",\"open\":\"Apri\",\"You\":\"Tu\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"Email\",\"refillNamePlaceholder\":\"Refill name\"},\"message\":{},\"button\":{\"starChatButton\":\"Iniziare la chat\",\"decline\":\"Rifiuta\",\"declineandignore\":\"Ignora utente\",\"join\":\"Unisciti\",\"ok\":\"Ok\",\"save\":\"Salva\",\"copy\":\"Copia\",\"forward\":\"Inoltra\",\"delete\":\"Elimina\",\"reply\":\"Rispondi\",\"share\":\"Condividere\",\"download\":\"Download\",\"downloaded\":\"Scaricato\",\"goToPocketnetProfile\":\"Vai al profilo\",\"sendFile\":\"Invia file\",\"takePhotoOrVideo\":\"Invia immagine\",\"sendCoins\":\"Invia PKOIN\",\"edit\":\"Modifica\",\"select\":\"Selezionare\",\"block\":\"Blocca\",\"unblock\":\"Sblocca\",\"blockUser\":\"Blocca utente\",\"Complain\":\"Segnala\"},\"type\":{\"publicgroup\":\"Crea gruppo pubblico\",\"privategroup\":\"Crea gruppo privato\",\"one\":\"Chat privata con un utente\"},\"typelabel\":{\"publicgroup\":\"Creazione gruppo pubblico\",\"privategroup\":\"Creazione gruppo privato\",\"one\":\"Creazione di una chat privata\"},\"yes\":\"Sì\",\"cancel\":\"Annulla\",\"teamMessages\":{\"1-title\":\"Benvenuti nella chat privata di Bastyon\",\"1-list1\":\"Chat privata NON collegata al tuo numero di telefono\",\"1-list2\":\"Crittografia End-To-End di ogni conversazione 1-on-1 di default\",\"1-list3\":\"Tutte le immagini inviate o ricevute attraverso la chat sono memorizzate in modo criptato\",\"1-list4\":\"La cronologia dei messaggi viene salvata solo per 7 giorni\",\"2-title\":\"Annuncio importante!! L'applicazione Pocketnet è ora chiamata Bastyon!\",\"2-message1\":\"Il dominio sarà spostato su Bastyon.com. Recentemente abbiamo rilasciato i seguenti importanti aggiornamenti:\",\"2-list1\":\"Chat privata criptata non collegata al tuo numero di telefono\",\"2-list2\":\"Possibilità di donare PKOIN ai blogger\",\"2-list3\":\"Video e Live Streaming\",\"2-message2\":\"Invita i tuoi amici ora e fai parte del grande futuro dell'internet decentralizzato!\",\"2-button\":\"Invita i tuoi amici\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "087d":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/preview/index.vue?vue&type=template&id=33d22462&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"chatsPreview",class:{minimized: _vm.minimized, active: _vm.active}},[_c('div',{staticClass:"work"},[_c('div',{staticClass:"previewWrapper"},[_c('div',{staticClass:"iconWrapper"},[(!_vm.dummy)?_c('chatIcon',{key:_vm.key,attrs:{"m_chat":_vm.m_chat,"chat":_vm.chat,"dontuseslides":true}}):_c('div',{staticClass:"dummyicon loadinggradient"})],1),_c('div',{staticClass:"infoWrapper"},[(!_vm.dummy && _vm.ready)?_c('div',{staticClass:"summaryLine"},[_c('div',{staticClass:"caption flexBlock"},[_c('chatName',{attrs:{"preview":true,"chat":_vm.chat,"m_chat":_vm.m_chat}}),(_vm.roomMuted)?_c('div',{staticClass:"roomMuted"},[_c('i',{staticClass:"fas fa-bell-slash"})]):_vm._e()],1),_c('div',{staticClass:"time"},[_c('chatTime',{attrs:{"chat":_vm.chat,"m_chat":_vm.m_chat}})],1)]):_vm._e(),(!_vm.dummy && _vm.ready)?_c('div',{staticClass:"eventsLine maxwidth"},[(_vm.event)?_c('eventsEvent',{attrs:{"event":_vm.matrixevent,"chat":_vm.m_chat,"preview":true}}):_vm._e()],1):_vm._e(),(_vm.dummy)?_c('div',{staticClass:"eventsLine"},[_c('div',{staticClass:"dummyline loadinggradient"})]):_vm._e()])])])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/preview/index.vue?vue&type=template&id=33d22462&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// EXTERNAL MODULE: ./src/components/chats/assets/name.vue + 4 modules
var assets_name = __webpack_require__("aa20");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/time.vue?vue&type=template&id=9218004e&scoped=true&
var timevue_type_template_id_9218004e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"chatTime"},[(_vm.time)?_c('date',{attrs:{"date":_vm.time}}):_c('span',{staticClass:"new"},[_vm._v(_vm._s(_vm.$t("caption.new")))])],1)}
var timevue_type_template_id_9218004e_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/assets/time.vue?vue&type=template&id=9218004e&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/time.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var timevue_type_script_lang_js_ = ({
  name: 'chatTime',
  props: {
    chat: Object,
    m_chat: {}
  },
  computed: {
    time: function () {
      var d = this.chat.lastModified;

      if (this.m_chat._selfMembership === 'invite') {
        var timeFromNow = moment(moment.utc(d).toDate()).local().fromNow();

        if (timeFromNow === 'in a few seconds' || timeFromNow === 'a few seconds ago') {
          d = -1;
        } else {
          return d;
        }

        if (d < 0) return null;
        return d;
      } else {
        return d;
      }
    }
  }
});
// CONCATENATED MODULE: ./src/components/chats/assets/time.vue?vue&type=script&lang=js&
 /* harmony default export */ var assets_timevue_type_script_lang_js_ = (timevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/chats/assets/time.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("ff6c")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  assets_timevue_type_script_lang_js_,
  timevue_type_template_id_9218004e_scoped_true_render,
  timevue_type_template_id_9218004e_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "9218004e",
  null
  ,true
)

/* harmony default export */ var time = (component.exports);
// EXTERNAL MODULE: ./src/components/chats/assets/icon.vue + 4 modules
var icon = __webpack_require__("3094");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/chats/preview?vue&type=script&lang=js&




/* harmony default export */ var preview_vue_type_script_lang_js_ = ({
  name: 'preview',
  props: {
    chat: Object,
    dummy: Boolean
  },
  components: {
    chatName: assets_name["a" /* default */],
    chatTime: time,
    chatIcon: icon["a" /* default */]
  },
  data: function () {
    return {
      loading: false,
      roomMuted: false,
      ready: false,
      lastEvent: {},
      userStatusRoom: String
    };
  },
  watch: {
    m_chat: {
      immediate: true,
      handler: function () {
        this.ready = false;

        if (this.m_chat && !_.isEmpty(this.m_chat)) {
          this.core.mtrx.kit.prepareChat(this.m_chat).then(r => {
            this.ready = true;
          });
        }
      }
    }
  },
  mounted: function () {},
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    blockedCheck: function () {
      var users = this.core.mtrx.anotherChatUsers(this.m_chat.roomId);

      if (users.length == 1) {
        return this.core.mtrx.blockeduser(users[0].userId);
      }
    },
    m_chat: function () {
      if (!this.core.mtrx.client || !this.chat) return null;

      let pushRules = this.core.mtrx.client._pushProcessor.getPushRuleById(this.chat.roomId);

      if (pushRules !== null) {
        this.roomMuted = true;
      }

      if (this.chat.roomId) {
        var m_chat = this.core.mtrx.client.getRoom(this.chat.roomId);
        return m_chat || null;
      }
    },
    chatevents: function () {
      return (this.events[this.chat.roomId] || {}).timeline || [];
    },
    key: function () {
      if (this.event) return this.event.event_id;
      return 'key';
    },
    unknowngroupusers: function () {
      return this.core.mtrx.kit.unknowngroupusers(this.chat);
    },
    matrixevent: function () {
      var e = this.event;

      if (e) {
        return e.get();
      }
    },
    event: function () {
      if (this.chat && this.chat.roomId) {
        var members = this.m_chat.currentState.getMembers();

        var events = _.filter(this.chatevents, e => {
          if (members.length <= 2 && (e.event.type === 'm.room.power_levels' || e.event.type === 'm.room.member' && e.event.content.membership !== 'invite')) {
            return false;
          }

          if (e.event.type === 'm.room.redaction') {
            return false;
          }

          return !(e.event.content['m.relates_to'] && e.event.content['m.relates_to']["rel_type"] === 'm.replace');
        });

        events = _.sortBy(events, function (e) {
          return e.event.origin_server_ts;
        });

        if (events.length) {
          return events[events.length - 1];
        }
      }
    },
    ...Object(vuex_esm["c" /* mapState */])(['minimized', 'active', 'events'])
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/chats/preview?vue&type=script&lang=js&
 /* harmony default export */ var chats_preview_vue_type_script_lang_js_ = (preview_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/chats/preview/index.vue



function preview_injectStyles (context) {
  
  var style0 = __webpack_require__("f024")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var preview_component = Object(componentNormalizer["a" /* default */])(
  chats_preview_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  preview_injectStyles,
  "33d22462",
  null
  ,true
)

/* harmony default export */ var preview = __webpack_exports__["a"] = (preview_component.exports);

/***/ }),

/***/ "087f":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__("3fb5")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ "08da":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/topheader/index.vue?vue&type=template&id=52afd868&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fixedOnPageTop",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active},attrs:{"id":"topheader"},on:{"mouseleave":_vm.mouseleave}},[_c('div',{staticClass:"topheader "},[_c('div',{staticClass:"work"},[_c('div',{staticClass:"headerLine"},[_c('div',{staticClass:"leftIcon icon",on:{"mouseenter":_vm.mouseenter}},[_vm._t("left",function(){return [_vm._v("   ")]})],2),_c('div',{staticClass:"leftaddIcon iconsmall"},[_vm._t("leftadd",function(){return [_vm._v("   ")]})],2),_c('div',{staticClass:"infoPart",on:{"mouseenter":_vm.mouseenter}},[_c('div',[_vm._t("info",function(){return [_vm._v("   ")]})],2)]),_c('div',{staticClass:"rightaddIcons iconsmall"},[_vm._t("rightadd",function(){return [_vm._v("   ")]})],2),_c('div',{staticClass:"rightIcons icon"},[_vm._t("right",function(){return [_vm._v("   ")]})],2)]),_vm._t("additional")],2)])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/topheader/index.vue?vue&type=template&id=52afd868&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/topheader?vue&type=script&lang=js&

/* harmony default export */ var topheader_vue_type_script_lang_js_ = ({
  name: 'topheader',
  props: {},
  data: function () {
    return {
      loading: false
    };
  },
  created: function () {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active
  }),
  methods: {
    mouseenter: function () {
      this.$store.commit('active', true);
      this.$store.commit('blockactive', {
        value: true,
        item: 'header'
      });
    },
    mouseleave: function () {
      if (this.$store.state.autohide) this.$store.commit('active', false);
      this.$store.commit('blockactive', {
        value: false,
        item: 'header'
      });
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/topheader?vue&type=script&lang=js&
 /* harmony default export */ var assets_topheader_vue_type_script_lang_js_ = (topheader_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/assets/topheader/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("7212")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  assets_topheader_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "52afd868",
  null
  ,true
)

/* harmony default export */ var topheader = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "0a00":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _interopRequireDefault = __webpack_require__("4ea4");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;

var matrixcs = _interopRequireWildcard(__webpack_require__("3901"));

Object.keys(matrixcs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === matrixcs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return matrixcs[key];
    }
  });
});

var _browserRequest = _interopRequireDefault(__webpack_require__("722a"));

var _qs = _interopRequireDefault(__webpack_require__("4328"));
/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


matrixcs.request(function (opts, fn) {
  // We manually fix the query string for browser-request because
  // it doesn't correctly handle cases like ?via=one&via=two. Instead
  // we mimic `request`'s query string interface to make it all work
  // as expected.
  // browser-request will happily take the constructed string as the
  // query string without trying to modify it further.
  opts.qs = _qs.default.stringify(opts.qs || {}, opts.qsStringifyOptions);
  return (0, _browserRequest.default)(opts, fn);
}); // just *accessing* indexedDB throws an exception in firefox with
// indexeddb disabled.

let indexedDB;

try {
  indexedDB = global.indexedDB;
} catch (e) {} // if our browser (appears to) support indexeddb, use an indexeddb crypto store.


if (indexedDB) {
  matrixcs.setCryptoStoreFactory(function () {
    return new matrixcs.IndexedDBCryptoStore(indexedDB, "matrix-js-sdk:crypto");
  });
} // We export 3 things to make browserify happy as well as downstream projects.
// It's awkward, but required.


var _default = matrixcs; // keep export for browserify package deps

exports.default = _default;
global.matrixcs = matrixcs;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "0a06":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var buildURL = __webpack_require__("30b5");
var InterceptorManager = __webpack_require__("f6b4");
var dispatchRequest = __webpack_require__("5270");
var mergeConfig = __webpack_require__("4a7b");
var validator = __webpack_require__("848b");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "0a3f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "0ac3":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("6f2e");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__("6ffa");
exports.Duplex = __webpack_require__("d6dd");
exports.Transform = __webpack_require__("dcd0");
exports.PassThrough = __webpack_require__("aa69");


/***/ }),

/***/ "0b16":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__("1985");
var util = __webpack_require__("35e8");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__("b383");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "0b70":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("3b29");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("1cdd9344", content, shadowRoot)
};

/***/ }),

/***/ "0b9e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RemoteIndexedDBStoreBackend = RemoteIndexedDBStoreBackend;

var _logger = __webpack_require__("63c7");

var _utils = __webpack_require__("3987");
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * An IndexedDB store backend where the actual backend sits in a web
 * worker.
 *
 * Construct a new Indexed Database store backend. This requires a call to
 * <code>connect()</code> before this store can be used.
 * @constructor
 * @param {string} workerScript URL to the worker script
 * @param {string=} dbName Optional database name. The same name must be used
 * to open the same database.
 * @param {Object} workerApi The web worker compatible interface object
 */


function RemoteIndexedDBStoreBackend(workerScript, dbName, workerApi) {
  this._workerScript = workerScript;
  this._dbName = dbName;
  this._workerApi = workerApi;
  this._worker = null;
  this._nextSeq = 0; // The currently in-flight requests to the actual backend

  this._inFlight = {// seq: promise,
  }; // Once we start connecting, we keep the promise and re-use it
  // if we try to connect again

  this._startPromise = null;
}

RemoteIndexedDBStoreBackend.prototype = {
  /**
   * Attempt to connect to the database. This can fail if the user does not
   * grant permission.
   * @return {Promise} Resolves if successfully connected.
   */
  connect: function () {
    return this._ensureStarted().then(() => this._doCmd('connect'));
  },

  /**
   * Clear the entire database. This should be used when logging out of a client
   * to prevent mixing data between accounts.
   * @return {Promise} Resolved when the database is cleared.
   */
  clearDatabase: function () {
    return this._ensureStarted().then(() => this._doCmd('clearDatabase'));
  },

  /** @return {Promise<bool>} whether or not the database was newly created in this session. */
  isNewlyCreated: function () {
    return this._doCmd('isNewlyCreated');
  },

  /**
   * @return {Promise} Resolves with a sync response to restore the
   * client state to where it was at the last save, or null if there
   * is no saved sync data.
   */
  getSavedSync: function () {
    return this._doCmd('getSavedSync');
  },
  getNextBatchToken: function () {
    return this._doCmd('getNextBatchToken');
  },
  setSyncData: function (syncData) {
    return this._doCmd('setSyncData', [syncData]);
  },
  syncToDatabase: function (users) {
    return this._doCmd('syncToDatabase', [users]);
  },

  /**
   * Returns the out-of-band membership events for this room that
   * were previously loaded.
   * @param {string} roomId
   * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members
   * @returns {null} in case the members for this room haven't been stored yet
   */
  getOutOfBandMembers: function (roomId) {
    return this._doCmd('getOutOfBandMembers', [roomId]);
  },

  /**
   * Stores the out-of-band membership events for this room. Note that
   * it still makes sense to store an empty array as the OOB status for the room is
   * marked as fetched, and getOutOfBandMembers will return an empty array instead of null
   * @param {string} roomId
   * @param {event[]} membershipEvents the membership events to store
   * @returns {Promise} when all members have been stored
   */
  setOutOfBandMembers: function (roomId, membershipEvents) {
    return this._doCmd('setOutOfBandMembers', [roomId, membershipEvents]);
  },
  clearOutOfBandMembers: function (roomId) {
    return this._doCmd('clearOutOfBandMembers', [roomId]);
  },
  getClientOptions: function () {
    return this._doCmd('getClientOptions');
  },
  storeClientOptions: function (options) {
    return this._doCmd('storeClientOptions', [options]);
  },

  /**
   * Load all user presence events from the database. This is not cached.
   * @return {Promise<Object[]>} A list of presence events in their raw form.
   */
  getUserPresenceEvents: function () {
    return this._doCmd('getUserPresenceEvents');
  },
  _ensureStarted: function () {
    if (this._startPromise === null) {
      this._worker = new this._workerApi(this._workerScript);
      this._worker.onmessage = this._onWorkerMessage.bind(this); // tell the worker the db name.

      this._startPromise = this._doCmd('_setupWorker', [this._dbName]).then(() => {
        _logger.logger.log("IndexedDB worker is ready");
      });
    }

    return this._startPromise;
  },
  _doCmd: function (cmd, args) {
    // wrap in a q so if the postMessage throws,
    // the promise automatically gets rejected
    return Promise.resolve().then(() => {
      const seq = this._nextSeq++;
      const def = (0, _utils.defer)();
      this._inFlight[seq] = def;

      this._worker.postMessage({
        command: cmd,
        seq: seq,
        args: args
      });

      return def.promise;
    });
  },
  _onWorkerMessage: function (ev) {
    const msg = ev.data;

    if (msg.command == 'cmd_success' || msg.command == 'cmd_fail') {
      if (msg.seq === undefined) {
        _logger.logger.error("Got reply from worker with no seq");

        return;
      }

      const def = this._inFlight[msg.seq];

      if (def === undefined) {
        _logger.logger.error("Got reply for unknown seq " + msg.seq);

        return;
      }

      delete this._inFlight[msg.seq];

      if (msg.command == 'cmd_success') {
        def.resolve(msg.result);
      } else {
        const error = new Error(msg.error.message);
        error.name = msg.error.name;
        def.reject(error);
      }
    } else {
      _logger.logger.warn("Unrecognised message from worker: " + msg);
    }
  }
};

/***/ }),

/***/ "0c96":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("f726");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("b28448c4", content, shadowRoot)
};

/***/ }),

/***/ "0cd0":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".toggleChatGroup[data-v-06594ccd]{list-style:none;padding:0;margin:0;display:flex;justify-content:flex-start;align-items:center}.toggleChatGroup li[data-v-06594ccd]{margin-right:10px;padding:10px 0}.logo20[data-v-06594ccd]{width:20px;height:20px}.iconbuttonsmall[data-v-06594ccd]{color:rgb(var(--neutral-grad-3))}.iconbuttonsmall.active[data-v-06594ccd],.iconbuttonsmall[data-v-06594ccd]:hover{color:rgb(var(--color-txt-ac))}.iconbuttonsmall.active[data-v-06594ccd]:hover{color:rgb(var(--neutral-grad-3))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "0cfb":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");
var createElement = __webpack_require__("cc12");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "0d51":
/***/ (function(module, exports) {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "0db6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__("c9b8").codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ "0dbb":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("eeb4");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("403f85d5", content, shadowRoot)
};

/***/ }),

/***/ "0df6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "0f7c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__("688e");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 1:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "12a8":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".viewWrapper[data-v-7650772c]{padding:1em 0;background:rgb(var(--background-secondary-theme));position:relative}.viewWrapper .uviewwr[data-v-7650772c]{max-width:500px;margin:0 auto}.actionsWrapper[data-v-7650772c]{padding:.5em 0}.youw[data-v-7650772c]{text-align:center;padding:1.5em;font-size:.9em}#contact.minimized[data-v-7650772c]:not(.active) .gotoprofile{display:none}#contact.minimized[data-v-7650772c]:not(.active) .userpic{height:44px;width:44px;line-height:44px}#contact.minimized[data-v-7650772c]:not(.active) .name{display:none}#contact.minimized[data-v-7650772c]:not(.active) .viewWrapper{width:44px;background:transparent!important}#contact.minimized[data-v-7650772c]:not(.active) .haskeys{display:none}#contact.minimized[data-v-7650772c]:not(.active) .info{flex-direction:column;box-shadow:none;padding:0;background:transparent!important;margin:0}#contact.minimized[data-v-7650772c]:not(.active) .info .infoPart{width:100%;padding-left:0;padding-right:0}#contact.minimized[data-v-7650772c]:not(.active) .info .infoPart .label{font-size:.8em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "13d2":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var isCallable = __webpack_require__("1626");
var hasOwn = __webpack_require__("1a2d");
var DESCRIPTORS = __webpack_require__("83ab");
var CONFIGURABLE_FUNCTION_NAME = __webpack_require__("5e77").CONFIGURABLE;
var inspectSource = __webpack_require__("8925");
var InternalStateModule = __webpack_require__("69f3");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "1467":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const webcrypto_1 = __webpack_require__("9060");
const siv_1 = __webpack_require__("956b");
/** AEAD interface provider for ISIVLike types */
class AEAD {
    /** Create a new AEAD instance with the given key */
    static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {
        return __awaiter(this, void 0, void 0, function* () {
            return new AEAD(yield siv_1.SIV.importKey(keyData, alg, provider));
        });
    }
    constructor(siv) {
        this._siv = siv;
    }
    /** Encrypt and authenticate data using AES-SIV */
    seal(plaintext, nonce, associatedData = new Uint8Array(0)) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._siv.seal(plaintext, [associatedData, nonce]);
        });
    }
    /** Decrypt and authenticate data using AES-SIV */
    open(ciphertext, nonce, associatedData = new Uint8Array(0)) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._siv.open(ciphertext, [associatedData, nonce]);
        });
    }
    /** Make a best effort to wipe memory used by this instance */
    clear() {
        this._siv.clear();
        return this;
    }
}
exports.AEAD = AEAD;


/***/ }),

/***/ "1507":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
var ___CSS_LOADER_AT_RULE_IMPORT_0___ = __webpack_require__("8db5");
var ___CSS_LOADER_AT_RULE_IMPORT_1___ = __webpack_require__("78db");
var ___CSS_LOADER_AT_RULE_IMPORT_2___ = __webpack_require__("c275");
exports = ___CSS_LOADER_API_IMPORT___(false);
exports.push([module.i, "@import url(https://use.fontawesome.com/releases/v5.2.0/css/all.css);"]);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_1___);
exports.i(___CSS_LOADER_AT_RULE_IMPORT_2___);
// Module
exports.push([module.i, "", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "1570":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_many_vue_vue_type_style_index_0_id_71d5e826_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("247a");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_many_vue_vue_type_style_index_0_id_71d5e826_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_many_vue_vue_type_style_index_0_id_71d5e826_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_many_vue_vue_type_style_index_0_id_71d5e826_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_many_vue_vue_type_style_index_0_id_71d5e826_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "15aa":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".pmenu.minimized[data-v-6078dda8]{display:none}.pmenu.minimized.active[data-v-6078dda8]{display:block}.pmenu.minimized.active .menubgwrapper[data-v-6078dda8]{top:0;z-index:9000;border-radius:10px;overflow:hidden;border-top-right-radius:0;border-top-left-radius:0;width:344px;left:auto}.menubgwrapper[data-v-6078dda8]{position:absolute;z-index:100;bottom:0;left:0;top:-55px;right:0}.menubgwrapper[data-v-6078dda8] .items{max-height:500px;overflow-y:auto;border-radius:3px;padding-left:.5em;padding-right:.5em;padding-bottom:.5em}.menuwrapper[data-v-6078dda8]{padding:1em;z-index:100}.backgr[data-v-6078dda8],.menuwrapper[data-v-6078dda8]{position:absolute;bottom:0;left:0;right:0}.backgr[data-v-6078dda8]{background:rgba(var(--background-total-theme),.15);backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);top:0;transition:.3s}[data-v-6078dda8] .contentWrapper{margin-top:.25em;border-radius:10px;overflow:hidden;border-top:1px solid rgba(var(--neutral-grad-3),.5);box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}.cancelWrapper[data-v-6078dda8]{border-radius:3px;padding-left:.5em;padding-right:.5em;color:rgb(var(--neutral-grad-3))}.cancelWrapper .menu-item[data-v-6078dda8]{margin-top:0;background:transparent;box-shadow:none;box-shadow:0 5px 5px -3px rgba(var(--color-shadow-base),.4)}.menu-item[data-v-6078dda8]{padding:.5em;background:rgb(var(--background-total-theme));border-top:1px solid rgba(var(--neutral-grad-3),.5);line-height:44px;margin-top:.25em;display:flex;border-radius:10px;box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7);cursor:pointer}.menu-item .title[data-v-6078dda8]{flex-grow:2;padding-right:44px;text-align:center}.menu-item .iconWrapper[data-v-6078dda8]{width:44px;text-align:center}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "1626":
/***/ (function(module, exports) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "1696":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "16e5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CallEventHandler = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _logger = __webpack_require__("63c7");

var _call = __webpack_require__("3134");

var _event = __webpack_require__("d613");
/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Don't ring unless we'd be ringing for at least 3 seconds: the user needs some
// time to press the 'accept' button


const RING_GRACE_PERIOD = 3000;

class CallEventHandler {
  constructor(client) {
    (0, _defineProperty2.default)(this, "client", void 0);
    (0, _defineProperty2.default)(this, "calls", void 0);
    (0, _defineProperty2.default)(this, "callEventBuffer", void 0);
    (0, _defineProperty2.default)(this, "candidateEventsByCall", void 0);
    (0, _defineProperty2.default)(this, "evaluateEventBuffer", () => {
      if (this.client.getSyncState() === "SYNCING") {
        // don't process any events until they are all decrypted
        if (this.callEventBuffer.some(e => e.isBeingDecrypted())) return;
        const ignoreCallIds = new Set(); // inspect the buffer and mark all calls which have been answered
        // or hung up before passing them to the call event handler.

        for (const ev of this.callEventBuffer) {
          if (ev.getType() === _event.EventType.CallAnswer || ev.getType() === _event.EventType.CallHangup) {
            ignoreCallIds.add(ev.getContent().call_id);
          }
        } // now loop through the buffer chronologically and inject them


        for (const e of this.callEventBuffer) {
          if (e.getType() === _event.EventType.CallInvite && ignoreCallIds.has(e.getContent().call_id)) {
            // This call has previously been answered or hung up: ignore it
            continue;
          }

          try {
            this.handleCallEvent(e);
          } catch (e) {
            _logger.logger.error("Caught exception handling call event", e);
          }
        }

        this.callEventBuffer = [];
      }
    });
    (0, _defineProperty2.default)(this, "onEvent", event => {
      // any call events or ones that might be once they're decrypted
      if (event.getType().indexOf("m.call.") === 0 || event.isBeingDecrypted()) {
        // queue up for processing once all events from this sync have been
        // processed (see above).
        this.callEventBuffer.push(event);
      }

      if (event.isBeingDecrypted() || event.isDecryptionFailure()) {
        // add an event listener for once the event is decrypted.
        event.once("Event.decrypted", () => {
          if (event.getType().indexOf("m.call.") === -1) return;

          if (this.callEventBuffer.includes(event)) {
            // we were waiting for that event to decrypt, so recheck the buffer
            this.evaluateEventBuffer();
          } else {
            // This one wasn't buffered so just run the event handler for it
            // straight away
            try {
              this.handleCallEvent(event);
            } catch (e) {
              _logger.logger.error("Caught exception handling call event", e);
            }
          }
        });
      }
    });
    this.client = client;
    this.calls = new Map(); // The sync code always emits one event at a time, so it will patiently
    // wait for us to finish processing a call invite before delivering the
    // next event, even if that next event is a hangup. We therefore accumulate
    // all our call events and then process them on the 'sync' event, ie.
    // each time a sync has completed. This way, we can avoid emitting incoming
    // call events if we get both the invite and answer/hangup in the same sync.
    // This happens quite often, eg. replaying sync from storage, catchup sync
    // after loading and after we've been offline for a bit.

    this.callEventBuffer = [];
    this.candidateEventsByCall = new Map();
    this.client.on("sync", this.evaluateEventBuffer);
    this.client.on("event", this.onEvent);
  }

  stop() {
    this.client.removeListener("sync", this.evaluateEventBuffer);
    this.client.removeListener("event", this.onEvent);
  }

  handleCallEvent(event) {
    const content = event.getContent();
    let call = content.call_id ? this.calls.get(content.call_id) : undefined; //console.info("RECV %s content=%s", event.getType(), JSON.stringify(content));

    if (event.getType() === _event.EventType.CallInvite) {
      if (event.getSender() === this.client.credentials.userId) {
        return; // ignore invites you send
      }

      if (event.getLocalAge() > content.lifetime - RING_GRACE_PERIOD) {
        return; // expired call
      }

      if (call && call.state === _call.CallState.Ended) {
        return; // stale/old invite event
      }

      if (call) {
        _logger.logger.log(`WARN: Already have a MatrixCall with id ${content.call_id} but got an ` + `invite. Clobbering.`);
      }

      const timeUntilTurnCresExpire = this.client.getTurnServersExpiry() - Date.now();

      _logger.logger.info("Current turn creds expire in " + timeUntilTurnCresExpire + " ms");

      call = (0, _call.createNewMatrixCall)(this.client, event.getRoomId(), {
        forceTURN: this.client._forceTURN
      });

      if (!call) {
        _logger.logger.log("Incoming call ID " + content.call_id + " but this client " + "doesn't support WebRTC"); // don't hang up the call: there could be other clients
        // connected that do support WebRTC and declining the
        // the call on their behalf would be really annoying.


        return;
      }

      call.callId = content.call_id;
      call.initWithInvite(event);
      this.calls.set(call.callId, call); // if we stashed candidate events for that call ID, play them back now

      if (this.candidateEventsByCall.get(call.callId)) {
        for (const ev of this.candidateEventsByCall.get(call.callId)) {
          call.onRemoteIceCandidatesReceived(ev);
        }
      } // Were we trying to call that user (room)?


      let existingCall;

      for (const thisCall of this.calls.values()) {
        const isCalling = [_call.CallState.WaitLocalMedia, _call.CallState.CreateOffer, _call.CallState.InviteSent].includes(thisCall.state);

        if (call.roomId === thisCall.roomId && thisCall.direction === _call.CallDirection.Outbound && isCalling) {
          existingCall = thisCall;
          break;
        }
      }

      if (existingCall) {
        // If we've only got to wait_local_media or create_offer and
        // we've got an invite, pick the incoming call because we know
        // we haven't sent our invite yet otherwise, pick whichever
        // call has the lowest call ID (by string comparison)
        if (existingCall.state === _call.CallState.WaitLocalMedia || existingCall.state === _call.CallState.CreateOffer || existingCall.callId > call.callId) {
          _logger.logger.log("Glare detected: answering incoming call " + call.callId + " and canceling outgoing call " + existingCall.callId);

          existingCall.replacedBy(call);
          call.answer();
        } else {
          _logger.logger.log("Glare detected: rejecting incoming call " + call.callId + " and keeping outgoing call " + existingCall.callId);

          call.hangup(_call.CallErrorCode.Replaced, true);
        }
      } else {
        this.client.emit("Call.incoming", call);
      }
    } else if (event.getType() === _event.EventType.CallAnswer) {
      if (!call) {
        return;
      }

      if (event.getSender() === this.client.credentials.userId) {
        if (call.state === _call.CallState.Ringing) {
          call.onAnsweredElsewhere(content);
        }
      } else {
        call.onAnswerReceived(event);
      }
    } else if (event.getType() === _event.EventType.CallCandidates) {
      if (event.getSender() === this.client.credentials.userId) {
        return;
      }

      if (!call) {
        // store the candidates; we may get a call eventually.
        if (!this.candidateEventsByCall.has(content.call_id)) {
          this.candidateEventsByCall.set(content.call_id, []);
        }

        this.candidateEventsByCall.get(content.call_id).push(event);
      } else {
        call.onRemoteIceCandidatesReceived(event);
      }
    } else if ([_event.EventType.CallHangup, _event.EventType.CallReject].includes(event.getType())) {
      // Note that we also observe our own hangups here so we can see
      // if we've already rejected a call that would otherwise be valid
      if (!call) {
        // if not live, store the fact that the call has ended because
        // we're probably getting events backwards so
        // the hangup will come before the invite
        call = (0, _call.createNewMatrixCall)(this.client, event.getRoomId());

        if (call) {
          call.callId = content.call_id;
          call.initWithHangup(event);
          this.calls.set(content.call_id, call);
        }
      } else {
        if (call.state !== _call.CallState.Ended) {
          if (event.getType() === _event.EventType.CallHangup) {
            call.onHangupReceived(content);
          } else {
            call.onRejectReceived(content);
          }

          this.calls.delete(content.call_id);
        }
      }
    } else if (event.getType() === _event.EventType.CallSelectAnswer) {
      if (!call) return;

      if (event.getContent().party_id === call.ourPartyId) {
        // Ignore remote echo
        return;
      }

      call.onSelectAnswerReceived(event);
    } else if (event.getType() === _event.EventType.CallNegotiate) {
      if (!call) return;

      if (event.getContent().party_id === call.ourPartyId) {
        // Ignore remote echo
        return;
      }

      call.onNegotiateReceived(event);
    }
  }

}

exports.CallEventHandler = CallEventHandler;

/***/ }),

/***/ "17e1":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1cf419f0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9783");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1cf419f0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1cf419f0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1cf419f0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1cf419f0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "191a":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_57da332f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("810b");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_57da332f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_57da332f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_57da332f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_57da332f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "1985":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("62e4")(module), __webpack_require__("c8ba")))

/***/ }),

/***/ "19aa":
/***/ (function(module, exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__("3a9b");

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};


/***/ }),

/***/ "1a2d":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");
var toObject = __webpack_require__("7b0b");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "1ab9":
/***/ (function(module, exports, __webpack_require__) {

/* MIT license */
var colorNames = __webpack_require__("4f4d");
var swizzle = __webpack_require__("2514");

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
	if (colorNames.hasOwnProperty(name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorNames[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}


/***/ }),

/***/ "1b71":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".m-message-container{position:fixed;z-index:1010;pointer-events:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-sizing:border-box;box-sizing:border-box;padding:15px}.m-message-container.is-top-center,.m-message-container.is-top-left,.m-message-container.is-top-right{width:100%;top:0;left:0}.m-message-container.is-top-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-top-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-top-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.is-center{width:100%;height:100%;left:0;top:0;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.m-message-container.is-bottom-center,.m-message-container.is-bottom-left,.m-message-container.is-bottom-right{bottom:0;left:0;width:100%;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}.m-message-container.is-bottom-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-bottom-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-bottom-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.has-mask{background-color:hsla(0,0%,100%,.5);width:100%;height:100%;pointer-events:all}.m-message-wrapper{display:inline-block;max-width:500px}.m-message-wrapper+.m-message-wrapper{margin-top:15px}.m-message-wrapper:after,.m-message-wrapper:before{content:\"\";clear:both;display:table}.m-message-icons{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;margin-right:10px}.m-message--title{font-size:14px;font-weight:600;overflow:hidden;color:#646464;text-overflow:ellipsis;white-space:nowrap}.m-message-content{-webkit-box-sizing:border-box;box-sizing:border-box;overflow:auto;width:100%}.m-message-content .listPreview{cursor:pointer}.m-message-content .listPreview .invitedEvent{width:180px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-content .listPreview .invitedEvent span{display:block;font-size:.8em}.m-message-content .listPreview .invitedEvent .txt{color:#707070}.m-message-content .listPreview .invitedEvent .txtNew{color:#06823a}.m-message-content .listPreview .linkPreview span:first-letter{text-transform:uppercase}.m-message-content .listPreview .linkPreview .senderName{font-weight:700;color:#002a52}.m-message-content .listPreview .linkPreview .linkTitle{color:#707070}.m-message-content .listPreview .linkPreview .pocketnetLink{color:#002a52}.m-message-content .listPreview .previewMessageList span{color:#707070;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:left}.m-message-content .listPreview .previewMessage{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%}.m-message-content .listPreview .previewMessage span{display:block;color:#707070;font-size:.8em;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:left;max-width:150px}.m-message--description{line-height:1.6;color:#777}.m-message--title+.m-message--description{margin-top:5px}.m-message--icon{width:25px;height:25px;vertical-align:middle;display:inline-block;border-radius:50%}.m-message--control{position:relative;height:100%;-ms-flex-item-align:start;align-self:flex-start;white-space:nowrap;margin-right:-5px;margin-left:10px}.m-message--button{border:none;outline:none;background:none;cursor:pointer;font-size:15px;color:#646464;font-weight:600;padding:0;width:20px;height:20px;line-height:20px;text-align:center;vertical-align:middle}.m-message--button:hover{color:#f56c6c}.m-message--arrow-down.is-collapsed{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.m-message-fade-enter-active{-webkit-animation:m-message-fade-in-down .3s;animation:m-message-fade-in-down .3s}.m-message-fade-leave-active{-webkit-animation:m-message-fade-out .3s;animation:m-message-fade-out .3s}@-webkit-keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}@keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "1b79":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_1_id_108c57b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("e7aa");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_1_id_108c57b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_1_id_108c57b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_1_id_108c57b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_1_id_108c57b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "1c8f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixHttpApi = MatrixHttpApi;
exports.retryNetworkOperation = retryNetworkOperation;
exports.AbortError = exports.ConnectionError = exports.MatrixError = exports.PREFIX_MEDIA_R0 = exports.PREFIX_IDENTITY_V2 = exports.PREFIX_IDENTITY_V1 = exports.PREFIX_UNSTABLE = exports.PREFIX_R0 = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _contentType = __webpack_require__("b40f");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");

var callbacks = _interopRequireWildcard(__webpack_require__("38f4"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}
/*
TODO:
- CS: complete register function (doing stages)
- Identity server: linkEmail, authEmail, bindEmail, lookup3pid
*/

/**
 * A constant representing the URI path for release 0 of the Client-Server HTTP API.
 */


const PREFIX_R0 = "/_matrix/client/r0";
/**
 * A constant representing the URI path for as-yet unspecified Client-Server HTTP APIs.
 */

exports.PREFIX_R0 = PREFIX_R0;
const PREFIX_UNSTABLE = "/_matrix/client/unstable";
/**
 * URI path for v1 of the the identity API
 * @deprecated Use v2.
 */

exports.PREFIX_UNSTABLE = PREFIX_UNSTABLE;
const PREFIX_IDENTITY_V1 = "/_matrix/identity/api/v1";
/**
 * URI path for the v2 identity API
 */

exports.PREFIX_IDENTITY_V1 = PREFIX_IDENTITY_V1;
const PREFIX_IDENTITY_V2 = "/_matrix/identity/v2";
/**
 * URI path for the media repo API
 */

exports.PREFIX_IDENTITY_V2 = PREFIX_IDENTITY_V2;
const PREFIX_MEDIA_R0 = "/_matrix/media/r0";
/**
 * Construct a MatrixHttpApi.
 * @constructor
 * @param {EventEmitter} event_emitter The event emitter to use for emitting events
 * @param {Object} opts The options to use for this HTTP API.
 * @param {string} opts.baseUrl Required. The base client-server URL e.g.
 * 'http://localhost:8008'.
 * @param {Function} opts.request Required. The function to call for HTTP
 * requests. This function must look like function(opts, callback){ ... }.
 * @param {string} opts.prefix Required. The matrix client prefix to use, e.g.
 * '/_matrix/client/r0'. See PREFIX_R0 and PREFIX_UNSTABLE for constants.
 *
 * @param {boolean} opts.onlyData True to return only the 'data' component of the
 * response (e.g. the parsed HTTP body). If false, requests will return an
 * object with the properties <tt>code</tt>, <tt>headers</tt> and <tt>data</tt>.
 *
 * @param {string} opts.accessToken The access_token to send with requests. Can be
 * null to not send an access token.
 * @param {Object=} opts.extraParams Optional. Extra query parameters to send on
 * requests.
 * @param {Number=} opts.localTimeoutMs The default maximum amount of time to wait
 * before timing out the request. If not specified, there is no timeout.
 * @param {boolean} [opts.useAuthorizationHeader = false] Set to true to use
 * Authorization header instead of query param to send the access token to the server.
 */

exports.PREFIX_MEDIA_R0 = PREFIX_MEDIA_R0;

function MatrixHttpApi(event_emitter, opts) {
  utils.checkObjectHasKeys(opts, ["baseUrl", "request", "prefix"]);
  opts.onlyData = opts.onlyData || false;
  this.event_emitter = event_emitter;
  this.opts = opts;
  this.useAuthorizationHeader = Boolean(opts.useAuthorizationHeader);
  this.uploads = [];
}

MatrixHttpApi.prototype = {
  /**
   * Sets the baase URL for the identity server
   * @param {string} url The new base url
   */
  setIdBaseUrl: function (url) {
    this.opts.idBaseUrl = url;
  },

  /**
   * Get the content repository url with query parameters.
   * @return {Object} An object with a 'base', 'path' and 'params' for base URL,
   *          path and query parameters respectively.
   */
  getContentUri: function () {
    const params = {
      access_token: this.opts.accessToken
    };
    return {
      base: this.opts.baseUrl,
      path: "/_matrix/media/r0/upload",
      params: params
    };
  },

  /**
   * Upload content to the Home Server
   *
   * @param {object} file The object to upload. On a browser, something that
   *   can be sent to XMLHttpRequest.send (typically a File).  Under node.js,
   *   a Buffer, String or ReadStream.
   *
   * @param {object} opts  options object
   *
   * @param {string=} opts.name   Name to give the file on the server. Defaults
   *   to <tt>file.name</tt>.
   *
   * @param {boolean=} opts.includeFilename if false will not send the filename,
   *   e.g for encrypted file uploads where filename leaks are undesirable.
   *   Defaults to true.
   *
   * @param {string=} opts.type   Content-type for the upload. Defaults to
   *   <tt>file.type</tt>, or <tt>applicaton/octet-stream</tt>.
   *
   * @param {boolean=} opts.rawResponse Return the raw body, rather than
   *   parsing the JSON. Defaults to false (except on node.js, where it
   *   defaults to true for backwards compatibility).
   *
   * @param {boolean=} opts.onlyContentUri Just return the content URI,
   *   rather than the whole body. Defaults to false (except on browsers,
   *   where it defaults to true for backwards compatibility). Ignored if
   *   opts.rawResponse is true.
   *
   * @param {Function=} opts.callback Deprecated. Optional. The callback to
   *    invoke on success/failure. See the promise return values for more
   *    information.
   *
   * @param {Function=} opts.progressHandler Optional. Called when a chunk of
   *    data has been uploaded, with an object containing the fields `loaded`
   *    (number of bytes transferred) and `total` (total size, if known).
   *
   * @return {Promise} Resolves to response object, as
   *    determined by this.opts.onlyData, opts.rawResponse, and
   *    opts.onlyContentUri.  Rejects with an error (usually a MatrixError).
   */
  uploadContent: function (file, opts) {
    if (utils.isFunction(opts)) {
      // opts used to be callback
      opts = {
        callback: opts
      };
    } else if (opts === undefined) {
      opts = {};
    } // default opts.includeFilename to true (ignoring falsey values)


    const includeFilename = opts.includeFilename !== false; // if the file doesn't have a mime type, use a default since
    // the HS errors if we don't supply one.

    const contentType = opts.type || file.type || 'application/octet-stream';
    const fileName = opts.name || file.name; // We used to recommend setting file.stream to the thing to upload on
    // Node.js. As of 2019-06-11, this is still in widespread use in various
    // clients, so we should preserve this for simple objects used in
    // Node.js. File API objects (via either the File or Blob interfaces) in
    // the browser now define a `stream` method, which leads to trouble
    // here, so we also check the type of `stream`.

    let body = file;

    if (body.stream && typeof body.stream !== "function") {
      _logger.logger.warn("Using `file.stream` as the content to upload. Future " + "versions of the js-sdk will change this to expect `file` to " + "be the content directly.");

      body = body.stream;
    } // backwards-compatibility hacks where we used to do different things
    // between browser and node.


    let rawResponse = opts.rawResponse;
    var xmlhhtprequest = global._XMLHttpRequest || global.XMLHttpRequest;

    if (rawResponse === undefined) {
      if (xmlhhtprequest) {
        rawResponse = false;
      } else {
        _logger.logger.warn("Returning the raw JSON from uploadContent(). Future " + "versions of the js-sdk will change this default, to " + "return the parsed object. Set opts.rawResponse=false " + "to change this behaviour now.");

        rawResponse = true;
      }
    }

    let onlyContentUri = opts.onlyContentUri;

    if (!rawResponse && onlyContentUri === undefined) {
      if (xmlhhtprequest) {
        _logger.logger.warn("Returning only the content-uri from uploadContent(). " + "Future versions of the js-sdk will change this " + "default, to return the whole response object. Set " + "opts.onlyContentUri=false to change this behaviour now.");

        onlyContentUri = true;
      } else {
        onlyContentUri = false;
      }
    } // browser-request doesn't support File objects because it deep-copies
    // the options using JSON.parse(JSON.stringify(options)). Instead of
    // loading the whole file into memory as a string and letting
    // browser-request base64 encode and then decode it again, we just
    // use XMLHttpRequest directly.
    // (browser-request doesn't support progress either, which is also kind
    // of important here)


    const upload = {
      loaded: 0,
      total: 0
    };
    let promise; // XMLHttpRequest doesn't parse JSON for us. request normally does, but
    // we're setting opts.json=false so that it doesn't JSON-encode the
    // request, which also means it doesn't JSON-decode the response. Either
    // way, we have to JSON-parse the response ourselves.

    let bodyParser = null;

    if (!rawResponse) {
      bodyParser = function (rawBody) {
        let body = JSON.parse(rawBody);

        if (onlyContentUri) {
          body = body.content_uri;

          if (body === undefined) {
            throw Error('Bad response');
          }
        }

        return body;
      };
    }

    if (xmlhhtprequest) {
      const defer = utils.defer();
      const xhr = new xmlhhtprequest();
      upload.xhr = xhr;
      const cb = requestCallback(defer, opts.callback, this.opts.onlyData);

      const timeout_fn = function () {
        xhr.abort();
        cb(new Error('Timeout'));
      }; // set an initial timeout of 30s; we'll advance it each time we get
      // a progress notification


      xhr.timeout_timer = callbacks.setTimeout(timeout_fn, 30000);

      xhr.onreadystatechange = function () {
        let resp;

        switch (xhr.readyState) {
          case xmlhhtprequest.DONE:
            callbacks.clearTimeout(xhr.timeout_timer);

            try {
              if (xhr.status === 0) {
                throw new AbortError();
              }

              if (!xhr.responseText) {
                throw new Error('No response body.');
              }

              resp = xhr.responseText;

              if (bodyParser) {
                resp = bodyParser(resp);
              }
            } catch (err) {
              err.http_status = xhr.status;
              cb(err);
              return;
            }

            cb(undefined, xhr, resp);
            break;
        }
      };

      xhr.upload.addEventListener("progress", function (ev) {
        callbacks.clearTimeout(xhr.timeout_timer);
        upload.loaded = ev.loaded;
        upload.total = ev.total;
        xhr.timeout_timer = callbacks.setTimeout(timeout_fn, 30000);

        if (opts.progressHandler) {
          opts.progressHandler({
            loaded: ev.loaded,
            total: ev.total
          });
        }
      });
      let url = this.opts.baseUrl + "/_matrix/media/r0/upload";
      const queryArgs = [];

      if (includeFilename && fileName) {
        queryArgs.push("filename=" + encodeURIComponent(fileName));
      }

      if (!this.useAuthorizationHeader) {
        queryArgs.push("access_token=" + encodeURIComponent(this.opts.accessToken));
      }

      if (queryArgs.length > 0) {
        url += "?" + queryArgs.join("&");
      }

      xhr.open("POST", url);

      if (this.useAuthorizationHeader) {
        xhr.setRequestHeader("Authorization", "Bearer " + this.opts.accessToken);
      }

      xhr.setRequestHeader("Content-Type", contentType);
      xhr.send(body);
      promise = defer.promise; // dirty hack (as per _request) to allow the upload to be cancelled.

      promise.abort = xhr.abort.bind(xhr);
    } else {
      const queryParams = {};

      if (includeFilename && fileName) {
        queryParams.filename = fileName;
      }

      promise = this.authedRequest(opts.callback, "POST", "/upload", queryParams, body, {
        prefix: "/_matrix/media/r0",
        headers: {
          "Content-Type": contentType
        },
        json: false,
        bodyParser: bodyParser
      });
    }

    const self = this; // remove the upload from the list on completion

    const promise0 = promise.finally(function () {
      for (let i = 0; i < self.uploads.length; ++i) {
        if (self.uploads[i] === upload) {
          self.uploads.splice(i, 1);
          return;
        }
      }
    }); // copy our dirty abort() method to the new promise

    promise0.abort = promise.abort;
    upload.promise = promise0;
    this.uploads.push(upload);
    return promise0;
  },
  cancelUpload: function (promise) {
    if (promise.abort) {
      promise.abort();
      return true;
    }

    return false;
  },
  getCurrentUploads: function () {
    return this.uploads;
  },
  idServerRequest: function (callback, method, path, params, prefix, accessToken) {
    if (!this.opts.idBaseUrl) {
      throw new Error("No Identity Server base URL set");
    }

    const fullUri = this.opts.idBaseUrl + prefix + path;

    if (callback !== undefined && !utils.isFunction(callback)) {
      throw Error("Expected callback to be a function but got " + typeof callback);
    }

    const opts = {
      uri: fullUri,
      method: method,
      withCredentials: false,
      json: true,
      // we want a JSON response if we can
      _matrix_opts: this.opts,
      headers: {}
    };

    if (method === 'GET') {
      opts.qs = params;
    } else if (typeof params === "object") {
      opts.json = params;
    }

    if (accessToken) {
      opts.headers['Authorization'] = `Bearer ${accessToken}`;
    }

    const defer = utils.defer();
    this.opts.request(opts, requestCallback(defer, callback, this.opts.onlyData));
    return defer.promise;
  },

  /**
   * Perform an authorised request to the homeserver.
   * @param {Function} callback Optional. The callback to invoke on
   * success/failure. See the promise return values for more information.
   * @param {string} method The HTTP method e.g. "GET".
   * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
   * "/createRoom".
   *
   * @param {Object=} queryParams A dict of query params (these will NOT be
   * urlencoded). If unspecified, there will be no query params.
   *
   * @param {Object} [data] The HTTP JSON body.
   *
   * @param {Object|Number=} opts additional options. If a number is specified,
   * this is treated as `opts.localTimeoutMs`.
   *
   * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
   * timing out the request. If not specified, there is no timeout.
   *
   * @param {sting=} opts.prefix The full prefix to use e.g.
   * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
   *
   * @param {Object=} opts.headers map of additional request headers
   *
   * @return {Promise} Resolves to <code>{data: {Object},
   * headers: {Object}, code: {Number}}</code>.
   * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
   * object only.
   * @return {module:http-api.MatrixError} Rejects with an error if a problem
   * occurred. This includes network problems and Matrix-specific error JSON.
   */
  authedRequest: function (callback, method, path, queryParams, data, opts) {
    if (!queryParams) {
      queryParams = {};
    }

    if (this.useAuthorizationHeader) {
      if (isFinite(opts)) {
        // opts used to be localTimeoutMs
        opts = {
          localTimeoutMs: opts
        };
      }

      if (!opts) {
        opts = {};
      }

      if (!opts.headers) {
        opts.headers = {};
      }

      if (!opts.headers.Authorization) {
        opts.headers.Authorization = "Bearer " + this.opts.accessToken;
      }

      if (queryParams.access_token) {
        delete queryParams.access_token;
      }
    } else {
      if (!queryParams.access_token) {
        queryParams.access_token = this.opts.accessToken;
      }
    }

    const requestPromise = this.request(callback, method, path, queryParams, data, opts);
    const self = this;
    requestPromise.catch(function (err) {
      if (err.errcode == 'M_UNKNOWN_TOKEN') {
        self.event_emitter.emit("Session.logged_out", err);
      } else if (err.errcode == 'M_CONSENT_NOT_GIVEN') {
        self.event_emitter.emit("no_consent", err.message, err.data.consent_uri);
      }
    }); // return the original promise, otherwise tests break due to it having to
    // go around the event loop one more time to process the result of the request

    return requestPromise;
  },

  /**
   * Perform a request to the homeserver without any credentials.
   * @param {Function} callback Optional. The callback to invoke on
   * success/failure. See the promise return values for more information.
   * @param {string} method The HTTP method e.g. "GET".
   * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
   * "/createRoom".
   *
   * @param {Object=} queryParams A dict of query params (these will NOT be
   * urlencoded). If unspecified, there will be no query params.
   *
   * @param {Object} [data] The HTTP JSON body.
   *
   * @param {Object=} opts additional options
   *
   * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
   * timing out the request. If not specified, there is no timeout.
   *
   * @param {sting=} opts.prefix The full prefix to use e.g.
   * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
   *
   * @param {Object=} opts.headers map of additional request headers
   *
   * @return {Promise} Resolves to <code>{data: {Object},
   * headers: {Object}, code: {Number}}</code>.
   * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
   * object only.
   * @return {module:http-api.MatrixError} Rejects with an error if a problem
   * occurred. This includes network problems and Matrix-specific error JSON.
   */
  request: function (callback, method, path, queryParams, data, opts) {
    opts = opts || {};
    const prefix = opts.prefix !== undefined ? opts.prefix : this.opts.prefix;
    const fullUri = this.opts.baseUrl + prefix + path;
    return this.requestOtherUrl(callback, method, fullUri, queryParams, data, opts);
  },

  /**
   * Perform a request to an arbitrary URL.
   * @param {Function} callback Optional. The callback to invoke on
   * success/failure. See the promise return values for more information.
   * @param {string} method The HTTP method e.g. "GET".
   * @param {string} uri The HTTP URI
   *
   * @param {Object=} queryParams A dict of query params (these will NOT be
   * urlencoded). If unspecified, there will be no query params.
   *
   * @param {Object} [data] The HTTP JSON body.
   *
   * @param {Object=} opts additional options
   *
   * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before
   * timing out the request. If not specified, there is no timeout.
   *
   * @param {sting=} opts.prefix The full prefix to use e.g.
   * "/_matrix/client/v2_alpha". If not specified, uses this.opts.prefix.
   *
   * @param {Object=} opts.headers map of additional request headers
   *
   * @return {Promise} Resolves to <code>{data: {Object},
   * headers: {Object}, code: {Number}}</code>.
   * If <code>onlyData</code> is set, this will resolve to the <code>data</code>
   * object only.
   * @return {module:http-api.MatrixError} Rejects with an error if a problem
   * occurred. This includes network problems and Matrix-specific error JSON.
   */
  requestOtherUrl: function (callback, method, uri, queryParams, data, opts) {
    if (opts === undefined || opts === null) {
      opts = {};
    } else if (isFinite(opts)) {
      // opts used to be localTimeoutMs
      opts = {
        localTimeoutMs: opts
      };
    }

    return this._request(callback, method, uri, queryParams, data, opts);
  },

  /**
   * Form and return a homeserver request URL based on the given path
   * params and prefix.
   * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.
   * "/createRoom".
   * @param {Object} queryParams A dict of query params (these will NOT be
   * urlencoded).
   * @param {string} prefix The full prefix to use e.g.
   * "/_matrix/client/v2_alpha".
   * @return {string} URL
   */
  getUrl: function (path, queryParams, prefix) {
    let queryString = "";

    if (queryParams) {
      queryString = "?" + utils.encodeParams(queryParams);
    }

    return this.opts.baseUrl + prefix + path + queryString;
  },

  /**
   * @private
   *
   * @param {function} callback
   * @param {string} method
   * @param {string} uri
   * @param {object} queryParams
   * @param {object|string} data
   * @param {object=} opts
   *
   * @param {boolean} [opts.json =true] Json-encode data before sending, and
   *   decode response on receipt. (We will still json-decode error
   *   responses, even if this is false.)
   *
   * @param {object=} opts.headers  extra request headers
   *
   * @param {number=} opts.localTimeoutMs client-side timeout for the
   *    request. Default timeout if falsy.
   *
   * @param {function=} opts.bodyParser function to parse the body of the
   *    response before passing it to the promise and callback.
   *
   * @return {Promise} a promise which resolves to either the
   * response object (if this.opts.onlyData is truthy), or the parsed
   * body. Rejects
   */
  _request: function (callback, method, uri, queryParams, data, opts) {
    if (callback !== undefined && !utils.isFunction(callback)) {
      throw Error("Expected callback to be a function but got " + typeof callback);
    }

    opts = opts || {};
    const self = this;

    if (this.opts.extraParams) {
      queryParams = _objectSpread(_objectSpread({}, queryParams), this.opts.extraParams);
    }

    const headers = utils.extend({}, opts.headers || {});
    const json = opts.json === undefined ? true : opts.json;
    let bodyParser = opts.bodyParser; // we handle the json encoding/decoding here, because request and
    // browser-request make a mess of it. Specifically, they attempt to
    // json-decode plain-text error responses, which in turn means that the
    // actual error gets swallowed by a SyntaxError.

    if (json) {
      if (data) {
        data = JSON.stringify(data);
        headers['content-type'] = 'application/json';
      }

      if (!headers['accept']) {
        headers['accept'] = 'application/json';
      }

      if (bodyParser === undefined) {
        bodyParser = function (rawBody) {
          return JSON.parse(rawBody);
        };
      }
    }

    const defer = utils.defer();
    let timeoutId;
    let timedOut = false;
    let req;
    const localTimeoutMs = opts.localTimeoutMs || this.opts.localTimeoutMs;

    const resetTimeout = () => {
      if (localTimeoutMs) {
        if (timeoutId) {
          callbacks.clearTimeout(timeoutId);
        }

        timeoutId = callbacks.setTimeout(function () {
          timedOut = true;

          if (req && req.abort) {
            req.abort();
          }

          defer.reject(new MatrixError({
            error: "Locally timed out waiting for a response",
            errcode: "ORG.MATRIX.JSSDK_TIMEOUT",
            timeout: localTimeoutMs
          }));
        }, localTimeoutMs);
      }
    };

    resetTimeout();
    const reqPromise = defer.promise;

    try {
      req = this.opts.request({
        uri: uri,
        method: method,
        withCredentials: false,
        qs: queryParams,
        qsStringifyOptions: opts.qsStringifyOptions,
        useQuerystring: true,
        body: data,
        json: false,
        timeout: localTimeoutMs,
        headers: headers || {},
        _matrix_opts: this.opts
      }, function (err, response, body) {
        if (localTimeoutMs) {
          callbacks.clearTimeout(timeoutId);

          if (timedOut) {
            return; // already rejected promise
          }
        }

        const handlerFn = requestCallback(defer, callback, self.opts.onlyData, bodyParser);
        handlerFn(err, response, body);
      });

      if (req) {
        // This will only work in a browser, where opts.request is the
        // `browser-request` import. Currently `request` does not support progress
        // updates - see https://github.com/request/request/pull/2346.
        // `browser-request` returns an XHRHttpRequest which exposes `onprogress`
        if ('onprogress' in req) {
          req.onprogress = e => {
            // Prevent the timeout from rejecting the deferred promise if progress is
            // seen with the request
            resetTimeout();
          };
        } // FIXME: This is EVIL, but I can't think of a better way to expose
        // abort() operations on underlying HTTP requests :(


        if (req.abort) reqPromise.abort = req.abort.bind(req);
      }
    } catch (ex) {
      defer.reject(ex);

      if (callback) {
        callback(ex);
      }
    }

    return reqPromise;
  }
};
/*
 * Returns a callback that can be invoked by an HTTP request on completion,
 * that will either resolve or reject the given defer as well as invoke the
 * given userDefinedCallback (if any).
 *
 * HTTP errors are transformed into javascript errors and the deferred is rejected.
 *
 * If bodyParser is given, it is used to transform the body of the successful
 * responses before passing to the defer/callback.
 *
 * If onlyData is true, the defer/callback is invoked with the body of the
 * response, otherwise the result object (with `code` and `data` fields)
 *
 */

const requestCallback = function (defer, userDefinedCallback, onlyData, bodyParser) {
  userDefinedCallback = userDefinedCallback || function () {};

  return function (err, response, body) {
    if (err) {
      // the unit tests use matrix-mock-request, which throw the string "aborted" when aborting a request.
      // See https://github.com/matrix-org/matrix-mock-request/blob/3276d0263a561b5b8326b47bae720578a2c7473a/src/index.js#L48
      const aborted = err.name === "AbortError" || err === "aborted";

      if (!aborted && !(err instanceof MatrixError)) {
        // browser-request just throws normal Error objects,
        // not `TypeError`s like fetch does. So just assume any
        // error is due to the connection.
        err = new ConnectionError("request failed", err);
      }
    }

    if (!err) {
      try {
        if (response.statusCode >= 400) {
          err = parseErrorResponse(response, body);
        } else if (bodyParser) {
          body = bodyParser(body);
        }
      } catch (e) {
        err = new Error(`Error parsing server response: ${e}`);
      }
    }

    if (err) {
      defer.reject(err);
      userDefinedCallback(err);
    } else {
      const res = {
        code: response.statusCode,
        // XXX: why do we bother with this? it doesn't work for
        // XMLHttpRequest, so clearly we don't use it.
        headers: response.headers,
        data: body
      };
      defer.resolve(onlyData ? body : res);
      userDefinedCallback(null, onlyData ? body : res);
    }
  };
};
/**
 * Attempt to turn an HTTP error response into a Javascript Error.
 *
 * If it is a JSON response, we will parse it into a MatrixError. Otherwise
 * we return a generic Error.
 *
 * @param {XMLHttpRequest|http.IncomingMessage} response response object
 * @param {String} body raw body of the response
 * @returns {Error}
 */


function parseErrorResponse(response, body) {
  const httpStatus = response.statusCode;
  const contentType = getResponseContentType(response);
  let err;

  if (contentType) {
    if (contentType.type === 'application/json') {
      const jsonBody = typeof body === 'object' ? body : JSON.parse(body);
      err = new MatrixError(jsonBody);
    } else if (contentType.type === 'text/plain') {
      err = new Error(`Server returned ${httpStatus} error: ${body}`);
    }
  }

  if (!err) {
    err = new Error(`Server returned ${httpStatus} error`);
  }

  err.httpStatus = httpStatus;
  return err;
}
/**
 * extract the Content-Type header from the response object, and
 * parse it to a `{type, parameters}` object.
 *
 * returns null if no content-type header could be found.
 *
 * @param {XMLHttpRequest|http.IncomingMessage} response response object
 * @returns {{type: String, parameters: Object}?} parsed content-type header, or null if not found
 */


function getResponseContentType(response) {
  let contentType;

  if (response.getResponseHeader) {
    // XMLHttpRequest provides getResponseHeader
    contentType = response.getResponseHeader("Content-Type");
  } else if (response.headers) {
    // request provides http.IncomingMessage which has a message.headers map
    contentType = response.headers['content-type'] || null;
  }

  if (!contentType) {
    return null;
  }

  try {
    return (0, _contentType.parse)(contentType);
  } catch (e) {
    throw new Error(`Error parsing Content-Type '${contentType}': ${e}`);
  }
}
/**
 * Construct a Matrix error. This is a JavaScript Error with additional
 * information specific to the standard Matrix error response.
 * @constructor
 * @param {Object} errorJson The Matrix error JSON returned from the homeserver.
 * @prop {string} errcode The Matrix 'errcode' value, e.g. "M_FORBIDDEN".
 * @prop {string} name Same as MatrixError.errcode but with a default unknown string.
 * @prop {string} message The Matrix 'error' value, e.g. "Missing token."
 * @prop {Object} data The raw Matrix error JSON used to construct this object.
 * @prop {integer} httpStatus The numeric HTTP status code given
 */


class MatrixError extends Error {
  constructor(errorJson) {
    errorJson = errorJson || {};
    super(`MatrixError: ${errorJson.errcode}`);
    this.errcode = errorJson.errcode;
    this.name = errorJson.errcode || "Unknown error code";
    this.message = errorJson.error || "Unknown message";
    this.data = errorJson;
  }

}
/**
 * Construct a ConnectionError. This is a JavaScript Error indicating
 * that a request failed because of some error with the connection, either
 * CORS was not correctly configured on the server, the server didn't response,
 * the request timed out, or the internet connection on the client side went down.
 * @constructor
 */


exports.MatrixError = MatrixError;

class ConnectionError extends Error {
  constructor(message) {
    let cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    super(message + (cause ? `: ${cause.message}` : ""));
    this._cause = cause;
  }

  get name() {
    return "ConnectionError";
  }

  get cause() {
    return this._cause;
  }

}

exports.ConnectionError = ConnectionError;

class AbortError extends Error {
  constructor() {
    super("Operation aborted");
  }

  get name() {
    return "AbortError";
  }

}
/**
 * Retries a network operation run in a callback.
 * @param  {number}   maxAttempts maximum attempts to try
 * @param  {Function} callback    callback that returns a promise of the network operation. If rejected with ConnectionError, it will be retried by calling the callback again.
 * @return {any} the result of the network operation
 * @throws {ConnectionError} If after maxAttempts the callback still throws ConnectionError
 */


exports.AbortError = AbortError;

function retryNetworkOperation(_x, _x2) {
  return _retryNetworkOperation.apply(this, arguments);
}

function _retryNetworkOperation() {
  _retryNetworkOperation = _asyncToGenerator(function* (maxAttempts, callback) {
    let attempts = 0;
    let lastConnectionError = null;

    while (attempts < maxAttempts) {
      try {
        if (attempts > 0) {
          const timeout = 1000 * Math.pow(2, attempts);

          _logger.logger.log(`network operation failed ${attempts} times,` + ` retrying in ${timeout}ms...`);

          yield new Promise(r => setTimeout(r, timeout));
        }

        return yield callback();
      } catch (err) {
        if (err instanceof ConnectionError) {
          attempts += 1;
          lastConnectionError = err;
        } else {
          throw err;
        }
      }
    }

    throw lastConnectionError;
  });
  return _retryNetworkOperation.apply(this, arguments);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "1d2b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "1d80":
/***/ (function(module, exports) {

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "1da1":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _asyncToGenerator; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "1fb5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ 2:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "206d":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var Buffer = __webpack_require__("8707").Buffer

var checkParameters = __webpack_require__("7d2a")
var defaultEncoding = __webpack_require__("9f9d")
var sync = __webpack_require__("e07b")
var toBuffer = __webpack_require__("8be6")

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "2100":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");
var settle = __webpack_require__("e1d0");
var buildURL = __webpack_require__("ad9d");
var parseHeaders = __webpack_require__("daf5");
var isURLSameOrigin = __webpack_require__("5896");
var createError = __webpack_require__("232d");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__("b57f");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "21a6":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "2200":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("e2c5");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_VuePageTransition_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "232d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__("d164");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "2369":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("deb1");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("6ba75335", content, shadowRoot)
};

/***/ }),

/***/ "23cb":
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__("5926");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "23e7":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
var createNonEnumerableProperty = __webpack_require__("9112");
var defineBuiltIn = __webpack_require__("cb2d");
var defineGlobalProperty = __webpack_require__("6374");
var copyConstructorProperties = __webpack_require__("e893");
var isForced = __webpack_require__("94ca");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "241c":
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__("ca84");
var enumBugKeys = __webpack_require__("7839");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "2444":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__("c532");
var normalizeHeaderName = __webpack_require__("c8af");
var enhanceError = __webpack_require__("387f");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__("b50d");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__("b50d");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "246d":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("d97d");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("20947309", content, shadowRoot)
};

/***/ }),

/***/ "247a":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("c71b");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("781df766", content, shadowRoot)
};

/***/ }),

/***/ "24a6":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".card-content .chatGroupIcon img{width:100%!important}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "24fb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "2514":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isArrayish = __webpack_require__("b8fa");

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};


/***/ }),

/***/ "252c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export install */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ResizeObserver; });
function getInternetExplorerVersion() {
	var ua = window.navigator.userAgent;

	var msie = ua.indexOf('MSIE ');
	if (msie > 0) {
		// IE 10 or older => return version number
		return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
	}

	var trident = ua.indexOf('Trident/');
	if (trident > 0) {
		// IE 11 => return version number
		var rv = ua.indexOf('rv:');
		return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
	}

	var edge = ua.indexOf('Edge/');
	if (edge > 0) {
		// Edge (IE 12+) => return version number
		return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
	}

	// other browser
	return -1;
}

var isIE = void 0;

function initCompat() {
	if (!initCompat.init) {
		initCompat.init = true;
		isIE = getInternetExplorerVersion() !== -1;
	}
}

var ResizeObserver = { render: function render() {
		var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "resize-observer", attrs: { "tabindex": "-1" } });
	}, staticRenderFns: [], _scopeId: 'data-v-b329ee4c',
	name: 'resize-observer',

	methods: {
		compareAndNotify: function compareAndNotify() {
			if (this._w !== this.$el.offsetWidth || this._h !== this.$el.offsetHeight) {
				this._w = this.$el.offsetWidth;
				this._h = this.$el.offsetHeight;
				this.$emit('notify');
			}
		},
		addResizeHandlers: function addResizeHandlers() {
			this._resizeObject.contentDocument.defaultView.addEventListener('resize', this.compareAndNotify);
			this.compareAndNotify();
		},
		removeResizeHandlers: function removeResizeHandlers() {
			if (this._resizeObject && this._resizeObject.onload) {
				if (!isIE && this._resizeObject.contentDocument) {
					this._resizeObject.contentDocument.defaultView.removeEventListener('resize', this.compareAndNotify);
				}
				delete this._resizeObject.onload;
			}
		}
	},

	mounted: function mounted() {
		var _this = this;

		initCompat();
		this.$nextTick(function () {
			_this._w = _this.$el.offsetWidth;
			_this._h = _this.$el.offsetHeight;
		});
		var object = document.createElement('object');
		this._resizeObject = object;
		object.setAttribute('aria-hidden', 'true');
		object.setAttribute('tabindex', -1);
		object.onload = this.addResizeHandlers;
		object.type = 'text/html';
		if (isIE) {
			this.$el.appendChild(object);
		}
		object.data = 'about:blank';
		if (!isIE) {
			this.$el.appendChild(object);
		}
	},
	beforeDestroy: function beforeDestroy() {
		this.removeResizeHandlers();
	}
};

// Install the components
function install(Vue) {
	Vue.component('resize-observer', ResizeObserver);
	Vue.component('ResizeObserver', ResizeObserver);
}

// Plugin
var plugin = {
	// eslint-disable-next-line no-undef
	version: "0.4.5",
	install: install
};

// Auto-install
var GlobalVue = null;
if (typeof window !== 'undefined') {
	GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
	GlobalVue = global.Vue;
}
if (GlobalVue) {
	GlobalVue.use(plugin);
}


/* unused harmony default export */ var _unused_webpack_default_export = (plugin);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "2714":
/***/ (function(module, exports, __webpack_require__) {

var hasMap = typeof Map === 'function' && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === 'function' && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;

var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

function addNumericSeparator(num, str) {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

var inspectCustom = __webpack_require__(4).custom;
var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;

module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
    }

    if (typeof obj === 'string') {
        return inspectString(obj, opts);
    }
    if (typeof obj === 'number') {
        if (obj === 0) {
            return Infinity / obj > 0 ? '0' : '-0';
        }
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === 'bigint') {
        var bigIntStr = String(obj) + 'n';
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }

    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
    if (typeof depth === 'undefined') { depth = 0; }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
        return isArray(obj) ? '[Array]' : '[Object]';
    }

    var indent = getIndent(opts, depth);

    if (typeof seen === 'undefined') {
        seen = [];
    } else if (indexOf(seen, obj) >= 0) {
        return '[Circular]';
    }

    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, 'quoteStyle')) {
                newOpts.quoteStyle = opts.quoteStyle;
            }
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }

    if (typeof obj === 'function') {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = '<' + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
        }
        s += '>';
        if (obj.childNodes && obj.childNodes.length) { s += '...'; }
        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) { return '[]'; }
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) {
            return '[' + indentedJoin(xs, indent) + ']';
        }
        return '[ ' + $join.call(xs, ', ') + ' ]';
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if ('cause' in obj && !isEnumerable.call(obj, 'cause')) {
            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
        }
        if (parts.length === 0) { return '[' + String(obj) + ']'; }
        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
    }
    if (typeof obj === 'object' && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {
            return obj[inspectSymbol]();
        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
            return obj.inspect();
        }
    }
    if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function (value, key) {
            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
        });
        return collectionOf('Map', mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function (value) {
            setParts.push(inspect(value, obj));
        });
        return collectionOf('Set', setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
        return weakCollectionOf('WeakMap');
    }
    if (isWeakSet(obj)) {
        return weakCollectionOf('WeakSet');
    }
    if (isWeakRef(obj)) {
        return weakCollectionOf('WeakRef');
    }
    if (isNumber(obj)) {
        return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
        return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
        return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
        return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? '' : 'null prototype';
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';
        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
        if (ys.length === 0) { return tag + '{}'; }
        if (indent) {
            return tag + '{' + indentedJoin(ys, indent) + '}';
        }
        return tag + '{ ' + $join.call(ys, ', ') + ' }';
    }
    return String(obj);
};

function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
    return quoteChar + s + quoteChar;
}

function quote(s) {
    return $replace.call(String(s), /"/g, '&quot;');
}

function isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
function isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) {
        return obj && typeof obj === 'object' && obj instanceof Symbol;
    }
    if (typeof obj === 'symbol') {
        return true;
    }
    if (!obj || typeof obj !== 'object' || !symToString) {
        return false;
    }
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}

function isBigInt(obj) {
    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
        return false;
    }
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}

var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
function has(obj, key) {
    return hasOwn.call(obj, key);
}

function toStr(obj) {
    return objectToString.call(obj);
}

function nameOf(f) {
    if (f.name) { return f.name; }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) { return m[1]; }
    return null;
}

function indexOf(xs, x) {
    if (xs.indexOf) { return xs.indexOf(x); }
    for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) { return i; }
    }
    return -1;
}

function isMap(x) {
    if (!mapSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}

function isSet(x) {
    if (!setSize || !x || typeof x !== 'object') {
        return false;
    }
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== 'object') {
        return false;
    }
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}

function isElement(x) {
    if (!x || typeof x !== 'object') { return false; }
    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
        return true;
    }
    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
}

function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, 'single', opts);
}

function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: 'b',
        9: 't',
        10: 'n',
        12: 'f',
        13: 'r'
    }[n];
    if (x) { return '\\' + x; }
    return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
}

function markBoxed(str) {
    return 'Object(' + str + ')';
}

function weakCollectionOf(type) {
    return type + ' { ? }';
}

function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
    return type + ' (' + size + ') {' + joinedEntries + '}';
}

function singleLineValues(xs) {
    for (var i = 0; i < xs.length; i++) {
        if (indexOf(xs[i], '\n') >= 0) {
            return false;
        }
    }
    return true;
}

function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === '\t') {
        baseIndent = '\t';
    } else if (typeof opts.indent === 'number' && opts.indent > 0) {
        baseIndent = $join.call(Array(opts.indent + 1), ' ');
    } else {
        return null;
    }
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}

function indentedJoin(xs, indent) {
    if (xs.length === 0) { return ''; }
    var lineJoiner = '\n' + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
}

function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';
        }
    }
    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
            symMap['$' + syms[k]] = syms[k];
        }
    }

    for (var key in obj) { // eslint-disable-line no-restricted-syntax
        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
            continue; // eslint-disable-line no-restricted-syntax, no-continue
        } else if ($test.call(/[^\w$]/, key)) {
            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
        } else {
            xs.push(key + ': ' + inspect(obj[key], obj));
        }
    }
    if (typeof gOPS === 'function') {
        for (var j = 0; j < syms.length; j++) {
            if (isEnumerable.call(obj, syms[j])) {
                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
            }
        }
    }
    return xs;
}


/***/ }),

/***/ "2724":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("6beb");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("668ba20c", content, shadowRoot)
};

/***/ }),

/***/ "27bf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__("c9b8").codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__("b19a");

__webpack_require__("3fb5")(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ "2877":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "28c7":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("8d7d");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("08f900d1", content, shadowRoot)
};

/***/ }),

/***/ "2931":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".deletedMessage[data-v-659136c0]{font-size:.8em;text-align:center;opacity:.6}.event[data-v-659136c0]{opacity:0;transition:.3s}.event.readyToRender[data-v-659136c0]{opacity:1}.event .loading[data-v-659136c0]{width:100%;height:100%;text-align:center}.event .deletedMessage[data-v-659136c0],.event .loading[data-v-659136c0]{position:relative;left:0;top:0;padding:.5em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "2a7f":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".wrapper>div[data-v-0f8b05de]{padding:.5em;vertical-align:middle}.wrapper .icon[data-v-0f8b05de]{width:60px;text-align:center;background:rgb(var(--neutral-grad-0))}.wrapper .icon i[data-v-0f8b05de]{font-size:1.2em;opacity:.8}.wrapper .filecontent span[data-v-0f8b05de]{font-size:.8em}.wrapper .filecontent div[data-v-0f8b05de]{max-width:80%;text-overflow:ellipsis;overflow:hidden}.wrapper .filecontent .size[data-v-0f8b05de]{color:rgb(var(--color-txt-ac))}.wrapper .filecontent button.button[data-v-0f8b05de]{padding:.25em;margin-top:.5em}.wrapper .filecontent button.button.downloaded[data-v-0f8b05de]{background:rgb(var(--color-good));border-color:rgb(var(--color-good));color:rgb(var(--text-on-bg-ac-color))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "2aaa":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("faa1").EventEmitter;


/***/ }),

/***/ "2b60":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomMember = RoomMember;

var _events = __webpack_require__("faa1");

var _contentRepo = __webpack_require__("07df");

var utils = _interopRequireWildcard(__webpack_require__("3987"));
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/room-member
 */

/**
 * Construct a new room member.
 *
 * @constructor
 * @alias module:models/room-member
 *
 * @param {string} roomId The room ID of the member.
 * @param {string} userId The user ID of the member.
 * @prop {string} roomId The room ID for this member.
 * @prop {string} userId The user ID of this member.
 * @prop {boolean} typing True if the room member is currently typing.
 * @prop {string} name The human-readable name for this room member. This will be
 * disambiguated with a suffix of " (@user_id:matrix.org)" if another member shares the
 * same displayname.
 * @prop {string} rawDisplayName The ambiguous displayname of this room member.
 * @prop {Number} powerLevel The power level for this room member.
 * @prop {Number} powerLevelNorm The normalised power level (0-100) for this
 * room member.
 * @prop {User} user The User object for this room member, if one exists.
 * @prop {string} membership The membership state for this room member e.g. 'join'.
 * @prop {Object} events The events describing this RoomMember.
 * @prop {MatrixEvent} events.member The m.room.member event for this RoomMember.
 */


function RoomMember(roomId, userId) {
  this.roomId = roomId;
  this.userId = userId;
  this.typing = false;
  this.name = userId;
  this.rawDisplayName = userId;
  this.powerLevel = 0;
  this.powerLevelNorm = 0;
  this.user = null;
  this.membership = null;
  this.events = {
    member: null
  };
  this._isOutOfBand = false;

  this._updateModifiedTime();
}

utils.inherits(RoomMember, _events.EventEmitter);
/**
 * Mark the member as coming from a channel that is not sync
 */

RoomMember.prototype.markOutOfBand = function () {
  this._isOutOfBand = true;
};
/**
 * @return {bool} does the member come from a channel that is not sync?
 * This is used to store the member seperately
 * from the sync state so it available across browser sessions.
 */


RoomMember.prototype.isOutOfBand = function () {
  return this._isOutOfBand;
};
/**
 * Update this room member's membership event. May fire "RoomMember.name" if
 * this event updates this member's name.
 * @param {MatrixEvent} event The <code>m.room.member</code> event
 * @param {RoomState} roomState Optional. The room state to take into account
 * when calculating (e.g. for disambiguating users with the same name).
 * @fires module:client~MatrixClient#event:"RoomMember.name"
 * @fires module:client~MatrixClient#event:"RoomMember.membership"
 */


RoomMember.prototype.setMembershipEvent = function (event, roomState) {
  if (event.getType() !== "m.room.member") {
    return;
  }

  this._isOutOfBand = false;
  this.events.member = event;
  const oldMembership = this.membership;
  this.membership = event.getDirectionalContent().membership;
  const oldName = this.name;
  this.name = calculateDisplayName(this.userId, event.getDirectionalContent().displayname, roomState);
  this.rawDisplayName = event.getDirectionalContent().displayname || this.userId;

  if (oldMembership !== this.membership) {
    this._updateModifiedTime();

    this.emit("RoomMember.membership", event, this, oldMembership);
  }

  if (oldName !== this.name) {
    this._updateModifiedTime();

    this.emit("RoomMember.name", event, this, oldName);
  }
};
/**
 * Update this room member's power level event. May fire
 * "RoomMember.powerLevel" if this event updates this member's power levels.
 * @param {MatrixEvent} powerLevelEvent The <code>m.room.power_levels</code>
 * event
 * @fires module:client~MatrixClient#event:"RoomMember.powerLevel"
 */


RoomMember.prototype.setPowerLevelEvent = function (powerLevelEvent) {
  if (powerLevelEvent.getType() !== "m.room.power_levels") {
    return;
  }

  const evContent = powerLevelEvent.getDirectionalContent();
  let maxLevel = evContent.users_default || 0;
  utils.forEach(utils.values(evContent.users), function (lvl) {
    maxLevel = Math.max(maxLevel, lvl);
  });
  const oldPowerLevel = this.powerLevel;
  const oldPowerLevelNorm = this.powerLevelNorm;

  if (evContent.users && evContent.users[this.userId] !== undefined) {
    this.powerLevel = evContent.users[this.userId];
  } else if (evContent.users_default !== undefined) {
    this.powerLevel = evContent.users_default;
  } else {
    this.powerLevel = 0;
  }

  this.powerLevelNorm = 0;

  if (maxLevel > 0) {
    this.powerLevelNorm = this.powerLevel * 100 / maxLevel;
  } // emit for changes in powerLevelNorm as well (since the app will need to
  // redraw everyone's level if the max has changed)


  if (oldPowerLevel !== this.powerLevel || oldPowerLevelNorm !== this.powerLevelNorm) {
    this._updateModifiedTime();

    this.emit("RoomMember.powerLevel", powerLevelEvent, this);
  }
};
/**
 * Update this room member's typing event. May fire "RoomMember.typing" if
 * this event changes this member's typing state.
 * @param {MatrixEvent} event The typing event
 * @fires module:client~MatrixClient#event:"RoomMember.typing"
 */


RoomMember.prototype.setTypingEvent = function (event) {
  if (event.getType() !== "m.typing") {
    return;
  }

  const oldTyping = this.typing;
  this.typing = false;
  const typingList = event.getContent().user_ids;

  if (!utils.isArray(typingList)) {
    // malformed event :/ bail early. TODO: whine?
    return;
  }

  if (typingList.indexOf(this.userId) !== -1) {
    this.typing = true;
  }

  if (oldTyping !== this.typing) {
    this._updateModifiedTime();

    this.emit("RoomMember.typing", event, this);
  }
};
/**
 * Update the last modified time to the current time.
 */


RoomMember.prototype._updateModifiedTime = function () {
  this._modified = Date.now();
};
/**
 * Get the timestamp when this RoomMember was last updated. This timestamp is
 * updated when properties on this RoomMember are updated.
 * It is updated <i>before</i> firing events.
 * @return {number} The timestamp
 */


RoomMember.prototype.getLastModifiedTime = function () {
  return this._modified;
};

RoomMember.prototype.isKicked = function () {
  return this.membership === "leave" && this.events.member.getSender() !== this.events.member.getStateKey();
};
/**
 * If this member was invited with the is_direct flag set, return
 * the user that invited this member
 * @return {string} user id of the inviter
 */


RoomMember.prototype.getDMInviter = function () {
  // when not available because that room state hasn't been loaded in,
  // we don't really know, but more likely to not be a direct chat
  if (this.events.member) {
    // TODO: persist the is_direct flag on the member as more member events
    //       come in caused by displayName changes.
    // the is_direct flag is set on the invite member event.
    // This is copied on the prev_content section of the join member event
    // when the invite is accepted.
    const memberEvent = this.events.member;
    let memberContent = memberEvent.getContent();
    let inviteSender = memberEvent.getSender();

    if (memberContent.membership === "join") {
      memberContent = memberEvent.getPrevContent();
      inviteSender = memberEvent.getUnsigned().prev_sender;
    }

    if (memberContent.membership === "invite" && memberContent.is_direct) {
      return inviteSender;
    }
  }
};
/**
 * Get the avatar URL for a room member.
 * @param {string} baseUrl The base homeserver URL See
 * {@link module:client~MatrixClient#getHomeserverUrl}.
 * @param {Number} width The desired width of the thumbnail.
 * @param {Number} height The desired height of the thumbnail.
 * @param {string} resizeMethod The thumbnail resize method to use, either
 * "crop" or "scale".
 * @param {Boolean} allowDefault (optional) Passing false causes this method to
 * return null if the user has no avatar image. Otherwise, a default image URL
 * will be returned. Default: true. (Deprecated)
 * @param {Boolean} allowDirectLinks (optional) If true, the avatar URL will be
 * returned even if it is a direct hyperlink rather than a matrix content URL.
 * If false, any non-matrix content URLs will be ignored. Setting this option to
 * true will expose URLs that, if fetched, will leak information about the user
 * to anyone who they share a room with.
 * @return {?string} the avatar URL or null.
 */


RoomMember.prototype.getAvatarUrl = function (baseUrl, width, height, resizeMethod, allowDefault, allowDirectLinks) {
  if (allowDefault === undefined) {
    allowDefault = true;
  }

  const rawUrl = this.getMxcAvatarUrl();

  if (!rawUrl && !allowDefault) {
    return null;
  }

  const httpUrl = (0, _contentRepo.getHttpUriForMxc)(baseUrl, rawUrl, width, height, resizeMethod, allowDirectLinks);

  if (httpUrl) {
    return httpUrl;
  }

  return null;
};
/**
 * get the mxc avatar url, either from a state event, or from a lazily loaded member
 * @return {string} the mxc avatar url
 */


RoomMember.prototype.getMxcAvatarUrl = function () {
  if (this.events.member) {
    return this.events.member.getDirectionalContent().avatar_url;
  } else if (this.user) {
    return this.user.avatarUrl;
  }

  return null;
};

const MXID_PATTERN = /@.+:.+/;
const LTR_RTL_PATTERN = /[\u200E\u200F\u202A-\u202F]/;

function calculateDisplayName(selfUserId, displayName, roomState) {
  if (!displayName || displayName === selfUserId) {
    return selfUserId;
  } // First check if the displayname is something we consider truthy
  // after stripping it of zero width characters and padding spaces


  if (!utils.removeHiddenChars(displayName)) {
    return selfUserId;
  }

  if (!roomState) {
    return displayName;
  } // Next check if the name contains something that look like a mxid
  // If it does, it may be someone trying to impersonate someone else
  // Show full mxid in this case


  let disambiguate = MXID_PATTERN.test(displayName);

  if (!disambiguate) {
    // Also show mxid if the display name contains any LTR/RTL characters as these
    // make it very difficult for us to find similar *looking* display names
    // E.g "Mark" could be cloned by writing "kraM" but in RTL.
    disambiguate = LTR_RTL_PATTERN.test(displayName);
  }

  if (!disambiguate) {
    // Also show mxid if there are other people with the same or similar
    // displayname, after hidden character removal.
    const userIds = roomState.getUserIdsWithDisplayName(displayName);
    disambiguate = userIds.some(u => u !== selfUserId);
  }

  if (disambiguate) {
    return displayName + " (" + selfUserId + ")";
  }

  return displayName;
}
/**
 * Fires whenever any room member's name changes.
 * @event module:client~MatrixClient#"RoomMember.name"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomMember} member The member whose RoomMember.name changed.
 * @param {string?} oldName The previous name. Null if the member didn't have a
 *    name previously.
 * @example
 * matrixClient.on("RoomMember.name", function(event, member){
 *   var newName = member.name;
 * });
 */

/**
 * Fires whenever any room member's membership state changes.
 * @event module:client~MatrixClient#"RoomMember.membership"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomMember} member The member whose RoomMember.membership changed.
 * @param {string?} oldMembership The previous membership state. Null if it's a
 *    new member.
 * @example
 * matrixClient.on("RoomMember.membership", function(event, member, oldMembership){
 *   var newState = member.membership;
 * });
 */

/**
 * Fires whenever any room member's typing state changes.
 * @event module:client~MatrixClient#"RoomMember.typing"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomMember} member The member whose RoomMember.typing changed.
 * @example
 * matrixClient.on("RoomMember.typing", function(event, member){
 *   var isTyping = member.typing;
 * });
 */

/**
 * Fires whenever any room member's power level changes.
 * @event module:client~MatrixClient#"RoomMember.powerLevel"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomMember} member The member whose RoomMember.powerLevel changed.
 * @example
 * matrixClient.on("RoomMember.powerLevel", function(event, member){
 *   var newPowerLevel = member.powerLevel;
 *   var newNormPowerLevel = member.powerLevelNorm;
 * });
 */

/***/ }),

/***/ "2ba4":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("40d5");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "2d00":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var userAgent = __webpack_require__("342f");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "2d78":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncAccumulator = void 0;

var _logger = __webpack_require__("63c7");

var _utils = __webpack_require__("3987");
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. See {@link SyncAccumulator} for the public class.
 * @module sync-accumulator
 */

/**
 * The purpose of this class is to accumulate /sync responses such that a
 * complete "initial" JSON response can be returned which accurately represents
 * the sum total of the /sync responses accumulated to date. It only handles
 * room data: that is, everything under the "rooms" top-level key.
 *
 * This class is used when persisting room data so a complete /sync response can
 * be loaded from disk and incremental syncs can be performed on the server,
 * rather than asking the server to do an initial sync on startup.
 */


class SyncAccumulator {
  /**
   * @param {Object} opts
   * @param {Number=} opts.maxTimelineEntries The ideal maximum number of
   * timeline entries to keep in the sync response. This is best-effort, as
   * clients do not always have a back-pagination token for each event, so
   * it's possible there may be slightly *less* than this value. There will
   * never be more. This cannot be 0 or else it makes it impossible to scroll
   * back in a room. Default: 50.
   */
  constructor(opts) {
    opts = opts || {};
    opts.maxTimelineEntries = opts.maxTimelineEntries || 50;
    this.opts = opts;
    this.accountData = {//$event_type: Object
    };
    this.inviteRooms = {//$roomId: { ... sync 'invite' json data ... }
    };
    this.joinRooms = {//$roomId: {
      //    _currentState: { $event_type: { $state_key: json } },
      //    _timeline: [
      //       { event: $event, token: null|token },
      //       { event: $event, token: null|token },
      //       { event: $event, token: null|token },
      //       ...
      //    ],
      //    _summary: {
      //       m.heroes: [ $user_id ],
      //       m.joined_member_count: $count,
      //       m.invited_member_count: $count
      //    },
      //    _accountData: { $event_type: json },
      //    _unreadNotifications: { ... unread_notifications JSON ... },
      //    _readReceipts: { $user_id: { data: $json, eventId: $event_id }}
      //}
    }; // the /sync token which corresponds to the last time rooms were
    // accumulated. We remember this so that any caller can obtain a
    // coherent /sync response and know at what point they should be
    // streaming from without losing events.

    this.nextBatch = null; // { ('invite'|'join'|'leave'): $groupId: { ... sync 'group' data } }

    this.groups = {
      invite: {},
      join: {},
      leave: {}
    };
  }

  accumulate(syncResponse, fromDatabase) {
    this._accumulateRooms(syncResponse, fromDatabase);

    this._accumulateGroups(syncResponse);

    this._accumulateAccountData(syncResponse);

    this.nextBatch = syncResponse.next_batch;
  }

  _accumulateAccountData(syncResponse) {
    if (!syncResponse.account_data || !syncResponse.account_data.events) {
      return;
    } // Clobbers based on event type.


    syncResponse.account_data.events.forEach(e => {
      this.accountData[e.type] = e;
    });
  }
  /**
   * Accumulate incremental /sync room data.
   * @param {Object} syncResponse the complete /sync JSON
   * @param {boolean} fromDatabase True if the sync response is one saved to the database
   */


  _accumulateRooms(syncResponse, fromDatabase) {
    if (!syncResponse.rooms) {
      return;
    }

    if (syncResponse.rooms.invite) {
      Object.keys(syncResponse.rooms.invite).forEach(roomId => {
        this._accumulateRoom(roomId, "invite", syncResponse.rooms.invite[roomId], fromDatabase);
      });
    }

    if (syncResponse.rooms.join) {
      Object.keys(syncResponse.rooms.join).forEach(roomId => {
        this._accumulateRoom(roomId, "join", syncResponse.rooms.join[roomId], fromDatabase);
      });
    }

    if (syncResponse.rooms.leave) {
      Object.keys(syncResponse.rooms.leave).forEach(roomId => {
        this._accumulateRoom(roomId, "leave", syncResponse.rooms.leave[roomId], fromDatabase);
      });
    }
  }

  _accumulateRoom(roomId, category, data, fromDatabase) {
    // Valid /sync state transitions
    //       +--------+ <======+            1: Accept an invite
    //   +== | INVITE |        | (5)        2: Leave a room
    //   |   +--------+ =====+ |            3: Join a public room previously
    //   |(1)            (4) | |               left (handle as if new room)
    //   V         (2)       V |            4: Reject an invite
    // +------+ ========> +--------+         5: Invite to a room previously
    // | JOIN |    (3)    | LEAVE* |            left (handle as if new room)
    // +------+ <======== +--------+
    //
    // * equivalent to "no state"
    switch (category) {
      case "invite":
        // (5)
        this._accumulateInviteState(roomId, data);

        break;

      case "join":
        if (this.inviteRooms[roomId]) {
          // (1)
          // was previously invite, now join. We expect /sync to give
          // the entire state and timeline on 'join', so delete previous
          // invite state
          delete this.inviteRooms[roomId];
        } // (3)


        this._accumulateJoinState(roomId, data, fromDatabase);

        break;

      case "leave":
        if (this.inviteRooms[roomId]) {
          // (4)
          delete this.inviteRooms[roomId];
        } else {
          // (2)
          delete this.joinRooms[roomId];
        }

        break;

      default:
        _logger.logger.error("Unknown cateogory: ", category);

    }
  }

  _accumulateInviteState(roomId, data) {
    if (!data.invite_state || !data.invite_state.events) {
      // no new data
      return;
    }

    if (!this.inviteRooms[roomId]) {
      this.inviteRooms[roomId] = {
        invite_state: data.invite_state
      };
      return;
    } // accumulate extra keys for invite->invite transitions
    // clobber based on event type / state key
    // We expect invite_state to be small, so just loop over the events


    const currentData = this.inviteRooms[roomId];
    data.invite_state.events.forEach(e => {
      let hasAdded = false;

      for (let i = 0; i < currentData.invite_state.events.length; i++) {
        const current = currentData.invite_state.events[i];

        if (current.type === e.type && current.state_key == e.state_key) {
          currentData.invite_state.events[i] = e; // update

          hasAdded = true;
        }
      }

      if (!hasAdded) {
        currentData.invite_state.events.push(e);
      }
    });
  } // Accumulate timeline and state events in a room.


  _accumulateJoinState(roomId, data, fromDatabase) {
    // We expect this function to be called a lot (every /sync) so we want
    // this to be fast. /sync stores events in an array but we often want
    // to clobber based on type/state_key. Rather than convert arrays to
    // maps all the time, just keep private maps which contain
    // the actual current accumulated sync state, and array-ify it when
    // getJSON() is called.
    // State resolution:
    // The 'state' key is the delta from the previous sync (or start of time
    // if no token was supplied), to the START of the timeline. To obtain
    // the current state, we need to "roll forward" state by reading the
    // timeline. We want to store the current state so we can drop events
    // out the end of the timeline based on opts.maxTimelineEntries.
    //
    //      'state'     'timeline'     current state
    // |-------x<======================>x
    //          T   I   M   E
    //
    // When getJSON() is called, we 'roll back' the current state by the
    // number of entries in the timeline to work out what 'state' should be.
    // Back-pagination:
    // On an initial /sync, the server provides a back-pagination token for
    // the start of the timeline. When /sync deltas come down, they also
    // include back-pagination tokens for the start of the timeline. This
    // means not all events in the timeline have back-pagination tokens, as
    // it is only the ones at the START of the timeline which have them.
    // In order for us to have a valid timeline (and back-pagination token
    // to match), we need to make sure that when we remove old timeline
    // events, that we roll forward to an event which has a back-pagination
    // token. This means we can't keep a strict sliding-window based on
    // opts.maxTimelineEntries, and we may have a few less. We should never
    // have more though, provided that the /sync limit is less than or equal
    // to opts.maxTimelineEntries.
    if (!this.joinRooms[roomId]) {
      // Create truly empty objects so event types of 'hasOwnProperty' and co
      // don't cause this code to break.
      this.joinRooms[roomId] = {
        _currentState: Object.create(null),
        _timeline: [],
        _accountData: Object.create(null),
        _unreadNotifications: {},
        _summary: {},
        _readReceipts: {}
      };
    }

    const currentData = this.joinRooms[roomId];

    if (data.account_data && data.account_data.events) {
      // clobber based on type
      data.account_data.events.forEach(e => {
        currentData._accountData[e.type] = e;
      });
    } // these probably clobber, spec is unclear.


    if (data.unread_notifications) {
      currentData._unreadNotifications = data.unread_notifications;
    }

    if (data.summary) {
      const HEROES_KEY = "m.heroes";
      const INVITED_COUNT_KEY = "m.invited_member_count";
      const JOINED_COUNT_KEY = "m.joined_member_count";
      const acc = currentData._summary;
      const sum = data.summary;
      acc[HEROES_KEY] = sum[HEROES_KEY] || acc[HEROES_KEY];
      acc[JOINED_COUNT_KEY] = sum[JOINED_COUNT_KEY] || acc[JOINED_COUNT_KEY];
      acc[INVITED_COUNT_KEY] = sum[INVITED_COUNT_KEY] || acc[INVITED_COUNT_KEY];
    }

    if (data.ephemeral && data.ephemeral.events) {
      data.ephemeral.events.forEach(e => {
        // We purposefully do not persist m.typing events.
        // Technically you could refresh a browser before the timer on a
        // typing event is up, so it'll look like you aren't typing when
        // you really still are. However, the alternative is worse. If
        // we do persist typing events, it will look like people are
        // typing forever until someone really does start typing (which
        // will prompt Synapse to send down an actual m.typing event to
        // clobber the one we persisted).
        if (e.type !== "m.receipt" || !e.content) {
          // This means we'll drop unknown ephemeral events but that
          // seems okay.
          return;
        } // Handle m.receipt events. They clobber based on:
        //   (user_id, receipt_type)
        // but they are keyed in the event as:
        //   content:{ $event_id: { $receipt_type: { $user_id: {json} }}}
        // so store them in the former so we can accumulate receipt deltas
        // quickly and efficiently (we expect a lot of them). Fold the
        // receipt type into the key name since we only have 1 at the
        // moment (m.read) and nested JSON objects are slower and more
        // of a hassle to work with. We'll inflate this back out when
        // getJSON() is called.


        Object.keys(e.content).forEach(eventId => {
          if (!e.content[eventId]["m.read"]) {
            return;
          }

          Object.keys(e.content[eventId]["m.read"]).forEach(userId => {
            // clobber on user ID
            currentData._readReceipts[userId] = {
              data: e.content[eventId]["m.read"][userId],
              eventId: eventId
            };
          });
        });
      });
    } // if we got a limited sync, we need to remove all timeline entries or else
    // we will have gaps in the timeline.


    if (data.timeline && data.timeline.limited) {
      currentData._timeline = [];
    } // Work out the current state. The deltas need to be applied in the order:
    // - existing state which didn't come down /sync.
    // - State events under the 'state' key.
    // - State events in the 'timeline'.


    if (data.state && data.state.events) {
      data.state.events.forEach(e => {
        setState(currentData._currentState, e);
      });
    }

    if (data.timeline && data.timeline.events) {
      data.timeline.events.forEach((e, index) => {
        // this nops if 'e' isn't a state event
        setState(currentData._currentState, e); // append the event to the timeline. The back-pagination token
        // corresponds to the first event in the timeline

        let transformedEvent;

        if (!fromDatabase) {
          transformedEvent = Object.assign({}, e);

          if (transformedEvent.unsigned !== undefined) {
            transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);
          }

          const age = e.unsigned ? e.unsigned.age : e.age;
          if (age !== undefined) transformedEvent._localTs = Date.now() - age;
        } else {
          transformedEvent = e;
        }

        currentData._timeline.push({
          event: transformedEvent,
          token: index === 0 ? data.timeline.prev_batch : null
        });
      });
    } // attempt to prune the timeline by jumping between events which have
    // pagination tokens.


    if (currentData._timeline.length > this.opts.maxTimelineEntries) {
      const startIndex = currentData._timeline.length - this.opts.maxTimelineEntries;

      for (let i = startIndex; i < currentData._timeline.length; i++) {
        if (currentData._timeline[i].token) {
          // keep all events after this, including this one
          currentData._timeline = currentData._timeline.slice(i, currentData._timeline.length);
          break;
        }
      }
    }
  }
  /**
   * Accumulate incremental /sync group data.
   * @param {Object} syncResponse the complete /sync JSON
   */


  _accumulateGroups(syncResponse) {
    if (!syncResponse.groups) {
      return;
    }

    if (syncResponse.groups.invite) {
      Object.keys(syncResponse.groups.invite).forEach(groupId => {
        this._accumulateGroup(groupId, "invite", syncResponse.groups.invite[groupId]);
      });
    }

    if (syncResponse.groups.join) {
      Object.keys(syncResponse.groups.join).forEach(groupId => {
        this._accumulateGroup(groupId, "join", syncResponse.groups.join[groupId]);
      });
    }

    if (syncResponse.groups.leave) {
      Object.keys(syncResponse.groups.leave).forEach(groupId => {
        this._accumulateGroup(groupId, "leave", syncResponse.groups.leave[groupId]);
      });
    }
  }

  _accumulateGroup(groupId, category, data) {
    for (const cat of ['invite', 'join', 'leave']) {
      delete this.groups[cat][groupId];
    }

    this.groups[category][groupId] = data;
  }
  /**
   * Return everything under the 'rooms' key from a /sync response which
   * represents all room data that should be stored. This should be paired
   * with the sync token which represents the most recent /sync response
   * provided to accumulate().
   * @param {boolean} forDatabase True to generate a sync to be saved to storage
   * @return {Object} An object with a "nextBatch", "roomsData" and "accountData"
   * keys.
   * The "nextBatch" key is a string which represents at what point in the
   * /sync stream the accumulator reached. This token should be used when
   * restarting a /sync stream at startup. Failure to do so can lead to missing
   * events. The "roomsData" key is an Object which represents the entire
   * /sync response from the 'rooms' key onwards. The "accountData" key is
   * a list of raw events which represent global account data.
   */


  getJSON(forDatabase) {
    const data = {
      join: {},
      invite: {},
      // always empty. This is set by /sync when a room was previously
      // in 'invite' or 'join'. On fresh startup, the client won't know
      // about any previous room being in 'invite' or 'join' so we can
      // just omit mentioning it at all, even if it has previously come
      // down /sync.
      // The notable exception is when a client is kicked or banned:
      // we may want to hold onto that room so the client can clearly see
      // why their room has disappeared. We don't persist it though because
      // it is unclear *when* we can safely remove the room from the DB.
      // Instead, we assume that if you're loading from the DB, you've
      // refreshed the page, which means you've seen the kick/ban already.
      leave: {}
    };
    Object.keys(this.inviteRooms).forEach(roomId => {
      data.invite[roomId] = this.inviteRooms[roomId];
    });
    Object.keys(this.joinRooms).forEach(roomId => {
      const roomData = this.joinRooms[roomId];
      const roomJson = {
        ephemeral: {
          events: []
        },
        account_data: {
          events: []
        },
        state: {
          events: []
        },
        timeline: {
          events: [],
          prev_batch: null
        },
        unread_notifications: roomData._unreadNotifications,
        summary: roomData._summary
      }; // Add account data

      Object.keys(roomData._accountData).forEach(evType => {
        roomJson.account_data.events.push(roomData._accountData[evType]);
      }); // Add receipt data

      const receiptEvent = {
        type: "m.receipt",
        room_id: roomId,
        content: {// $event_id: { "m.read": { $user_id: $json } }
        }
      };
      Object.keys(roomData._readReceipts).forEach(userId => {
        const receiptData = roomData._readReceipts[userId];

        if (!receiptEvent.content[receiptData.eventId]) {
          receiptEvent.content[receiptData.eventId] = {
            "m.read": {}
          };
        }

        receiptEvent.content[receiptData.eventId]["m.read"][userId] = receiptData.data;
      }); // add only if we have some receipt data

      if (Object.keys(receiptEvent.content).length > 0) {
        roomJson.ephemeral.events.push(receiptEvent);
      } // Add timeline data


      roomData._timeline.forEach(msgData => {
        if (!roomJson.timeline.prev_batch) {
          // the first event we add to the timeline MUST match up to
          // the prev_batch token.
          if (!msgData.token) {
            return; // this shouldn't happen as we prune constantly.
          }

          roomJson.timeline.prev_batch = msgData.token;
        }

        let transformedEvent;

        if (!forDatabase && msgData.event._localTs) {
          // This means we have to copy each event so we can fix it up to
          // set a correct 'age' parameter whilst keeping the local timestamp
          // on our stored event. If this turns out to be a bottleneck, it could
          // be optimised either by doing this in the main process after the data
          // has been structured-cloned to go between the worker & main process,
          // or special-casing data from saved syncs to read the local timstamp
          // directly rather than turning it into age to then immediately be
          // transformed back again into a local timestamp.
          transformedEvent = Object.assign({}, msgData.event);

          if (transformedEvent.unsigned !== undefined) {
            transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);
          }

          delete transformedEvent._localTs;
          transformedEvent.unsigned = transformedEvent.unsigned || {};
          transformedEvent.unsigned.age = Date.now() - msgData.event._localTs;
        } else {
          transformedEvent = msgData.event;
        }

        roomJson.timeline.events.push(transformedEvent);
      }); // Add state data: roll back current state to the start of timeline,
      // by "reverse clobbering" from the end of the timeline to the start.
      // Convert maps back into arrays.


      const rollBackState = Object.create(null);

      for (let i = roomJson.timeline.events.length - 1; i >= 0; i--) {
        const timelineEvent = roomJson.timeline.events[i];

        if (timelineEvent.state_key === null || timelineEvent.state_key === undefined) {
          continue; // not a state event
        } // since we're going back in time, we need to use the previous
        // state value else we'll break causality. We don't have the
        // complete previous state event, so we need to create one.


        const prevStateEvent = (0, _utils.deepCopy)(timelineEvent);

        if (prevStateEvent.unsigned) {
          if (prevStateEvent.unsigned.prev_content) {
            prevStateEvent.content = prevStateEvent.unsigned.prev_content;
          }

          if (prevStateEvent.unsigned.prev_sender) {
            prevStateEvent.sender = prevStateEvent.unsigned.prev_sender;
          }
        }

        setState(rollBackState, prevStateEvent);
      }

      Object.keys(roomData._currentState).forEach(evType => {
        Object.keys(roomData._currentState[evType]).forEach(stateKey => {
          let ev = roomData._currentState[evType][stateKey];

          if (rollBackState[evType] && rollBackState[evType][stateKey]) {
            // use the reverse clobbered event instead.
            ev = rollBackState[evType][stateKey];
          }

          roomJson.state.events.push(ev);
        });
      });
      data.join[roomId] = roomJson;
    }); // Add account data

    const accData = [];
    Object.keys(this.accountData).forEach(evType => {
      accData.push(this.accountData[evType]);
    });
    return {
      nextBatch: this.nextBatch,
      roomsData: data,
      groupsData: this.groups,
      accountData: accData
    };
  }

  getNextBatchToken() {
    return this.nextBatch;
  }

}

exports.SyncAccumulator = SyncAccumulator;

function setState(eventMap, event) {
  if (event.state_key === null || event.state_key === undefined || !event.type) {
    return;
  }

  if (!eventMap[event.type]) {
    eventMap[event.type] = Object.create(null);
  }

  eventMap[event.type][event.state_key] = event;
}

/***/ }),

/***/ "2d83":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__("387f");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "2db5":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./cmn.json": "96ee",
	"./de.json": "6ce2",
	"./en.json": "edd4",
	"./es.json": "a306",
	"./fr.json": "f693",
	"./it.json": "0825",
	"./kr.json": "c1af",
	"./ru.json": "7704"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "2db5";

/***/ }),

/***/ "2de2":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("f922");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("4bdc51b0", content, shadowRoot)
};

/***/ }),

/***/ "2e4b":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("69d0");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("53ab5eb3", content, shadowRoot)
};

/***/ }),

/***/ "2e67":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "2e6a":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".userpic[data-v-5034d1e2]{width:100%;border-radius:50%;background:rgb(var(--neutral-grad-1));line-height:44px;text-align:center;font-size:.8em;color:rgb(var(--neutral-grad-2));position:relative}.userpic[data-v-5034d1e2] .bgimage{width:100%;height:100%;border-radius:50%}.userpic .userpicSquareWrapper[data-v-5034d1e2]{padding-top:100%;position:relative}.userpic .userpicSquareInnerWrapper[data-v-5034d1e2]{position:absolute;left:0;right:0;top:0;bottom:0}.icon[data-v-5034d1e2]{position:absolute;right:70%;top:70%;font-size:1em;width:20px;height:20px;line-height:20px;background:transparent;border-radius:20px;color:rgb(var(--color-txt-gray));opacity:.8;z-index:3}.icon.active[data-v-5034d1e2]{color:rgb(var(--color-txt-ac))}.charAvatar[data-v-5034d1e2]{text-transform:uppercase}.charAvatar[data-v-5034d1e2],.statusIcon[data-v-5034d1e2]{position:absolute;left:0;right:0;top:0;bottom:0;display:flex;align-items:center;text-align:center;z-index:2;font-size:1.5em;opacity:.7}.charAvatar i[data-v-5034d1e2],.charAvatar span[data-v-5034d1e2],.statusIcon i[data-v-5034d1e2],.statusIcon span[data-v-5034d1e2]{flex-grow:1;color:rgb(var(--neutral-grad-2))}.invite[data-v-5034d1e2]:after{content:\"\";position:absolute;left:0;right:0;top:0;bottom:0;background:rgba(var(--color-txt-ac-1),.3);border-radius:50%}.invite i[data-v-5034d1e2]{display:flex;height:100%;justify-content:center;align-items:center}.ban[data-v-5034d1e2]:after,.blocked[data-v-5034d1e2]:after{content:\"\";position:absolute;left:0;right:0;top:0;bottom:0;background:rgb(var(--neutral-grad-2))!important;opacity:.7;border-radius:50%}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "2eac":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("2a7f");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("6f78709c", content, shadowRoot)
};

/***/ }),

/***/ "2f62":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export Store */
/* unused harmony export createLogger */
/* unused harmony export createNamespacedHelpers */
/* unused harmony export install */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return mapActions; });
/* unused harmony export mapGetters */
/* unused harmony export mapMutations */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return mapState; });
/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */
function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, { prepend: true });

  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, { prepend: true });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
function find (list, f) {
  return list.filter(f)[0]
}

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */
function deepCopy (obj, cache) {
  if ( cache === void 0 ) cache = [];

  // just return if obj is immutable value
  if (obj === null || typeof obj !== 'object') {
    return obj
  }

  // if obj is hit, it is in circular structure
  var hit = find(cache, function (c) { return c.original === obj; });
  if (hit) {
    return hit.copy
  }

  var copy = Array.isArray(obj) ? [] : {};
  // put the copy into cache at first
  // because we want to refer it in recursive deepCopy
  cache.push({
    original: obj,
    copy: copy
  });

  Object.keys(obj).forEach(function (key) {
    copy[key] = deepCopy(obj[key], cache);
  });

  return copy
}

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.hasChild = function hasChild (key) {
  return key in this._children
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if ((false)) {}

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  var child = parent.getChild(key);

  if (!child) {
    if ((false)) {}
    return
  }

  if (!child.runtime) {
    return
  }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (parent) {
    return parent.hasChild(key)
  }

  return false
};

function update (path, targetModule, newModule) {
  if ((false)) {}

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ((false)) {}
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ((false)) {}

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if ((false)) {}
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if ((false)) {}
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });

  this._subscribers
    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    false
  ) {}
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if ((false)) {}
    return
  }

  try {
    this._actionSubscribers
      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if ((false)) {}
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.after; })
          .forEach(function (sub) { return sub.after(action, this$1.state); });
      } catch (e) {
        if ((false)) {}
      }
      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.error; })
          .forEach(function (sub) { return sub.error(action, this$1.state, error); });
      } catch (e) {
        if ((false)) {}
      }
      reject(error);
    });
  })
};

Store.prototype.subscribe = function subscribe (fn, options) {
  return genericSubscribe(fn, this._subscribers, options)
};

Store.prototype.subscribeAction = function subscribeAction (fn, options) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if ((false)) {}
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if ((false)) {}

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if ((false)) {}

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hasModule = function hasModule (path) {
  if (typeof path === 'string') { path = [path]; }

  if ((false)) {}

  return this._modules.isRegistered(path)
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend
      ? subs.unshift(fn)
      : subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && ("production" !== 'production')) {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if ((false)) {}
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (false) {}
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (false) {}
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ((false)) {}
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if ((false)) {}
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.reduce(function (state, key) { return state[key]; }, state)
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ((false)) {}

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if ((false)) {}
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if (false) {}
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if (false) {}
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if (false) {}
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (false) {}
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if (false) {}
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (false) {}
  return module
}

// Credits: borrowed code from fcomb/redux-logger

function createLogger (ref) {
  if ( ref === void 0 ) ref = {};
  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;
  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };
  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };
  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };
  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };
  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };
  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;
  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;
  var logger = ref.logger; if ( logger === void 0 ) logger = console;

  return function (store) {
    var prevState = deepCopy(store.state);

    if (typeof logger === 'undefined') {
      return
    }

    if (logMutations) {
      store.subscribe(function (mutation, state) {
        var nextState = deepCopy(state);

        if (filter(mutation, prevState, nextState)) {
          var formattedTime = getFormattedTime();
          var formattedMutation = mutationTransformer(mutation);
          var message = "mutation " + (mutation.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
          endMessage(logger);
        }

        prevState = nextState;
      });
    }

    if (logActions) {
      store.subscribeAction(function (action, state) {
        if (actionFilter(action, state)) {
          var formattedTime = getFormattedTime();
          var formattedAction = actionTransformer(action);
          var message = "action " + (action.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
          endMessage(logger);
        }
      });
    }
  }
}

function startMessage (logger, message, collapsed) {
  var startMessage = collapsed
    ? logger.groupCollapsed
    : logger.group;

  // render
  try {
    startMessage.call(logger, message);
  } catch (e) {
    logger.log(message);
  }
}

function endMessage (logger) {
  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— log end ——');
  }
}

function getFormattedTime () {
  var time = new Date();
  return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))
}

function repeat (str, times) {
  return (new Array(times + 1)).join(str)
}

function pad (num, maxLength) {
  return repeat('0', maxLength - num.toString().length) + num
}

var index = {
  Store: Store,
  install: install,
  version: '3.6.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers,
  createLogger: createLogger
};

/* harmony default export */ __webpack_exports__["a"] = (index);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ 3:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "306e":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("5b2d");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("ef92c6aa", content, shadowRoot)
};

/***/ }),

/***/ "306eb":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".referenceTop[data-v-c8f458dc]{margin-left:.25em;margin-right:.25em;border-radius:10px;border-bottom-left-radius:0;overflow:hidden;margin-bottom:.5em}.referenceTop.my[data-v-c8f458dc]{border-bottom-right-radius:0;border-bottom-left-radius:10px}.actionsWrapper[data-v-c8f458dc]{opacity:1}.actionsWrapper i.fa-check-circle[data-v-c8f458dc]{color:rgb(var(--color-txt-ac));opacity:1!important}.actionsWrapper .mnwrapper[data-v-c8f458dc]{opacity:0;transition:.3s}.actionsWrapper .multiSelect[data-v-c8f458dc]{position:absolute;top:50%;transform:translateY(-50%);left:0;padding:.5em;width:100%;height:100%;display:flex;flex-direction:column;justify-content:center}.actionsWrapper .multiSelect:hover i[data-v-c8f458dc]{opacity:1}@media (pointer:fine){.messageRow:hover .actionsWrapper .mnwrapper[data-v-c8f458dc]{opacity:1}}.burn.big[data-v-c8f458dc]{color:rgb(var(--color-bad))}.burn.medium[data-v-c8f458dc]{opacity:.8}.showImage[data-v-c8f458dc]{width:100%;position:relative;overflow:hidden}.showImage .abswrapper[data-v-c8f458dc]{position:absolute;left:0;top:0;bottom:0;right:0;display:flex;text-align:center;align-items:center;justify-content:center}.preloaderImage[data-v-c8f458dc]{padding-bottom:100px;border-radius:10px;background:rgba(var(--neutral-grad-0),.5);width:100%;position:relative}.preloaderImage .abswrapper[data-v-c8f458dc]{position:absolute;left:0;top:0;bottom:0;right:0;display:flex;text-align:center;align-items:center;justify-content:center}.preloaderImage .abswrapper>div[data-v-c8f458dc]{opacity:.2}.statusWrapper[data-v-c8f458dc]{padding:.5em;margin-top:.5em;border-top:.5em solid rgb(var(--neutral-grad-0))}.statusWrapper .my[data-v-c8f458dc]{font-size:.7em;opacity:.5;text-align:center}.messageRow[data-v-c8f458dc]{display:flex;align-items:flex-end;padding-left:.25em;min-height:34px}.messageRow.aligncenter[data-v-c8f458dc]{align-items:center}.messageRow.my[data-v-c8f458dc]{padding-left:0;padding-right:.25em}.messageRow.my .messageImg .imgMsg .showImage .abswrapper[data-v-c8f458dc]{border-radius:1em;border-top-right-radius:0;border-top-left-radius:1em}.messageRow .maxcontent[data-v-c8f458dc]{max-width:82%}.messageRow .maxcontent.my[data-v-c8f458dc]{max-width:87%}.messageRow.allscreen[data-v-c8f458dc]{flex-wrap:wrap}.messageRow.allscreen .userpic[data-v-c8f458dc]{position:relative}.messageRow.allscreen .userpic[data-v-c8f458dc]:after{border-radius:50%;content:\"\";position:absolute;left:-5px;right:-5px;top:-5px;bottom:-5px;border:5px solid rgb(var(--neutral-grad-0));z-index:1;box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}.messageRow .badenctyptedText .decryptagain[data-v-c8f458dc]{font-size:.8em}.messageRow .metaMsg[data-v-c8f458dc]{width:100%}.messageRow .badencrypted[data-v-c8f458dc]{position:absolute;background:rgb(var(--background-main));left:0;right:0;top:0;bottom:0;padding:.5em}.messageRow .encryptedDataIcon[data-v-c8f458dc]{position:absolute;color:rgb(var(--text-on-bg-ac-color));opacity:.3;padding:.25em .5em;text-shadow:0 0 2px rgba(var(--color-shadow-base),.714),0 0 3px rgba(var(--color-shadow-base),.519);left:0;top:0;z-index:1}.messageRow .encryptedDataIcon i[data-v-c8f458dc]{font-size:.7em}.messageRow .filePreview .encryptedDataIcon[data-v-c8f458dc]{color:rgb(var(--neutral-grad-2));text-shadow:none;right:0;left:auto}.messageRow .messageAudio[data-v-c8f458dc]{margin-left:.5em;height:50px}.messageRow .messageImg[data-v-c8f458dc]{width:85%;position:relative;margin-top:.125em}.messageRow .messageImg .img[data-v-c8f458dc]{display:block;border-radius:.5em;position:relative;max-width:100%}.messageRow .messageImg .loadingImg[data-v-c8f458dc]{display:flex;align-items:center;justify-content:center;border-radius:.5em;position:relative;max-width:300px;height:250px}.messageRow .messageImg .loadingImg .imgPreview[data-v-c8f458dc]{border-radius:.5em;position:relative;max-width:100%;height:100%;opacity:.6}.messageRow .messageImg .loadingImg .clipLoader[data-v-c8f458dc]{position:absolute;z-index:9999;left:50%;right:0;top:50%;bottom:0;transform:translate(-50,50);display:flex;align-items:center;justify-content:center}.messageRow .messageImg .imgMsg .showImage[data-v-c8f458dc]{display:flex}.messageRow .messageImg .imgMsg img[data-v-c8f458dc]{max-width:100%;-o-object-fit:cover;object-fit:cover;display:block}.messageRow .messageImg .imgMsg .abswrapper[data-v-c8f458dc]{border-radius:1em;border-top-left-radius:0;overflow:hidden;background:rgb(var(--neutral-grad-0))}.messageRow .messageImg .metaLink[data-v-c8f458dc]{background:#000}.messageRow .messageImg .metaLink .metaMessageLink .metaTitle[data-v-c8f458dc]{font-weight:700;font-size:.9em}.messageRow .messageImg .metaLink .metaMessageLink .metaDescription[data-v-c8f458dc]{margin:.5em 0;font-size:.8em}.messageRow .messageImg .metaLink .metaMessageLink .metaImgWrapper[data-v-c8f458dc]{display:block;max-width:300px;-o-object-fit:cover;object-fit:cover}.messageRow .messageImg .metaLink .metaMessageLink .metaImgWrapper img[data-v-c8f458dc]{display:block;width:100%;height:100%}.messageRow .filePreview[data-v-c8f458dc]{width:90%;border:1px solid rgb(var(--neutral-grad-1));overflow:hidden;border-radius:10px;position:relative;margin-top:.5em;height:100px}.messageRow .filePreview .table[data-v-c8f458dc]{height:100%}.messageRow .linkPreview[data-v-c8f458dc]{width:100%}.messageRow .messagePreview[data-v-c8f458dc]{width:100%;overflow:hidden;text-overflow:ellipsis}.messageRow .messagePreview span[data-v-c8f458dc]{word-break:break-all;white-space:normal}.messageRow .fromimagesfiles[data-v-c8f458dc]{order:5;padding:.5em .25em;padding-right:.5em}.messageRow .fromimagesfiles .fromCaption[data-v-c8f458dc]{font-size:.8em}.messageRow .actionsWrapper[data-v-c8f458dc]{order:4;padding-left:.5em;padding-right:1.25em;cursor:pointer;text-align:right;margin-left:auto;display:flex;align-items:center}.messageRow .actionsWrapper i[data-v-c8f458dc]{opacity:.3;transition:.4s}.messageRow .actionsWrapper i.fa-ellipsis-h[data-v-c8f458dc]{font-size:.7em}.messageRow .actionsWrapper i[data-v-c8f458dc]:hover{opacity:1;transition:.4s}.messageRow .statusWrapper[data-v-c8f458dc]{order:5;padding:.5em .25em;opacity:.6}.messageRow .statusWrapper div[data-v-c8f458dc],.messageRow .statusWrapper span[data-v-c8f458dc]{font-size:.7em}.messageRow .sendername[data-v-c8f458dc]{order:3;opacity:.6;overflow:hidden;font-size:.7em}.messageRow .timeWrapper[data-v-c8f458dc]{text-align:left;order:2;padding:0 .25em;line-height:33px;opacity:.6;flex-grow:1}.messageRow .timeWrapper span[data-v-c8f458dc]{white-space:nowrap;font-size:.7em}.messageRow .showreference[data-v-c8f458dc]{cursor:pointer}.messageRow.referenceshowed .messageText[data-v-c8f458dc]{background:rgba(var(--neutral-grad-1),.8)!important;color:rgb(var(--color-txt-gray))!important}.messageRow.referenceshowed .reference[data-v-c8f458dc]{padding-bottom:0!important}.messageRow.referenceshowed .referenceCaption button[data-v-c8f458dc]{width:100%}.messageRow .messageText[data-v-c8f458dc]{margin-left:.25em;background:rgba(var(--neutral-grad-1),.8);color:rgb(var(--text-color));padding:.5em .75em;padding-top:.5em;border-radius:1em;border-bottom-left-radius:0;font-weight:400;white-space:normal;display:flex;flex-direction:column-reverse}.messageRow .messageText .msgtext[data-v-c8f458dc]{text-align:left;white-space:pre-wrap}.messageRow .messageText .reference[data-v-c8f458dc]{height:32px}.messageRow .messageText .from[data-v-c8f458dc],.messageRow .messageText .reference[data-v-c8f458dc]{opacity:.8;border-bottom:1px solid rgb(var(--text-on-bg-ac-color));padding:.5em 0;padding-top:0;margin-bottom:.5em;display:flex}.messageRow .messageText .from .event[data-v-c8f458dc],.messageRow .messageText .reference .event[data-v-c8f458dc]{max-height:38px;text-align:left}.messageRow .messageText .from i[data-v-c8f458dc],.messageRow .messageText .reference i[data-v-c8f458dc]{width:30px;text-align:center;font-size:.8em}.messageRow .messageText .from .referenceCaption[data-v-c8f458dc],.messageRow .messageText .reference .referenceCaption[data-v-c8f458dc]{min-width:28px}.messageRow .messageText .from .fromCaption[data-v-c8f458dc],.messageRow .messageText .from .referenceCaption[data-v-c8f458dc],.messageRow .messageText .reference .fromCaption[data-v-c8f458dc],.messageRow .messageText .reference .referenceCaption[data-v-c8f458dc]{font-size:.8em}.messageRow .messageText .from .sendername[data-v-c8f458dc],.messageRow .messageText .reference .sendername[data-v-c8f458dc]{white-space:nowrap}.messageRow .messageText .from[data-v-c8f458dc] .messagePreview,.messageRow .messageText .reference[data-v-c8f458dc] .messagePreview{font-size:.9em;height:22px}.messageRow .messageText .from[data-v-c8f458dc] .messagePreview .previewMessage,.messageRow .messageText .reference[data-v-c8f458dc] .messagePreview .previewMessage{white-space:nowrap}.messageRow .messageText .edited[data-v-c8f458dc]{font-size:.7em;opacity:.5;text-align:right}.messageRow .messageText div[data-v-c8f458dc]{overflow:hidden;text-overflow:ellipsis}.messageRow .badenctyptedText[data-v-c8f458dc]{margin-left:.5em;color:rgb(var(--text-on-bg-ac-color));padding:.5em .75em;border-radius:1em;background:rgb(var(--neutral-grad-3));word-break:break-all;white-space:normal}.messageRow .badenctyptedText span[data-v-c8f458dc]{font-size:.9em}.messageRow .iconWrapper[data-v-c8f458dc]{width:33px;min-width:33px}.messageRow .withsendername[data-v-c8f458dc]{position:relative}.messageRow .withsendername .sendername[data-v-c8f458dc]{position:absolute;top:100%;margin-top:-5px;left:20px;color:rgb(var(--neutral-grad-3))}.messageRow .withsendername .sendername span[data-v-c8f458dc]{font-size:.7em}.messageRow[my=true][data-v-c8f458dc]{justify-content:flex-end;flex-wrap:wrap}.messageRow[my=true] .iconWrapper[data-v-c8f458dc]{margin-left:.5em;order:1;align-self:flex-start}.messageRow[my=true] .fromimagesfiles[data-v-c8f458dc]{order:-5}.messageRow[my=true] .actionsWrapper[data-v-c8f458dc]{text-align:left;margin-right:auto;margin-left:0;padding-left:.75em;padding-right:.25em;order:-4}.messageRow[my=true] .statusWrapper[data-v-c8f458dc]{order:-3}.messageRow[my=true] .timeWrapper[data-v-c8f458dc]{order:-2;text-align:right}.messageRow[my=true] .messageText[data-v-c8f458dc]{background:rgb(var(--color-bg-ac-bright));color:rgb(var(--text-on-bg-ac-color));text-align:right;border-radius:1em;border-bottom-left-radius:1em;border-top-right-radius:0}.messageRow[my=true] .messageAudio[data-v-c8f458dc]{margin-left:0}.messageRow[my=true] .messageAudio .voiceMessage[data-v-c8f458dc]{justify-content:flex-end}.messageRow.urlpreview[data-v-c8f458dc]{background:rgb(var(--background-total-theme));padding:.5em;padding-left:.25em;padding-bottom:1em}.messageRow.urlpreview .actionsWrapper[data-v-c8f458dc]{padding-right:.5em;padding-left:.5em}.messageRow.allscreen .filePreview[data-v-c8f458dc],.messageRow.allscreen .linkPreview[data-v-c8f458dc],.messageRow.allscreen .messageImg[data-v-c8f458dc],.messageRow.allscreen .metaMsg[data-v-c8f458dc]{order:4;padding-left:.125em}.messageRow.allscreen[my=true] .filePreview[data-v-c8f458dc],.messageRow.allscreen[my=true] .linkPreview[data-v-c8f458dc],.messageRow.allscreen[my=true] .messageImg[data-v-c8f458dc],.messageRow.allscreen[my=true] .metaMsg[data-v-c8f458dc]{order:6}.messageRow.not-preview[data-v-c8f458dc]{align-items:center;justify-content:center;color:rgb(var(--neutral-grad-3));text-align:center;flex-direction:column-reverse}.messageRow.not-preview .messageNoticeWithLink[data-v-c8f458dc]{color:#004680}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "3094":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/icon.vue?vue&type=template&id=332740e2&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"chatIcon",class:{ unknowngroupusers: _vm.unknowngroupusers }},[(_vm.groupAvatar)?_c('div',{staticClass:"chatGroupIcon"},[_c('img',{attrs:{"src":_vm.groupAvatar,"alt":""}})]):_vm._e(),_c('userspic',{key:_vm.allnotifications,class:{ opacity: _vm.groupAvatar },attrs:{"slidesPerView":_vm.slidesPerView,"users":_vm.usersinfo,"status":_vm.status,"unseen":_vm.unseen,"single":_vm.singleAvatar}}),(_vm.unknowngroupusers)?_c('div',{staticClass:"unknowngroupusersicon"},[_c('i',{staticClass:"fas fa-question"})]):_vm._e()],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/assets/icon.vue?vue&type=template&id=332740e2&scoped=true&

// EXTERNAL MODULE: ./src/application/functions.js
var functions = __webpack_require__("3139");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/icon.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var iconvue_type_script_lang_js_ = ({
  name: "chatIcon",
  data: function () {
    return {
      single: []
    };
  },
  props: {
    chat: {},
    m_chat: {},
    slidesPerView: Number,
    hideunseen: Boolean,
    dontuseslides: Boolean
  },
  computed: {
    allnotifications: function () {
      return this.$store.state.allnotifications || "0";
    },
    unseen: function () {
      if (this.hideunseen) return 0;
      if (this.blockedCheck) return 0;

      if (this.m_chat._selfMembership === "invite") {
        if (functions["a" /* default */].date.addseconds(moment.utc(this.m_chat.summary.lastModified).toDate(), 86400) > new Date()) return 1;
      }

      this.allnotifications;
      return this.m_chat.getUnreadNotificationCount();
    },
    users: function () {
      if (!this.chat) return [];
      var u = this.core.mtrx.anotherChatUsers(this.chat.roomId);

      if (this.dontuseslides) {
        u = _.first(u, 4);
      }

      return u;
    },
    singleAvatar: function () {
      if (!this.chat && !this.m_chat) return {};

      if (this.m_chat.getJoinRule() === "public" && this.m_chat.currentState.getMembers().length === 1) {
        var member = this.m_chat.currentState.getMembers()[0];
        var data = this.$store.state.users[functions["a" /* default */].getmatrixid(member.userId)];

        if (data) {
          data.status = member.membership;
          data.image = data.source.i;
          return data;
        }
      }

      return {};
    },
    blockedCheck: function () {
      var users = this.core.mtrx.anotherChatUsers(this.m_chat.roomId);

      if (users.length == 1) {
        return this.core.mtrx.blockeduser(users[0].userId);
      }
    },
    usersinfo: function () {
      var u = this.core.mtrx.chatUsersInfo(this.chat.roomId, "anotherChatUsers");

      if (this.dontuseslides) {
        u = _.first(u, 4);
      }

      return u;
    },
    status: function () {
      var us = {};

      _.each(this.users, u => {
        us[u.userId] = this.core.mtrx.blockeduser(u.userId) ? "blocked" : u.membership;
      });

      return us;
    },
    unknowngroupusers: function () {
      return this.core.mtrx.kit.unknowngroupusers(this.m_chat);
    },
    groupAvatar: function () {
      var _this$m_chat$currentS;

      const avatar = (_this$m_chat$currentS = this.m_chat.currentState.getStateEvents("m.room.avatar")[0]) === null || _this$m_chat$currentS === void 0 ? void 0 : _this$m_chat$currentS.event.content.avatarUrl;
      return avatar !== "" ? avatar : "";
    }
  }
});
// CONCATENATED MODULE: ./src/components/chats/assets/icon.vue?vue&type=script&lang=js&
 /* harmony default export */ var assets_iconvue_type_script_lang_js_ = (iconvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/chats/assets/icon.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("a071")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  assets_iconvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "332740e2",
  null
  ,true
)

/* harmony default export */ var icon = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "30b5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "3134":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDesktopCapturerSources = getDesktopCapturerSources;
exports.setAudioOutput = setAudioOutput;
exports.setAudioInput = setAudioInput;
exports.setVideoInput = setVideoInput;
exports.createNewMatrixCall = createNewMatrixCall;
exports.MatrixCall = exports.CallError = exports.CallErrorCode = exports.CallEvent = exports.CallParty = exports.CallDirection = exports.CallType = exports.CallState = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _logger = __webpack_require__("63c7");

var _events = __webpack_require__("faa1");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _event = __webpack_require__("d613");

var _randomstring = __webpack_require__("f408");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. See {@link createNewMatrixCall} for the public API.
 * @module webrtc/call
 */


let CallState;
exports.CallState = CallState;

(function (CallState) {
  CallState["Fledgling"] = "fledgling";
  CallState["InviteSent"] = "invite_sent";
  CallState["WaitLocalMedia"] = "wait_local_media";
  CallState["CreateOffer"] = "create_offer";
  CallState["CreateAnswer"] = "create_answer";
  CallState["Connecting"] = "connecting";
  CallState["Connected"] = "connected";
  CallState["Ringing"] = "ringing";
  CallState["Ended"] = "ended";
})(CallState || (exports.CallState = CallState = {}));

let CallType;
exports.CallType = CallType;

(function (CallType) {
  CallType["Voice"] = "voice";
  CallType["Video"] = "video";
})(CallType || (exports.CallType = CallType = {}));

let CallDirection;
exports.CallDirection = CallDirection;

(function (CallDirection) {
  CallDirection["Inbound"] = "inbound";
  CallDirection["Outbound"] = "outbound";
})(CallDirection || (exports.CallDirection = CallDirection = {}));

let CallParty;
exports.CallParty = CallParty;

(function (CallParty) {
  CallParty["Local"] = "local";
  CallParty["Remote"] = "remote";
})(CallParty || (exports.CallParty = CallParty = {}));

let CallEvent;
exports.CallEvent = CallEvent;

(function (CallEvent) {
  CallEvent["Hangup"] = "hangup";
  CallEvent["State"] = "state";
  CallEvent["Error"] = "error";
  CallEvent["Replaced"] = "replaced";
  CallEvent["LocalHoldUnhold"] = "local_hold_unhold";
  CallEvent["RemoteHoldUnhold"] = "remote_hold_unhold";
  CallEvent["HoldUnhold"] = "hold_unhold";
})(CallEvent || (exports.CallEvent = CallEvent = {}));

let CallErrorCode;
exports.CallErrorCode = CallErrorCode;

(function (CallErrorCode) {
  CallErrorCode["UserHangup"] = "user_hangup";
  CallErrorCode["LocalOfferFailed"] = "local_offer_failed";
  CallErrorCode["NoUserMedia"] = "no_user_media";
  CallErrorCode["UnknownDevices"] = "unknown_devices";
  CallErrorCode["SendInvite"] = "send_invite";
  CallErrorCode["CreateAnswer"] = "create_answer";
  CallErrorCode["SendAnswer"] = "send_answer";
  CallErrorCode["SetRemoteDescription"] = "set_remote_description";
  CallErrorCode["SetLocalDescription"] = "set_local_description";
  CallErrorCode["AnsweredElsewhere"] = "answered_elsewhere";
  CallErrorCode["IceFailed"] = "ice_failed";
  CallErrorCode["InviteTimeout"] = "invite_timeout";
  CallErrorCode["Replaced"] = "replaced";
  CallErrorCode["SignallingFailed"] = "signalling_timeout";
})(CallErrorCode || (exports.CallErrorCode = CallErrorCode = {}));

var ConstraintsType;
/**
 * The version field that we set in m.call.* events
 */

(function (ConstraintsType) {
  ConstraintsType["Audio"] = "audio";
  ConstraintsType["Video"] = "video";
})(ConstraintsType || (ConstraintsType = {}));

const VOIP_PROTO_VERSION = 1;
/** The fallback ICE server to use for STUN or TURN protocols. */

const FALLBACK_ICE_SERVER = 'stun:turn.matrix.org';
/** The length of time a call can be ringing for. */

const CALL_TIMEOUT_MS = 60000;
/** Retrieves sources from desktopCapturer */

function getDesktopCapturerSources() {
  const options = {
    thumbnailSize: {
      height: 176,
      width: 312
    },
    types: ["screen", "window"]
  };
  return window.electron.getDesktopCapturerSources(options);
}

class CallError extends Error {
  constructor(code, msg, err) {
    // Stil ldon't think there's any way to have proper nested errors
    super(msg + ": " + err);
    (0, _defineProperty2.default)(this, "code", void 0);
    this.code = code;
  }

}

exports.CallError = CallError;

function genCallID() {
  return Date.now().toString() + (0, _randomstring.randomString)(16);
}
/**
 * Construct a new Matrix Call.
 * @constructor
 * @param {Object} opts Config options.
 * @param {string} opts.roomId The room ID for this call.
 * @param {Object} opts.webRtc The WebRTC globals from the browser.
 * @param {boolean} opts.forceTURN whether relay through TURN should be forced.
 * @param {Object} opts.URL The URL global.
 * @param {Array<Object>} opts.turnServers Optional. A list of TURN servers.
 * @param {MatrixClient} opts.client The Matrix Client instance to send events to.
 */


class MatrixCall extends _events.EventEmitter {
  // Fix when client is TSified
  // XXX: I don't know why this is called 'config'.
  // The party ID of the other side: undefined if we haven't chosen a partner
  // yet, null if we have but they didn't send a party ID.
  // in the browser it's 'number'
  // The logic of when & if a call is on hold is nontrivial and explained in is*OnHold
  // This flag represents whether we want the other party to be on hold
  // and this one we set when we're transitioning out of the hold state because we
  // can't tell the difference between that and the other party holding us
  // the stats for the call at the point it ended. We can't get these after we
  // tear the call down, so we just grab a snapshot before we stop the call.
  // The typescript definitions have this type as 'any' :(
  // Perfect negotiation state: https://www.w3.org/TR/webrtc/#perfect-negotiation-example
  // If candidates arrive before we've picked an opponent (which, in particular,
  // will happen if the opponent sends candidates eagerly before the user answers
  // the call) we buffer them up here so we can then add the ones from the party we pick
  constructor(opts) {
    var _this;

    super();
    _this = this;
    (0, _defineProperty2.default)(this, "roomId", void 0);
    (0, _defineProperty2.default)(this, "type", void 0);
    (0, _defineProperty2.default)(this, "callId", void 0);
    (0, _defineProperty2.default)(this, "state", void 0);
    (0, _defineProperty2.default)(this, "hangupParty", void 0);
    (0, _defineProperty2.default)(this, "hangupReason", void 0);
    (0, _defineProperty2.default)(this, "direction", void 0);
    (0, _defineProperty2.default)(this, "ourPartyId", void 0);
    (0, _defineProperty2.default)(this, "client", void 0);
    (0, _defineProperty2.default)(this, "forceTURN", void 0);
    (0, _defineProperty2.default)(this, "turnServers", void 0);
    (0, _defineProperty2.default)(this, "candidateSendQueue", void 0);
    (0, _defineProperty2.default)(this, "candidateSendTries", void 0);
    (0, _defineProperty2.default)(this, "sentEndOfCandidates", void 0);
    (0, _defineProperty2.default)(this, "peerConn", void 0);
    (0, _defineProperty2.default)(this, "localVideoElement", void 0);
    (0, _defineProperty2.default)(this, "remoteVideoElement", void 0);
    (0, _defineProperty2.default)(this, "remoteAudioElement", void 0);
    (0, _defineProperty2.default)(this, "screenSharingStream", void 0);
    (0, _defineProperty2.default)(this, "remoteStream", void 0);
    (0, _defineProperty2.default)(this, "localAVStream", void 0);
    (0, _defineProperty2.default)(this, "inviteOrAnswerSent", void 0);
    (0, _defineProperty2.default)(this, "waitForLocalAVStream", void 0);
    (0, _defineProperty2.default)(this, "config", void 0);
    (0, _defineProperty2.default)(this, "successor", void 0);
    (0, _defineProperty2.default)(this, "opponentMember", void 0);
    (0, _defineProperty2.default)(this, "opponentVersion", void 0);
    (0, _defineProperty2.default)(this, "opponentPartyId", void 0);
    (0, _defineProperty2.default)(this, "opponentCaps", void 0);
    (0, _defineProperty2.default)(this, "inviteTimeout", void 0);
    (0, _defineProperty2.default)(this, "remoteOnHold", void 0);
    (0, _defineProperty2.default)(this, "unholdingRemote", void 0);
    (0, _defineProperty2.default)(this, "micMuted", void 0);
    (0, _defineProperty2.default)(this, "vidMuted", void 0);
    (0, _defineProperty2.default)(this, "callStatsAtEnd", void 0);
    (0, _defineProperty2.default)(this, "makingOffer", void 0);
    (0, _defineProperty2.default)(this, "ignoreOffer", void 0);
    (0, _defineProperty2.default)(this, "remoteCandidateBuffer", new Map());
    (0, _defineProperty2.default)(this, "gotUserMediaForInvite", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (stream) {
        if (_this.successor) {
          _this.successor.gotUserMediaForAnswer(stream);

          return;
        }

        if (_this.callHasEnded()) {
          _this.stopAllMedia();

          return;
        }

        _this.localAVStream = stream;

        _logger.logger.info("Got local AV stream with id " + _this.localAVStream.id);

        _this.setState(CallState.CreateOffer);

        _logger.logger.debug("gotUserMediaForInvite -> " + _this.type);

        const videoEl = _this.getLocalVideoElement();

        if (videoEl && _this.type === CallType.Video) {
          videoEl.autoplay = true;

          if (_this.screenSharingStream) {
            _logger.logger.debug("Setting screen sharing stream to the local video element");

            videoEl.srcObject = _this.screenSharingStream;
          } else {
            videoEl.srcObject = stream;
          }

          videoEl.muted = true;

          try {
            yield videoEl.play();
          } catch (e) {
            _logger.logger.info("Failed to play local video element", e);
          }
        } // why do we enable audio (and only audio) tracks here? -- matthew


        setTracksEnabled(stream.getAudioTracks(), true);

        for (const audioTrack of stream.getAudioTracks()) {
          _logger.logger.info("Adding audio track with id " + audioTrack.id);

          _this.peerConn.addTrack(audioTrack, stream);
        }

        for (const videoTrack of (_this.screenSharingStream || stream).getVideoTracks()) {
          _logger.logger.info("Adding video track with id " + videoTrack.id);

          _this.peerConn.addTrack(videoTrack, stream);
        } // Now we wait for the negotiationneeded event

      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)(this, "gotUserMediaForAnswer", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator(function* (stream) {
        if (_this.callHasEnded()) {
          return;
        }

        const localVidEl = _this.getLocalVideoElement();

        if (localVidEl && _this.type === CallType.Video) {
          localVidEl.autoplay = true;
          localVidEl.srcObject = stream;
          localVidEl.muted = true;

          try {
            yield localVidEl.play();
          } catch (e) {
            _logger.logger.info("Failed to play local video element", e);
          }
        }

        _this.localAVStream = stream;

        _logger.logger.info("Got local AV stream with id " + _this.localAVStream.id);

        setTracksEnabled(stream.getAudioTracks(), true);

        for (const track of stream.getTracks()) {
          _this.peerConn.addTrack(track, stream);
        }

        _this.setState(CallState.CreateAnswer);

        let myAnswer;

        try {
          myAnswer = yield _this.peerConn.createAnswer();
        } catch (err) {
          _logger.logger.debug("Failed to create answer: ", err);

          _this.terminate(CallParty.Local, CallErrorCode.CreateAnswer, true);

          return;
        }

        try {
          yield _this.peerConn.setLocalDescription(myAnswer);

          _this.setState(CallState.Connecting); // Allow a short time for initial candidates to be gathered


          yield new Promise(resolve => {
            setTimeout(resolve, 200);
          });

          _this.sendAnswer();
        } catch (err) {
          _logger.logger.debug("Error setting local description!", err);

          _this.terminate(CallParty.Local, CallErrorCode.SetLocalDescription, true);

          return;
        }
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)(this, "gotLocalIceCandidate", event => {
      if (event.candidate) {
        _logger.logger.debug("Call " + this.callId + " got local ICE " + event.candidate.sdpMid + " candidate: " + event.candidate.candidate);

        if (this.callHasEnded()) return; // As with the offer, note we need to make a copy of this object, not
        // pass the original: that broke in Chrome ~m43.

        if (event.candidate.candidate !== '' || !this.sentEndOfCandidates) {
          this.queueCandidate(event.candidate);
          if (event.candidate.candidate === '') this.sentEndOfCandidates = true;
        }
      }
    });
    (0, _defineProperty2.default)(this, "onIceGatheringStateChange", event => {
      _logger.logger.debug("ice gathering state changed to " + this.peerConn.iceGatheringState);

      if (this.peerConn.iceGatheringState === 'complete' && !this.sentEndOfCandidates) {
        // If we didn't get an empty-string candidate to signal the end of candidates,
        // create one ourselves now gathering has finished.
        // We cast because the interface lists all the properties as required but we
        // only want to send 'candidate'
        // XXX: We probably want to send either sdpMid or sdpMLineIndex, as it's not strictly
        // correct to have a candidate that lacks both of these. We'd have to figure out what
        // previous candidates had been sent with and copy them.
        const c = {
          candidate: ''
        };
        this.queueCandidate(c);
        this.sentEndOfCandidates = true;
      }
    });
    (0, _defineProperty2.default)(this, "gotLocalOffer", /*#__PURE__*/function () {
      var _ref3 = _asyncToGenerator(function* (description) {
        _logger.logger.debug("Created offer: ", description);

        if (_this.callHasEnded()) {
          _logger.logger.debug("Ignoring newly created offer on call ID " + _this.callId + " because the call has ended");

          return;
        }

        try {
          yield _this.peerConn.setLocalDescription(description);
        } catch (err) {
          _logger.logger.debug("Error setting local description!", err);

          _this.terminate(CallParty.Local, CallErrorCode.SetLocalDescription, true);

          return;
        }

        if (_this.peerConn.iceGatheringState === 'gathering') {
          // Allow a short time for initial candidates to be gathered
          yield new Promise(resolve => {
            setTimeout(resolve, 200);
          });
        }

        if (_this.callHasEnded()) return;
        const eventType = _this.state === CallState.CreateOffer ? _event.EventType.CallInvite : _event.EventType.CallNegotiate;
        const content = {
          lifetime: CALL_TIMEOUT_MS
        }; // clunky because TypeScript can't folow the types through if we use an expression as the key

        if (_this.state === CallState.CreateOffer) {
          content.offer = _this.peerConn.localDescription;
        } else {
          content.description = _this.peerConn.localDescription;
        }

        if (_this.client._supportsCallTransfer) {
          content.capabilities = {
            'm.call.transferee': true
          };
        } // Get rid of any candidates waiting to be sent: they'll be included in the local
        // description we just got and will send in the offer.


        _logger.logger.info(`Discarding ${_this.candidateSendQueue.length} candidates that will be sent in offer`);

        _this.candidateSendQueue = [];

        try {
          yield _this.sendVoipEvent(eventType, content);
        } catch (error) {
          _logger.logger.error("Failed to send invite", error);

          if (error.event) _this.client.cancelPendingEvent(error.event);
          let code = CallErrorCode.SignallingFailed;
          let message = "Signalling failed";

          if (_this.state === CallState.CreateOffer) {
            code = CallErrorCode.SendInvite;
            message = "Failed to send invite";
          }

          if (error.name == 'UnknownDeviceError') {
            code = CallErrorCode.UnknownDevices;
            message = "Unknown devices present in the room";
          }

          _this.emit(CallEvent.Error, new CallError(code, message, error));

          _this.terminate(CallParty.Local, code, false); // no need to carry on & send the candidate queue, but we also
          // don't want to rethrow the error


          return;
        }

        _this.sendCandidateQueue();

        if (_this.state === CallState.CreateOffer) {
          _this.inviteOrAnswerSent = true;

          _this.setState(CallState.InviteSent);

          _this.inviteTimeout = setTimeout(() => {
            _this.inviteTimeout = null;

            if (_this.state === CallState.InviteSent) {
              _this.hangup(CallErrorCode.InviteTimeout, false);
            }
          }, CALL_TIMEOUT_MS);
        }
      });

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
    (0, _defineProperty2.default)(this, "getLocalOfferFailed", err => {
      _logger.logger.error("Failed to get local offer", err);

      this.emit(CallEvent.Error, new CallError(CallErrorCode.LocalOfferFailed, "Failed to get local offer!", err));
      this.terminate(CallParty.Local, CallErrorCode.LocalOfferFailed, false);
    });
    (0, _defineProperty2.default)(this, "getUserMediaFailed", err => {
      if (this.successor) {
        this.successor.getUserMediaFailed(err);
        return;
      }

      _logger.logger.warn("Failed to get user media - ending call", err);

      this.emit(CallEvent.Error, new CallError(CallErrorCode.NoUserMedia, "Couldn't start capturing media! Is your microphone set up and " + "does this app have permission?", err));
      this.terminate(CallParty.Local, CallErrorCode.NoUserMedia, false);
    });
    (0, _defineProperty2.default)(this, "onIceConnectionStateChanged", () => {
      if (this.callHasEnded()) {
        return; // because ICE can still complete as we're ending the call
      }

      _logger.logger.debug("Call ID " + this.callId + ": ICE connection state changed to: " + this.peerConn.iceConnectionState); // ideally we'd consider the call to be connected when we get media but
      // chrome doesn't implement any of the 'onstarted' events yet


      if (this.peerConn.iceConnectionState == 'connected') {
        this.setState(CallState.Connected);
      } else if (this.peerConn.iceConnectionState == 'failed') {
        this.hangup(CallErrorCode.IceFailed, false);
      }
    });
    (0, _defineProperty2.default)(this, "onSignallingStateChanged", () => {
      _logger.logger.debug("call " + this.callId + ": Signalling state changed to: " + this.peerConn.signalingState);
    });
    (0, _defineProperty2.default)(this, "onTrack", ev => {
      if (ev.streams.length === 0) {
        _logger.logger.warn(`Streamless ${ev.track.kind} found: ignoring.`);

        return;
      } // If we already have a stream, check this track is from the same one


      if (this.remoteStream && ev.streams[0].id !== this.remoteStream.id) {
        _logger.logger.warn(`Ignoring new stream ID ${ev.streams[0].id}: we already have stream ID ${this.remoteStream.id}`);

        return;
      }

      if (!this.remoteStream) {
        _logger.logger.info("Got remote stream with id " + ev.streams[0].id);
      } // Note that we check by ID above and always set the remote stream: Chrome appears
      // to make new stream objects when tranciever directionality is changed and the 'active'
      // status of streams change


      this.remoteStream = ev.streams[0];

      _logger.logger.debug(`Track id ${ev.track.id} of kind ${ev.track.kind} added`);

      if (ev.track.kind === 'video') {
        if (this.remoteVideoElement) {
          this.playRemoteVideo();
        }
      } else {
        if (this.remoteAudioElement) this.playRemoteAudio();
      }
    });
    (0, _defineProperty2.default)(this, "onNegotiationNeeded", /*#__PURE__*/_asyncToGenerator(function* () {
      _logger.logger.info("Negotation is needed!");

      if (_this.state !== CallState.CreateOffer && _this.opponentVersion === 0) {
        _logger.logger.info("Opponent does not support renegotiation: ignoring negotiationneeded event");

        return;
      }

      _this.makingOffer = true;

      try {
        const myOffer = yield _this.peerConn.createOffer();
        yield _this.gotLocalOffer(myOffer);
      } catch (e) {
        _this.getLocalOfferFailed(e);

        return;
      } finally {
        _this.makingOffer = false;
      }
    }));
    (0, _defineProperty2.default)(this, "onHangupReceived", msg => {
      _logger.logger.debug("Hangup received for call ID " + this.callId); // party ID must match (our chosen partner hanging up the call) or be undefined (we haven't chosen
      // a partner yet but we're treating the hangup as a reject as per VoIP v0)


      if (this.partyIdMatches(msg) || this.state === CallState.Ringing) {
        // default reason is user_hangup
        this.terminate(CallParty.Remote, msg.reason || CallErrorCode.UserHangup, true);
      } else {
        _logger.logger.info(`Ignoring message from party ID ${msg.party_id}: our partner is ${this.opponentPartyId}`);
      }
    });
    (0, _defineProperty2.default)(this, "onRejectReceived", msg => {
      _logger.logger.debug("Reject received for call ID " + this.callId); // No need to check party_id for reject because if we'd received either
      // an answer or reject, we wouldn't be in state InviteSent


      const shouldTerminate = // reject events also end the call if it's ringing: it's another of
      // our devices rejecting the call.
      [CallState.InviteSent, CallState.Ringing].includes(this.state) || // also if we're in the init state and it's an inbound call, since
      // this means we just haven't entered the ringing state yet
      this.state === CallState.Fledgling && this.direction === CallDirection.Inbound;

      if (shouldTerminate) {
        this.terminate(CallParty.Remote, CallErrorCode.UserHangup, true);
      } else {
        _logger.logger.debug(`Call is in state: ${this.state}: ignoring reject`);
      }
    });
    (0, _defineProperty2.default)(this, "onAnsweredElsewhere", msg => {
      _logger.logger.debug("Call ID " + this.callId + " answered elsewhere");

      this.terminate(CallParty.Remote, CallErrorCode.AnsweredElsewhere, true);
    });
    this.roomId = opts.roomId;
    this.client = opts.client;
    this.type = null;
    this.forceTURN = opts.forceTURN;
    this.ourPartyId = this.client.deviceId; // Array of Objects with urls, username, credential keys

    this.turnServers = opts.turnServers || [];

    if (this.turnServers.length === 0 && this.client.isFallbackICEServerAllowed()) {
      this.turnServers.push({
        urls: [FALLBACK_ICE_SERVER]
      });
    }

    for (const server of this.turnServers) {
      utils.checkObjectHasKeys(server, ["urls"]);
    }

    this.callId = genCallID();
    this.state = CallState.Fledgling; // A queue for candidates waiting to go out.
    // We try to amalgamate candidates into a single candidate message where
    // possible

    this.candidateSendQueue = [];
    this.candidateSendTries = 0;
    this.sentEndOfCandidates = false;
    this.inviteOrAnswerSent = false;
    this.makingOffer = false;
    this.remoteOnHold = false;
    this.unholdingRemote = false;
    this.micMuted = false;
    this.vidMuted = false;
  }
  /**
   * Place a voice call to this room.
   * @throws If you have not specified a listener for 'error' events.
   */


  placeVoiceCall() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _logger.logger.debug("placeVoiceCall");

      _this2.checkForErrorListener();

      const constraints = getUserMediaContraints(ConstraintsType.Audio);
      _this2.type = CallType.Voice;
      yield _this2.placeCallWithConstraints(constraints);
    })();
  }
  /**
   * Place a video call to this room.
   * @param {Element} remoteVideoElement a <code>&lt;video&gt;</code> DOM element
   * to render video to.
   * @param {Element} localVideoElement a <code>&lt;video&gt;</code> DOM element
   * to render the local camera preview.
   * @throws If you have not specified a listener for 'error' events.
   */


  placeVideoCall(remoteVideoElement, localVideoElement) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _logger.logger.debug("placeVideoCall");

      _this3.checkForErrorListener();

      _this3.localVideoElement = localVideoElement;
      _this3.remoteVideoElement = remoteVideoElement;
      const constraints = getUserMediaContraints(ConstraintsType.Video);
      _this3.type = CallType.Video;
      yield _this3.placeCallWithConstraints(constraints);
    })();
  }
  /**
   * Place a screen-sharing call to this room. This includes audio.
   * <b>This method is EXPERIMENTAL and subject to change without warning. It
   * only works in Google Chrome and Firefox >= 44.</b>
   * @param {Element} remoteVideoElement a <code>&lt;video&gt;</code> DOM element
   * to render video to.
   * @param {Element} localVideoElement a <code>&lt;video&gt;</code> DOM element
   * to render the local camera preview.
   * @throws If you have not specified a listener for 'error' events.
   */


  placeScreenSharingCall(remoteVideoElement, localVideoElement, selectDesktopCapturerSource) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      _logger.logger.debug("placeScreenSharingCall");

      _this4.checkForErrorListener();

      _this4.localVideoElement = localVideoElement;
      _this4.remoteVideoElement = remoteVideoElement;

      try {
        var _window$electron;

        const screenshareConstraints = yield getScreenshareContraints(selectDesktopCapturerSource);

        if (!screenshareConstraints) {
          _this4.terminate(CallParty.Local, CallErrorCode.NoUserMedia, false);

          return;
        }

        if ((_window$electron = window.electron) !== null && _window$electron !== void 0 && _window$electron.getDesktopCapturerSources) {
          // We are using Electron
          _logger.logger.debug("Getting screen stream using getUserMedia()...");

          _this4.screenSharingStream = yield navigator.mediaDevices.getUserMedia(screenshareConstraints);
        } else {
          // We are not using Electron
          _logger.logger.debug("Getting screen stream using getDisplayMedia()...");

          _this4.screenSharingStream = yield navigator.mediaDevices.getDisplayMedia(screenshareConstraints);
        }

        _logger.logger.debug("Got screen stream, requesting audio stream...");

        const audioConstraints = getUserMediaContraints(ConstraintsType.Audio);

        _this4.placeCallWithConstraints(audioConstraints);
      } catch (err) {
        _this4.emit(CallEvent.Error, new CallError(CallErrorCode.NoUserMedia, "Failed to get screen-sharing stream: ", err));

        _this4.terminate(CallParty.Local, CallErrorCode.NoUserMedia, false);
      }

      _this4.type = CallType.Video;
    })();
  }

  getOpponentMember() {
    return this.opponentMember;
  }

  opponentCanBeTransferred() {
    return Boolean(this.opponentCaps && this.opponentCaps["m.call.transferee"]);
  }
  /**
   * Retrieve the local <code>&lt;video&gt;</code> DOM element.
   * @return {Element} The dom element
   */


  getLocalVideoElement() {
    return this.localVideoElement;
  }
  /**
   * Retrieve the remote <code>&lt;video&gt;</code> DOM element
   * used for playing back video capable streams.
   * @return {Element} The dom element
   */


  getRemoteVideoElement() {
    return this.remoteVideoElement;
  }
  /**
   * Retrieve the remote <code>&lt;audio&gt;</code> DOM element
   * used for playing back audio only streams.
   * @return {Element} The dom element
   */


  getRemoteAudioElement() {
    return this.remoteAudioElement;
  }
  /**
   * Set the local <code>&lt;video&gt;</code> DOM element. If this call is active,
   * video will be rendered to it immediately.
   * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
   */


  setLocalVideoElement(element) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      _this5.localVideoElement = element;

      if (element && _this5.localAVStream && _this5.type === CallType.Video) {
        element.autoplay = true;
        element.srcObject = _this5.localAVStream;
        element.muted = true;

        try {
          yield element.play();
        } catch (e) {
          _logger.logger.info("Failed to play local video element", e);
        }
      }
    })();
  }
  /**
   * Set the remote <code>&lt;video&gt;</code> DOM element. If this call is active,
   * the first received video-capable stream will be rendered to it immediately.
   * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
   */


  setRemoteVideoElement(element) {
    if (element === this.remoteVideoElement) return;
    element.autoplay = true; // if we already have an audio element set, use that instead and mute the audio
    // on this video element.

    if (this.remoteAudioElement) element.muted = true;
    this.remoteVideoElement = element;

    if (this.remoteStream) {
      this.playRemoteVideo();
    }
  }
  /**
   * Set the remote <code>&lt;audio&gt;</code> DOM element. If this call is active,
   * the first received audio-only stream will be rendered to it immediately.
   * The audio will *not* be rendered from the remoteVideoElement.
   * @param {Element} element The <code>&lt;video&gt;</code> DOM element.
   */


  setRemoteAudioElement(element) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      if (element === _this6.remoteAudioElement) return;
      _this6.remoteAudioElement = element;
      if (_this6.remoteStream) _this6.playRemoteAudio();
    })();
  } // The typescript definitions have this type as 'any' :(


  getCurrentCallStats() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      if (_this7.callHasEnded()) {
        return _this7.callStatsAtEnd;
      }

      return _this7.collectCallStats();
    })();
  }

  collectCallStats() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      // This happens when the call fails before it starts.
      // For example when we fail to get capture sources
      if (!_this8.peerConn) return;
      const statsReport = yield _this8.peerConn.getStats();
      const stats = [];

      for (const item of statsReport) {
        stats.push(item[1]);
      }

      return stats;
    })();
  }
  /**
   * Configure this call from an invite event. Used by MatrixClient.
   * @param {MatrixEvent} event The m.call.invite event
   */


  initWithInvite(event) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      const invite = event.getContent();
      _this9.direction = CallDirection.Inbound; // make sure we have valid turn creds. Unless something's gone wrong, it should
      // poll and keep the credentials valid so this should be instant.

      const haveTurnCreds = yield _this9.client._checkTurnServers();

      if (!haveTurnCreds) {
        _logger.logger.warn("Failed to get TURN credentials! Proceeding with call anyway...");
      }

      _this9.peerConn = _this9.createPeerConnection(); // we must set the party ID before await-ing on anything: the call event
      // handler will start giving us more call events (eg. candidates) so if
      // we haven't set the party ID, we'll ignore them.

      _this9.chooseOpponent(event);

      try {
        yield _this9.peerConn.setRemoteDescription(invite.offer);
        yield _this9.addBufferedIceCandidates();
      } catch (e) {
        _logger.logger.debug("Failed to set remote description", e);

        _this9.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);

        return;
      } // According to previous comments in this file, firefox at some point did not
      // add streams until media started ariving on them. Testing latest firefox
      // (81 at time of writing), this is no longer a problem, so let's do it the correct way.


      if (!_this9.remoteStream || _this9.remoteStream.getTracks().length === 0) {
        _logger.logger.error("No remote stream or no tracks after setting remote description!");

        _this9.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);

        return;
      }

      _this9.type = _this9.remoteStream.getTracks().some(t => t.kind === 'video') ? CallType.Video : CallType.Voice;

      _this9.setState(CallState.Ringing);

      if (event.getLocalAge()) {
        setTimeout(() => {
          if (_this9.state == CallState.Ringing) {
            _logger.logger.debug("Call invite has expired. Hanging up.");

            _this9.hangupParty = CallParty.Remote; // effectively

            _this9.setState(CallState.Ended);

            _this9.stopAllMedia();

            if (_this9.peerConn.signalingState != 'closed') {
              _this9.peerConn.close();
            }

            _this9.emit(CallEvent.Hangup);
          }
        }, invite.lifetime - event.getLocalAge());
      }
    })();
  }
  /**
   * Configure this call from a hangup or reject event. Used by MatrixClient.
   * @param {MatrixEvent} event The m.call.hangup event
   */


  initWithHangup(event) {
    // perverse as it may seem, sometimes we want to instantiate a call with a
    // hangup message (because when getting the state of the room on load, events
    // come in reverse order and we want to remember that a call has been hung up)
    this.setState(CallState.Ended);
  }
  /**
   * Answer a call.
   */


  answer() {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      if (_this10.inviteOrAnswerSent) {
        return;
      }

      _logger.logger.debug(`Answering call ${_this10.callId} of type ${_this10.type}`);

      if (!_this10.localAVStream && !_this10.waitForLocalAVStream) {
        const constraints = getUserMediaContraints(_this10.type == CallType.Video ? ConstraintsType.Video : ConstraintsType.Audio);

        _logger.logger.log("Getting user media with constraints", constraints);

        _this10.setState(CallState.WaitLocalMedia);

        _this10.waitForLocalAVStream = true;

        try {
          const mediaStream = yield navigator.mediaDevices.getUserMedia(constraints);
          _this10.waitForLocalAVStream = false;

          _this10.gotUserMediaForAnswer(mediaStream);
        } catch (e) {
          _this10.getUserMediaFailed(e);

          return;
        }
      } else if (_this10.localAVStream) {
        _this10.gotUserMediaForAnswer(_this10.localAVStream);
      } else if (_this10.waitForLocalAVStream) {
        _this10.setState(CallState.WaitLocalMedia);
      }
    })();
  }
  /**
   * Replace this call with a new call, e.g. for glare resolution. Used by
   * MatrixClient.
   * @param {MatrixCall} newCall The new call.
   */


  replacedBy(newCall) {
    _logger.logger.debug(this.callId + " being replaced by " + newCall.callId);

    if (this.state === CallState.WaitLocalMedia) {
      _logger.logger.debug("Telling new call to wait for local media");

      newCall.waitForLocalAVStream = true;
    } else if (this.state === CallState.CreateOffer) {
      _logger.logger.debug("Handing local stream to new call");

      newCall.gotUserMediaForAnswer(this.localAVStream);
      delete this.localAVStream;
    } else if (this.state === CallState.InviteSent) {
      _logger.logger.debug("Handing local stream to new call");

      newCall.gotUserMediaForAnswer(this.localAVStream);
      delete this.localAVStream;
    }

    newCall.localVideoElement = this.localVideoElement;
    newCall.remoteVideoElement = this.remoteVideoElement;
    newCall.remoteAudioElement = this.remoteAudioElement;
    this.successor = newCall;
    this.emit(CallEvent.Replaced, newCall);
    this.hangup(CallErrorCode.Replaced, true);
  }
  /**
   * Hangup a call.
   * @param {string} reason The reason why the call is being hung up.
   * @param {boolean} suppressEvent True to suppress emitting an event.
   */


  hangup(reason, suppressEvent) {
    if (this.callHasEnded()) return;

    _logger.logger.debug("Ending call " + this.callId);

    this.terminate(CallParty.Local, reason, !suppressEvent); // We don't want to send hangup here if we didn't even get to sending an invite

    if (this.state === CallState.WaitLocalMedia) return;
    const content = {}; // Continue to send no reason for user hangups temporarily, until
    // clients understand the user_hangup reason (voip v1)

    if (reason !== CallErrorCode.UserHangup) content['reason'] = reason;
    this.sendVoipEvent(_event.EventType.CallHangup, {});
  }
  /**
   * Reject a call
   * This used to be done by calling hangup, but is a separate method and protocol
   * event as of MSC2746.
   */


  reject() {
    if (this.state !== CallState.Ringing) {
      throw Error("Call must be in 'ringing' state to reject!");
    }

    if (this.opponentVersion < 1) {
      _logger.logger.info(`Opponent version is less than 1 (${this.opponentVersion}): sending hangup instead of reject`);

      this.hangup(CallErrorCode.UserHangup, true);
      return;
    }

    _logger.logger.debug("Rejecting call: " + this.callId);

    this.terminate(CallParty.Local, CallErrorCode.UserHangup, true);
    this.sendVoipEvent(_event.EventType.CallReject, {});
  }
  /**
   * Set whether our outbound video should be muted or not.
   * @param {boolean} muted True to mute the outbound video.
   */


  setLocalVideoMuted(muted) {
    this.vidMuted = muted;
    this.updateMuteStatus();
  }
  /**
   * Check if local video is muted.
   *
   * If there are multiple video tracks, <i>all</i> of the tracks need to be muted
   * for this to return true. This means if there are no video tracks, this will
   * return true.
   * @return {Boolean} True if the local preview video is muted, else false
   * (including if the call is not set up yet).
   */


  isLocalVideoMuted() {
    return this.vidMuted;
  }
  /**
   * Set whether the microphone should be muted or not.
   * @param {boolean} muted True to mute the mic.
   */


  setMicrophoneMuted(muted) {
    this.micMuted = muted;
    this.updateMuteStatus();
  }
  /**
   * Check if the microphone is muted.
   *
   * If there are multiple audio tracks, <i>all</i> of the tracks need to be muted
   * for this to return true. This means if there are no audio tracks, this will
   * return true.
   * @return {Boolean} True if the mic is muted, else false (including if the call
   * is not set up yet).
   */


  isMicrophoneMuted() {
    return this.micMuted;
  }
  /**
   * @returns true if we have put the party on the other side of the call on hold
   * (that is, we are signalling to them that we are not listening)
   */


  isRemoteOnHold() {
    return this.remoteOnHold;
  }

  setRemoteOnHold(onHold) {
    if (this.isRemoteOnHold() === onHold) return;
    this.remoteOnHold = onHold;
    if (!onHold) this.unholdingRemote = true;

    for (const tranceiver of this.peerConn.getTransceivers()) {
      // We set 'inactive' rather than 'sendonly' because we're not planning on
      // playing music etc. to the other side.
      tranceiver.direction = onHold ? 'inactive' : 'sendrecv';
    }

    this.updateMuteStatus();

    if (!onHold) {
      this.playRemoteAudio();
    }

    this.emit(CallEvent.RemoteHoldUnhold, this.remoteOnHold);
  }
  /**
   * Indicates whether we are 'on hold' to the remote party (ie. if true,
   * they cannot hear us). Note that this will return true when we put the
   * remote on hold too due to the way hold is implemented (since we don't
   * wish to play hold music when we put a call on hold, we use 'inactive'
   * rather than 'sendonly')
   * @returns true if the other party has put us on hold
   */


  isLocalOnHold() {
    if (this.state !== CallState.Connected) return false;
    if (this.unholdingRemote) return false;
    let callOnHold = true; // We consider a call to be on hold only if *all* the tracks are on hold
    // (is this the right thing to do?)

    for (const tranceiver of this.peerConn.getTransceivers()) {
      const trackOnHold = ['inactive', 'recvonly'].includes(tranceiver.currentDirection);
      if (!trackOnHold) callOnHold = false;
    }

    return callOnHold;
  }
  /**
   * Sends a DTMF digit to the other party
   * @param digit The digit (nb. string - '#' and '*' are dtmf too)
   */


  sendDtmfDigit(digit) {
    for (const sender of this.peerConn.getSenders()) {
      if (sender.track.kind === 'audio' && sender.dtmf) {
        sender.dtmf.insertDTMF(digit);
        return;
      }
    }

    throw new Error("Unable to find a track to send DTMF on");
  }

  updateMuteStatus() {
    if (!this.localAVStream) {
      return;
    }

    const micShouldBeMuted = this.micMuted || this.remoteOnHold;
    setTracksEnabled(this.localAVStream.getAudioTracks(), !micShouldBeMuted);
    const vidShouldBeMuted = this.vidMuted || this.remoteOnHold;
    setTracksEnabled(this.localAVStream.getVideoTracks(), !vidShouldBeMuted);

    if (this.remoteOnHold) {
      if (this.remoteAudioElement && this.remoteAudioElement.srcObject === this.remoteStream) {
        this.remoteAudioElement.muted = true;
      } else if (this.remoteVideoElement && this.remoteVideoElement.srcObject === this.remoteStream) {
        this.remoteVideoElement.muted = true;
      }
    } else {
      this.playRemoteAudio();
    }
  }
  /**
   * Internal
   * @param {Object} stream
   */


  sendAnswer() {
    var _this11 = this;

    return _asyncToGenerator(function* () {
      const answerContent = {
        answer: {
          sdp: _this11.peerConn.localDescription.sdp,
          // type is now deprecated as of Matrix VoIP v1, but
          // required to still be sent for backwards compat
          type: _this11.peerConn.localDescription.type
        }
      };

      if (_this11.client._supportsCallTransfer) {
        answerContent.capabilities = {
          'm.call.transferee': true
        };
      } // We have just taken the local description from the peerconnection which will
      // contain all the local candidates added so far, so we can discard any candidates
      // we had queued up because they'll be in the answer.


      _logger.logger.info(`Discarding ${_this11.candidateSendQueue.length} candidates that will be sent in answer`);

      _this11.candidateSendQueue = [];

      try {
        yield _this11.sendVoipEvent(_event.EventType.CallAnswer, answerContent); // If this isn't the first time we've tried to send the answer,
        // we may have candidates queued up, so send them now.

        _this11.inviteOrAnswerSent = true;
      } catch (error) {
        // We've failed to answer: back to the ringing state
        _this11.setState(CallState.Ringing);

        _this11.client.cancelPendingEvent(error.event);

        let code = CallErrorCode.SendAnswer;
        let message = "Failed to send answer";

        if (error.name == 'UnknownDeviceError') {
          code = CallErrorCode.UnknownDevices;
          message = "Unknown devices present in the room";
        }

        _this11.emit(CallEvent.Error, new CallError(code, message, error));

        throw error;
      } // error handler re-throws so this won't happen on error, but
      // we don't want the same error handling on the candidate queue


      _this11.sendCandidateQueue();
    })();
  }

  onRemoteIceCandidatesReceived(ev) {
    var _this12 = this;

    return _asyncToGenerator(function* () {
      if (_this12.callHasEnded()) {
        //debuglog("Ignoring remote ICE candidate because call has ended");
        return;
      }

      const cands = ev.getContent().candidates;

      if (!cands) {
        _logger.logger.info("Ignoring candidates event with no candidates!");

        return;
      }

      const fromPartyId = ev.getContent().version === 0 ? null : ev.getContent().party_id || null;

      if (_this12.opponentPartyId === undefined) {
        // we haven't picked an opponent yet so save the candidates
        _logger.logger.info(`Bufferring ${cands.length} candidates until we pick an opponent`);

        const bufferedCands = _this12.remoteCandidateBuffer.get(fromPartyId) || [];
        bufferedCands.push(...cands);

        _this12.remoteCandidateBuffer.set(fromPartyId, bufferedCands);

        return;
      }

      if (!_this12.partyIdMatches(ev.getContent())) {
        _logger.logger.info(`Ignoring candidates from party ID ${ev.getContent().party_id}: ` + `we have chosen party ID ${_this12.opponentPartyId}`);

        return;
      }

      yield _this12.addIceCandidates(cands);
    })();
  }
  /**
   * Used by MatrixClient.
   * @param {Object} msg
   */


  onAnswerReceived(event) {
    var _this13 = this;

    return _asyncToGenerator(function* () {
      _logger.logger.debug(`Got answer for call ID ${_this13.callId} from party ID ${event.getContent().party_id}`);

      if (_this13.callHasEnded()) {
        _logger.logger.debug(`Ignoring answer because call ID ${_this13.callId} has ended`);

        return;
      }

      if (_this13.opponentPartyId !== undefined) {
        _logger.logger.info(`Ignoring answer from party ID ${event.getContent().party_id}: ` + `we already have an answer/reject from ${_this13.opponentPartyId}`);

        return;
      }

      _this13.chooseOpponent(event);

      yield _this13.addBufferedIceCandidates();

      _this13.setState(CallState.Connecting);

      try {
        yield _this13.peerConn.setRemoteDescription(event.getContent().answer);
      } catch (e) {
        _logger.logger.debug("Failed to set remote description", e);

        _this13.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);

        return;
      } // If the answer we selected has a party_id, send a select_answer event
      // We do this after setting the remote description since otherwise we'd block
      // call setup on it


      if (_this13.opponentPartyId !== null) {
        try {
          yield _this13.sendVoipEvent(_event.EventType.CallSelectAnswer, {
            selected_party_id: _this13.opponentPartyId
          });
        } catch (err) {
          // This isn't fatal, and will just mean that if another party has raced to answer
          // the call, they won't know they got rejected, so we carry on & don't retry.
          _logger.logger.warn("Failed to send select_answer event", err);
        }
      }
    })();
  }

  onSelectAnswerReceived(event) {
    var _this14 = this;

    return _asyncToGenerator(function* () {
      if (_this14.direction !== CallDirection.Inbound) {
        _logger.logger.warn("Got select_answer for an outbound call: ignoring");

        return;
      }

      const selectedPartyId = event.getContent().selected_party_id;

      if (selectedPartyId === undefined || selectedPartyId === null) {
        _logger.logger.warn("Got nonsensical select_answer with null/undefined selected_party_id: ignoring");

        return;
      }

      if (selectedPartyId !== _this14.ourPartyId) {
        _logger.logger.info(`Got select_answer for party ID ${selectedPartyId}: we are party ID ${_this14.ourPartyId}.`); // The other party has picked somebody else's answer


        _this14.terminate(CallParty.Remote, CallErrorCode.AnsweredElsewhere, true);
      }
    })();
  }

  onNegotiateReceived(event) {
    var _this15 = this;

    return _asyncToGenerator(function* () {
      const description = event.getContent().description;

      if (!description || !description.sdp || !description.type) {
        _logger.logger.info("Ignoring invalid m.call.negotiate event");

        return;
      } // Politeness always follows the direction of the call: in a glare situation,
      // we pick either the inbound or outbound call, so one side will always be
      // inbound and one outbound


      const polite = _this15.direction === CallDirection.Inbound; // Here we follow the perfect negotiation logic from
      // https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation

      const offerCollision = description.type === 'offer' && (_this15.makingOffer || _this15.peerConn.signalingState != 'stable');
      _this15.ignoreOffer = !polite && offerCollision;

      if (_this15.ignoreOffer) {
        _logger.logger.info("Ignoring colliding negotiate event because we're impolite");

        return;
      }

      const prevLocalOnHold = _this15.isLocalOnHold();

      if (description.type === 'answer') {
        // whenever we get an answer back, clear the flag we set whilst trying to un-hold
        // the other party: the state of the channels now reflects reality
        _this15.unholdingRemote = false;
      }

      try {
        yield _this15.peerConn.setRemoteDescription(description);

        if (description.type === 'offer') {
          // First we sent the direction of the tranciever to what we'd like it to be,
          // irresepective of whether the other side has us on hold - so just whether we
          // want the call to be on hold or not. This is necessary because in a few lines,
          // we'll adjust the direction and unless we do this too, we'll never come off hold.
          for (const tranceiver of _this15.peerConn.getTransceivers()) {
            tranceiver.direction = _this15.isRemoteOnHold() ? 'inactive' : 'sendrecv';
          }

          const localDescription = yield _this15.peerConn.createAnswer();
          yield _this15.peerConn.setLocalDescription(localDescription); // Now we've got our answer, set the direction to the outcome of the negotiation.
          // We need to do this otherwise Firefox will notice that the direction is not the
          // currentDirection and try to negotiate itself off hold again.

          for (const tranceiver of _this15.peerConn.getTransceivers()) {
            tranceiver.direction = tranceiver.currentDirection;
          }

          _this15.sendVoipEvent(_event.EventType.CallNegotiate, {
            description: _this15.peerConn.localDescription
          });
        }
      } catch (err) {
        _logger.logger.warn("Failed to complete negotiation", err);
      }

      const newLocalOnHold = _this15.isLocalOnHold();

      if (prevLocalOnHold !== newLocalOnHold) {
        _this15.emit(CallEvent.LocalHoldUnhold, newLocalOnHold); // also this one for backwards compat


        _this15.emit(CallEvent.HoldUnhold, newLocalOnHold);
      }
    })();
  }

  callHasEnded() {
    // This exists as workaround to typescript trying to be clever and erroring
    // when putting if (this.state === CallState.Ended) return; twice in the same
    // function, even though that function is async.
    return this.state === CallState.Ended;
  }

  playRemoteAudio() {
    var _this16 = this;

    return _asyncToGenerator(function* () {
      if (_this16.remoteVideoElement) _this16.remoteVideoElement.muted = true;
      _this16.remoteAudioElement.muted = false;
      _this16.remoteAudioElement.srcObject = _this16.remoteStream; // if audioOutput is non-default:

      try {
        if (audioOutput) {
          // This seems quite unreliable in Chrome, although I haven't yet managed to make a jsfiddle where
          // it fails.
          // It seems reliable if you set the sink ID after setting the srcObject and then set the sink ID
          // back to the default after the call is over
          _logger.logger.info("Setting audio sink to " + audioOutput + ", was " + _this16.remoteAudioElement.sinkId);

          yield _this16.remoteAudioElement.setSinkId(audioOutput);
        }
      } catch (e) {
        _logger.logger.warn("Couldn't set requested audio output device: using default", e);
      }

      try {
        yield _this16.remoteAudioElement.play();
      } catch (e) {
        _logger.logger.error("Failed to play remote audio element", e);
      }
    })();
  }

  playRemoteVideo() {
    var _this17 = this;

    return _asyncToGenerator(function* () {
      // A note on calling methods on media elements:
      // We used to have queues per media element to serialise all calls on those elements.
      // The reason given for this was that load() and play() were racing. However, we now
      // never call load() explicitly so this seems unnecessary. However, serialising every
      // operation was causing bugs where video would not resume because some play command
      // had got stuck and all media operations were queued up behind it. If necessary, we
      // should serialise the ones that need to be serialised but then be able to interrupt
      // them with another load() which will cancel the pending one, but since we don't call
      // load() explicitly, it shouldn't be a problem.
      _this17.remoteVideoElement.srcObject = _this17.remoteStream;

      _logger.logger.info("playing remote video. stream active? " + _this17.remoteStream.active);

      try {
        yield _this17.remoteVideoElement.play();
      } catch (e) {
        _logger.logger.info("Failed to play remote video element", e);
      }
    })();
  }

  setState(state) {
    const oldState = this.state;
    this.state = state;
    this.emit(CallEvent.State, state, oldState);
  }
  /**
   * Internal
   * @param {string} eventType
   * @param {Object} content
   * @return {Promise}
   */


  sendVoipEvent(eventType, content) {
    return this.client.sendEvent(this.roomId, eventType, Object.assign({}, content, {
      version: VOIP_PROTO_VERSION,
      call_id: this.callId,
      party_id: this.ourPartyId
    }));
  }

  queueCandidate(content) {
    // Sends candidates with are sent in a special way because we try to amalgamate
    // them into one message
    this.candidateSendQueue.push(content); // Don't send the ICE candidates yet if the call is in the ringing state: this
    // means we tried to pick (ie. started generating candidates) and then failed to
    // send the answer and went back to the ringing state. Queue up the candidates
    // to send if we sucessfully send the answer.
    // Equally don't send if we haven't yet sent the answer because we can send the
    // first batch of candidates along with the answer

    if (this.state === CallState.Ringing || !this.inviteOrAnswerSent) return; // MSC2746 reccomends these values (can be quite long when calling because the
    // callee will need a while to answer the call)

    const delay = this.direction === CallDirection.Inbound ? 500 : 2000;

    if (this.candidateSendTries === 0) {
      setTimeout(() => {
        this.sendCandidateQueue();
      }, delay);
    }
  }
  /*
   * Transfers this call to another user
   */


  transfer(targetUserId) {
    var _this18 = this;

    return _asyncToGenerator(function* () {
      // Fetch the target user's global profile info: their room avatar / displayname
      // could be different in whatever room we shae with them.
      const profileInfo = yield _this18.client.getProfileInfo(targetUserId);
      const replacementId = genCallID();
      const body = {
        replacement_id: genCallID(),
        target_user: {
          id: targetUserId,
          display_name: profileInfo.display_name,
          avatar_url: profileInfo.avatar_url
        },
        create_call: replacementId
      };
      yield _this18.sendVoipEvent(_event.EventType.CallReplaces, body);
      yield _this18.terminate(CallParty.Local, CallErrorCode.Replaced, true);
    })();
  }
  /*
   * Transfers this call to the target call, effectively 'joining' the
   * two calls (so the remote parties on each call are connected together).
   */


  transferToCall(transferTargetCall) {
    var _this19 = this;

    return _asyncToGenerator(function* () {
      const targetProfileInfo = yield _this19.client.getProfileInfo(transferTargetCall.getOpponentMember().userId);
      const transfereeProfileInfo = yield _this19.client.getProfileInfo(_this19.getOpponentMember().userId);
      const newCallId = genCallID();
      const bodyToTransferTarget = {
        // the replacements on each side have their own ID, and it's distinct from the
        // ID of the new call (but we can use the same function to generate it)
        replacement_id: genCallID(),
        target_user: {
          id: _this19.getOpponentMember().userId,
          display_name: transfereeProfileInfo.display_name,
          avatar_url: transfereeProfileInfo.avatar_url
        },
        await_call: newCallId
      };
      yield transferTargetCall.sendVoipEvent(_event.EventType.CallReplaces, bodyToTransferTarget);
      const bodyToTransferee = {
        replacement_id: genCallID(),
        target_user: {
          id: transferTargetCall.getOpponentMember().userId,
          display_name: targetProfileInfo.display_name,
          avatar_url: targetProfileInfo.avatar_url
        },
        create_call: newCallId
      };
      yield _this19.sendVoipEvent(_event.EventType.CallReplaces, bodyToTransferee);
      yield _this19.terminate(CallParty.Local, CallErrorCode.Replaced, true);
      yield transferTargetCall.terminate(CallParty.Local, CallErrorCode.Replaced, true);
    })();
  }

  terminate(hangupParty, hangupReason, shouldEmit) {
    var _this20 = this;

    return _asyncToGenerator(function* () {
      if (_this20.callHasEnded()) return;
      _this20.callStatsAtEnd = yield _this20.collectCallStats();

      if (_this20.inviteTimeout) {
        clearTimeout(_this20.inviteTimeout);
        _this20.inviteTimeout = null;
      }

      const remoteVid = _this20.getRemoteVideoElement();

      const remoteAud = _this20.getRemoteAudioElement();

      const localVid = _this20.getLocalVideoElement();

      if (remoteVid) {
        remoteVid.pause();
        remoteVid.srcObject = null;
      }

      if (remoteAud) {
        remoteAud.pause();
        remoteAud.srcObject = null;

        try {
          // As per comment in playRemoteAudio, setting the sink ID back to the default
          // once the call is over makes setSinkId work reliably.
          yield _this20.remoteAudioElement.setSinkId('');
        } catch (e) {
          _logger.logger.warn("Failed to set sink ID back to default");
        }
      }

      if (localVid) {
        localVid.pause();
        localVid.srcObject = null;
      }

      _this20.hangupParty = hangupParty;
      _this20.hangupReason = hangupReason;

      _this20.setState(CallState.Ended);

      _this20.stopAllMedia();

      if (_this20.peerConn && _this20.peerConn.signalingState !== 'closed') {
        _this20.peerConn.close();
      }

      if (shouldEmit) {
        _this20.emit(CallEvent.Hangup, _this20);
      }
    })();
  }

  stopAllMedia() {
    _logger.logger.debug(`stopAllMedia (stream=${this.localAVStream})`);

    if (this.localAVStream) {
      for (const track of this.localAVStream.getTracks()) {
        track.stop();
      }
    }

    if (this.screenSharingStream) {
      for (const track of this.screenSharingStream.getTracks()) {
        track.stop();
      }
    }

    if (this.remoteStream) {
      for (const track of this.remoteStream.getTracks()) {
        track.stop();
      }
    }
  }

  checkForErrorListener() {
    if (this.listeners("error").length === 0) {
      throw new Error("You MUST attach an error listener using call.on('error', function() {})");
    }
  }

  sendCandidateQueue() {
    var _this21 = this;

    return _asyncToGenerator(function* () {
      if (_this21.candidateSendQueue.length === 0) {
        return;
      }

      const cands = _this21.candidateSendQueue;
      _this21.candidateSendQueue = [];
      ++_this21.candidateSendTries;
      const content = {
        candidates: cands
      };

      _logger.logger.debug("Attempting to send " + cands.length + " candidates");

      try {
        yield _this21.sendVoipEvent(_event.EventType.CallCandidates, content);
      } catch (error) {
        // don't retry this event: we'll send another one later as we might
        // have more candidates by then.
        if (error.event) _this21.client.cancelPendingEvent(error.event); // put all the candidates we failed to send back in the queue

        _this21.candidateSendQueue.push(...cands);

        if (_this21.candidateSendTries > 5) {
          _logger.logger.debug("Failed to send candidates on attempt " + _this21.candidateSendTries + ". Giving up on this call.", error);

          const code = CallErrorCode.SignallingFailed;
          const message = "Signalling failed";

          _this21.emit(CallEvent.Error, new CallError(code, message, error));

          _this21.hangup(code, false);

          return;
        }

        const delayMs = 500 * Math.pow(2, _this21.candidateSendTries);
        ++_this21.candidateSendTries;

        _logger.logger.debug("Failed to send candidates. Retrying in " + delayMs + "ms", error);

        setTimeout(() => {
          _this21.sendCandidateQueue();
        }, delayMs);
      }
    })();
  }

  placeCallWithConstraints(constraints) {
    var _this22 = this;

    return _asyncToGenerator(function* () {
      _logger.logger.log("Getting user media with constraints", constraints); // XXX Find a better way to do this


      _this22.client._callEventHandler.calls.set(_this22.callId, _this22);

      _this22.setState(CallState.WaitLocalMedia);

      _this22.direction = CallDirection.Outbound;
      _this22.config = constraints; // make sure we have valid turn creds. Unless something's gone wrong, it should
      // poll and keep the credentials valid so this should be instant.

      const haveTurnCreds = yield _this22.client._checkTurnServers();

      if (!haveTurnCreds) {
        _logger.logger.warn("Failed to get TURN credentials! Proceeding with call anyway...");
      } // create the peer connection now so it can be gathering candidates while we get user
      // media (assuming a candidate pool size is configured)


      _this22.peerConn = _this22.createPeerConnection();

      try {
        const mediaStream = yield navigator.mediaDevices.getUserMedia(constraints);

        _this22.gotUserMediaForInvite(mediaStream);
      } catch (e) {
        _this22.getUserMediaFailed(e);

        return;
      }
    })();
  }

  createPeerConnection() {
    const pc = new window.RTCPeerConnection({
      iceTransportPolicy: this.forceTURN ? 'relay' : undefined,
      iceServers: this.turnServers,
      iceCandidatePoolSize: this.client._iceCandidatePoolSize
    }); // 'connectionstatechange' would be better, but firefox doesn't implement that.

    pc.addEventListener('iceconnectionstatechange', this.onIceConnectionStateChanged);
    pc.addEventListener('signalingstatechange', this.onSignallingStateChanged);
    pc.addEventListener('icecandidate', this.gotLocalIceCandidate);
    pc.addEventListener('icegatheringstatechange', this.onIceGatheringStateChange);
    pc.addEventListener('track', this.onTrack);
    pc.addEventListener('negotiationneeded', this.onNegotiationNeeded);
    return pc;
  }

  partyIdMatches(msg) {
    // They must either match or both be absent (in which case opponentPartyId will be null)
    // Also we ignore party IDs on the invite/offer if the version is 0, so we must do the same
    // here and use null if the version is 0 (woe betide any opponent sending messages in the
    // same call with different versions)
    const msgPartyId = msg.version === 0 ? null : msg.party_id || null;
    return msgPartyId === this.opponentPartyId;
  } // Commits to an opponent for the call
  // ev: An invite or answer event


  chooseOpponent(ev) {
    // I choo-choo-choose you
    const msg = ev.getContent();

    _logger.logger.debug(`Choosing party ID ${msg.party_id} for call ID ${this.callId}`);

    this.opponentVersion = msg.version;

    if (this.opponentVersion === 0) {
      // set to null to indicate that we've chosen an opponent, but because
      // they're v0 they have no party ID (even if they sent one, we're ignoring it)
      this.opponentPartyId = null;
    } else {
      // set to their party ID, or if they're naughty and didn't send one despite
      // not being v0, set it to null to indicate we picked an opponent with no
      // party ID
      this.opponentPartyId = msg.party_id || null;
    }

    this.opponentCaps = msg.capabilities || {};
    this.opponentMember = ev.sender;
  }

  addBufferedIceCandidates() {
    var _this23 = this;

    return _asyncToGenerator(function* () {
      const bufferedCands = _this23.remoteCandidateBuffer.get(_this23.opponentPartyId);

      if (bufferedCands) {
        _logger.logger.info(`Adding ${bufferedCands.length} buffered candidates for opponent ${_this23.opponentPartyId}`);

        yield _this23.addIceCandidates(bufferedCands);
      }

      _this23.remoteCandidateBuffer = null;
    })();
  }

  addIceCandidates(cands) {
    var _this24 = this;

    return _asyncToGenerator(function* () {
      for (const cand of cands) {
        if ((cand.sdpMid === null || cand.sdpMid === undefined) && (cand.sdpMLineIndex === null || cand.sdpMLineIndex === undefined)) {
          _logger.logger.debug("Ignoring remote ICE candidate with no sdpMid or sdpMLineIndex");

          continue;
        }

        _logger.logger.debug("Call " + _this24.callId + " got remote ICE " + cand.sdpMid + " candidate: " + cand.candidate);

        try {
          yield _this24.peerConn.addIceCandidate(cand);
        } catch (err) {
          if (!_this24.ignoreOffer) {
            _logger.logger.info("Failed to add remote ICE candidate", err);
          }
        }
      }
    })();
  }

}

exports.MatrixCall = MatrixCall;

function setTracksEnabled(tracks, enabled) {
  for (let i = 0; i < tracks.length; i++) {
    tracks[i].enabled = enabled;
  }
}

function getUserMediaContraints(type) {
  const isWebkit = !!navigator.webkitGetUserMedia;

  switch (type) {
    case ConstraintsType.Audio:
      {
        return {
          audio: {
            deviceId: audioInput ? {
              ideal: audioInput
            } : undefined
          },
          video: false
        };
      }

    case ConstraintsType.Video:
      {
        return {
          audio: {
            deviceId: audioInput ? {
              ideal: audioInput
            } : undefined
          },
          video: {
            deviceId: videoInput ? {
              ideal: videoInput
            } : undefined,

            /* We want 640x360.  Chrome will give it only if we ask exactly,
               FF refuses entirely if we ask exactly, so have to ask for ideal
               instead
               XXX: Is this still true?
             */
            width: isWebkit ? {
              exact: 640
            } : {
              ideal: 640
            },
            height: isWebkit ? {
              exact: 360
            } : {
              ideal: 360
            }
          }
        };
      }
  }
}

function getScreenshareContraints(_x4) {
  return _getScreenshareContraints.apply(this, arguments);
}

function _getScreenshareContraints() {
  _getScreenshareContraints = _asyncToGenerator(function* (selectDesktopCapturerSource) {
    var _window$electron2;

    if ((_window$electron2 = window.electron) !== null && _window$electron2 !== void 0 && _window$electron2.getDesktopCapturerSources && selectDesktopCapturerSource) {
      // We have access to getDesktopCapturerSources()
      _logger.logger.debug("Electron getDesktopCapturerSources() is available...");

      const selectedSource = yield selectDesktopCapturerSource();
      if (!selectedSource) return null;
      return {
        audio: false,
        video: {
          mandatory: {
            chromeMediaSource: "desktop",
            chromeMediaSourceId: selectedSource.id
          }
        }
      };
    } else {
      // We do not have access to the Electron desktop capturer,
      // therefore we can assume we are on the web
      _logger.logger.debug("Electron desktopCapturer is not available...");

      return {
        audio: false,
        video: true
      };
    }
  });
  return _getScreenshareContraints.apply(this, arguments);
}

let audioOutput;
let audioInput;
let videoInput;
/**
 * Set an audio output device to use for MatrixCalls
 * @function
 * @param {string=} deviceId the identifier for the device
 * undefined treated as unset
 */

function setAudioOutput(deviceId) {
  audioOutput = deviceId;
}
/**
 * Set an audio input device to use for MatrixCalls
 * @function
 * @param {string=} deviceId the identifier for the device
 * undefined treated as unset
 */


function setAudioInput(deviceId) {
  audioInput = deviceId;
}
/**
 * Set a video input device to use for MatrixCalls
 * @function
 * @param {string=} deviceId the identifier for the device
 * undefined treated as unset
 */


function setVideoInput(deviceId) {
  videoInput = deviceId;
}
/**
 * Create a new Matrix call for the browser.
 * @param {MatrixClient} client The client instance to use.
 * @param {string} roomId The room the call is in.
 * @param {Object?} options DEPRECATED optional options map.
 * @param {boolean} options.forceTURN DEPRECATED whether relay through TURN should be
 * forced. This option is deprecated - use opts.forceTURN when creating the matrix client
 * since it's only possible to set this option on outbound calls.
 * @return {MatrixCall} the call or null if the browser doesn't support calling.
 */


function createNewMatrixCall(client, roomId, options) {
  // typeof prevents Node from erroring on an undefined reference
  if (typeof window === 'undefined' || typeof document === 'undefined') {
    // NB. We don't log here as apps try to create a call object as a test for
    // whether calls are supported, so we shouldn't fill the logs up.
    return null;
  } // Firefox throws on so little as accessing the RTCPeerConnection when operating in
  // a secure mode. There's some information at https://bugzilla.mozilla.org/show_bug.cgi?id=1542616
  // though the concern is that the browser throwing a SecurityError will brick the
  // client creation process.


  try {
    const supported = Boolean(window.RTCPeerConnection || window.RTCSessionDescription || window.RTCIceCandidate || navigator.mediaDevices);

    if (!supported) {
      _logger.logger.error("WebRTC is not supported in this browser / environment");

      return null;
    }
  } catch (e) {
    _logger.logger.error("Exception thrown when trying to access WebRTC", e);

    return null;
  }

  const optionsForceTURN = options ? options.forceTURN : false;
  const opts = {
    client: client,
    roomId: roomId,
    turnServers: client.getTurnServers(),
    // call level options
    forceTURN: client._forceTURN || optionsForceTURN
  };
  const call = new MatrixCall(opts);
  client.reEmitter.reEmit(call, Object.values(CallEvent));
  return call;
}

/***/ }),

/***/ "3139":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("907a");
/* harmony import */ var core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("b7ef");
/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("d9e2");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__);



var createHash = null;
var f = {};

f.sha224 = function (text) {
  if (!createHash) {
    createHash = __webpack_require__("98e6");
  }

  var hash = createHash('sha224');
  hash.update(text);
  return hash.digest();
};

f.language = function () {
  var language;

  if (window.navigator.languages) {
    language = window.navigator.languages[0];
  } else {
    language = window.navigator.userLanguage || window.navigator.language;
  }

  return language;
};

f.deep = function (obj, key) {
  var _key = _.isArray(key) ? key : key.split(".");

  var tkey = _key[0];
  if (typeof obj == 'undefined' || !obj) return undefined;

  if (typeof obj[tkey] != 'undefined') {
    _key.splice(0, 1);

    if (_key.length === 0) {
      return obj[tkey];
    } else {
      return f.deep(obj[tkey], _key);
    }
  } else {
    return undefined;
  }
};

var renderFrameEqualizer = function (canvas, ctx, analyser, stop, colornumbers, offset) {
  if (!colornumbers) {
    colornumbers = {
      r: 25,
      g: 250,
      b: 50
    };
  }

  if (!offset) {
    offset = {
      x: 25,
      offset: [0, 0]
    };
  }

  var WIDTH = canvas.width;
  var HEIGHT = canvas.height;
  var bufferLength = analyser.frequencyBinCount;
  var dataArray = new Uint8Array(bufferLength);
  var barWidth = WIDTH / bufferLength / 2.5;
  var barHeight;
  var x = offset.x; // offset[0] -15;

  analyser.getByteFrequencyData(dataArray);
  ctx.clearRect(0, 0, WIDTH, HEIGHT);

  for (var i = 0; i < bufferLength; i++) {
    barHeight = dataArray[i];
    var r = barHeight + colornumbers.r * (i / bufferLength);
    var g = colornumbers.g * (i / bufferLength);
    var b = colornumbers.b;
    var opacity = -Math.abs(i - bufferLength / 2) / bufferLength + 1 / 2;

    if (i > offset.offset[0] && i < bufferLength - offset.offset[1]) {
      ctx.fillStyle = "rgba(" + r + "," + g + "," + b + "," + opacity * 2 + ")";
      ctx.fillRect(x, HEIGHT / 2 - barHeight * opacity, barWidth, barHeight * opacity * 2);
    }

    x += barWidth + 1;
  }

  requestAnimationFrame(function () {
    if (stop()) {
      ctx.clearRect(0, 0, WIDTH, HEIGHT);
      return;
    }

    renderFrameEqualizer(canvas, ctx, analyser, stop, colornumbers, offset);
  });
};

var rand = function (min, max) {
  min = parseInt(min);
  max = parseInt(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

f.permutations = function (array, k) {
  k || (k = 1);
  var m = [];
  var combinations = [];
  var indices = [];
  var len = array.length;

  function run(level) {
    for (var i = 0; i < len; i++) {
      if (!indices[i]) {
        indices[i] = true;
        combinations[level] = array[i];

        if (level < k - 1) {
          run(level + 1, i + 1);
        } else {
          m.push([].concat(combinations));
        }

        indices[i] = false;
      }
    }
  }

  run(0);
  return m;
};

var copytext = function (text) {
  if (window.clipboardData && window.clipboardData.setData) {
    // IE specific code path to prevent textarea being shown while dialog is visible.
    return clipboardData.setData("Text", text);
  } else if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.position = "fixed"; // Prevent scrolling to bottom of page in MS Edge.

    document.body.appendChild(textarea);
    textarea.select();

    try {
      return document.execCommand("copy"); // Security exception may be thrown by some browsers.
    } catch (ex) {
      console.warn("Copy to clipboard failed.", ex);
      return false;
    } finally {
      document.body.removeChild(textarea);
    }
  }
};

var makeid = function (valid) {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  if (!valid) {
    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  }

  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

  for (var i = 0; i < 16; i++) text += possible.charAt(Math.floor(Math.random() * possible.length));

  return text;
}; // roomalias


var flball = function (str) {
  //return flbb(str)
  if (!str || !str.split) return str;
  var exception = ["2ndEdison, 3dCarbon", "A-Pmcs"];
  var lower = ["TO", "K", "X", "10X", "THE", "AN", "AND", "OR", "AT", "BUT", "BY", "FOR", "IN", "OF", "OFF", "ON", "OUT", "PER", "UP", "VIA", "AS", "FOR"];
  var upper = ["2MCBL", "USA", "TONS", "BHCC", "LLC", "LTD", "1BWK", "AGMA", "VIII", "XIII", "BHCC"];
  var capital = ["LAS", "LAW", "SON", "DEE", "ST", "PET", "BIG", "WAY", "AIR", "ALL", "TOP", "JOY", "CO", "INC", "INC.", "AVE", "PAY", "ST.", "FOX", "CAR", "TAX", "DAY", "MAN", "CO.", "NEW"];
  var capitalReg = new RegExp(capital.join('|'));
  var upperReg = new RegExp(upper.join('|'));
  var nameArr = str.split(' ').map(function (word) {
    if (exception.some(function (w) {
      return w.toUpperCase() === word;
    })) {
      return exception.find(function (w) {
        return w.toUpperCase() === word;
      });
    }

    if (lower.some(function (w) {
      if (w === word) {
        return true;
      }

      ;
      var wArr = w.split(' ');

      for (var i = 0; i < wArr.length; i++) {
        if (/[0-9]/.test(wArr[i]) && /ST|ND|RD|TH|K/.test(wArr[i + 1] + wArr[i + 2])) {
          return true;
        }
      }

      return false;
    })) {
      return word.toLowerCase();
    }

    if (capitalReg.test(word)) {
      return word[0] + word.slice(1).toLowerCase();
    }

    if (word.replace(/\(|\)/g, '').length <= 3 || upperReg.test(word)) {
      return word;
    }

    var wordCap = word.toLowerCase().replace(/[A-Za-z]/, function (l) {
      return l.toUpperCase();
    });
    var wordArr = [];
    wordArr.push(wordCap[0]);

    for (var i = 0; i < wordCap.length; i++) {
      if (wordCap[i + 1] && (/\.|\/|[0-9]|\&|\-|\s/.test(wordCap[i]) || (wordCap[i - 1] + wordCap[i]).toLowerCase() === 'mc')) {
        wordArr.push(wordCap[i + 1].toUpperCase());
      } else if (wordCap[i + 1]) {
        wordArr.push(wordCap[i + 1]);
      }
    }

    ;
    return wordArr.join('');
  });
  return flb(nameArr.join(' '));
};

var flb = function (str) {
  return str[0].toUpperCase() + str.substr(1);
};

var flbs = function (str) {
  return str[0].toUpperCase() + str.substr(1).toLowerCase();
};

var flbb = function (str) {
  var s = str.split(' ');
  return _.map(s, function (s) {
    return flbs(s);
  }).join(' ');
};

var group = function (array, _function) {
  var group = {};

  _.each(array, function (el, i) {
    var index = _function(el, i);

    if (!index) return;
    if (!group[index]) group[index] = [];
    group[index].push(el);
  });

  return group;
};

var _scrollTop = function (scrollTop, el, time) {
  if (!el) el = $("body,html");
  if (!time) time = 200;
  el.animate({
    scrollTop: scrollTop
  }, time);
};

var _scrollTo = function (to, el, time) {
  if (!to) to = $(this);
  var ofssetObj = to.offset();
  var offset = (to.height() - $(window).height()) / 2;

  if (ofssetObj) {
    var scrollTop = ofssetObj.top + offset;

    _scrollTop(scrollTop, el, time);
  }
};

var _scrollToTop = function (to, el, time, offset) {
  if (!to) to = $(this);
  if (!offset) offset = 0;
  var ofssetObj = to.offset();

  if (ofssetObj) {
    var scrollTop = ofssetObj.top + offset;

    _scrollTop(scrollTop, el, time);
  }
};

var _scrollToTopP = function (to, el, time, offset) {
  if (!to) to = $(this);
  if (!offset) offset = 0;
  var ofssetObj = to.position();

  if (ofssetObj) {
    var scrollTop = ofssetObj.top + offset;

    _scrollTop(scrollTop, el, time);
  }
};

var stringEq = function (s1, s2) {
  if (!s1) s1 = '';
  if (!s2) s2 = '';

  var bw = function (s) {
    return s.split(/[ \t\v\r\n\f,.]+/);
  };

  var hash = function (s) {
    var ps = bw(s).join(' ');
    return ps.toLowerCase().replace(/[^a-zа-я0-9&]*/g, '');
  };

  var makeTr = function (w) {
    var trs = {};

    var takeC = function (index) {
      var c;
      if (index < 0 || index >= w.length) c = "_";else c = w[index];
      return c;
    };

    for (var i = -1; i <= w.length; i++) {
      var tr = "";

      for (var j = i - 1; j <= i + 1; j++) {
        tr = tr + takeC(j);
      }

      trs[tr] = 1;
    }

    return trs;
  };

  var t1 = makeTr(hash(s1)),
      t2 = makeTr(hash(s2));
  var c = 0,
      m = Math.max(_.toArray(t1).length, _.toArray(t2).length);

  _.each(t1, function (t, index) {
    if (t2[index]) c++;
  });

  return c / m;
};

var pretry = function (_function, time, totaltime) {
  return new Promise((resolve, reject) => {
    retry(_function, resolve, time, totaltime);
  });
};

var retry = function (_function, clbk, time, totaltime) {
  if (_function()) {
    if (clbk) clbk();
    return;
  }

  if (!time) time = 20;
  var totalTimeCounter = 0;
  var interval = setInterval(function () {
    if (_function() || totaltime && totaltime <= totalTimeCounter) {
      clearInterval(interval);
      if (clbk) clbk();
    }

    totalTimeCounter += time;
  }, time);
};

var md5 = function (d) {
  var result = M(V(Y(X(d), 8 * d.length)));
  return result.toLowerCase();
};

function M(d) {
  for (var _, m = "0123456789ABCDEF", f = "", r = 0; r < d.length; r++) _ = d.charCodeAt(r), f += m.charAt(_ >>> 4 & 15) + m.charAt(15 & _);

  return f;
}

function X(d) {
  for (var _ = Array(d.length >> 2), m = 0; m < _.length; m++) _[m] = 0;

  for (m = 0; m < 8 * d.length; m += 8) _[m >> 5] |= (255 & d.charCodeAt(m / 8)) << m % 32;

  return _;
}

function V(d) {
  for (var _ = "", m = 0; m < 32 * d.length; m += 8) _ += String.fromCharCode(d[m >> 5] >>> m % 32 & 255);

  return _;
}

function Y(d, _) {
  d[_ >> 5] |= 128 << _ % 32, d[14 + (_ + 64 >>> 9 << 4)] = _;

  for (var m = 1732584193, f = -271733879, r = -1732584194, i = 271733878, n = 0; n < d.length; n += 16) {
    var h = m,
        t = f,
        g = r,
        e = i;
    f = md5_ii(f = md5_ii(f = md5_ii(f = md5_ii(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_hh(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_gg(f = md5_ff(f = md5_ff(f = md5_ff(f = md5_ff(f, r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 0], 7, -680876936), f, r, d[n + 1], 12, -389564586), m, f, d[n + 2], 17, 606105819), i, m, d[n + 3], 22, -1044525330), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 4], 7, -176418897), f, r, d[n + 5], 12, 1200080426), m, f, d[n + 6], 17, -1473231341), i, m, d[n + 7], 22, -45705983), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 8], 7, 1770035416), f, r, d[n + 9], 12, -1958414417), m, f, d[n + 10], 17, -42063), i, m, d[n + 11], 22, -1990404162), r = md5_ff(r, i = md5_ff(i, m = md5_ff(m, f, r, i, d[n + 12], 7, 1804603682), f, r, d[n + 13], 12, -40341101), m, f, d[n + 14], 17, -1502002290), i, m, d[n + 15], 22, 1236535329), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 1], 5, -165796510), f, r, d[n + 6], 9, -1069501632), m, f, d[n + 11], 14, 643717713), i, m, d[n + 0], 20, -373897302), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 5], 5, -701558691), f, r, d[n + 10], 9, 38016083), m, f, d[n + 15], 14, -660478335), i, m, d[n + 4], 20, -405537848), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 9], 5, 568446438), f, r, d[n + 14], 9, -1019803690), m, f, d[n + 3], 14, -187363961), i, m, d[n + 8], 20, 1163531501), r = md5_gg(r, i = md5_gg(i, m = md5_gg(m, f, r, i, d[n + 13], 5, -1444681467), f, r, d[n + 2], 9, -51403784), m, f, d[n + 7], 14, 1735328473), i, m, d[n + 12], 20, -1926607734), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 5], 4, -378558), f, r, d[n + 8], 11, -2022574463), m, f, d[n + 11], 16, 1839030562), i, m, d[n + 14], 23, -35309556), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 1], 4, -1530992060), f, r, d[n + 4], 11, 1272893353), m, f, d[n + 7], 16, -155497632), i, m, d[n + 10], 23, -1094730640), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 13], 4, 681279174), f, r, d[n + 0], 11, -358537222), m, f, d[n + 3], 16, -722521979), i, m, d[n + 6], 23, 76029189), r = md5_hh(r, i = md5_hh(i, m = md5_hh(m, f, r, i, d[n + 9], 4, -640364487), f, r, d[n + 12], 11, -421815835), m, f, d[n + 15], 16, 530742520), i, m, d[n + 2], 23, -995338651), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 0], 6, -198630844), f, r, d[n + 7], 10, 1126891415), m, f, d[n + 14], 15, -1416354905), i, m, d[n + 5], 21, -57434055), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 12], 6, 1700485571), f, r, d[n + 3], 10, -1894986606), m, f, d[n + 10], 15, -1051523), i, m, d[n + 1], 21, -2054922799), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 8], 6, 1873313359), f, r, d[n + 15], 10, -30611744), m, f, d[n + 6], 15, -1560198380), i, m, d[n + 13], 21, 1309151649), r = md5_ii(r, i = md5_ii(i, m = md5_ii(m, f, r, i, d[n + 4], 6, -145523070), f, r, d[n + 11], 10, -1120210379), m, f, d[n + 2], 15, 718787259), i, m, d[n + 9], 21, -343485551), m = safe_add(m, h), f = safe_add(f, t), r = safe_add(r, g), i = safe_add(i, e);
  }

  return Array(m, f, r, i);
}

function md5_cmn(d, _, m, f, r, i) {
  return safe_add(bit_rol(safe_add(safe_add(_, d), safe_add(f, i)), r), m);
}

function md5_ff(d, _, m, f, r, i, n) {
  return md5_cmn(_ & m | ~_ & f, d, _, r, i, n);
}

function md5_gg(d, _, m, f, r, i, n) {
  return md5_cmn(_ & f | m & ~f, d, _, r, i, n);
}

function md5_hh(d, _, m, f, r, i, n) {
  return md5_cmn(_ ^ m ^ f, d, _, r, i, n);
}

function md5_ii(d, _, m, f, r, i, n) {
  return md5_cmn(m ^ (_ | ~f), d, _, r, i, n);
}

function safe_add(d, _) {
  var m = (65535 & d) + (65535 & _);
  return (d >> 16) + (_ >> 16) + (m >> 16) << 16 | 65535 & m;
}

function bit_rol(d, _) {
  return d << _ | d >>> 32 - _;
}

var retryLazy = function (_function, clbk, time) {
  if (!time) time = 200;

  var f = function () {
    _function(function (result) {
      if (result) {
        if (clbk) clbk();
      } else {
        setTimeout(f, time);
      }
    });
  };

  f();
};

var isAndroid = function () {
  var ua = navigator.userAgent.toLowerCase();
  var isAndroid = ua.indexOf("android") > -1;

  if (isAndroid) {
    return true;
  }
};

var isMobile = function () {
  return $('html').hasClass('mobile');
};

var isTablet = function () {
  return $('html').hasClass('mobile') || $('html').hasClass('tablet');
};

var slowMade = function (_function, timer, time) {
  if (!time) time = 20;
  if (timer) clearTimeout(timer);
  timer = setTimeout(_function, time);
  return timer;
};

var rand = function (min, max) {
  min = parseInt(min);
  max = parseInt(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

var trim = function (s) {
  return rtrim(ltrim(s));
};

var ltrim = function (s) {
  return (s || "").replace(/^\s+/, '');
};

var rtrim = function (s) {
  return (s || "").replace(/\s+$/, '');
};

var ltrimrn = function (s) {
  return (s || "").replace(/^[\r\n\t ]+/, '');
};

var rtrimrn = function (s) {
  return (s || "").replace(/[\r\n\t ]+$/, '');
};

var trimrn = function (s) {
  return rtrimrn(ltrimrn(s));
};

var hexEncode = function (text) {
  var ch = 0;
  var result = "";

  for (var i = 0; i < text.length; i++) {
    ch = text.charCodeAt(i);
    if (ch > 0xFF) ch -= 0x350;
    ch = ch.toString(16);

    while (ch.length < 2) ch = "0" + ch;

    result += ch;
  }

  return result;
};

var stringify = function (e) {
  if (!e) return null;

  if (e.toString) {
    var s = e.toString();
    if (s != '[object Object]') return s;
  }

  if (_.isObject(e)) return JSON.stringify(e);
  return e;
};

var hexstorage = {};

var hexDecode = function (hex) {
  if (hexstorage[hex]) return hexstorage[hex];
  var ch = 0;
  var result = "";

  for (var i = 2; i <= hex.length; i += 2) {
    ch = parseInt(hex.substring(i - 2, i), 16);
    if (ch >= 128) ch += 0x350;
    ch = String.fromCharCode("0x" + ch.toString(16));
    result += ch;
  }

  hexstorage[hex] = result;
  return result;
};

var imgDimensions = function (data) {
  let img = new Image();
  img.src = data.base64;
  data.width = img.width;
  data.height = img.height;
  return data;
};

var knsites = ['bastyon.com', 'pocketnet.app', 'zoom.us', 'youtube', 'facebook', 'instagram', 'vk.com', 'twitter', 'pinterest', 'vimeo', 'ask.fm', 'change.org', 'wikipedia', 'livejournal', 'linkedin', 'myspace', 'reddit', 'tumblr', 'ok.ru', 'flickr', 'google', 'yandex', 'yahoo', 'bing', 'gmail', 'mail'];

var knsite = function (url) {
  return _.find(knsites, function (u) {
    return url.indexOf(u) > -1;
  });
};

var getUrl = function (data) {
  /*if(!linkify){
      linkify = require('linkifyjs');
      linkify.registerCustomProtocol('pocketnet')
      linkify.registerCustomProtocol('bastyon')
  }*/
  var links = linkify.find(data);

  if (links.length) {
    return links[0].href;
  }
};

var getTxt = function (data) {
  return data.replace(/\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/g, '');
};

var getmatrixid = function (str) {
  return str.split(":")[0].replace("@", '');
};

var getMatrixIdFull = function (id, domain) {
  id || (id = '');
  if (id.indexOf("@") == 0) return id;
  return '@' + id + ':' + domain;
};

var ObjDiff = function (x, y) {
  var target = {};
  var diffProps = Object.keys(x).filter(function (i) {
    return x[i] !== y[i];
  }).map(function (j) {
    var obj = {};
    obj[j] = x[j];
    target = Object.assign(target, obj);
  });
  return target;
};

var filterByUserId = function (arr, data) {
  var a = arr.map(function (e) {
    return e.id;
  });
  var d = data.map(function (e) {
    return e.id;
  });
  var x = [];
  a.forEach(function (e) {
    x.push(data[d.indexOf(e)]);
  });
  return x;
};

var formatBytes = function (bytes) {
  let decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};

var poketnetUrlParser = function (url) {
  var newURL = new URL(url);
  return {
    post: newURL.searchParams.get('s'),
    user: newURL.pathname.replace('/', '')
  };
}; // Takes a url and returns another one that fits into iframe


var videoUrlParser = function (url) {
  var youtube_host = ['www.youtube.com', 'youtube.com', 'youtu.be'];
  var vimeo_host = ['www.vimeo.com', 'vimeo.com'];
  var peertube_host = ['peer.tube', 'peertube.social'];
  var newURL = new URL(url);
  if (youtube_host.indexOf(newURL.hostname) > -1) return `https://www.youtube.com/embed/${newURL.searchParams.get('v')}`;
  if (vimeo_host.indexOf(newURL.hostname) > -1) return `https://player.vimeo.com/video${newURL.pathname}`;
  if (peertube_host.indexOf(newURL.hostname) > -1) return `https://pocketnetpeertube1.nohost.me/${newURL.pathname.replace('watch', 'embed')}`;
}; // Cuts string if its length longer than 'lenght'


var textFormatter = function (text, length) {
  return text.slice(0, length) + `...`;
}; // takes a text and returns it without url in it


var urlSeparator = function (text) {
  var url = getUrl(text);
  return text.replace(url, "");
}; // takes a timestamp and turns it into a string like `Dec 25, 2000 at 2:15 PM`


var dateParser = function (data) {
  var parsedDate = new Date(data * 1000);
  var year = parsedDate.getFullYear();
  var month = parsedDate.getMonth();
  var day = parsedDate.getDate();
  var meridian = parsedDate.getHours() > 13 ? `PM` : `AM`;
  var hour = parsedDate.getHours() > 13 ? parsedDate.getHours() - 12 : parsedDate.getHours();
  var minutes = parsedDate.getMinutes() < 10 ? `0${parsedDate.getMinutes()}` : parsedDate.getMinutes();
  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  return `${months[month]} ${day}, ${year} at ${hour}:${minutes} ${meridian}`;
}; // calculates rating and returns star icons


var setRating = function (total_score, votes) {
  var average_score = total_score / votes;
  var full_star = `<i class="fas fa-star"></i>`;
  var half_star = `<i class="fas fa-star-half-alt"></i>`;
  var emply_star = `<i class="far fa-star"></i>`;
  var rating = [``, ``, ``, ``, ``];

  if (total_score === 0) {
    return rating.map(item => item = emply_star);
  }

  return rating.map(item => {
    if (average_score >= 1) {
      average_score--;
      return item = full_star;
    }

    if (average_score < 1 && average_score >= 0.5) {
      average_score--;
      return item = half_star;
    }

    if (average_score < 0.5) {
      average_score--;
      return item = emply_star;
    }
  });
}; // Indicates whether an object is on at least 80% within viewport or not


var isVisible = function (element) {
  var topY = element.getBoundingClientRect().top;
  var bottomY = element.getBoundingClientRect().bottom;
  var window_height = document.documentElement.clientHeight;
  var elem_height = bottomY - topY;
  var isVisibleOnTop = bottomY >= elem_height * 0.8;
  var isVisibleOnbottom = bottomY <= window_height + elem_height * 0.2;
  if (isVisibleOnTop && isVisibleOnbottom) return true;else return false;
};

var _arrayBufferToBase64 = function (buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var len = bytes.byteLength;

  for (var i = 0; i < len; i++) {
    binary += String.fromCharCode(bytes[i]);
  }

  return window.btoa(binary);
};

var _base64ToArrayBuffer = function (base64) {
  var binary_string = window.atob(base64);
  var len = binary_string.length;
  var bytes = new Uint8Array(len);

  for (var i = 0; i < len; i++) {
    bytes[i] = binary_string.charCodeAt(i);
  }

  return bytes.buffer;
};

var Base64 = {
  // private property
  _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  // public method for encoding
  encode: function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;
    input = Base64._utf8_encode(input);

    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
      enc4 = chr3 & 63;

      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }

      output = output + Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) + Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);
    }

    return output;
  },
  // public method for decoding
  decode: function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {
      enc1 = Base64._keyStr.indexOf(input.charAt(i++));
      enc2 = Base64._keyStr.indexOf(input.charAt(i++));
      enc3 = Base64._keyStr.indexOf(input.charAt(i++));
      enc4 = Base64._keyStr.indexOf(input.charAt(i++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output = output + String.fromCharCode(chr1);

      if (enc3 != 64) {
        output = output + String.fromCharCode(chr2);
      }

      if (enc4 != 64) {
        output = output + String.fromCharCode(chr3);
      }
    }

    output = Base64._utf8_decode(output);
    return output;
  },
  // private method for UTF-8 encoding
  _utf8_encode: function (string) {
    string = string.replace(/\r\n/g, "\n");
    var utftext = "";

    for (var n = 0; n < string.length; n++) {
      var c = string.charCodeAt(n);

      if (c < 128) {
        utftext += String.fromCharCode(c);
      } else if (c > 127 && c < 2048) {
        utftext += String.fromCharCode(c >> 6 | 192);
        utftext += String.fromCharCode(c & 63 | 128);
      } else {
        utftext += String.fromCharCode(c >> 12 | 224);
        utftext += String.fromCharCode(c >> 6 & 63 | 128);
        utftext += String.fromCharCode(c & 63 | 128);
      }
    }

    return utftext;
  },
  // private method for UTF-8 decoding
  _utf8_decode: function (utftext) {
    var string = "";
    var i = 0;
    var c = 0,
        c1 = 0,
        c2 = 0;

    while (i < utftext.length) {
      c = utftext.charCodeAt(i);

      if (c < 128) {
        string += String.fromCharCode(c);
        i++;
      } else if (c > 191 && c < 224) {
        c2 = utftext.charCodeAt(i + 1);
        string += String.fromCharCode((c & 31) << 6 | c2 & 63);
        i += 2;
      } else {
        c2 = utftext.charCodeAt(i + 1);
        c3 = utftext.charCodeAt(i + 2);
        string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        i += 3;
      }
    }

    return string;
  },
  fromFile: file => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onloadend = () => resolve(reader.result);

    reader.onerror = error => reject(error);
  }),
  toFileFetch: function (base64) {
    return fetch(base64).then(res => {
      return res.blob();
    }).then(blob => {
      return new (window.wFile || window.File)([blob], "File name", {
        type: "image/png"
      });
    });
  },
  toFile: function (base64) {
    try {
      var arr = base64.split(','),
          mime = arr[0].match(/:(.*?);/)[1],
          bstr = atob(arr[1]),
          n = bstr.length,
          u8arr = new Uint8Array(n);

      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }

      var file = new (window.wFile || window.File)([u8arr], "Filename", {
        type: mime
      });
      return Promise.resolve(file);
    } catch (e) {
      return Promise.reject(e);
    }
  }
};

f.copyArrayBuffer = function (src) {
  var dst = new ArrayBuffer(src.byteLength);
  new Uint8Array(dst).set(new Uint8Array(src));
  return dst;
};

f.readFile = function (file) {
  let reader = new FileReader();
  reader.readAsArrayBuffer(file);
  return new Promise((resolve, reject) => {
    reader.onload = function () {
      resolve(reader.result);
    };

    reader.onerror = function () {
      reject(reader.error);
    };
  });
};

f.fetchLocal = function (url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();

    xhr.onload = function () {
      var type = xhr.getResponseHeader('content-type');
      resolve({
        data: new Blob([xhr.response], {
          type: type,
          name: 'file'
        })
      }); // resolve()
    };

    xhr.onerror = function (e) {
      console.error(e, url);
      reject(new TypeError('Local request failed'));
    };

    xhr.open('GET', url);
    xhr.responseType = "arraybuffer";
    xhr.send(null);
  });
};

f.saveFileCordova = function (file, name, clbk, todownloads) {
  var storageLocation = "";

  switch (device.platform) {
    case "Android":
      storageLocation = 'file:///storage/emulated/0/'; //LocalFileSystem.PERSISTENT

      break;

    case "iOS":
      storageLocation = cordova.file.cacheDirectory;
      break;
  }

  var onsuccess = function (fileSystem) {
    fileSystem.getDirectory('Download', {
      exclusive: false
    }, function (directory) {
      directory.getFile(name, {
        create: true,
        exclusive: false
      }, function (entry) {
        // After you save the file, you can access it with this URL
        var myFileUrl = entry.toURL();
        entry.createWriter(function (writer) {
          writer.onwriteend = function (evt) {
            //sitemessage("File " + name + " successfully downloaded");
            if (window.galleryRefresh) {
              window.galleryRefresh.refresh(myFileUrl, function (msg) {}, function (err) {});
            }

            if (clbk) clbk({
              name,
              url: myFileUrl
            });
          };

          writer.onerror = function (e) {
            if (clbk) clbk(null, e);
          }; // Write to the file


          writer.seek(0);
          writer.write(file);
        }, function (error) {
          /*dialog({
              html : "Error: Could not create file writer, " + error.code,
              class : "one"
          })*/
          if (clbk) clbk(null, error);
        });
      }, function (error) {
        /*dialog({
            html : "Error: Could not create file, " + error.code,
            class : "one"
        })*/
        if (clbk) clbk(null, error);
      });
    });
  };

  var onerror = function (evt) {
    if (clbk) clbk(null, evt);
  };

  if (todownloads) {
    window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function (fileSystem) {
      onsuccess(fileSystem.root);
    }, onerror);
  } else {
    window.resolveLocalFileSystemURL(storageLocation, onsuccess, onerror);
  }
};

function iOS() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}

f.isios = function () {
  return window.cordova && window.device && deep(window, 'device.platform') == 'iOS' || iOS();
};

f.now = function (date) {
  var now = date || new Date();
  var UTCseconds = now.getTime() + now.getTimezoneOffset() * 60 * 1000;
  var d = new Date(UTCseconds);
  d.toString();
  return d;
};

f.date = {
  addseconds: function (now, seconds) {
    if (!now) now = new Date();
    var ntime = now.getTime() + seconds * 1000;
    var d = new Date(ntime);
    return d;
  }
};

f.getservers = function (arr, mult, address) {
  if (!arr.length) return [];
  mult || (mult = 1);
  if (mult > arr.length) mult = arr.length;
  var mutations = f.permutations(arr, mult);
  var index = f.helpers.base58.decode(address) % mutations.length;
  return mutations[index];
};

f.helpers = {
  base58: {
    ALPHABET: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
    ALPHABET_MAP: {},
    i: 0,

    encode(buffer) {
      const {
        ALPHABET,
        ALPHABET_MAP
      } = this;
      let {
        i
      } = this;

      if (!Object.keys(ALPHABET_MAP).length) {
        while (i < ALPHABET.length) {
          ALPHABET_MAP[ALPHABET.charAt(i)] = i;
          i++;
        }
      }

      var carry, digits, j;

      if (buffer.length === 0) {
        return '';
      }

      i = void 0;
      j = void 0;
      digits = [0];
      i = 0;

      while (i < buffer.length) {
        j = 0;

        while (j < digits.length) {
          digits[j] <<= 8;
          j++;
        }

        digits[0] += buffer[i];
        carry = 0;
        j = 0;

        while (j < digits.length) {
          digits[j] += carry;
          carry = digits[j] / 58 | 0;
          digits[j] %= 58;
          ++j;
        }

        while (carry) {
          digits.push(carry % 58);
          carry = carry / 58 | 0;
        }

        i++;
      }

      i = 0;

      while (buffer[i] === 0 && i < buffer.length - 1) {
        digits.push(0);
        i++;
      }

      return digits.reverse().map(function (digit) {
        return ALPHABET[digit];
      }).join('');
    },

    decode(string) {
      const {
        ALPHABET,
        ALPHABET_MAP
      } = this;
      let {
        i
      } = this;

      if (!Object.keys(ALPHABET_MAP).length) {
        while (i < ALPHABET.length) {
          ALPHABET_MAP[ALPHABET.charAt(i)] = i;
          i++;
        }
      }

      var bytes, c, carry, j;

      if (string.length === 0) {
        return new (typeof Uint8Array !== 'undefined' && Uint8Array !== null ? Uint8Array : Buffer)(0);
      }

      i = void 0;
      j = void 0;
      bytes = [0];
      i = 0;

      while (i < string.length) {
        c = string[i];

        if (!(c in ALPHABET_MAP)) {
          throw "Base58.decode received unacceptable input. Character '" + c + "' is not in the Base58 alphabet.";
        }

        j = 0;

        while (j < bytes.length) {
          bytes[j] *= 58;
          j++;
        }

        bytes[0] += ALPHABET_MAP[c];
        carry = 0;
        j = 0;

        while (j < bytes.length) {
          bytes[j] += carry;
          carry = bytes[j] >> 8;
          bytes[j] &= 0xff;
          ++j;
        }

        while (carry) {
          bytes.push(carry & 0xff);
          carry >>= 8;
        }

        i++;
      }

      i = 0;

      while (string[i] === '1' && i < string.length - 1) {
        bytes.push(0);
        i++;
      }

      const outputArray = new Uint8Array(bytes.reverse());
      let buffer = Buffer.from(outputArray);
      return buffer.readUIntBE(0, outputArray.length);
    }

  }
};

f.getCaretPosition = function (ctrl) {
  // IE < 9 Support 
  if (document.selection) {
    ctrl.focus();
    var range = document.selection.createRange();
    var rangelen = range.text.length;
    range.moveStart('character', -ctrl.value.length);
    var start = range.text.length - rangelen;
    return {
      'start': start,
      'end': start + rangelen
    };
  } // IE >=9 and other browsers
  else if (ctrl.selectionStart || ctrl.selectionStart == '0') {
    return {
      'start': ctrl.selectionStart,
      'end': ctrl.selectionEnd
    };
  } else {
    return {
      'start': 0,
      'end': 0
    };
  }
};

f.setCaretPosition = function (ctrl, start, end) {
  // IE >= 9 and other browsers
  if (ctrl.setSelectionRange) {
    ctrl.focus();
    ctrl.setSelectionRange(start, end);
  } // IE < 9 
  else if (ctrl.createTextRange) {
    var range = ctrl.createTextRange();
    range.collapse(true);
    range.moveEnd('character', end);
    range.moveStart('character', start);
    range.select();
  }
};

f.ObjDiff = ObjDiff;
f._arrayBufferToBase64 = _arrayBufferToBase64;
f._base64ToArrayBuffer = _base64ToArrayBuffer;
f.Base64 = Base64;
f.getmatrixid = getmatrixid;
f.getMatrixIdFull = getMatrixIdFull;
f.formatBytes = formatBytes;
f.filterByUserId = filterByUserId;
f.trim = trim;
f.isAndroid = isAndroid;
f.isMobile = isMobile;
f.isTablet = isTablet;
f.rand = rand;
f.group = group;
f.flball = flball;
f.flb = flb;
f.flbs = flbs;
f.flbb = flbb;
f.makeid = makeid;
f.scrollTo = _scrollTo;
f.stringEq = stringEq;
f.pretry = pretry;
f.retry = retry;
f.retryLazy = retryLazy;
f.slowMade = slowMade;
f.renderFrameEqualizer = renderFrameEqualizer;
f.hexEncode = hexEncode;
f.hexDecode = hexDecode;
f.imgDimensions = imgDimensions;
f.getUrl = getUrl;
f.getTxt = getTxt;
f.poketnetUrlParser = poketnetUrlParser;
f.textFormatter = textFormatter;
f.urlSeparator = urlSeparator;
f.dateParser = dateParser;
f.setRating = setRating;
f.videoUrlParser = videoUrlParser;
f.isVisible = isVisible;
f.copytext = copytext;
f.md5 = md5;
f.knsite = knsite;
f.stringify = stringify;
/* harmony default export */ __webpack_exports__["a"] = (f);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("b639").Buffer))

/***/ }),

/***/ "342f":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "35d6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "default", function() { return /* binding */ addStylesToShadowDOM; });

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js
/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesShadow.js


function addStylesToShadowDOM (parentId, list, shadowRoot) {
  var styles = listToStyles(parentId, list)
  addStyles(styles, shadowRoot)
}

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

function addStyles (styles /* Array<StyleObject> */, shadowRoot) {
  const injectedStyles =
    shadowRoot._injectedStyles ||
    (shadowRoot._injectedStyles = {})
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var style = injectedStyles[item.id]
    if (!style) {
      for (var j = 0; j < item.parts.length; j++) {
        addStyle(item.parts[j], shadowRoot)
      }
      injectedStyles[item.id] = true
    }
  }
}

function createStyleElement (shadowRoot) {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  shadowRoot.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */, shadowRoot) {
  var styleElement = createStyleElement(shadowRoot)
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),

/***/ "35e8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "3700":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoDiscovery = void 0;

var _logger = __webpack_require__("63c7");

var _url = __webpack_require__("0b16");
/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** @module auto-discovery */
// Dev note: Auto discovery is part of the spec.
// See: https://matrix.org/docs/spec/client_server/r0.4.0.html#server-discovery

/**
 * Description for what an automatically discovered client configuration
 * would look like. Although this is a class, it is recommended that it
 * be treated as an interface definition rather than as a class.
 *
 * Additional properties than those defined here may be present, and
 * should follow the Java package naming convention.
 */


class DiscoveredClientConfig {
  // eslint-disable-line no-unused-vars
  // Dev note: this is basically a copy/paste of the .well-known response
  // object as defined in the spec. It does have additional information,
  // however. Overall, this exists to serve as a place for documentation
  // and not functionality.
  // See https://matrix.org/docs/spec/client_server/r0.4.0.html#get-well-known-matrix-client
  constructor() {
    /**
     * The homeserver configuration the client should use. This will
     * always be present on the object.
     * @type {{state: string, base_url: string}} The configuration.
     */
    this["m.homeserver"] = {
      /**
       * The lookup result state. If this is anything other than
       * AutoDiscovery.SUCCESS then base_url may be falsey. Additionally,
       * if this is not AutoDiscovery.SUCCESS then the client should
       * assume the other properties in the client config (such as
       * the identity server configuration) are not valid.
       */
      state: AutoDiscovery.PROMPT,

      /**
       * If the state is AutoDiscovery.FAIL_ERROR or .FAIL_PROMPT
       * then this will contain a human-readable (English) message
       * for what went wrong. If the state is none of those previously
       * mentioned, this will be falsey.
       */
      error: "Something went wrong",

      /**
       * The base URL clients should use to talk to the homeserver,
       * particularly for the login process. May be falsey if the
       * state is not AutoDiscovery.SUCCESS.
       */
      base_url: "https://matrix.org"
    };
    /**
     * The identity server configuration the client should use. This
     * will always be present on teh object.
     * @type {{state: string, base_url: string}} The configuration.
     */

    this["m.identity_server"] = {
      /**
       * The lookup result state. If this is anything other than
       * AutoDiscovery.SUCCESS then base_url may be falsey.
       */
      state: AutoDiscovery.PROMPT,

      /**
       * The base URL clients should use for interacting with the
       * identity server. May be falsey if the state is not
       * AutoDiscovery.SUCCESS.
       */
      base_url: "https://vector.im"
    };
  }

}
/**
 * Utilities for automatically discovery resources, such as homeservers
 * for users to log in to.
 */


class AutoDiscovery {
  // Dev note: the constants defined here are related to but not
  // exactly the same as those in the spec. This is to hopefully
  // translate the meaning of the states in the spec, but also
  // support our own if needed.
  static get ERROR_INVALID() {
    return "Invalid homeserver discovery response";
  }

  static get ERROR_GENERIC_FAILURE() {
    return "Failed to get autodiscovery configuration from server";
  }

  static get ERROR_INVALID_HS_BASE_URL() {
    return "Invalid base_url for m.homeserver";
  }

  static get ERROR_INVALID_HOMESERVER() {
    return "Homeserver URL does not appear to be a valid Matrix homeserver";
  }

  static get ERROR_INVALID_IS_BASE_URL() {
    return "Invalid base_url for m.identity_server";
  }

  static get ERROR_INVALID_IDENTITY_SERVER() {
    return "Identity server URL does not appear to be a valid identity server";
  }

  static get ERROR_INVALID_IS() {
    return "Invalid identity server discovery response";
  }

  static get ERROR_MISSING_WELLKNOWN() {
    return "No .well-known JSON file found";
  }

  static get ERROR_INVALID_JSON() {
    return "Invalid JSON";
  }

  static get ALL_ERRORS() {
    return [AutoDiscovery.ERROR_INVALID, AutoDiscovery.ERROR_GENERIC_FAILURE, AutoDiscovery.ERROR_INVALID_HS_BASE_URL, AutoDiscovery.ERROR_INVALID_HOMESERVER, AutoDiscovery.ERROR_INVALID_IS_BASE_URL, AutoDiscovery.ERROR_INVALID_IDENTITY_SERVER, AutoDiscovery.ERROR_INVALID_IS, AutoDiscovery.ERROR_MISSING_WELLKNOWN, AutoDiscovery.ERROR_INVALID_JSON];
  }
  /**
   * The auto discovery failed. The client is expected to communicate
   * the error to the user and refuse logging in.
   * @return {string}
   * @constructor
   */


  static get FAIL_ERROR() {
    return "FAIL_ERROR";
  }
  /**
   * The auto discovery failed, however the client may still recover
   * from the problem. The client is recommended to that the same
   * action it would for PROMPT while also warning the user about
   * what went wrong. The client may also treat this the same as
   * a FAIL_ERROR state.
   * @return {string}
   * @constructor
   */


  static get FAIL_PROMPT() {
    return "FAIL_PROMPT";
  }
  /**
   * The auto discovery didn't fail but did not find anything of
   * interest. The client is expected to prompt the user for more
   * information, or fail if it prefers.
   * @return {string}
   * @constructor
   */


  static get PROMPT() {
    return "PROMPT";
  }
  /**
   * The auto discovery was successful.
   * @return {string}
   * @constructor
   */


  static get SUCCESS() {
    return "SUCCESS";
  }
  /**
   * Validates and verifies client configuration information for purposes
   * of logging in. Such information includes the homeserver URL
   * and identity server URL the client would want. Additional details
   * may also be included, and will be transparently brought into the
   * response object unaltered.
   * @param {string} wellknown The configuration object itself, as returned
   * by the .well-known auto-discovery endpoint.
   * @return {Promise<DiscoveredClientConfig>} Resolves to the verified
   * configuration, which may include error states. Rejects on unexpected
   * failure, not when verification fails.
   */


  static fromDiscoveryConfig(wellknown) {
    var _this = this;

    return _asyncToGenerator(function* () {
      // Step 1 is to get the config, which is provided to us here.
      // We default to an error state to make the first few checks easier to
      // write. We'll update the properties of this object over the duration
      // of this function.
      const clientConfig = {
        "m.homeserver": {
          state: AutoDiscovery.FAIL_ERROR,
          error: AutoDiscovery.ERROR_INVALID,
          base_url: null
        },
        "m.identity_server": {
          // Technically, we don't have a problem with the identity server
          // config at this point.
          state: AutoDiscovery.PROMPT,
          error: null,
          base_url: null
        }
      };

      if (!wellknown || !wellknown["m.homeserver"]) {
        _logger.logger.error("No m.homeserver key in config");

        clientConfig["m.homeserver"].state = AutoDiscovery.FAIL_PROMPT;
        clientConfig["m.homeserver"].error = AutoDiscovery.ERROR_INVALID;
        return Promise.resolve(clientConfig);
      }

      if (!wellknown["m.homeserver"]["base_url"]) {
        _logger.logger.error("No m.homeserver base_url in config");

        clientConfig["m.homeserver"].state = AutoDiscovery.FAIL_PROMPT;
        clientConfig["m.homeserver"].error = AutoDiscovery.ERROR_INVALID_HS_BASE_URL;
        return Promise.resolve(clientConfig);
      } // Step 2: Make sure the homeserver URL is valid *looking*. We'll make
      // sure it points to a homeserver in Step 3.


      const hsUrl = _this._sanitizeWellKnownUrl(wellknown["m.homeserver"]["base_url"]);

      if (!hsUrl) {
        _logger.logger.error("Invalid base_url for m.homeserver");

        clientConfig["m.homeserver"].error = AutoDiscovery.ERROR_INVALID_HS_BASE_URL;
        return Promise.resolve(clientConfig);
      } // Step 3: Make sure the homeserver URL points to a homeserver.


      const hsVersions = yield _this._fetchWellKnownObject(`${hsUrl}/_matrix/client/versions`);

      if (!hsVersions || !hsVersions.raw["versions"]) {
        _logger.logger.error("Invalid /versions response");

        clientConfig["m.homeserver"].error = AutoDiscovery.ERROR_INVALID_HOMESERVER; // Supply the base_url to the caller because they may be ignoring liveliness
        // errors, like this one.

        clientConfig["m.homeserver"].base_url = hsUrl;
        return Promise.resolve(clientConfig);
      } // Step 4: Now that the homeserver looks valid, update our client config.


      clientConfig["m.homeserver"] = {
        state: AutoDiscovery.SUCCESS,
        error: null,
        base_url: hsUrl
      }; // Step 5: Try to pull out the identity server configuration

      let isUrl = "";

      if (wellknown["m.identity_server"]) {
        // We prepare a failing identity server response to save lines later
        // in this branch.
        const failingClientConfig = {
          "m.homeserver": clientConfig["m.homeserver"],
          "m.identity_server": {
            state: AutoDiscovery.FAIL_PROMPT,
            error: AutoDiscovery.ERROR_INVALID_IS,
            base_url: null
          }
        }; // Step 5a: Make sure the URL is valid *looking*. We'll make sure it
        // points to an identity server in Step 5b.

        isUrl = _this._sanitizeWellKnownUrl(wellknown["m.identity_server"]["base_url"]);

        if (!isUrl) {
          _logger.logger.error("Invalid base_url for m.identity_server");

          failingClientConfig["m.identity_server"].error = AutoDiscovery.ERROR_INVALID_IS_BASE_URL;
          return Promise.resolve(failingClientConfig);
        } // Step 5b: Verify there is an identity server listening on the provided
        // URL.


        const isResponse = yield _this._fetchWellKnownObject(`${isUrl}/_matrix/identity/api/v1`);

        if (!isResponse || !isResponse.raw || isResponse.action !== "SUCCESS") {
          _logger.logger.error("Invalid /api/v1 response");

          failingClientConfig["m.identity_server"].error = AutoDiscovery.ERROR_INVALID_IDENTITY_SERVER; // Supply the base_url to the caller because they may be ignoring
          // liveliness errors, like this one.

          failingClientConfig["m.identity_server"].base_url = isUrl;
          return Promise.resolve(failingClientConfig);
        }
      } // Step 6: Now that the identity server is valid, or never existed,
      // populate the IS section.


      if (isUrl && isUrl.length > 0) {
        clientConfig["m.identity_server"] = {
          state: AutoDiscovery.SUCCESS,
          error: null,
          base_url: isUrl
        };
      } // Step 7: Copy any other keys directly into the clientConfig. This is for
      // things like custom configuration of services.


      Object.keys(wellknown).map(k => {
        if (k === "m.homeserver" || k === "m.identity_server") {
          // Only copy selected parts of the config to avoid overwriting
          // properties computed by the validation logic above.
          const notProps = ["error", "state", "base_url"];

          for (const prop of Object.keys(wellknown[k])) {
            if (notProps.includes(prop)) continue;
            clientConfig[k][prop] = wellknown[k][prop];
          }
        } else {
          // Just copy the whole thing over otherwise
          clientConfig[k] = wellknown[k];
        }
      }); // Step 8: Give the config to the caller (finally)

      return Promise.resolve(clientConfig);
    })();
  }
  /**
   * Attempts to automatically discover client configuration information
   * prior to logging in. Such information includes the homeserver URL
   * and identity server URL the client would want. Additional details
   * may also be discovered, and will be transparently included in the
   * response object unaltered.
   * @param {string} domain The homeserver domain to perform discovery
   * on. For example, "matrix.org".
   * @return {Promise<DiscoveredClientConfig>} Resolves to the discovered
   * configuration, which may include error states. Rejects on unexpected
   * failure, not when discovery fails.
   */


  static findClientConfig(domain) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (!domain || typeof domain !== "string" || domain.length === 0) {
        throw new Error("'domain' must be a string of non-zero length");
      } // We use a .well-known lookup for all cases. According to the spec, we
      // can do other discovery mechanisms if we want such as custom lookups
      // however we won't bother with that here (mostly because the spec only
      // supports .well-known right now).
      //
      // By using .well-known, we need to ensure we at least pull out a URL
      // for the homeserver. We don't really need an identity server configuration
      // but will return one anyways (with state PROMPT) to make development
      // easier for clients. If we can't get a homeserver URL, all bets are
      // off on the rest of the config and we'll assume it is invalid too.
      // We default to an error state to make the first few checks easier to
      // write. We'll update the properties of this object over the duration
      // of this function.


      const clientConfig = {
        "m.homeserver": {
          state: AutoDiscovery.FAIL_ERROR,
          error: AutoDiscovery.ERROR_INVALID,
          base_url: null
        },
        "m.identity_server": {
          // Technically, we don't have a problem with the identity server
          // config at this point.
          state: AutoDiscovery.PROMPT,
          error: null,
          base_url: null
        }
      }; // Step 1: Actually request the .well-known JSON file and make sure it
      // at least has a homeserver definition.

      const wellknown = yield _this2._fetchWellKnownObject(`https://${domain}/.well-known/matrix/client`);

      if (!wellknown || wellknown.action !== "SUCCESS") {
        _logger.logger.error("No response or error when parsing .well-known");

        if (wellknown.reason) _logger.logger.error(wellknown.reason);

        if (wellknown.action === "IGNORE") {
          clientConfig["m.homeserver"] = {
            state: AutoDiscovery.PROMPT,
            error: null,
            base_url: null
          };
        } else {
          // this can only ever be FAIL_PROMPT at this point.
          clientConfig["m.homeserver"].state = AutoDiscovery.FAIL_PROMPT;
          clientConfig["m.homeserver"].error = AutoDiscovery.ERROR_INVALID;
        }

        return Promise.resolve(clientConfig);
      } // Step 2: Validate and parse the config


      return AutoDiscovery.fromDiscoveryConfig(wellknown.raw);
    })();
  }
  /**
   * Gets the raw discovery client configuration for the given domain name.
   * Should only be used if there's no validation to be done on the resulting
   * object, otherwise use findClientConfig().
   * @param {string} domain The domain to get the client config for.
   * @returns {Promise<object>} Resolves to the domain's client config. Can
   * be an empty object.
   */


  static getRawClientConfig(domain) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      if (!domain || typeof domain !== "string" || domain.length === 0) {
        throw new Error("'domain' must be a string of non-zero length");
      }

      const response = yield _this3._fetchWellKnownObject(`https://${domain}/.well-known/matrix/client`);
      if (!response) return {};
      return response.raw || {};
    })();
  }
  /**
   * Sanitizes a given URL to ensure it is either an HTTP or HTTP URL and
   * is suitable for the requirements laid out by .well-known auto discovery.
   * If valid, the URL will also be stripped of any trailing slashes.
   * @param {string} url The potentially invalid URL to sanitize.
   * @return {string|boolean} The sanitized URL or a falsey value if the URL is invalid.
   * @private
   */


  static _sanitizeWellKnownUrl(url) {
    if (!url) return false;

    try {
      // We have to try and parse the URL using the NodeJS URL
      // library if we're on NodeJS and use the browser's URL
      // library when we're in a browser. To accomplish this, we
      // try the NodeJS version first and fall back to the browser.
      let parsed = null;

      try {
        if (_url.URL) parsed = new _url.URL(url);else parsed = new URL(url);
      } catch (e) {
        parsed = new URL(url);
      }

      if (!parsed || !parsed.hostname) return false;
      if (parsed.protocol !== "http:" && parsed.protocol !== "https:") return false;
      const port = parsed.port ? `:${parsed.port}` : "";
      const path = parsed.pathname ? parsed.pathname : "";
      let saferUrl = `${parsed.protocol}//${parsed.hostname}${port}${path}`;

      if (saferUrl.endsWith("/")) {
        saferUrl = saferUrl.substring(0, saferUrl.length - 1);
      }

      return saferUrl;
    } catch (e) {
      _logger.logger.error(e);

      return false;
    }
  }
  /**
   * Fetches a JSON object from a given URL, as expected by all .well-known
   * related lookups. If the server gives a 404 then the `action` will be
   * IGNORE. If the server returns something that isn't JSON, the `action`
   * will be FAIL_PROMPT. For any other failure the `action` will be FAIL_PROMPT.
   *
   * The returned object will be a result of the call in object form with
   * the following properties:
   *   raw: The JSON object returned by the server.
   *   action: One of SUCCESS, IGNORE, or FAIL_PROMPT.
   *   reason: Relatively human readable description of what went wrong.
   *   error: The actual Error, if one exists.
   * @param {string} url The URL to fetch a JSON object from.
   * @return {Promise<object>} Resolves to the returned state.
   * @private
   */


  static _fetchWellKnownObject(url) {
    return _asyncToGenerator(function* () {
      return new Promise(function (resolve, reject) {
        const request = __webpack_require__("3901").getRequest();

        if (!request) throw new Error("No request library available");
        request({
          method: "GET",
          uri: url,
          timeout: 5000
        }, (err, response, body) => {
          if (err || response && (response.statusCode < 200 || response.statusCode >= 300)) {
            let action = "FAIL_PROMPT";
            let reason = (err ? err.message : null) || "General failure";

            if (response && response.statusCode === 404) {
              action = "IGNORE";
              reason = AutoDiscovery.ERROR_MISSING_WELLKNOWN;
            }

            resolve({
              raw: {},
              action: action,
              reason: reason,
              error: err
            });
            return;
          }

          try {
            resolve({
              raw: JSON.parse(body),
              action: "SUCCESS"
            });
          } catch (e) {
            let reason = AutoDiscovery.ERROR_INVALID;

            if (e.name === "SyntaxError") {
              reason = AutoDiscovery.ERROR_INVALID_JSON;
            }

            resolve({
              raw: {},
              action: "FAIL_PROMPT",
              reason: reason,
              error: e
            });
          }
        });
      });
    })();
  }

}

exports.AutoDiscovery = AutoDiscovery;

/***/ }),

/***/ "377e":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "label[data-v-6b3704ba]{display:inline}.likelink[data-v-6b3704ba]{text-decoration:underline;cursor:pointer}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "387f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "38f4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setNow = setNow;
exports.setTimeout = setTimeout;
exports.clearTimeout = clearTimeout;

var _logger = __webpack_require__("63c7");
/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* A re-implementation of the javascript callback functions (setTimeout,
 * clearTimeout; setInterval and clearInterval are not yet implemented) which
 * try to improve handling of large clock jumps (as seen when
 * suspending/resuming the system).
 *
 * In particular, if a timeout would have fired while the system was suspended,
 * it will instead fire as soon as possible after resume.
 */
// we schedule a callback at least this often, to check if we've missed out on
// some wall-clock time due to being suspended.


const TIMER_CHECK_PERIOD_MS = 1000; // counter, for making up ids to return from setTimeout

let _count = 0; // the key for our callback with the real global.setTimeout

let _realCallbackKey; // a sorted list of the callbacks to be run.
// each is an object with keys [runAt, func, params, key].


const _callbackList = []; // var debuglog = logger.log.bind(logger);

const debuglog = function () {};
/**
 * Replace the function used by this module to get the current time.
 *
 * Intended for use by the unit tests.
 *
 * @param {function} [f] function which should return a millisecond counter
 *
 * @internal
 */


function setNow(f) {
  _now = f || Date.now;
}

let _now = Date.now;
/**
 * reimplementation of window.setTimeout, which will call the callback if
 * the wallclock time goes past the deadline.
 *
 * @param {function} func   callback to be called after a delay
 * @param {Number} delayMs  number of milliseconds to delay by
 *
 * @return {Number} an identifier for this callback, which may be passed into
 *                   clearTimeout later.
 */

function setTimeout(func, delayMs) {
  delayMs = delayMs || 0;

  if (delayMs < 0) {
    delayMs = 0;
  }

  const params = Array.prototype.slice.call(arguments, 2);
  const runAt = _now() + delayMs;
  const key = _count++;
  debuglog("setTimeout: scheduling cb", key, "at", runAt, "(delay", delayMs, ")");
  const data = {
    runAt: runAt,
    func: func,
    params: params,
    key: key
  }; // figure out where it goes in the list

  const idx = binarySearch(_callbackList, function (el) {
    return el.runAt - runAt;
  });

  _callbackList.splice(idx, 0, data);

  _scheduleRealCallback();

  return key;
}
/**
 * reimplementation of window.clearTimeout, which mirrors setTimeout
 *
 * @param {Number} key   result from an earlier setTimeout call
 */


function clearTimeout(key) {
  if (_callbackList.length === 0) {
    return;
  } // remove the element from the list


  let i;

  for (i = 0; i < _callbackList.length; i++) {
    const cb = _callbackList[i];

    if (cb.key == key) {
      _callbackList.splice(i, 1);

      break;
    }
  } // iff it was the first one in the list, reschedule our callback.


  if (i === 0) {
    _scheduleRealCallback();
  }
} // use the real global.setTimeout to schedule a callback to _runCallbacks.


function _scheduleRealCallback() {
  if (_realCallbackKey) {
    global.clearTimeout(_realCallbackKey);
  }

  const first = _callbackList[0];

  if (!first) {
    debuglog("_scheduleRealCallback: no more callbacks, not rescheduling");
    return;
  }

  const now = _now();

  const delayMs = Math.min(first.runAt - now, TIMER_CHECK_PERIOD_MS);
  debuglog("_scheduleRealCallback: now:", now, "delay:", delayMs);
  _realCallbackKey = global.setTimeout(_runCallbacks, delayMs);
}

function _runCallbacks() {
  let cb;

  const now = _now();

  debuglog("_runCallbacks: now:", now); // get the list of things to call

  const callbacksToRun = [];

  while (true) {
    const first = _callbackList[0];

    if (!first || first.runAt > now) {
      break;
    }

    cb = _callbackList.shift();
    debuglog("_runCallbacks: popping", cb.key);
    callbacksToRun.push(cb);
  } // reschedule the real callback before running our functions, to
  // keep the codepaths the same whether or not our functions
  // register their own setTimeouts.


  _scheduleRealCallback();

  for (let i = 0; i < callbacksToRun.length; i++) {
    cb = callbacksToRun[i];

    try {
      cb.func.apply(global, cb.params);
    } catch (e) {
      _logger.logger.error("Uncaught exception in callback function", e.stack || e);
    }
  }
}
/* search in a sorted array.
 *
 * returns the index of the last element for which func returns
 * greater than zero, or array.length if no such element exists.
 */


function binarySearch(array, func) {
  // min is inclusive, max exclusive.
  let min = 0;
  let max = array.length;

  while (min < max) {
    const mid = min + max >> 1;
    const res = func(array[mid]);

    if (res > 0) {
      // the element at 'mid' is too big; set it as the new max.
      max = mid;
    } else {
      // the element at 'mid' is too small. 'min' is inclusive, so +1.
      min = mid + 1;
    }
  } // presumably, min==max now.


  return min;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "3901":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  request: true,
  getRequest: true,
  wrapRequest: true,
  setCryptoStoreFactory: true,
  createClient: true,
  ContentHelpers: true,
  createNewMatrixCall: true,
  setMatrixCallAudioOutput: true,
  setMatrixCallAudioInput: true,
  setMatrixCallVideoInput: true
};
exports.request = request;
exports.getRequest = getRequest;
exports.wrapRequest = wrapRequest;
exports.setCryptoStoreFactory = setCryptoStoreFactory;
exports.createClient = createClient;
Object.defineProperty(exports, "createNewMatrixCall", {
  enumerable: true,
  get: function () {
    return _call.createNewMatrixCall;
  }
});
Object.defineProperty(exports, "setMatrixCallAudioOutput", {
  enumerable: true,
  get: function () {
    return _call.setAudioOutput;
  }
});
Object.defineProperty(exports, "setMatrixCallAudioInput", {
  enumerable: true,
  get: function () {
    return _call.setAudioInput;
  }
});
Object.defineProperty(exports, "setMatrixCallVideoInput", {
  enumerable: true,
  get: function () {
    return _call.setVideoInput;
  }
});
exports.ContentHelpers = void 0;

var _memoryCryptoStore = __webpack_require__("4df7");

Object.keys(_memoryCryptoStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _memoryCryptoStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _memoryCryptoStore[key];
    }
  });
});

var _memory = __webpack_require__("696c");

Object.keys(_memory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _memory[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _memory[key];
    }
  });
});

var _scheduler = __webpack_require__("79f0");

Object.keys(_scheduler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _scheduler[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _scheduler[key];
    }
  });
});

var _client = __webpack_require__("980b");

Object.keys(_client).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _client[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _client[key];
    }
  });
});

var _httpApi = __webpack_require__("1c8f");

Object.keys(_httpApi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _httpApi[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _httpApi[key];
    }
  });
});

var _autodiscovery = __webpack_require__("3700");

Object.keys(_autodiscovery).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _autodiscovery[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _autodiscovery[key];
    }
  });
});

var _syncAccumulator = __webpack_require__("2d78");

Object.keys(_syncAccumulator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _syncAccumulator[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _syncAccumulator[key];
    }
  });
});

var _errors = __webpack_require__("0023");

Object.keys(_errors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _errors[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _errors[key];
    }
  });
});

var _event = __webpack_require__("a120");

Object.keys(_event).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _event[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _event[key];
    }
  });
});

var _room = __webpack_require__("0594");

Object.keys(_room).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _room[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _room[key];
    }
  });
});

var _group = __webpack_require__("d15f");

Object.keys(_group).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _group[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _group[key];
    }
  });
});

var _eventTimeline = __webpack_require__("e685");

Object.keys(_eventTimeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _eventTimeline[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTimeline[key];
    }
  });
});

var _eventTimelineSet = __webpack_require__("6386");

Object.keys(_eventTimelineSet).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _eventTimelineSet[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTimelineSet[key];
    }
  });
});

var _roomMember = __webpack_require__("2b60");

Object.keys(_roomMember).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _roomMember[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _roomMember[key];
    }
  });
});

var _roomState = __webpack_require__("420b");

Object.keys(_roomState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _roomState[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _roomState[key];
    }
  });
});

var _user = __webpack_require__("87d6");

Object.keys(_user).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _user[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _user[key];
    }
  });
});

var _filter = __webpack_require__("c976");

Object.keys(_filter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _filter[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _filter[key];
    }
  });
});

var _timelineWindow = __webpack_require__("da9d");

Object.keys(_timelineWindow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _timelineWindow[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _timelineWindow[key];
    }
  });
});

var _interactiveAuth = __webpack_require__("dd5f");

Object.keys(_interactiveAuth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _interactiveAuth[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interactiveAuth[key];
    }
  });
});

var _serviceTypes = __webpack_require__("788e");

Object.keys(_serviceTypes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _serviceTypes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _serviceTypes[key];
    }
  });
});

var _indexeddb = __webpack_require__("ed03");

Object.keys(_indexeddb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _indexeddb[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexeddb[key];
    }
  });
});

var _webstorage = __webpack_require__("eb25");

Object.keys(_webstorage).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _webstorage[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _webstorage[key];
    }
  });
});

var _indexeddbCryptoStore = __webpack_require__("b503");

Object.keys(_indexeddbCryptoStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _indexeddbCryptoStore[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexeddbCryptoStore[key];
    }
  });
});

var _contentRepo = __webpack_require__("07df");

Object.keys(_contentRepo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _contentRepo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _contentRepo[key];
    }
  });
});

var _ContentHelpers = _interopRequireWildcard(__webpack_require__("9730"));

exports.ContentHelpers = _ContentHelpers;

var _call = __webpack_require__("3134");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2019, 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// expose the underlying request object so different environments can use
// different request libs (e.g. request or browser-request)


let requestInstance;
/**
 * The function used to perform HTTP requests. Only use this if you want to
 * use a different HTTP library, e.g. Angular's <code>$http</code>. This should
 * be set prior to calling {@link createClient}.
 * @param {requestFunction} r The request function to use.
 */

function request(r) {
  requestInstance = r;
}
/**
 * Return the currently-set request function.
 * @return {requestFunction} The current request function.
 */


function getRequest() {
  return requestInstance;
}
/**
 * Apply wrapping code around the request function. The wrapper function is
 * installed as the new request handler, and when invoked it is passed the
 * previous value, along with the options and callback arguments.
 * @param {requestWrapperFunction} wrapper The wrapping function.
 */


function wrapRequest(wrapper) {
  const origRequest = requestInstance;

  requestInstance = function (options, callback) {
    return wrapper(origRequest, options, callback);
  };
}

let cryptoStoreFactory = () => new _memoryCryptoStore.MemoryCryptoStore();
/**
 * Configure a different factory to be used for creating crypto stores
 *
 * @param {Function} fac  a function which will return a new
 *    {@link module:crypto.store.base~CryptoStore}.
 */


function setCryptoStoreFactory(fac) {
  cryptoStoreFactory = fac;
}
/**
 * Construct a Matrix Client. Similar to {@link module:client.MatrixClient}
 * except that the 'request', 'store' and 'scheduler' dependencies are satisfied.
 * @param {(Object|string)} opts The configuration options for this client. If
 * this is a string, it is assumed to be the base URL. These configuration
 * options will be passed directly to {@link module:client.MatrixClient}.
 * @param {Object} opts.store If not set, defaults to
 * {@link module:store/memory.MemoryStore}.
 * @param {Object} opts.scheduler If not set, defaults to
 * {@link module:scheduler~MatrixScheduler}.
 * @param {requestFunction} opts.request If not set, defaults to the function
 * supplied to {@link request} which defaults to the request module from NPM.
 *
 * @param {module:crypto.store.base~CryptoStore=} opts.cryptoStore
 *    crypto store implementation. Calls the factory supplied to
 *    {@link setCryptoStoreFactory} if unspecified; or if no factory has been
 *    specified, uses a default implementation (indexeddb in the browser,
 *    in-memory otherwise).
 *
 * @return {MatrixClient} A new matrix client.
 * @see {@link module:client.MatrixClient} for the full list of options for
 * <code>opts</code>.
 */


function createClient(opts) {
  if (typeof opts === "string") {
    opts = {
      "baseUrl": opts
    };
  }

  opts.request = opts.request || requestInstance;
  opts.store = opts.store || new _memory.MemoryStore({
    localStorage: global.localStorage
  });
  opts.scheduler = opts.scheduler || new _scheduler.MatrixScheduler();
  opts.cryptoStore = opts.cryptoStore || cryptoStoreFactory();
  return new _client.MatrixClient(opts);
}
/**
 * The request function interface for performing HTTP requests. This matches the
 * API for the {@link https://github.com/request/request#requestoptions-callback|
 * request NPM module}. The SDK will attempt to call this function in order to
 * perform an HTTP request.
 * @callback requestFunction
 * @param {Object} opts The options for this HTTP request.
 * @param {string} opts.uri The complete URI.
 * @param {string} opts.method The HTTP method.
 * @param {Object} opts.qs The query parameters to append to the URI.
 * @param {Object} opts.body The JSON-serializable object.
 * @param {boolean} opts.json True if this is a JSON request.
 * @param {Object} opts._matrix_opts The underlying options set for
 * {@link MatrixHttpApi}.
 * @param {requestCallback} callback The request callback.
 */

/**
 * A wrapper for the request function interface.
 * @callback requestWrapperFunction
 * @param {requestFunction} origRequest The underlying request function being
 * wrapped
 * @param {Object} opts The options for this HTTP request, given in the same
 * form as {@link requestFunction}.
 * @param {requestCallback} callback The request callback.
 */

/**
  * The request callback interface for performing HTTP requests. This matches the
  * API for the {@link https://github.com/request/request#requestoptions-callback|
  * request NPM module}. The SDK will implement a callback which meets this
  * interface in order to handle the HTTP response.
  * @callback requestCallback
  * @param {Error} err The error if one occurred, else falsey.
  * @param {Object} response The HTTP response which consists of
  * <code>{statusCode: {Number}, headers: {Object}}</code>
  * @param {Object} body The parsed HTTP response body.
  */
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "3934":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "3987":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeParams = encodeParams;
exports.encodeUri = encodeUri;
exports.map = map;
exports.filter = filter;
exports.keys = keys;
exports.values = values;
exports.forEach = forEach;
exports.findElement = findElement;
exports.removeElement = removeElement;
exports.isFunction = isFunction;
exports.isArray = isArray;
exports.checkObjectHasKeys = checkObjectHasKeys;
exports.checkObjectHasNoAdditionalKeys = checkObjectHasNoAdditionalKeys;
exports.deepCopy = deepCopy;
exports.deepCompare = deepCompare;
exports.extend = extend;
exports.runPolyfills = runPolyfills;
exports.inherits = inherits;
exports.polyfillSuper = polyfillSuper;
exports.isNumber = isNumber;
exports.removeHiddenChars = removeHiddenChars;
exports.escapeRegExp = escapeRegExp;
exports.globToRegexp = globToRegexp;
exports.ensureNoTrailingSlash = ensureNoTrailingSlash;
exports.sleep = sleep;
exports.isNullOrUndefined = isNullOrUndefined;
exports.defer = defer;
exports.promiseMapSeries = promiseMapSeries;
exports.promiseTry = promiseTry;
exports.chunkPromises = chunkPromises;
exports.setCrypto = setCrypto;
exports.getCrypto = getCrypto;

var _unhomoglyph = _interopRequireDefault(__webpack_require__("fe93"));
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module.
 * @module utils
 */

/**
 * Encode a dictionary of query parameters.
 * @param {Object} params A dict of key/values to encode e.g.
 * {"foo": "bar", "baz": "taz"}
 * @return {string} The encoded string e.g. foo=bar&baz=taz
 */


function encodeParams(params) {
  let qs = "";

  for (const key in params) {
    if (!params.hasOwnProperty(key)) {
      continue;
    }

    qs += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(params[key]);
  }

  return qs.substring(1);
}
/**
 * Encodes a URI according to a set of template variables. Variables will be
 * passed through encodeURIComponent.
 * @param {string} pathTemplate The path with template variables e.g. '/foo/$bar'.
 * @param {Object} variables The key/value pairs to replace the template
 * variables with. E.g. { "$bar": "baz" }.
 * @return {string} The result of replacing all template variables e.g. '/foo/baz'.
 */


function encodeUri(pathTemplate, variables) {
  for (const key in variables) {
    if (!variables.hasOwnProperty(key)) {
      continue;
    }

    pathTemplate = pathTemplate.replace(key, encodeURIComponent(variables[key]));
  }

  return pathTemplate;
}
/**
 * Applies a map function to the given array.
 * @param {Array} array The array to apply the function to.
 * @param {Function} fn The function that will be invoked for each element in
 * the array with the signature <code>fn(element){...}</code>
 * @return {Array} A new array with the results of the function.
 */


function map(array, fn) {
  const results = new Array(array.length);

  for (let i = 0; i < array.length; i++) {
    results[i] = fn(array[i]);
  }

  return results;
}
/**
 * Applies a filter function to the given array.
 * @param {Array} array The array to apply the function to.
 * @param {Function} fn The function that will be invoked for each element in
 * the array. It should return true to keep the element. The function signature
 * looks like <code>fn(element, index, array){...}</code>.
 * @return {Array} A new array with the results of the function.
 */


function filter(array, fn) {
  const results = [];

  for (let i = 0; i < array.length; i++) {
    if (fn(array[i], i, array)) {
      results.push(array[i]);
    }
  }

  return results;
}
/**
 * Get the keys for an object. Same as <code>Object.keys()</code>.
 * @param {Object} obj The object to get the keys for.
 * @return {string[]} The keys of the object.
 */


function keys(obj) {
  const result = [];

  for (const key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }

    result.push(key);
  }

  return result;
}
/**
 * Get the values for an object.
 * @param {Object} obj The object to get the values for.
 * @return {Array<*>} The values of the object.
 */


function values(obj) {
  const result = [];

  for (const key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }

    result.push(obj[key]);
  }

  return result;
}
/**
 * Invoke a function for each item in the array.
 * @param {Array} array The array.
 * @param {Function} fn The function to invoke for each element. Has the
 * function signature <code>fn(element, index)</code>.
 */


function forEach(array, fn) {
  for (let i = 0; i < array.length; i++) {
    fn(array[i], i);
  }
}
/**
 * The findElement() method returns a value in the array, if an element in the array
 * satisfies (returns true) the provided testing function. Otherwise undefined
 * is returned.
 * @param {Array} array The array.
 * @param {Function} fn Function to execute on each value in the array, with the
 * function signature <code>fn(element, index, array)</code>
 * @param {boolean} reverse True to search in reverse order.
 * @return {*} The first value in the array which returns <code>true</code> for
 * the given function.
 */


function findElement(array, fn, reverse) {
  let i;

  if (reverse) {
    for (i = array.length - 1; i >= 0; i--) {
      if (fn(array[i], i, array)) {
        return array[i];
      }
    }
  } else {
    for (i = 0; i < array.length; i++) {
      if (fn(array[i], i, array)) {
        return array[i];
      }
    }
  }
}
/**
 * The removeElement() method removes the first element in the array that
 * satisfies (returns true) the provided testing function.
 * @param {Array} array The array.
 * @param {Function} fn Function to execute on each value in the array, with the
 * function signature <code>fn(element, index, array)</code>. Return true to
 * remove this element and break.
 * @param {boolean} reverse True to search in reverse order.
 * @return {boolean} True if an element was removed.
 */


function removeElement(array, fn, reverse) {
  let i;
  let removed;

  if (reverse) {
    for (i = array.length - 1; i >= 0; i--) {
      if (fn(array[i], i, array)) {
        removed = array[i];
        array.splice(i, 1);
        return removed;
      }
    }
  } else {
    for (i = 0; i < array.length; i++) {
      if (fn(array[i], i, array)) {
        removed = array[i];
        array.splice(i, 1);
        return removed;
      }
    }
  }

  return false;
}
/**
 * Checks if the given thing is a function.
 * @param {*} value The thing to check.
 * @return {boolean} True if it is a function.
 */


function isFunction(value) {
  return Object.prototype.toString.call(value) === "[object Function]";
}
/**
 * Checks if the given thing is an array.
 * @param {*} value The thing to check.
 * @return {boolean} True if it is an array.
 */


function isArray(value) {
  return Array.isArray ? Array.isArray(value) : Boolean(value && value.constructor === Array);
}
/**
 * Checks that the given object has the specified keys.
 * @param {Object} obj The object to check.
 * @param {string[]} keys The list of keys that 'obj' must have.
 * @throws If the object is missing keys.
 */
// note using 'keys' here would shadow the 'keys' function defined above


function checkObjectHasKeys(obj, keys_) {
  for (let i = 0; i < keys_.length; i++) {
    if (!obj.hasOwnProperty(keys_[i])) {
      throw new Error("Missing required key: " + keys_[i]);
    }
  }
}
/**
 * Checks that the given object has no extra keys other than the specified ones.
 * @param {Object} obj The object to check.
 * @param {string[]} allowedKeys The list of allowed key names.
 * @throws If there are extra keys.
 */


function checkObjectHasNoAdditionalKeys(obj, allowedKeys) {
  for (const key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }

    if (allowedKeys.indexOf(key) === -1) {
      throw new Error("Unknown key: " + key);
    }
  }
}
/**
 * Deep copy the given object. The object MUST NOT have circular references and
 * MUST NOT have functions.
 * @param {Object} obj The object to deep copy.
 * @return {Object} A copy of the object without any references to the original.
 */


function deepCopy(obj) {
  return JSON.parse(JSON.stringify(obj));
}
/**
 * Compare two objects for equality. The objects MUST NOT have circular references.
 *
 * @param {Object} x The first object to compare.
 * @param {Object} y The second object to compare.
 *
 * @return {boolean} true if the two objects are equal
 */


function deepCompare(x, y) {
  // Inspired by
  // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249
  // Compare primitives and functions.
  // Also check if both arguments link to the same object.
  if (x === y) {
    return true;
  }

  if (typeof x !== typeof y) {
    return false;
  } // special-case NaN (since NaN !== NaN)


  if (typeof x === 'number' && isNaN(x) && isNaN(y)) {
    return true;
  } // special-case null (since typeof null == 'object', but null.constructor
  // throws)


  if (x === null || y === null) {
    return x === y;
  } // everything else is either an unequal primitive, or an object


  if (!(x instanceof Object)) {
    return false;
  } // check they are the same type of object


  if (x.constructor !== y.constructor || x.prototype !== y.prototype) {
    return false;
  } // special-casing for some special types of object


  if (x instanceof RegExp || x instanceof Date) {
    return x.toString() === y.toString();
  } // the object algorithm works for Array, but it's sub-optimal.


  if (x instanceof Array) {
    if (x.length !== y.length) {
      return false;
    }

    for (let i = 0; i < x.length; i++) {
      if (!deepCompare(x[i], y[i])) {
        return false;
      }
    }
  } else {
    // disable jshint "The body of a for in should be wrapped in an if
    // statement"

    /* jshint -W089 */
    // check that all of y's direct keys are in x
    let p;

    for (p in y) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
        return false;
      }
    } // finally, compare each of x's keys with y


    for (p in y) {
      // eslint-disable-line guard-for-in
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
        return false;
      }

      if (!deepCompare(x[p], y[p])) {
        return false;
      }
    }
  }
  /* jshint +W089 */


  return true;
}
/**
 * Copy properties from one object to another.
 *
 * All enumerable properties, included inherited ones, are copied.
 *
 * This is approximately equivalent to ES6's Object.assign, except
 * that the latter doesn't copy inherited properties.
 *
 * @param {Object} target  The object that will receive new properties
 * @param {...Object} source  Objects from which to copy properties
 *
 * @return {Object} target
 */


function extend() {
  const target = (arguments.length <= 0 ? undefined : arguments[0]) || {};

  for (let i = 1; i < arguments.length; i++) {
    const source = i < 0 || arguments.length <= i ? undefined : arguments[i];
    if (!source) continue;

    for (const propName in source) {
      // eslint-disable-line guard-for-in
      target[propName] = source[propName];
    }
  }

  return target;
}
/**
 * Run polyfills to add Array.map and Array.filter if they are missing.
 */


function runPolyfills() {
  //                Array.prototype.filter
  // ========================================================
  // SOURCE:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
  if (!Array.prototype.filter) {
    // eslint-disable-next-line no-extend-native
    Array.prototype.filter = function (fun) {
      if (this === void 0 || this === null) {
        throw new TypeError();
      }

      const t = Object(this);
      const len = t.length >>> 0;

      if (typeof fun !== 'function') {
        throw new TypeError();
      }

      const res = [];

      for (var _len = arguments.length, restProps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        restProps[_key - 1] = arguments[_key];
      }

      const thisArg = restProps ? restProps[0] : void 0;

      for (let i = 0; i < len; i++) {
        if (i in t) {
          const val = t[i]; // NOTE: Technically this should Object.defineProperty at
          //       the next index, as push can be affected by
          //       properties on Object.prototype and Array.prototype.
          //       But that method's new, and collisions should be
          //       rare, so use the more-compatible alternative.

          if (fun.call(thisArg, val, i, t)) {
            res.push(val);
          }
        }
      }

      return res;
    };
  } //                Array.prototype.map
  // ========================================================
  // SOURCE:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
  // Production steps of ECMA-262, Edition 5, 15.4.4.19
  // Reference: http://es5.github.io/#x15.4.4.19


  if (!Array.prototype.map) {
    // eslint-disable-next-line no-extend-native
    Array.prototype.map = function (callback, thisArg) {
      let T;
      let k;

      if (this === null || this === undefined) {
        throw new TypeError(' this is null or not defined');
      } // 1. Let O be the result of calling ToObject passing the |this|
      //    value as the argument.


      const O = Object(this); // 2. Let lenValue be the result of calling the Get internal
      //    method of O with the argument "length".
      // 3. Let len be ToUint32(lenValue).

      const len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.
      // See: http://es5.github.com/#x9.11

      if (typeof callback !== 'function') {
        throw new TypeError(callback + ' is not a function');
      } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.


      if (arguments.length > 1) {
        T = thisArg;
      } // 6. Let A be a new array created as if by the expression new Array(len)
      //    where Array is the standard built-in constructor with that name and
      //    len is the value of len.


      const A = new Array(len); // 7. Let k be 0

      k = 0; // 8. Repeat, while k < len

      while (k < len) {
        let kValue;
        let mappedValue; // a. Let Pk be ToString(k).
        //   This is implicit for LHS operands of the in operator
        // b. Let kPresent be the result of calling the HasProperty internal
        //    method of O with argument Pk.
        //   This step can be combined with c
        // c. If kPresent is true, then

        if (k in O) {
          // i. Let kValue be the result of calling the Get internal
          //    method of O with argument Pk.
          kValue = O[k]; // ii. Let mappedValue be the result of calling the Call internal
          //     method of callback with T as the this value and argument
          //     list containing kValue, k, and O.

          mappedValue = callback.call(T, kValue, k, O); // iii. Call the DefineOwnProperty internal method of A with arguments
          // Pk, Property Descriptor
          // { Value: mappedValue,
          //   Writable: true,
          //   Enumerable: true,
          //   Configurable: true },
          // and false.
          // In browsers that support Object.defineProperty, use the following:
          // Object.defineProperty(A, k, {
          //   value: mappedValue,
          //   writable: true,
          //   enumerable: true,
          //   configurable: true
          // });
          // For best browser support, use the following:

          A[k] = mappedValue;
        } // d. Increase k by 1.


        k++;
      } // 9. return A


      return A;
    };
  } //                Array.prototype.forEach
  // ========================================================
  // SOURCE:
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
  // Production steps of ECMA-262, Edition 5, 15.4.4.18
  // Reference: http://es5.github.io/#x15.4.4.18


  if (!Array.prototype.forEach) {
    // eslint-disable-next-line no-extend-native
    Array.prototype.forEach = function (callback, thisArg) {
      let T;
      let k;

      if (this === null || this === undefined) {
        throw new TypeError(' this is null or not defined');
      } // 1. Let O be the result of calling ToObject passing the |this| value as the
      // argument.


      const O = Object(this); // 2. Let lenValue be the result of calling the Get internal method of O with the
      // argument "length".
      // 3. Let len be ToUint32(lenValue).

      const len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.
      // See: http://es5.github.com/#x9.11

      if (typeof callback !== "function") {
        throw new TypeError(callback + ' is not a function');
      } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.


      if (arguments.length > 1) {
        T = thisArg;
      } // 6. Let k be 0


      k = 0; // 7. Repeat, while k < len

      while (k < len) {
        let kValue; // a. Let Pk be ToString(k).
        //   This is implicit for LHS operands of the in operator
        // b. Let kPresent be the result of calling the HasProperty internal
        //    method of O with
        //    argument Pk.
        //   This step can be combined with c
        // c. If kPresent is true, then

        if (k in O) {
          // i. Let kValue be the result of calling the Get internal method of O with
          // argument Pk
          kValue = O[k]; // ii. Call the Call internal method of callback with T as the this value and
          // argument list containing kValue, k, and O.

          callback.call(T, kValue, k, O);
        } // d. Increase k by 1.


        k++;
      } // 8. return undefined

    };
  }
}
/**
 * Inherit the prototype methods from one constructor into another. This is a
 * port of the Node.js implementation with an Object.create polyfill.
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


function inherits(ctor, superCtor) {
  // Add util.inherits from Node.js
  // Source:
  // https://github.com/joyent/node/blob/master/lib/util.js
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.
  ctor.super_ = superCtor;
  ctor.prototype = Object.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
}
/**
 * Polyfills inheritance for prototypes by allowing different kinds of
 * super types. Typically prototypes would use `SuperType.call(this, params)`
 * though this doesn't always work in some environments - this function
 * falls back to using `Object.assign()` to clone a constructed copy
 * of the super type onto `thisArg`.
 * @param {any} thisArg The child instance. Modified in place.
 * @param {any} SuperType The type to act as a super instance
 * @param {any} params Arguments to supply to the super type's constructor
 */


function polyfillSuper(thisArg, SuperType) {
  for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    params[_key2 - 2] = arguments[_key2];
  }

  try {
    SuperType.call(thisArg, ...params);
  } catch (e) {
    // fall back to Object.assign to just clone the thing
    const fakeSuper = new SuperType(...params);
    Object.assign(thisArg, fakeSuper);
  }
}
/**
 * Returns whether the given value is a finite number without type-coercion
 *
 * @param {*} value the value to test
 * @return {boolean} whether or not value is a finite number without type-coercion
 */


function isNumber(value) {
  return typeof value === 'number' && isFinite(value);
}
/**
 * Removes zero width chars, diacritics and whitespace from the string
 * Also applies an unhomoglyph on the string, to prevent similar looking chars
 * @param {string} str the string to remove hidden characters from
 * @return {string} a string with the hidden characters removed
 */


function removeHiddenChars(str) {
  if (typeof str === "string") {
    return (0, _unhomoglyph.default)(str.normalize('NFD').replace(removeHiddenCharsRegex, ''));
  }

  return "";
} // Regex matching bunch of unicode control characters and otherwise misleading/invisible characters.
// Includes:
// various width spaces U+2000 - U+200D
// LTR and RTL marks U+200E and U+200F
// LTR/RTL and other directional formatting marks U+202A - U+202F
// Combining characters U+0300 - U+036F
// Zero width no-break space (BOM) U+FEFF
// eslint-disable-next-line no-misleading-character-class


const removeHiddenCharsRegex = /[\u2000-\u200F\u202A-\u202F\u0300-\u036f\uFEFF\s]/g;

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

function globToRegexp(glob, extended) {
  extended = typeof extended === 'boolean' ? extended : true; // From
  // https://github.com/matrix-org/synapse/blob/abbee6b29be80a77e05730707602f3bbfc3f38cb/synapse/push/__init__.py#L132
  // Because micromatch is about 130KB with dependencies,
  // and minimatch is not much better.

  let pat = escapeRegExp(glob);
  pat = pat.replace(/\\\*/g, '.*');
  pat = pat.replace(/\?/g, '.');

  if (extended) {
    pat = pat.replace(/\\\[(!|)(.*)\\]/g, function (match, p1, p2, offset, string) {
      const first = p1 && '^' || '';
      const second = p2.replace(/\\-/, '-');
      return '[' + first + second + ']';
    });
  }

  return pat;
}

function ensureNoTrailingSlash(url) {
  if (url && url.endsWith("/")) {
    return url.substr(0, url.length - 1);
  } else {
    return url;
  }
} // Returns a promise which resolves with a given value after the given number of ms


function sleep(ms, value) {
  return new Promise(resolve => {
    setTimeout(resolve, ms, value);
  });
}

function isNullOrUndefined(val) {
  return val === null || val === undefined;
} // Returns a Deferred


function defer() {
  let resolve;
  let reject;
  const promise = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
  });
  return {
    resolve,
    reject,
    promise
  };
}

function promiseMapSeries(_x, _x2) {
  return _promiseMapSeries.apply(this, arguments);
}

function _promiseMapSeries() {
  _promiseMapSeries = _asyncToGenerator(function* (promises, fn) {
    for (const o of yield promises) {
      yield fn(yield o);
    }
  });
  return _promiseMapSeries.apply(this, arguments);
}

function promiseTry(fn) {
  return new Promise(resolve => resolve(fn()));
} // Creates and awaits all promises, running no more than `chunkSize` at the same time


function chunkPromises(_x3, _x4) {
  return _chunkPromises.apply(this, arguments);
} // We need to be able to access the Node.js crypto library from within the
// Matrix SDK without needing to `require("crypto")`, which will fail in
// browsers.  So `index.ts` will call `setCrypto` to store it, and when we need
// it, we can call `getCrypto`.


function _chunkPromises() {
  _chunkPromises = _asyncToGenerator(function* (fns, chunkSize) {
    const results = [];

    for (let i = 0; i < fns.length; i += chunkSize) {
      results.push(...(yield Promise.all(fns.slice(i, i + chunkSize).map(fn => fn()))));
    }

    return results;
  });
  return _chunkPromises.apply(this, arguments);
}

let crypto;

function setCrypto(c) {
  crypto = c;
}

function getCrypto() {
  return crypto;
}

/***/ }),

/***/ "399f":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = __webpack_require__(5).Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})( false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("62e4")(module)))

/***/ }),

/***/ "3a7c":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("b639").Buffer))

/***/ }),

/***/ "3a9b":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "3b29":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "body[data-v-0635047f]{--sweetalert-icons-animation-background:transparent}.sa[data-v-0635047f]{width:140px;height:140px;padding:26px;margin:auto}.sa-loading[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color-alpha);left:-4px;top:-4px;z-index:2;border-top:4px solid var(--icon-color);-webkit-animation:animateLoadingSpin-data-v-0635047f .75s infinite;animation:animateLoadingSpin-data-v-0635047f .75s infinite}.sa-error[data-v-0635047f],.sa-loading[data-v-0635047f]{box-sizing:content-box;height:80px;position:relative;width:80px}.sa-error[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color);padding:0;-webkit-animation:animateErrorIcon-data-v-0635047f .5s;animation:animateErrorIcon-data-v-0635047f .5s}.sa-error[data-v-0635047f]:after,.sa-error[data-v-0635047f]:before{content:\"\";height:120px;position:absolute;transform:rotate(45deg);width:60px}.sa-error[data-v-0635047f]:before{border-radius:40px 0 0 40px;width:26px;height:80px;top:-17px;left:5px;transform-origin:60px 60px;transform:rotate(-45deg)}.sa-error[data-v-0635047f]:after{border-radius:0 120px 120px 0;left:30px;top:-11px;transform-origin:0 60px;transform:rotate(-45deg);-webkit-animation:rotatePlaceholder-data-v-0635047f 4.25s ease-in;animation:rotatePlaceholder-data-v-0635047f 4.25s ease-in}.sa-error-x[data-v-0635047f]{display:block;position:relative;z-index:2}.sa-error-placeholder[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color-alpha);box-sizing:content-box;height:80px;left:-4px;position:absolute;top:-4px;width:80px;z-index:2}.sa-error-fix[data-v-0635047f]{height:90px;left:28px;position:absolute;top:8px;transform:rotate(-45deg);width:5px;z-index:1}.sa-error-left[data-v-0635047f],.sa-error-right[data-v-0635047f]{border-radius:2px;display:block;height:5px;position:absolute;z-index:2;background-color:var(--icon-color);top:37px;width:47px}.sa-error-left[data-v-0635047f]{left:17px;transform:rotate(45deg);-webkit-animation:animateXLeft-data-v-0635047f .75s;animation:animateXLeft-data-v-0635047f .75s}.sa-error-right[data-v-0635047f]{right:16px;transform:rotate(-45deg);-webkit-animation:animateXRight-data-v-0635047f .75s;animation:animateXRight-data-v-0635047f .75s}.sa-warning[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color);box-sizing:content-box;height:80px;padding:0;position:relative;width:80px;-webkit-animation:scaleWarning-data-v-0635047f .75s infinite alternate;animation:scaleWarning-data-v-0635047f .75s infinite alternate}.sa-warning[data-v-0635047f]:after,.sa-warning[data-v-0635047f]:before{content:\"\";border-radius:50%;height:100%;position:absolute;width:100%}.sa-warning[data-v-0635047f]:before{display:inline-block;opacity:0;-webkit-animation:pulseWarning-data-v-0635047f 2s linear infinite;animation:pulseWarning-data-v-0635047f 2s linear infinite}.sa-warning[data-v-0635047f]:after{display:block;z-index:1}.sa-warning-body[data-v-0635047f]{border-radius:2px;height:47px;margin-left:-2px;top:10px;width:5px}.sa-warning-body[data-v-0635047f],.sa-warning-dot[data-v-0635047f]{background-color:var(--icon-color);left:50%;position:absolute;z-index:2;-webkit-animation:pulseWarningIns-data-v-0635047f .75s infinite alternate;animation:pulseWarningIns-data-v-0635047f .75s infinite alternate}.sa-warning-dot[data-v-0635047f]{border-radius:50%;bottom:10px;height:7px;margin-left:-3px;width:7px}.sa-info[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color);box-sizing:content-box;height:80px;padding:0;position:relative;width:80px;-webkit-animation:scaleInfo-data-v-0635047f .75s infinite alternate;animation:scaleInfo-data-v-0635047f .75s infinite alternate}.sa-info[data-v-0635047f]:after,.sa-info[data-v-0635047f]:before{content:\"\";border-radius:50%;height:100%;position:absolute;width:100%}.sa-info[data-v-0635047f]:before{display:inline-block;opacity:0;-webkit-animation:pulseInfo-data-v-0635047f 2s linear infinite;animation:pulseInfo-data-v-0635047f 2s linear infinite}.sa-info[data-v-0635047f]:after{display:block;z-index:1}.sa-info-body[data-v-0635047f]{border-radius:2px;height:47px;margin-left:-2px;top:10px;width:5px}.sa-info-body[data-v-0635047f],.sa-info-dot[data-v-0635047f]{background-color:var(--icon-color);left:50%;position:absolute;z-index:2;-webkit-animation:pulseInfoIns-data-v-0635047f .75s infinite alternate;animation:pulseInfoIns-data-v-0635047f .75s infinite alternate}.sa-info-dot[data-v-0635047f]{border-radius:50%;bottom:10px;height:7px;margin-left:-3px;width:7px}.sa-success[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color);box-sizing:content-box;height:80px;padding:0;position:relative;width:80px}.sa-success[data-v-0635047f],.sa-success[data-v-0635047f]:after,.sa-success[data-v-0635047f]:before{background-color:var(--sweetalert-icons-animation-background)}.sa-success[data-v-0635047f]:after,.sa-success[data-v-0635047f]:before{content:\"\";height:120px;position:absolute;transform:rotate(45deg);width:60px}.sa-success[data-v-0635047f]:before{border-radius:40px 0 0 40px;width:26px;height:80px;top:-17px;left:5px;transform-origin:60px 60px;transform:rotate(-45deg)}.sa-success[data-v-0635047f]:after{border-radius:0 120px 120px 0;left:30px;top:-11px;transform-origin:0 60px;transform:rotate(-45deg);-webkit-animation:rotatePlaceholder-data-v-0635047f 4.25s ease-in;animation:rotatePlaceholder-data-v-0635047f 4.25s ease-in}.sa-success-placeholder[data-v-0635047f]{border-radius:50%;border:4px solid var(--icon-color-alpha);box-sizing:content-box;height:80px;left:-4px;position:absolute;top:-4px;width:80px;z-index:2}.sa-success-fix[data-v-0635047f]{background-color:var(--sweetalert-icons-animation-background);height:90px;left:28px;position:absolute;top:8px;transform:rotate(-45deg);width:5px;z-index:1}.sa-success-long[data-v-0635047f],.sa-success-tip[data-v-0635047f]{background-color:var(--icon-color);border-radius:2px;height:5px;position:absolute;z-index:2}.sa-success-tip[data-v-0635047f]{left:14px;top:46px;transform:rotate(45deg);width:25px;-webkit-animation:animateSuccessTip-data-v-0635047f .75s;animation:animateSuccessTip-data-v-0635047f .75s}.sa-success-long[data-v-0635047f]{right:8px;top:38px;transform:rotate(-45deg);width:47px;-webkit-animation:animateSuccessLong-data-v-0635047f .75s;animation:animateSuccessLong-data-v-0635047f .75s}@-webkit-keyframes animateSuccessTip-data-v-0635047f{0%,54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@keyframes animateSuccessTip-data-v-0635047f{0%,54%{width:0;left:1px;top:19px}70%{width:50px;left:-8px;top:37px}84%{width:17px;left:21px;top:48px}to{width:25px;left:14px;top:45px}}@-webkit-keyframes animateSuccessLong-data-v-0635047f{0%,65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@keyframes animateSuccessLong-data-v-0635047f{0%,65%{width:0;right:46px;top:54px}84%{width:55px;right:0;top:35px}to{width:47px;right:8px;top:38px}}@-webkit-keyframes rotatePlaceholder-data-v-0635047f{0%,5%{transform:rotate(-45deg)}12%,to{transform:rotate(-405deg)}}@keyframes rotatePlaceholder-data-v-0635047f{0%,5%{transform:rotate(-45deg)}12%,to{transform:rotate(-405deg)}}@-webkit-keyframes scaleWarning-data-v-0635047f{0%{transform:scale(1)}30%{transform:scale(1.02)}to{transform:scale(1)}}@keyframes scaleWarning-data-v-0635047f{0%{transform:scale(1)}30%{transform:scale(1.02)}to{transform:scale(1)}}@-webkit-keyframes pulseWarning-data-v-0635047f{0%{transform:scale(1);opacity:.5}30%{transform:scale(1);opacity:.5}to{background-color:var(--icon-color);transform:scale(2);opacity:0}}@keyframes pulseWarning-data-v-0635047f{0%{transform:scale(1);opacity:.5}30%{transform:scale(1);opacity:.5}to{background-color:var(--icon-color);transform:scale(2);opacity:0}}@-webkit-keyframes pulseWarningIns-data-v-0635047f{0%{filter:brightness(1.2)}to{filter:brightness(1)}}@keyframes pulseWarningIns-data-v-0635047f{0%{filter:brightness(1.2)}to{filter:brightness(1)}}@-webkit-keyframes scaleInfo-data-v-0635047f{0%{transform:scale(1)}30%{transform:scale(1.02)}to{transform:scale(1)}}@keyframes scaleInfo-data-v-0635047f{0%{transform:scale(1)}30%{transform:scale(1.02)}to{transform:scale(1)}}@-webkit-keyframes pulseInfo-data-v-0635047f{0%{transform:scale(1);opacity:.5}30%{transform:scale(1);opacity:.5}to{background-color:var(--icon-color);transform:scale(2);opacity:0}}@keyframes pulseInfo-data-v-0635047f{0%{transform:scale(1);opacity:.5}30%{transform:scale(1);opacity:.5}to{background-color:var(--icon-color);transform:scale(2);opacity:0}}@-webkit-keyframes pulseInfoIns-data-v-0635047f{0%{background-color:var(--icon-color)}to{background-color:var(--icon-color)}}@keyframes pulseInfoIns-data-v-0635047f{0%{background-color:var(--icon-color)}to{background-color:var(--icon-color)}}@-webkit-keyframes animateErrorIcon-data-v-0635047f{0%{transform:rotateX(100deg);opacity:0}to{transform:rotateX(0deg);opacity:1}}@keyframes animateErrorIcon-data-v-0635047f{0%{transform:rotateX(100deg);opacity:0}to{transform:rotateX(0deg);opacity:1}}@-webkit-keyframes animateXLeft-data-v-0635047f{0%,65%{left:82px;top:95px;width:0}84%{left:14px;top:33px;width:47px}to{left:17px;top:37px;width:47px}}@keyframes animateXLeft-data-v-0635047f{0%,65%{left:82px;top:95px;width:0}84%{left:14px;top:33px;width:47px}to{left:17px;top:37px;width:47px}}@-webkit-keyframes animateXRight-data-v-0635047f{0%,65%{right:82px;top:95px;width:0}84%{right:14px;top:33px;width:47px}to{right:16px;top:37px;width:47px}}@keyframes animateXRight-data-v-0635047f{0%,65%{right:82px;top:95px;width:0}84%{right:14px;top:33px;width:47px}to{right:16px;top:37px;width:47px}}@-webkit-keyframes animateLoadingSpin-data-v-0635047f{0%{transform:rotate(-45deg)}to{transform:rotate(-405deg)}}@keyframes animateLoadingSpin-data-v-0635047f{0%{transform:rotate(-45deg)}to{transform:rotate(-405deg)}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "3bbe":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("1626");

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};


/***/ }),

/***/ "3c2f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.upgradeDatabase = upgradeDatabase;
exports.Backend = exports.VERSION = void 0;

var _logger = __webpack_require__("63c7");

var utils = _interopRequireWildcard(__webpack_require__("3987"));
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


const VERSION = 10;
exports.VERSION = VERSION;
const PROFILE_TRANSACTIONS = false;
/**
 * Implementation of a CryptoStore which is backed by an existing
 * IndexedDB connection. Generally you want IndexedDBCryptoStore
 * which connects to the database and defers to one of these.
 *
 * @implements {module:crypto/store/base~CryptoStore}
 */

class Backend {
  /**
   * @param {IDBDatabase} db
   */
  constructor(db) {
    this._db = db;
    this._nextTxnId = 0; // make sure we close the db on `onversionchange` - otherwise
    // attempts to delete the database will block (and subsequent
    // attempts to re-create it will also block).

    db.onversionchange = ev => {
      _logger.logger.log(`versionchange for indexeddb ${this._dbName}: closing`);

      db.close();
    };
  }
  /**
   * Look for an existing outgoing room key request, and if none is found,
   * add a new one
   *
   * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the
   *    same instance as passed in, or the existing one.
   */


  getOrAddOutgoingRoomKeyRequest(request) {
    const requestBody = request.requestBody;
    return new Promise((resolve, reject) => {
      const txn = this._db.transaction("outgoingRoomKeyRequests", "readwrite");

      txn.onerror = reject; // first see if we already have an entry for this request.

      this._getOutgoingRoomKeyRequest(txn, requestBody, existing => {
        if (existing) {
          // this entry matches the request - return it.
          _logger.logger.log(`already have key request outstanding for ` + `${requestBody.room_id} / ${requestBody.session_id}: ` + `not sending another`);

          resolve(existing);
          return;
        } // we got to the end of the list without finding a match
        // - add the new request.


        _logger.logger.log(`enqueueing key request for ${requestBody.room_id} / ` + requestBody.session_id);

        txn.oncomplete = () => {
          resolve(request);
        };

        const store = txn.objectStore("outgoingRoomKeyRequests");
        store.add(request);
      });
    });
  }
  /**
   * Look for an existing room key request
   *
   * @param {module:crypto~RoomKeyRequestBody} requestBody
   *    existing request to look for
   *
   * @return {Promise} resolves to the matching
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    not found
   */


  getOutgoingRoomKeyRequest(requestBody) {
    return new Promise((resolve, reject) => {
      const txn = this._db.transaction("outgoingRoomKeyRequests", "readonly");

      txn.onerror = reject;

      this._getOutgoingRoomKeyRequest(txn, requestBody, existing => {
        resolve(existing);
      });
    });
  }
  /**
   * look for an existing room key request in the db
   *
   * @private
   * @param {IDBTransaction} txn  database transaction
   * @param {module:crypto~RoomKeyRequestBody} requestBody
   *    existing request to look for
   * @param {Function} callback  function to call with the results of the
   *    search. Either passed a matching
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    not found.
   */


  _getOutgoingRoomKeyRequest(txn, requestBody, callback) {
    const store = txn.objectStore("outgoingRoomKeyRequests");
    const idx = store.index("session");
    const cursorReq = idx.openCursor([requestBody.room_id, requestBody.session_id]);

    cursorReq.onsuccess = ev => {
      const cursor = ev.target.result;

      if (!cursor) {
        // no match found
        callback(null);
        return;
      }

      const existing = cursor.value;

      if (utils.deepCompare(existing.requestBody, requestBody)) {
        // got a match
        callback(existing);
        return;
      } // look at the next entry in the index


      cursor.continue();
    };
  }
  /**
   * Look for room key requests by state
   *
   * @param {Array<Number>} wantedStates list of acceptable states
   *
   * @return {Promise} resolves to the a
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    there are no pending requests in those states. If there are multiple
   *    requests in those states, an arbitrary one is chosen.
   */


  getOutgoingRoomKeyRequestByState(wantedStates) {
    if (wantedStates.length === 0) {
      return Promise.resolve(null);
    } // this is a bit tortuous because we need to make sure we do the lookup
    // in a single transaction, to avoid having a race with the insertion
    // code.
    // index into the wantedStates array


    let stateIndex = 0;
    let result;

    function onsuccess(ev) {
      const cursor = ev.target.result;

      if (cursor) {
        // got a match
        result = cursor.value;
        return;
      } // try the next state in the list


      stateIndex++;

      if (stateIndex >= wantedStates.length) {
        // no matches
        return;
      }

      const wantedState = wantedStates[stateIndex];
      const cursorReq = ev.target.source.openCursor(wantedState);
      cursorReq.onsuccess = onsuccess;
    }

    const txn = this._db.transaction("outgoingRoomKeyRequests", "readonly");

    const store = txn.objectStore("outgoingRoomKeyRequests");
    const wantedState = wantedStates[stateIndex];
    const cursorReq = store.index("state").openCursor(wantedState);
    cursorReq.onsuccess = onsuccess;
    return promiseifyTxn(txn).then(() => result);
  }
  /**
   *
   * @param {Number} wantedState
   * @return {Promise<Array<*>>} All elements in a given state
   */


  getAllOutgoingRoomKeyRequestsByState(wantedState) {
    return new Promise((resolve, reject) => {
      const txn = this._db.transaction("outgoingRoomKeyRequests", "readonly");

      const store = txn.objectStore("outgoingRoomKeyRequests");
      const index = store.index("state");
      const request = index.getAll(wantedState);

      request.onsuccess = ev => resolve(ev.target.result);

      request.onerror = ev => reject(ev.target.error);
    });
  }

  getOutgoingRoomKeyRequestsByTarget(userId, deviceId, wantedStates) {
    let stateIndex = 0;
    const results = [];

    function onsuccess(ev) {
      const cursor = ev.target.result;

      if (cursor) {
        const keyReq = cursor.value;

        if (keyReq.recipients.includes({
          userId,
          deviceId
        })) {
          results.push(keyReq);
        }

        cursor.continue();
      } else {
        // try the next state in the list
        stateIndex++;

        if (stateIndex >= wantedStates.length) {
          // no matches
          return;
        }

        const wantedState = wantedStates[stateIndex];
        const cursorReq = ev.target.source.openCursor(wantedState);
        cursorReq.onsuccess = onsuccess;
      }
    }

    const txn = this._db.transaction("outgoingRoomKeyRequests", "readonly");

    const store = txn.objectStore("outgoingRoomKeyRequests");
    const wantedState = wantedStates[stateIndex];
    const cursorReq = store.index("state").openCursor(wantedState);
    cursorReq.onsuccess = onsuccess;
    return promiseifyTxn(txn).then(() => results);
  }
  /**
   * Look for an existing room key request by id and state, and update it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   * @param {Object} updates        name/value map of updates to apply
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}
   *    updated request, or null if no matching row was found
   */


  updateOutgoingRoomKeyRequest(requestId, expectedState, updates) {
    let result = null;

    function onsuccess(ev) {
      const cursor = ev.target.result;

      if (!cursor) {
        return;
      }

      const data = cursor.value;

      if (data.state != expectedState) {
        _logger.logger.warn(`Cannot update room key request from ${expectedState} ` + `as it was already updated to ${data.state}`);

        return;
      }

      Object.assign(data, updates);
      cursor.update(data);
      result = data;
    }

    const txn = this._db.transaction("outgoingRoomKeyRequests", "readwrite");

    const cursorReq = txn.objectStore("outgoingRoomKeyRequests").openCursor(requestId);
    cursorReq.onsuccess = onsuccess;
    return promiseifyTxn(txn).then(() => result);
  }
  /**
   * Look for an existing room key request by id and state, and delete it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   *
   * @returns {Promise} resolves once the operation is completed
   */


  deleteOutgoingRoomKeyRequest(requestId, expectedState) {
    const txn = this._db.transaction("outgoingRoomKeyRequests", "readwrite");

    const cursorReq = txn.objectStore("outgoingRoomKeyRequests").openCursor(requestId);

    cursorReq.onsuccess = ev => {
      const cursor = ev.target.result;

      if (!cursor) {
        return;
      }

      const data = cursor.value;

      if (data.state != expectedState) {
        _logger.logger.warn(`Cannot delete room key request in state ${data.state} ` + `(expected ${expectedState})`);

        return;
      }

      cursor.delete();
    };

    return promiseifyTxn(txn);
  } // Olm Account


  getAccount(txn, func) {
    const objectStore = txn.objectStore("account");
    const getReq = objectStore.get("-");

    getReq.onsuccess = function () {
      try {
        func(getReq.result || null);
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  storeAccount(txn, newData) {
    const objectStore = txn.objectStore("account");
    objectStore.put(newData, "-");
  }

  getCrossSigningKeys(txn, func) {
    const objectStore = txn.objectStore("account");
    const getReq = objectStore.get("crossSigningKeys");

    getReq.onsuccess = function () {
      try {
        func(getReq.result || null);
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  getSecretStorePrivateKey(txn, func, type) {
    const objectStore = txn.objectStore("account");
    const getReq = objectStore.get(`ssss_cache:${type}`);

    getReq.onsuccess = function () {
      try {
        func(getReq.result || null);
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  storeCrossSigningKeys(txn, keys) {
    const objectStore = txn.objectStore("account");
    objectStore.put(keys, "crossSigningKeys");
  }

  storeSecretStorePrivateKey(txn, type, key) {
    const objectStore = txn.objectStore("account");
    objectStore.put(key, `ssss_cache:${type}`);
  } // Olm Sessions


  countEndToEndSessions(txn, func) {
    const objectStore = txn.objectStore("sessions");
    const countReq = objectStore.count();

    countReq.onsuccess = function () {
      try {
        func(countReq.result);
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  getEndToEndSessions(deviceKey, txn, func) {
    const objectStore = txn.objectStore("sessions");
    const idx = objectStore.index("deviceKey");
    const getReq = idx.openCursor(deviceKey);
    const results = {};

    getReq.onsuccess = function () {
      const cursor = getReq.result;

      if (cursor) {
        results[cursor.value.sessionId] = {
          session: cursor.value.session,
          lastReceivedMessageTs: cursor.value.lastReceivedMessageTs
        };
        cursor.continue();
      } else {
        try {
          func(results);
        } catch (e) {
          abortWithException(txn, e);
        }
      }
    };
  }

  getEndToEndSession(deviceKey, sessionId, txn, func) {
    const objectStore = txn.objectStore("sessions");
    const getReq = objectStore.get([deviceKey, sessionId]);

    getReq.onsuccess = function () {
      try {
        if (getReq.result) {
          func({
            session: getReq.result.session,
            lastReceivedMessageTs: getReq.result.lastReceivedMessageTs
          });
        } else {
          func(null);
        }
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  getAllEndToEndSessions(txn, func) {
    const objectStore = txn.objectStore("sessions");
    const getReq = objectStore.openCursor();

    getReq.onsuccess = function () {
      try {
        const cursor = getReq.result;

        if (cursor) {
          func(cursor.value);
          cursor.continue();
        } else {
          func(null);
        }
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn) {
    const objectStore = txn.objectStore("sessions");
    objectStore.put({
      deviceKey,
      sessionId,
      session: sessionInfo.session,
      lastReceivedMessageTs: sessionInfo.lastReceivedMessageTs
    });
  }

  storeEndToEndSessionProblem(deviceKey, type, fixed) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const txn = _this._db.transaction("session_problems", "readwrite");

      const objectStore = txn.objectStore("session_problems");
      objectStore.put({
        deviceKey,
        type,
        fixed,
        time: Date.now()
      });
      return promiseifyTxn(txn);
    })();
  }

  getEndToEndSessionProblem(deviceKey, timestamp) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      let result;

      const txn = _this2._db.transaction("session_problems", "readwrite");

      const objectStore = txn.objectStore("session_problems");
      const index = objectStore.index("deviceKey");
      const req = index.getAll(deviceKey);

      req.onsuccess = event => {
        const problems = req.result;

        if (!problems.length) {
          result = null;
          return;
        }

        problems.sort((a, b) => {
          return a.time - b.time;
        });
        const lastProblem = problems[problems.length - 1];

        for (const problem of problems) {
          if (problem.time > timestamp) {
            result = Object.assign({}, problem, {
              fixed: lastProblem.fixed
            });
            return;
          }
        }

        if (lastProblem.fixed) {
          result = null;
        } else {
          result = lastProblem;
        }
      };

      yield promiseifyTxn(txn);
      return result;
    })();
  } // FIXME: we should probably prune this when devices get deleted


  filterOutNotifiedErrorDevices(devices) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const txn = _this3._db.transaction("notified_error_devices", "readwrite");

      const objectStore = txn.objectStore("notified_error_devices");
      const ret = [];
      yield Promise.all(devices.map(device => {
        return new Promise(resolve => {
          const {
            userId,
            deviceInfo
          } = device;
          const getReq = objectStore.get([userId, deviceInfo.deviceId]);

          getReq.onsuccess = function () {
            if (!getReq.result) {
              objectStore.put({
                userId,
                deviceId: deviceInfo.deviceId
              });
              ret.push(device);
            }

            resolve();
          };
        });
      }));
      return ret;
    })();
  } // Inbound group sessions


  getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func) {
    let session = false;
    let withheld = false;
    const objectStore = txn.objectStore("inbound_group_sessions");
    const getReq = objectStore.get([senderCurve25519Key, sessionId]);

    getReq.onsuccess = function () {
      try {
        if (getReq.result) {
          session = getReq.result.session;
        } else {
          session = null;
        }

        if (withheld !== false) {
          func(session, withheld);
        }
      } catch (e) {
        abortWithException(txn, e);
      }
    };

    const withheldObjectStore = txn.objectStore("inbound_group_sessions_withheld");
    const withheldGetReq = withheldObjectStore.get([senderCurve25519Key, sessionId]);

    withheldGetReq.onsuccess = function () {
      try {
        if (withheldGetReq.result) {
          withheld = withheldGetReq.result.session;
        } else {
          withheld = null;
        }

        if (session !== false) {
          func(session, withheld);
        }
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  getAllEndToEndInboundGroupSessions(txn, func) {
    const objectStore = txn.objectStore("inbound_group_sessions");
    const getReq = objectStore.openCursor();

    getReq.onsuccess = function () {
      const cursor = getReq.result;

      if (cursor) {
        try {
          func({
            senderKey: cursor.value.senderCurve25519Key,
            sessionId: cursor.value.sessionId,
            sessionData: cursor.value.session
          });
        } catch (e) {
          abortWithException(txn, e);
        }

        cursor.continue();
      } else {
        try {
          func(null);
        } catch (e) {
          abortWithException(txn, e);
        }
      }
    };
  }

  addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    const objectStore = txn.objectStore("inbound_group_sessions");
    const addReq = objectStore.add({
      senderCurve25519Key,
      sessionId,
      session: sessionData
    });

    addReq.onerror = ev => {
      if (addReq.error.name === 'ConstraintError') {
        // This stops the error from triggering the txn's onerror
        ev.stopPropagation(); // ...and this stops it from aborting the transaction

        ev.preventDefault();

        _logger.logger.log("Ignoring duplicate inbound group session: " + senderCurve25519Key + " / " + sessionId);
      } else {
        abortWithException(txn, new Error("Failed to add inbound group session: " + addReq.error));
      }
    };
  }

  storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    const objectStore = txn.objectStore("inbound_group_sessions");
    objectStore.put({
      senderCurve25519Key,
      sessionId,
      session: sessionData
    });
  }

  storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn) {
    const objectStore = txn.objectStore("inbound_group_sessions_withheld");
    objectStore.put({
      senderCurve25519Key,
      sessionId,
      session: sessionData
    });
  }

  getEndToEndDeviceData(txn, func) {
    const objectStore = txn.objectStore("device_data");
    const getReq = objectStore.get("-");

    getReq.onsuccess = function () {
      try {
        func(getReq.result || null);
      } catch (e) {
        abortWithException(txn, e);
      }
    };
  }

  storeEndToEndDeviceData(deviceData, txn) {
    const objectStore = txn.objectStore("device_data");
    objectStore.put(deviceData, "-");
  }

  storeEndToEndRoom(roomId, roomInfo, txn) {
    const objectStore = txn.objectStore("rooms");
    objectStore.put(roomInfo, roomId);
  }

  getEndToEndRooms(txn, func) {
    const rooms = {};
    const objectStore = txn.objectStore("rooms");
    const getReq = objectStore.openCursor();

    getReq.onsuccess = function () {
      const cursor = getReq.result;

      if (cursor) {
        rooms[cursor.key] = cursor.value;
        cursor.continue();
      } else {
        try {
          func(rooms);
        } catch (e) {
          abortWithException(txn, e);
        }
      }
    };
  } // session backups


  getSessionsNeedingBackup(limit) {
    return new Promise((resolve, reject) => {
      const sessions = [];

      const txn = this._db.transaction(["sessions_needing_backup", "inbound_group_sessions"], "readonly");

      txn.onerror = reject;

      txn.oncomplete = function () {
        resolve(sessions);
      };

      const objectStore = txn.objectStore("sessions_needing_backup");
      const sessionStore = txn.objectStore("inbound_group_sessions");
      const getReq = objectStore.openCursor();

      getReq.onsuccess = function () {
        const cursor = getReq.result;

        if (cursor) {
          const sessionGetReq = sessionStore.get(cursor.key);

          sessionGetReq.onsuccess = function () {
            sessions.push({
              senderKey: sessionGetReq.result.senderCurve25519Key,
              sessionId: sessionGetReq.result.sessionId,
              sessionData: sessionGetReq.result.session
            });
          };

          if (!limit || sessions.length < limit) {
            cursor.continue();
          }
        }
      };
    });
  }

  countSessionsNeedingBackup(txn) {
    if (!txn) {
      txn = this._db.transaction("sessions_needing_backup", "readonly");
    }

    const objectStore = txn.objectStore("sessions_needing_backup");
    return new Promise((resolve, reject) => {
      const req = objectStore.count();
      req.onerror = reject;

      req.onsuccess = () => resolve(req.result);
    });
  }

  unmarkSessionsNeedingBackup(sessions, txn) {
    if (!txn) {
      txn = this._db.transaction("sessions_needing_backup", "readwrite");
    }

    const objectStore = txn.objectStore("sessions_needing_backup");
    return Promise.all(sessions.map(session => {
      return new Promise((resolve, reject) => {
        const req = objectStore.delete([session.senderKey, session.sessionId]);
        req.onsuccess = resolve;
        req.onerror = reject;
      });
    }));
  }

  markSessionsNeedingBackup(sessions, txn) {
    if (!txn) {
      txn = this._db.transaction("sessions_needing_backup", "readwrite");
    }

    const objectStore = txn.objectStore("sessions_needing_backup");
    return Promise.all(sessions.map(session => {
      return new Promise((resolve, reject) => {
        const req = objectStore.put({
          senderCurve25519Key: session.senderKey,
          sessionId: session.sessionId
        });
        req.onsuccess = resolve;
        req.onerror = reject;
      });
    }));
  }

  addSharedHistoryInboundGroupSession(roomId, senderKey, sessionId, txn) {
    if (!txn) {
      txn = this._db.transaction("shared_history_inbound_group_sessions", "readwrite");
    }

    const objectStore = txn.objectStore("shared_history_inbound_group_sessions");
    const req = objectStore.get([roomId]);

    req.onsuccess = () => {
      const {
        sessions
      } = req.result || {
        sessions: []
      };
      sessions.push([senderKey, sessionId]);
      objectStore.put({
        roomId,
        sessions
      });
    };
  }

  getSharedHistoryInboundGroupSessions(roomId, txn) {
    if (!txn) {
      txn = this._db.transaction("shared_history_inbound_group_sessions", "readonly");
    }

    const objectStore = txn.objectStore("shared_history_inbound_group_sessions");
    const req = objectStore.get([roomId]);
    return new Promise((resolve, reject) => {
      req.onsuccess = () => {
        const {
          sessions
        } = req.result || {
          sessions: []
        };
        resolve(sessions);
      };

      req.onerror = reject;
    });
  }

  doTxn(mode, stores, func) {
    let log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _logger.logger;
    let startTime;
    let description;

    if (PROFILE_TRANSACTIONS) {
      const txnId = this._nextTxnId++;
      startTime = Date.now();
      description = `${mode} crypto store transaction ${txnId} in ${stores}`;
      log.debug(`Starting ${description}`);
    }

    const txn = this._db.transaction(stores, mode);

    const promise = promiseifyTxn(txn);
    const result = func(txn);

    if (PROFILE_TRANSACTIONS) {
      promise.then(() => {
        const elapsedTime = Date.now() - startTime;
        log.debug(`Finished ${description}, took ${elapsedTime} ms`);
      }, () => {
        const elapsedTime = Date.now() - startTime;
        log.error(`Failed ${description}, took ${elapsedTime} ms`);
      });
    }

    return promise.then(() => {
      return result;
    });
  }

}

exports.Backend = Backend;

function upgradeDatabase(db, oldVersion) {
  _logger.logger.log(`Upgrading IndexedDBCryptoStore from version ${oldVersion}` + ` to ${VERSION}`);

  if (oldVersion < 1) {
    // The database did not previously exist.
    createDatabase(db);
  }

  if (oldVersion < 2) {
    db.createObjectStore("account");
  }

  if (oldVersion < 3) {
    const sessionsStore = db.createObjectStore("sessions", {
      keyPath: ["deviceKey", "sessionId"]
    });
    sessionsStore.createIndex("deviceKey", "deviceKey");
  }

  if (oldVersion < 4) {
    db.createObjectStore("inbound_group_sessions", {
      keyPath: ["senderCurve25519Key", "sessionId"]
    });
  }

  if (oldVersion < 5) {
    db.createObjectStore("device_data");
  }

  if (oldVersion < 6) {
    db.createObjectStore("rooms");
  }

  if (oldVersion < 7) {
    db.createObjectStore("sessions_needing_backup", {
      keyPath: ["senderCurve25519Key", "sessionId"]
    });
  }

  if (oldVersion < 8) {
    db.createObjectStore("inbound_group_sessions_withheld", {
      keyPath: ["senderCurve25519Key", "sessionId"]
    });
  }

  if (oldVersion < 9) {
    const problemsStore = db.createObjectStore("session_problems", {
      keyPath: ["deviceKey", "time"]
    });
    problemsStore.createIndex("deviceKey", "deviceKey");
    db.createObjectStore("notified_error_devices", {
      keyPath: ["userId", "deviceId"]
    });
  }

  if (oldVersion < 10) {
    db.createObjectStore("shared_history_inbound_group_sessions", {
      keyPath: ["roomId"]
    });
  } // Expand as needed.

}

function createDatabase(db) {
  const outgoingRoomKeyRequestsStore = db.createObjectStore("outgoingRoomKeyRequests", {
    keyPath: "requestId"
  }); // we assume that the RoomKeyRequestBody will have room_id and session_id
  // properties, to make the index efficient.

  outgoingRoomKeyRequestsStore.createIndex("session", ["requestBody.room_id", "requestBody.session_id"]);
  outgoingRoomKeyRequestsStore.createIndex("state", "state");
}
/*
 * Aborts a transaction with a given exception
 * The transaction promise will be rejected with this exception.
 */


function abortWithException(txn, e) {
  // We cheekily stick our exception onto the transaction object here
  // We could alternatively make the thing we pass back to the app
  // an object containing the transaction and exception.
  txn._mx_abortexception = e;

  try {
    txn.abort();
  } catch (e) {// sometimes we won't be able to abort the transaction
    // (ie. if it's aborted or completed)
  }
}

function promiseifyTxn(txn) {
  return new Promise((resolve, reject) => {
    txn.oncomplete = () => {
      if (txn._mx_abortexception !== undefined) {
        reject(txn._mx_abortexception);
      }

      resolve();
    };

    txn.onerror = event => {
      if (txn._mx_abortexception !== undefined) {
        reject(txn._mx_abortexception);
      } else {
        _logger.logger.log("Error performing indexeddb txn", event);

        reject(event.target.error);
      }
    };

    txn.onabort = event => {
      if (txn._mx_abortexception !== undefined) {
        reject(txn._mx_abortexception);
      } else {
        _logger.logger.log("Error performing indexeddb txn", event);

        reject(event.target.error);
      }
    };
  });
}

/***/ }),

/***/ "3d2e":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#linepreloader[data-v-bcf20e38]{display:inline-block;font-size:0;padding:0}#linepreloader span[data-v-bcf20e38]{vertical-align:middle;border-radius:50%;background:rgb(var(--neutral-grad-2));display:inline-block;width:6px;height:6px;margin:3px 2px;-webkit-animation:linepreloader-data-v-bcf20e38 .8s linear infinite alternate;animation:linepreloader-data-v-bcf20e38 .8s linear infinite alternate}#linepreloader span[data-v-bcf20e38]:first-child{-webkit-animation-delay:-.8;animation-delay:-.8s}#linepreloader span[data-v-bcf20e38]:nth-child(2){-webkit-animation-delay:-.53333s;animation-delay:-.53333s}#linepreloader span[data-v-bcf20e38]:nth-child(3){-webkit-animation-delay:-.26666s;animation-delay:-.26666s}@keyframes linepreloader-data-v-bcf20e38{0%{transform:scale(0)}to{transform:scale(1)}}@-webkit-keyframes linepreloader-data-v-bcf20e38{0%{-webkit-transform:scale(0)}to{-webkit-transform:scale(1)}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "3da4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReEmitter = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


class ReEmitter {
  constructor(target) {
    (0, _defineProperty2.default)(this, "target", void 0);
    this.target = target;
  }

  reEmit(source, eventNames) {
    var _this = this;

    for (const eventName of eventNames) {
      // We include the source as the last argument for event handlers which may need it,
      // such as read receipt listeners on the client class which won't have the context
      // of the room.
      const forSource = function () {
        // EventEmitter special cases 'error' to make the emit function throw if no
        // handler is attached, which sort of makes sense for making sure that something
        // handles an error, but for re-emitting, there could be a listener on the original
        // source object so the test doesn't really work. We *could* try to replicate the
        // same logic and throw if there is no listener on either the source or the target,
        // but this behaviour is fairly undesireable for us anyway: the main place we throw
        // 'error' events is for calls, where error events are usually emitted some time
        // later by a different part of the code where 'emit' throwing because the app hasn't
        // added an error handler isn't terribly helpful. (A better fix in retrospect may
        // have been to just avoid using the event name 'error', but backwards compat...)
        if (eventName === 'error' && _this.target.listenerCount('error') === 0) return;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.target.emit(eventName, ...args, source);
      };

      source.on(eventName, forSource);
    }
  }

}

exports.ReEmitter = ReEmitter;

/***/ }),

/***/ "3db6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/** Exceptions */
__export(__webpack_require__("8e08"));
/** Symmetric encryption APIs */
var aead_1 = __webpack_require__("1467");
exports.AEAD = aead_1.AEAD;
var siv_1 = __webpack_require__("956b");
exports.SIV = siv_1.SIV;
/** STREAM streaming encryption */
var stream_1 = __webpack_require__("023f");
exports.StreamEncryptor = stream_1.StreamEncryptor;
exports.StreamDecryptor = stream_1.StreamDecryptor;
/** MAC functions */
var cmac_1 = __webpack_require__("8e26");
exports.CMAC = cmac_1.CMAC;
var pmac_1 = __webpack_require__("9bed");
exports.PMAC = pmac_1.PMAC;
/** Crypto providers */
var polyfill_1 = __webpack_require__("b07c");
exports.PolyfillCryptoProvider = polyfill_1.PolyfillCryptoProvider;
var webcrypto_1 = __webpack_require__("9060");
exports.WebCryptoProvider = webcrypto_1.WebCryptoProvider;


/***/ }),

/***/ "3dc0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/** Number of trailing zeros in a given byte value */
const CTZ_TABLE = new Uint8Array([
    8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
]);
/** Count the number of trailing zeroes in a given number */
function ctz(value) {
    return CTZ_TABLE[value];
}
exports.ctz = ctz;


/***/ }),

/***/ "3dc4":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".footer-chat[data-v-517e1e1f]{bottom:0;left:0;right:0;background:rgb(var(--background-total-theme));border-top:1px solid rgb(var(--background-secondary-theme));position:absolute;height:90px;padding-bottom:30px}.footer-chat.bout[data-v-517e1e1f]{position:fixed;will-change:transform}.footer-chat .work[data-v-517e1e1f]{height:100%;padding:0!important}.footer-chat.bin[data-v-517e1e1f]{border-top:0;position:static}.footer-chat.fix[data-v-517e1e1f]{position:absolute;height:auto}.footer-chat.fix.minimized[data-v-517e1e1f]{background:transparent;padding-bottom:0}.footer-chat.fix.minimized .menuItems[data-v-517e1e1f]{display:block;transition:.3s;padding-top:.5em}.footer-chat.fix.minimized .menuItems a[data-v-517e1e1f]{padding:0}.footer-chat.fix.minimized .menuItems .menuItem[data-v-517e1e1f]{width:44px;height:44px;background:rgba(var(--neutral-grad-3),.4);color:rgba(var(--neutral-grad-3),.8);border-radius:50%;border:1px solid transparent;margin-bottom:.25em;line-height:40px;transition:.3s}.footer-chat.fix.minimized .menuItems .menuItem .icon[data-v-517e1e1f]{color:rgb(var(--background-total-theme))}.footer-chat.fix.minimized .menuItems .menuItem .label[data-v-517e1e1f]{display:none}.footer-chat.fix.minimized .menuItems .menuItem i[data-v-517e1e1f]{vertical-align:middle;font-size:.8em}.footer-chat.fix.minimized .menuItems .menuItem.active[data-v-517e1e1f]{text-shadow:0 0 20px rgb(var(--color-bg-ac-bright)),0 0 20px rgb(var(--color-bg-ac-bright)),0 0 20px rgb(var(--color-bg-ac-bright)),0 0 20px rgb(var(--color-bg-ac-bright)),0 0 20px rgb(var(--color-bg-ac-bright));background:rgba(var(--color-bg-ac-bright),.9);border:1px solid rgba(var(--color-bg-ac-bright),.9);color:rgb(var(--background-total-theme))}.footer-chat.fix.minimized .menuItems .menuItem.active .icon[data-v-517e1e1f]{color:rgb(var(--background-total-theme))}.footer-chat.fix.minimized .menuItems .menuItem[data-v-517e1e1f]:hover:not(.active){background:rgba(var(--color-bg-ac-bright),.95);color:#fff;text-shadow:0 0 10px rgb(var(--color-bg-ac-bright)),0 0 15px rgb(var(--color-bg-ac-bright)),0 0 20px rgb(var(--color-bg-ac-bright)),0 0 25px rgb(var(--color-bg-ac-bright)),0 0 30px #02061a,0 0 35px rgb(var(--color-bg-ac-bright)),0 0 40px #02061a}.footer-chat.fix.minimized.active .menuItems[data-v-517e1e1f]{border-top:0}.menuItems[data-v-517e1e1f]{display:flex;justify-content:space-around;align-items:center;height:100%}.menuItems a[data-v-517e1e1f]{display:block;flex-grow:1;text-align:center;padding:1em;color:#213850}.menuItems .icon[data-v-517e1e1f]{font-size:.9em;color:rgba(var(--color-txt-gray-dark),.7)}.menuItems .label[data-v-517e1e1f]{font-size:.7em;position:absolute;bottom:0;left:0;right:0;line-height:1em;text-align:center;opacity:.7}.menuItems .menuItem[data-v-517e1e1f]{position:relative;text-align:center;cursor:pointer;width:64px;height:44px;line-height:44px}.menuItems .menuItem.active .icon[data-v-517e1e1f]{color:rgb(var(--color-txt-ac))}.menuItems .menuItem .unseen[data-v-517e1e1f]{position:absolute;width:22px;height:22px;right:-10%;bottom:-10%;background:rgba(var(--color-txt-ac),.9);line-height:22px;text-align:center;font-weight:500;border-radius:50%;z-index:2;font-size:.6em;color:rgb(var(--text-on-bg-ac-color))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "3eb1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("0f7c");
var GetIntrinsic = __webpack_require__("00ce");

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "3ed0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Relations = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _events = __webpack_require__("faa1");

var _event = __webpack_require__("a120");

var _logger = __webpack_require__("63c7");
/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * A container for relation events that supports easy access to common ways of
 * aggregating such events. Each instance holds events that of a single relation
 * type and event type. All of the events also relate to the same original event.
 *
 * The typical way to get one of these containers is via
 * EventTimelineSet#getRelationsForEvent.
 */


class Relations extends _events.EventEmitter {
  /**
   * @param {String} relationType
   * The type of relation involved, such as "m.annotation", "m.reference",
   * "m.replace", etc.
   * @param {String} eventType
   * The relation event's type, such as "m.reaction", etc.
   * @param {?Room} room
   * Room for this container. May be null for non-room cases, such as the
   * notification timeline.
   */
  constructor(relationType, eventType, room) {
    super();
    (0, _defineProperty2.default)(this, "_onEventStatus", (event, status) => {
      if (!event.isSending()) {
        // Sending is done, so we don't need to listen anymore
        event.removeListener("Event.status", this._onEventStatus);
        return;
      }

      if (status !== _event.EventStatus.CANCELLED) {
        return;
      } // Event was cancelled, remove from the collection


      event.removeListener("Event.status", this._onEventStatus);

      this._removeEvent(event);
    });
    (0, _defineProperty2.default)(this, "_onBeforeRedaction", redactedEvent => {
      if (!this._relations.has(redactedEvent)) {
        return;
      }

      this._relations.delete(redactedEvent);

      if (this.relationType === "m.annotation") {
        // Remove the redacted annotation from aggregation by key
        this._removeAnnotationFromAggregation(redactedEvent);
      } else if (this.relationType === "m.replace" && this._targetEvent) {
        this._targetEvent.makeReplaced(this.getLastReplacement());
      }

      redactedEvent.removeListener("Event.beforeRedaction", this._onBeforeRedaction);
      this.emit("Relations.redaction", redactedEvent);
    });
    this.relationType = relationType;
    this.eventType = eventType;
    this._relations = new Set();
    this._annotationsByKey = {};
    this._annotationsBySender = {};
    this._sortedAnnotationsByKey = [];
    this._targetEvent = null;
  }
  /**
   * Add relation events to this collection.
   *
   * @param {MatrixEvent} event
   * The new relation event to be added.
   */


  addEvent(event) {
    if (this._relations.has(event)) {
      return;
    }

    const relation = event.getRelation();

    if (!relation) {
      _logger.logger.error("Event must have relation info");

      return;
    }

    const relationType = relation.rel_type;
    const eventType = event.getType();

    if (this.relationType !== relationType || this.eventType !== eventType) {
      _logger.logger.error("Event relation info doesn't match this container");

      return;
    } // If the event is in the process of being sent, listen for cancellation
    // so we can remove the event from the collection.


    if (event.isSending()) {
      event.on("Event.status", this._onEventStatus);
    }

    this._relations.add(event);

    if (this.relationType === "m.annotation") {
      this._addAnnotationToAggregation(event);
    } else if (this.relationType === "m.replace" && this._targetEvent) {
      this._targetEvent.makeReplaced(this.getLastReplacement());
    }

    event.on("Event.beforeRedaction", this._onBeforeRedaction);
    this.emit("Relations.add", event);
  }
  /**
   * Remove relation event from this collection.
   *
   * @param {MatrixEvent} event
   * The relation event to remove.
   */


  _removeEvent(event) {
    if (!this._relations.has(event)) {
      return;
    }

    const relation = event.getRelation();

    if (!relation) {
      _logger.logger.error("Event must have relation info");

      return;
    }

    const relationType = relation.rel_type;
    const eventType = event.getType();

    if (this.relationType !== relationType || this.eventType !== eventType) {
      _logger.logger.error("Event relation info doesn't match this container");

      return;
    }

    this._relations.delete(event);

    if (this.relationType === "m.annotation") {
      this._removeAnnotationFromAggregation(event);
    } else if (this.relationType === "m.replace" && this._targetEvent) {
      this._targetEvent.makeReplaced(this.getLastReplacement());
    }

    this.emit("Relations.remove", event);
  }
  /**
   * Listens for event status changes to remove cancelled events.
   *
   * @param {MatrixEvent} event The event whose status has changed
   * @param {EventStatus} status The new status
   */

  /**
   * Get all relation events in this collection.
   *
   * These are currently in the order of insertion to this collection, which
   * won't match timeline order in the case of scrollback.
   * TODO: Tweak `addEvent` to insert correctly for scrollback.
   *
   * @return {Array}
   * Relation events in insertion order.
   */


  getRelations() {
    return [...this._relations];
  }

  _addAnnotationToAggregation(event) {
    const {
      key
    } = event.getRelation();

    if (!key) {
      return;
    }

    let eventsForKey = this._annotationsByKey[key];

    if (!eventsForKey) {
      eventsForKey = this._annotationsByKey[key] = new Set();

      this._sortedAnnotationsByKey.push([key, eventsForKey]);
    } // Add the new event to the set for this key


    eventsForKey.add(event); // Re-sort the [key, events] pairs in descending order of event count

    this._sortedAnnotationsByKey.sort((a, b) => {
      const aEvents = a[1];
      const bEvents = b[1];
      return bEvents.size - aEvents.size;
    });

    const sender = event.getSender();
    let eventsFromSender = this._annotationsBySender[sender];

    if (!eventsFromSender) {
      eventsFromSender = this._annotationsBySender[sender] = new Set();
    } // Add the new event to the set for this sender


    eventsFromSender.add(event);
  }

  _removeAnnotationFromAggregation(event) {
    const {
      key
    } = event.getRelation();

    if (!key) {
      return;
    }

    const eventsForKey = this._annotationsByKey[key];

    if (eventsForKey) {
      eventsForKey.delete(event); // Re-sort the [key, events] pairs in descending order of event count

      this._sortedAnnotationsByKey.sort((a, b) => {
        const aEvents = a[1];
        const bEvents = b[1];
        return bEvents.size - aEvents.size;
      });
    }

    const sender = event.getSender();
    const eventsFromSender = this._annotationsBySender[sender];

    if (eventsFromSender) {
      eventsFromSender.delete(event);
    }
  }
  /**
   * For relations that have been redacted, we want to remove them from
   * aggregation data sets and emit an update event.
   *
   * To do so, we listen for `Event.beforeRedaction`, which happens:
   *   - after the server accepted the redaction and remote echoed back to us
   *   - before the original event has been marked redacted in the client
   *
   * @param {MatrixEvent} redactedEvent
   * The original relation event that is about to be redacted.
   */

  /**
   * Get all events in this collection grouped by key and sorted by descending
   * event count in each group.
   *
   * This is currently only supported for the annotation relation type.
   *
   * @return {Array}
   * An array of [key, events] pairs sorted by descending event count.
   * The events are stored in a Set (which preserves insertion order).
   */


  getSortedAnnotationsByKey() {
    if (this.relationType !== "m.annotation") {
      // Other relation types are not grouped currently.
      return null;
    }

    return this._sortedAnnotationsByKey;
  }
  /**
   * Get all events in this collection grouped by sender.
   *
   * This is currently only supported for the annotation relation type.
   *
   * @return {Object}
   * An object with each relation sender as a key and the matching Set of
   * events for that sender as a value.
   */


  getAnnotationsBySender() {
    if (this.relationType !== "m.annotation") {
      // Other relation types are not grouped currently.
      return null;
    }

    return this._annotationsBySender;
  }
  /**
   * Returns the most recent (and allowed) m.replace relation, if any.
   *
   * This is currently only supported for the m.replace relation type,
   * once the target event is known, see `addEvent`.
   *
   * @return {MatrixEvent?}
   */


  getLastReplacement() {
    if (this.relationType !== "m.replace") {
      // Aggregating on last only makes sense for this relation type
      return null;
    }

    if (!this._targetEvent) {
      // Don't know which replacements to accept yet.
      // This method shouldn't be called before the original
      // event is known anyway.
      return null;
    } // the all-knowning server tells us that the event at some point had
    // this timestamp for its replacement, so any following replacement should definitely not be less


    const replaceRelation = this._targetEvent.getServerAggregatedRelation("m.replace");

    const minTs = replaceRelation && replaceRelation.origin_server_ts;
    return this.getRelations().reduce((last, event) => {
      if (event.getSender() !== this._targetEvent.getSender()) {
        return last;
      }

      if (minTs && minTs > event.getTs()) {
        return last;
      }

      if (last && last.getTs() > event.getTs()) {
        return last;
      }

      return event;
    }, null);
  }
  /*
   * @param {MatrixEvent} targetEvent the event the relations are related to.
   */


  setTargetEvent(event) {
    if (this._targetEvent) {
      return;
    }

    this._targetEvent = event;

    if (this.relationType === "m.replace") {
      const replacement = this.getLastReplacement(); // this is the initial update, so only call it if we already have something
      // to not emit Event.replaced needlessly

      if (replacement) {
        this._targetEvent.makeReplaced(replacement);
      }
    }
  }

}

exports.Relations = Relations;

/***/ }),

/***/ "3f02":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2de2");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "3fb5":
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 4:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "4001":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_951b8314_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("28c7");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_951b8314_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_951b8314_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_951b8314_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_951b8314_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "4072":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".nameofchat[data-v-72a9c575]{white-space:nowrap}.nameline[data-v-72a9c575]{display:flex;align-items:flex-end;justify-content:center}.iconGroup[data-v-72a9c575]{font-size:.4em;width:16px;text-align:center;height:16px;line-height:16px;border-radius:8px;background:rgb(var(--neutral-grad-2));margin-right:.5em;margin-block:.25em}.iconGroup i[data-v-72a9c575]{color:rgb(var(--neutral-grad-1))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "40af":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("57d8");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("536929a6", content, shadowRoot)
};

/***/ }),

/***/ "40d5":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "40d6":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".items .item[data-v-79bb4e47]{opacity:1}.items .item i[data-v-79bb4e47]{width:2em;opacity:.7;font-size:.9em}.items .item .iwr[data-v-79bb4e47]{padding:1em 1.5em}.items .item.signout[data-v-79bb4e47]{font-weight:700;color:rgb(var(--color-txt-ac))}.menulist-enter-active[data-v-79bb4e47],.menulist-leave-active[data-v-79bb4e47]{transition:all 1s}.menulist-enter[data-v-79bb4e47],.menulist-leave-to[data-v-79bb4e47]{opacity:0;transform:translateY(30px)}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "4127":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getSideChannel = __webpack_require__("5402");
var utils = __webpack_require__("d233");
var formats = __webpack_require__("b313");
var has = Object.prototype.hasOwnProperty;

var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + '[]';
    },
    comma: 'comma',
    indices: function indices(prefix, key) {
        return prefix + '[' + key + ']';
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};

var isArray = Array.isArray;
var split = String.prototype.split;
var push = Array.prototype.push;
var pushToArray = function (arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
};

var toISO = Date.prototype.toISOString;

var defaultFormat = formats['default'];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: 'utf-8',
    charsetSentinel: false,
    delimiter: '&',
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};

var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === 'string'
        || typeof v === 'number'
        || typeof v === 'boolean'
        || typeof v === 'symbol'
        || typeof v === 'bigint';
};

var sentinel = {};

var stringify = function stringify(
    object,
    prefix,
    generateArrayPrefix,
    strictNullHandling,
    skipNulls,
    encoder,
    filter,
    sort,
    allowDots,
    serializeDate,
    format,
    formatter,
    encodeValuesOnly,
    charset,
    sideChannel
) {
    var obj = object;

    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== 'undefined') {
            if (pos === step) {
                throw new RangeError('Cyclic object value');
            } else {
                findFlag = true; // Break while
            }
        }
        if (typeof tmpSc.get(sentinel) === 'undefined') {
            step = 0;
        }
    }

    if (typeof filter === 'function') {
        obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
        obj = serializeDate(obj);
    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {
        obj = utils.maybeMap(obj, function (value) {
            if (value instanceof Date) {
                return serializeDate(value);
            }
            return value;
        });
    }

    if (obj === null) {
        if (strictNullHandling) {
            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;
        }

        obj = '';
    }

    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);
            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {
                var valuesArray = split.call(String(obj), ',');
                var valuesJoined = '';
                for (var i = 0; i < valuesArray.length; ++i) {
                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));
                }
                return [formatter(keyValue) + '=' + valuesJoined];
            }
            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];
        }
        return [formatter(prefix) + '=' + formatter(String(obj))];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys;
    if (generateArrayPrefix === 'comma' && isArray(obj)) {
        // we need to join elements in
        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];
    } else if (isArray(filter)) {
        objKeys = filter;
    } else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }

    for (var j = 0; j < objKeys.length; ++j) {
        var key = objKeys[j];
        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];

        if (skipNulls && value === null) {
            continue;
        }

        var keyPrefix = isArray(obj)
            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix
            : prefix + (allowDots ? '.' + key : '[' + key + ']');

        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(
            value,
            keyPrefix,
            generateArrayPrefix,
            strictNullHandling,
            skipNulls,
            encoder,
            filter,
            sort,
            allowDots,
            serializeDate,
            format,
            formatter,
            encodeValuesOnly,
            charset,
            valueSideChannel
        ));
    }

    return values;
};

var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {
        throw new TypeError('Encoder has to be a function.');
    }

    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }

    var format = formats['default'];
    if (typeof opts.format !== 'undefined') {
        if (!has.call(formats.formatters, opts.format)) {
            throw new TypeError('Unknown format option provided.');
        }
        format = opts.format;
    }
    var formatter = formats.formatters[format];

    var filter = defaults.filter;
    if (typeof opts.filter === 'function' || isArray(opts.filter)) {
        filter = opts.filter;
    }

    return {
        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === 'function' ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);

    var objKeys;
    var filter;

    if (typeof options.filter === 'function') {
        filter = options.filter;
        obj = filter('', obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }

    var keys = [];

    if (typeof obj !== 'object' || obj === null) {
        return '';
    }

    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
        arrayFormat = opts.arrayFormat;
    } else if (opts && 'indices' in opts) {
        arrayFormat = opts.indices ? 'indices' : 'repeat';
    } else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

    if (!objKeys) {
        objKeys = Object.keys(obj);
    }

    if (options.sort) {
        objKeys.sort(options.sort);
    }

    var sideChannel = getSideChannel();
    for (var i = 0; i < objKeys.length; ++i) {
        var key = objKeys[i];

        if (options.skipNulls && obj[key] === null) {
            continue;
        }
        pushToArray(keys, stringify(
            obj[key],
            key,
            generateArrayPrefix,
            options.strictNullHandling,
            options.skipNulls,
            options.encode ? options.encoder : null,
            options.filter,
            options.sort,
            options.allowDots,
            options.serializeDate,
            options.format,
            options.formatter,
            options.encodeValuesOnly,
            options.charset,
            sideChannel
        ));
    }

    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? '?' : '';

    if (options.charsetSentinel) {
        if (options.charset === 'iso-8859-1') {
            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
            prefix += 'utf8=%26%2310003%3B&';
        } else {
            // encodeURIComponent('✓')
            prefix += 'utf8=%E2%9C%93&';
        }
    }

    return joined.length > 0 ? prefix + joined : '';
};


/***/ }),

/***/ "420b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomState = RoomState;

var _events = __webpack_require__("faa1");

var _roomMember = __webpack_require__("2b60");

var _logger = __webpack_require__("63c7");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _event = __webpack_require__("d613");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/room-state
 */
// possible statuses for out-of-band member loading


const OOB_STATUS_NOTSTARTED = 1;
const OOB_STATUS_INPROGRESS = 2;
const OOB_STATUS_FINISHED = 3;
/**
 * Construct room state.
 *
 * Room State represents the state of the room at a given point.
 * It can be mutated by adding state events to it.
 * There are two types of room member associated with a state event:
 * normal member objects (accessed via getMember/getMembers) which mutate
 * with the state to represent the current state of that room/user, eg.
 * the object returned by getMember('@bob:example.com') will mutate to
 * get a different display name if Bob later changes his display name
 * in the room.
 * There are also 'sentinel' members (accessed via getSentinelMember).
 * These also represent the state of room members at the point in time
 * represented by the RoomState object, but unlike objects from getMember,
 * sentinel objects will always represent the room state as at the time
 * getSentinelMember was called, so if Bob subsequently changes his display
 * name, a room member object previously acquired with getSentinelMember
 * will still have his old display name. Calling getSentinelMember again
 * after the display name change will return a new RoomMember object
 * with Bob's new display name.
 *
 * @constructor
 * @param {?string} roomId Optional. The ID of the room which has this state.
 * If none is specified it just tracks paginationTokens, useful for notifTimelineSet
 * @param {?object} oobMemberFlags Optional. The state of loading out of bound members.
 * As the timeline might get reset while they are loading, this state needs to be inherited
 * and shared when the room state is cloned for the new timeline.
 * This should only be passed from clone.
 * @prop {Object.<string, RoomMember>} members The room member dictionary, keyed
 * on the user's ID.
 * @prop {Object.<string, Object.<string, MatrixEvent>>} events The state
 * events dictionary, keyed on the event type and then the state_key value.
 * @prop {string} paginationToken The pagination token for this state.
 */

function RoomState(roomId) {
  let oobMemberFlags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  this.roomId = roomId;
  this.members = {// userId: RoomMember
  };
  this.events = new Map(); // Map<eventType, Map<stateKey, MatrixEvent>>

  this.paginationToken = null;
  this._sentinels = {// userId: RoomMember
  };

  this._updateModifiedTime(); // stores fuzzy matches to a list of userIDs (applies utils.removeHiddenChars to keys)


  this._displayNameToUserIds = {};
  this._userIdsToDisplayNames = {};
  this._tokenToInvite = {}; // 3pid invite state_key to m.room.member invite

  this._joinedMemberCount = null; // cache of the number of joined members
  // joined members count from summary api
  // once set, we know the server supports the summary api
  // and we should only trust that
  // we could also only trust that before OOB members
  // are loaded but doesn't seem worth the hassle atm

  this._summaryJoinedMemberCount = null; // same for invited member count

  this._invitedMemberCount = null;
  this._summaryInvitedMemberCount = null;

  if (!oobMemberFlags) {
    oobMemberFlags = {
      status: OOB_STATUS_NOTSTARTED
    };
  }

  this._oobMemberFlags = oobMemberFlags;
}

utils.inherits(RoomState, _events.EventEmitter);
/**
 * Returns the number of joined members in this room
 * This method caches the result.
 * @return {integer} The number of members in this room whose membership is 'join'
 */

RoomState.prototype.getJoinedMemberCount = function () {
  if (this._summaryJoinedMemberCount !== null) {
    return this._summaryJoinedMemberCount;
  }

  if (this._joinedMemberCount === null) {
    this._joinedMemberCount = this.getMembers().reduce((count, m) => {
      return m.membership === 'join' ? count + 1 : count;
    }, 0);
  }

  return this._joinedMemberCount;
};
/**
 * Set the joined member count explicitly (like from summary part of the sync response)
 * @param {number} count the amount of joined members
 */


RoomState.prototype.setJoinedMemberCount = function (count) {
  this._summaryJoinedMemberCount = count;
};
/**
 * Returns the number of invited members in this room
 * @return {integer} The number of members in this room whose membership is 'invite'
 */


RoomState.prototype.getInvitedMemberCount = function () {
  if (this._summaryInvitedMemberCount !== null) {
    return this._summaryInvitedMemberCount;
  }

  if (this._invitedMemberCount === null) {
    this._invitedMemberCount = this.getMembers().reduce((count, m) => {
      return m.membership === 'invite' ? count + 1 : count;
    }, 0);
  }

  return this._invitedMemberCount;
};
/**
 * Set the amount of invited members in this room
 * @param {number} count the amount of invited members
 */


RoomState.prototype.setInvitedMemberCount = function (count) {
  this._summaryInvitedMemberCount = count;
};
/**
 * Get all RoomMembers in this room.
 * @return {Array<RoomMember>} A list of RoomMembers.
 */


RoomState.prototype.getMembers = function () {
  return utils.values(this.members);
};
/**
 * Get all RoomMembers in this room, excluding the user IDs provided.
 * @param {Array<string>} excludedIds The user IDs to exclude.
 * @return {Array<RoomMember>} A list of RoomMembers.
 */


RoomState.prototype.getMembersExcept = function (excludedIds) {
  return utils.values(this.members).filter(m => !excludedIds.includes(m.userId));
};
/**
 * Get a room member by their user ID.
 * @param {string} userId The room member's user ID.
 * @return {RoomMember} The member or null if they do not exist.
 */


RoomState.prototype.getMember = function (userId) {
  return this.members[userId] || null;
};
/**
 * Get a room member whose properties will not change with this room state. You
 * typically want this if you want to attach a RoomMember to a MatrixEvent which
 * may no longer be represented correctly by Room.currentState or Room.oldState.
 * The term 'sentinel' refers to the fact that this RoomMember is an unchanging
 * guardian for state at this particular point in time.
 * @param {string} userId The room member's user ID.
 * @return {RoomMember} The member or null if they do not exist.
 */


RoomState.prototype.getSentinelMember = function (userId) {
  if (!userId) return null;
  let sentinel = this._sentinels[userId];

  if (sentinel === undefined) {
    sentinel = new _roomMember.RoomMember(this.roomId, userId);
    const member = this.members[userId];

    if (member) {
      sentinel.setMembershipEvent(member.events.member, this);
    }

    this._sentinels[userId] = sentinel;
  }

  return sentinel;
};
/**
 * Get state events from the state of the room.
 * @param {string} eventType The event type of the state event.
 * @param {string} stateKey Optional. The state_key of the state event. If
 * this is <code>undefined</code> then all matching state events will be
 * returned.
 * @return {MatrixEvent[]|MatrixEvent} A list of events if state_key was
 * <code>undefined</code>, else a single event (or null if no match found).
 */


RoomState.prototype.getStateEvents = function (eventType, stateKey) {
  if (!this.events.has(eventType)) {
    // no match
    return stateKey === undefined ? [] : null;
  }

  if (stateKey === undefined) {
    // return all values
    return Array.from(this.events.get(eventType).values());
  }

  const event = this.events.get(eventType).get(stateKey);
  return event ? event : null;
};
/**
 * Creates a copy of this room state so that mutations to either won't affect the other.
 * @return {RoomState} the copy of the room state
 */


RoomState.prototype.clone = function () {
  const copy = new RoomState(this.roomId, this._oobMemberFlags); // Ugly hack: because setStateEvents will mark
  // members as susperseding future out of bound members
  // if loading is in progress (through _oobMemberFlags)
  // since these are not new members, we're merely copying them
  // set the status to not started
  // after copying, we set back the status

  const status = this._oobMemberFlags.status;
  this._oobMemberFlags.status = OOB_STATUS_NOTSTARTED;
  Array.from(this.events.values()).forEach(eventsByStateKey => {
    copy.setStateEvents(Array.from(eventsByStateKey.values()));
  }); // Ugly hack: see above

  this._oobMemberFlags.status = status;

  if (this._summaryInvitedMemberCount !== null) {
    copy.setInvitedMemberCount(this.getInvitedMemberCount());
  }

  if (this._summaryJoinedMemberCount !== null) {
    copy.setJoinedMemberCount(this.getJoinedMemberCount());
  } // copy out of band flags if needed


  if (this._oobMemberFlags.status == OOB_STATUS_FINISHED) {
    // copy markOutOfBand flags
    this.getMembers().forEach(member => {
      if (member.isOutOfBand()) {
        const copyMember = copy.getMember(member.userId);
        copyMember.markOutOfBand();
      }
    });
  }

  return copy;
};
/**
 * Add previously unknown state events.
 * When lazy loading members while back-paginating,
 * the relevant room state for the timeline chunk at the end
 * of the chunk can be set with this method.
 * @param {MatrixEvent[]} events state events to prepend
 */


RoomState.prototype.setUnknownStateEvents = function (events) {
  const unknownStateEvents = events.filter(event => {
    return !this.events.has(event.getType()) || !this.events.get(event.getType()).has(event.getStateKey());
  });
  this.setStateEvents(unknownStateEvents);
};
/**
 * Add an array of one or more state MatrixEvents, overwriting
 * any existing state with the same {type, stateKey} tuple. Will fire
 * "RoomState.events" for every event added. May fire "RoomState.members"
 * if there are <code>m.room.member</code> events.
 * @param {MatrixEvent[]} stateEvents a list of state events for this room.
 * @fires module:client~MatrixClient#event:"RoomState.members"
 * @fires module:client~MatrixClient#event:"RoomState.newMember"
 * @fires module:client~MatrixClient#event:"RoomState.events"
 */


RoomState.prototype.setStateEvents = function (stateEvents) {
  const self = this;

  this._updateModifiedTime(); // update the core event dict


  utils.forEach(stateEvents, function (event) {
    if (event.getRoomId() !== self.roomId) {
      return;
    }

    if (!event.isState()) {
      return;
    }

    const lastStateEvent = self._getStateEventMatching(event);

    self._setStateEvent(event);

    if (event.getType() === "m.room.member") {
      _updateDisplayNameCache(self, event.getStateKey(), event.getContent().displayname);

      _updateThirdPartyTokenCache(self, event);
    }

    self.emit("RoomState.events", event, self, lastStateEvent);
  }); // update higher level data structures. This needs to be done AFTER the
  // core event dict as these structures may depend on other state events in
  // the given array (e.g. disambiguating display names in one go to do both
  // clashing names rather than progressively which only catches 1 of them).

  utils.forEach(stateEvents, function (event) {
    if (event.getRoomId() !== self.roomId) {
      return;
    }

    if (!event.isState()) {
      return;
    }

    if (event.getType() === "m.room.member") {
      const userId = event.getStateKey(); // leave events apparently elide the displayname or avatar_url,
      // so let's fake one up so that we don't leak user ids
      // into the timeline

      if (event.getContent().membership === "leave" || event.getContent().membership === "ban") {
        event.getContent().avatar_url = event.getContent().avatar_url || event.getPrevContent().avatar_url;
        event.getContent().displayname = event.getContent().displayname || event.getPrevContent().displayname;
      }

      const member = self._getOrCreateMember(userId, event);

      member.setMembershipEvent(event, self);

      self._updateMember(member);

      self.emit("RoomState.members", event, self, member);
    } else if (event.getType() === "m.room.power_levels") {
      const members = utils.values(self.members);
      utils.forEach(members, function (member) {
        // We only propagate `RoomState.members` event if the
        // power levels has been changed
        // large room suffer from large re-rendering especially when not needed
        const oldLastModified = member.getLastModifiedTime();
        member.setPowerLevelEvent(event);

        if (oldLastModified !== member.getLastModifiedTime()) {
          self.emit("RoomState.members", event, self, member);
        }
      }); // assume all our sentinels are now out-of-date

      self._sentinels = {};
    }
  });
};
/**
 * Looks up a member by the given userId, and if it doesn't exist,
 * create it and emit the `RoomState.newMember` event.
 * This method makes sure the member is added to the members dictionary
 * before emitting, as this is done from setStateEvents and _setOutOfBandMember.
 * @param {string} userId the id of the user to look up
 * @param {MatrixEvent} event the membership event for the (new) member. Used to emit.
 * @fires module:client~MatrixClient#event:"RoomState.newMember"
 * @returns {RoomMember} the member, existing or newly created.
 */


RoomState.prototype._getOrCreateMember = function (userId, event) {
  let member = this.members[userId];

  if (!member) {
    member = new _roomMember.RoomMember(this.roomId, userId); // add member to members before emitting any events,
    // as event handlers often lookup the member

    this.members[userId] = member;
    this.emit("RoomState.newMember", event, this, member);
  }

  return member;
};

RoomState.prototype._setStateEvent = function (event) {
  if (!this.events.has(event.getType())) {
    this.events.set(event.getType(), new Map());
  }

  this.events.get(event.getType()).set(event.getStateKey(), event);
};

RoomState.prototype._getStateEventMatching = function (event) {
  if (!this.events.has(event.getType())) return null;
  return this.events.get(event.getType()).get(event.getStateKey());
};

RoomState.prototype._updateMember = function (member) {
  // this member may have a power level already, so set it.
  const pwrLvlEvent = this.getStateEvents("m.room.power_levels", "");

  if (pwrLvlEvent) {
    member.setPowerLevelEvent(pwrLvlEvent);
  } // blow away the sentinel which is now outdated


  delete this._sentinels[member.userId];
  this.members[member.userId] = member;
  this._joinedMemberCount = null;
  this._invitedMemberCount = null;
};
/**
 * Get the out-of-band members loading state, whether loading is needed or not.
 * Note that loading might be in progress and hence isn't needed.
 * @return {bool} whether or not the members of this room need to be loaded
 */


RoomState.prototype.needsOutOfBandMembers = function () {
  return this._oobMemberFlags.status === OOB_STATUS_NOTSTARTED;
};
/**
 * Mark this room state as waiting for out-of-band members,
 * ensuring it doesn't ask for them to be requested again
 * through needsOutOfBandMembers
 */


RoomState.prototype.markOutOfBandMembersStarted = function () {
  if (this._oobMemberFlags.status !== OOB_STATUS_NOTSTARTED) {
    return;
  }

  this._oobMemberFlags.status = OOB_STATUS_INPROGRESS;
};
/**
 * Mark this room state as having failed to fetch out-of-band members
 */


RoomState.prototype.markOutOfBandMembersFailed = function () {
  if (this._oobMemberFlags.status !== OOB_STATUS_INPROGRESS) {
    return;
  }

  this._oobMemberFlags.status = OOB_STATUS_NOTSTARTED;
};
/**
 * Clears the loaded out-of-band members
 */


RoomState.prototype.clearOutOfBandMembers = function () {
  let count = 0;
  Object.keys(this.members).forEach(userId => {
    const member = this.members[userId];

    if (member.isOutOfBand()) {
      ++count;
      delete this.members[userId];
    }
  });

  _logger.logger.log(`LL: RoomState removed ${count} members...`);

  this._oobMemberFlags.status = OOB_STATUS_NOTSTARTED;
};
/**
 * Sets the loaded out-of-band members.
 * @param {MatrixEvent[]} stateEvents array of membership state events
 */


RoomState.prototype.setOutOfBandMembers = function (stateEvents) {
  _logger.logger.log(`LL: RoomState about to set ${stateEvents.length} OOB members ...`);

  if (this._oobMemberFlags.status !== OOB_STATUS_INPROGRESS) {
    return;
  }

  _logger.logger.log(`LL: RoomState put in OOB_STATUS_FINISHED state ...`);

  this._oobMemberFlags.status = OOB_STATUS_FINISHED;
  stateEvents.forEach(e => this._setOutOfBandMember(e));
};
/**
 * Sets a single out of band member, used by both setOutOfBandMembers and clone
 * @param {MatrixEvent} stateEvent membership state event
 */


RoomState.prototype._setOutOfBandMember = function (stateEvent) {
  if (stateEvent.getType() !== 'm.room.member') {
    return;
  }

  const userId = stateEvent.getStateKey();
  const existingMember = this.getMember(userId); // never replace members received as part of the sync

  if (existingMember && !existingMember.isOutOfBand()) {
    return;
  }

  const member = this._getOrCreateMember(userId, stateEvent);

  member.setMembershipEvent(stateEvent, this); // needed to know which members need to be stored seperately
  // as they are not part of the sync accumulator
  // this is cleared by setMembershipEvent so when it's updated through /sync

  member.markOutOfBand();

  _updateDisplayNameCache(this, member.userId, member.name);

  this._setStateEvent(stateEvent);

  this._updateMember(member);

  this.emit("RoomState.members", stateEvent, this, member);
};
/**
 * Set the current typing event for this room.
 * @param {MatrixEvent} event The typing event
 */


RoomState.prototype.setTypingEvent = function (event) {
  utils.forEach(utils.values(this.members), function (member) {
    member.setTypingEvent(event);
  });
};
/**
 * Get the m.room.member event which has the given third party invite token.
 *
 * @param {string} token The token
 * @return {?MatrixEvent} The m.room.member event or null
 */


RoomState.prototype.getInviteForThreePidToken = function (token) {
  return this._tokenToInvite[token] || null;
};
/**
 * Update the last modified time to the current time.
 */


RoomState.prototype._updateModifiedTime = function () {
  this._modified = Date.now();
};
/**
 * Get the timestamp when this room state was last updated. This timestamp is
 * updated when this object has received new state events.
 * @return {number} The timestamp
 */


RoomState.prototype.getLastModifiedTime = function () {
  return this._modified;
};
/**
 * Get user IDs with the specified or similar display names.
 * @param {string} displayName The display name to get user IDs from.
 * @return {string[]} An array of user IDs or an empty array.
 */


RoomState.prototype.getUserIdsWithDisplayName = function (displayName) {
  return this._displayNameToUserIds[utils.removeHiddenChars(displayName)] || [];
};
/**
 * Returns true if userId is in room, event is not redacted and either sender of
 * mxEvent or has power level sufficient to redact events other than their own.
 * @param {MatrixEvent} mxEvent The event to test permission for
 * @param {string} userId The user ID of the user to test permission for
 * @return {boolean} true if the given used ID can redact given event
 */


RoomState.prototype.maySendRedactionForEvent = function (mxEvent, userId) {
  const member = this.getMember(userId);
  if (!member || member.membership === 'leave') return false;
  if (mxEvent.status || mxEvent.isRedacted()) return false; // The user may have been the sender, but they can't redact their own message
  // if redactions are blocked.

  const canRedact = this.maySendEvent("m.room.redaction", userId);
  if (mxEvent.getSender() === userId) return canRedact;
  return this._hasSufficientPowerLevelFor('redact', member.powerLevel);
};
/**
 * Returns true if the given power level is sufficient for action
 * @param {string} action The type of power level to check
 * @param {number} powerLevel The power level of the member
 * @return {boolean} true if the given power level is sufficient
 */


RoomState.prototype._hasSufficientPowerLevelFor = function (action, powerLevel) {
  const powerLevelsEvent = this.getStateEvents('m.room.power_levels', '');
  let powerLevels = {};

  if (powerLevelsEvent) {
    powerLevels = powerLevelsEvent.getContent();
  }

  let requiredLevel = 50;

  if (utils.isNumber(powerLevels[action])) {
    requiredLevel = powerLevels[action];
  }

  return powerLevel >= requiredLevel;
};
/**
 * Short-form for maySendEvent('m.room.message', userId)
 * @param {string} userId The user ID of the user to test permission for
 * @return {boolean} true if the given user ID should be permitted to send
 *                   message events into the given room.
 */


RoomState.prototype.maySendMessage = function (userId) {
  return this._maySendEventOfType('m.room.message', userId, false);
};
/**
 * Returns true if the given user ID has permission to send a normal
 * event of type `eventType` into this room.
 * @param {string} eventType The type of event to test
 * @param {string} userId The user ID of the user to test permission for
 * @return {boolean} true if the given user ID should be permitted to send
 *                        the given type of event into this room,
 *                        according to the room's state.
 */


RoomState.prototype.maySendEvent = function (eventType, userId) {
  return this._maySendEventOfType(eventType, userId, false);
};
/**
 * Returns true if the given MatrixClient has permission to send a state
 * event of type `stateEventType` into this room.
 * @param {string} stateEventType The type of state events to test
 * @param {MatrixClient} cli The client to test permission for
 * @return {boolean} true if the given client should be permitted to send
 *                        the given type of state event into this room,
 *                        according to the room's state.
 */


RoomState.prototype.mayClientSendStateEvent = function (stateEventType, cli) {
  if (cli.isGuest()) {
    return false;
  }

  return this.maySendStateEvent(stateEventType, cli.credentials.userId);
};
/**
 * Returns true if the given user ID has permission to send a state
 * event of type `stateEventType` into this room.
 * @param {string} stateEventType The type of state events to test
 * @param {string} userId The user ID of the user to test permission for
 * @return {boolean} true if the given user ID should be permitted to send
 *                        the given type of state event into this room,
 *                        according to the room's state.
 */


RoomState.prototype.maySendStateEvent = function (stateEventType, userId) {
  return this._maySendEventOfType(stateEventType, userId, true);
};
/**
 * Returns true if the given user ID has permission to send a normal or state
 * event of type `eventType` into this room.
 * @param {string} eventType The type of event to test
 * @param {string} userId The user ID of the user to test permission for
 * @param {boolean} state If true, tests if the user may send a state
                          event of this type. Otherwise tests whether
                          they may send a regular event.
 * @return {boolean} true if the given user ID should be permitted to send
 *                        the given type of event into this room,
 *                        according to the room's state.
 */


RoomState.prototype._maySendEventOfType = function (eventType, userId, state) {
  const power_levels_event = this.getStateEvents('m.room.power_levels', '');
  let power_levels;
  let events_levels = {};
  let state_default = 0;
  let events_default = 0;
  let powerLevel = 0;

  if (power_levels_event) {
    power_levels = power_levels_event.getContent();
    events_levels = power_levels.events || {};

    if (Number.isFinite(power_levels.state_default)) {
      state_default = power_levels.state_default;
    } else {
      state_default = 50;
    }

    const userPowerLevel = power_levels.users && power_levels.users[userId];

    if (Number.isFinite(userPowerLevel)) {
      powerLevel = userPowerLevel;
    } else if (Number.isFinite(power_levels.users_default)) {
      powerLevel = power_levels.users_default;
    }

    if (Number.isFinite(power_levels.events_default)) {
      events_default = power_levels.events_default;
    }
  }

  let required_level = state ? state_default : events_default;

  if (Number.isFinite(events_levels[eventType])) {
    required_level = events_levels[eventType];
  }

  return powerLevel >= required_level;
};
/**
 * Returns true if the given user ID has permission to trigger notification
 * of type `notifLevelKey`
 * @param {string} notifLevelKey The level of notification to test (eg. 'room')
 * @param {string} userId The user ID of the user to test permission for
 * @return {boolean} true if the given user ID has permission to trigger a
 *                        notification of this type.
 */


RoomState.prototype.mayTriggerNotifOfType = function (notifLevelKey, userId) {
  const member = this.getMember(userId);

  if (!member) {
    return false;
  }

  const powerLevelsEvent = this.getStateEvents('m.room.power_levels', '');
  let notifLevel = 50;

  if (powerLevelsEvent && powerLevelsEvent.getContent() && powerLevelsEvent.getContent().notifications && utils.isNumber(powerLevelsEvent.getContent().notifications[notifLevelKey])) {
    notifLevel = powerLevelsEvent.getContent().notifications[notifLevelKey];
  }

  return member.powerLevel >= notifLevel;
};
/**
 * Returns the join rule based on the m.room.join_rule state event, defaulting to `invite`.
 * @returns {string} the join_rule applied to this room
 */


RoomState.prototype.getJoinRule = function () {
  const joinRuleEvent = this.getStateEvents(_event.EventType.RoomJoinRules, "");
  const joinRuleContent = joinRuleEvent ? joinRuleEvent.getContent() : {};
  return joinRuleContent["join_rule"] || "invite";
};

function _updateThirdPartyTokenCache(roomState, memberEvent) {
  if (!memberEvent.getContent().third_party_invite) {
    return;
  }

  const token = (memberEvent.getContent().third_party_invite.signed || {}).token;

  if (!token) {
    return;
  }

  const threePidInvite = roomState.getStateEvents("m.room.third_party_invite", token);

  if (!threePidInvite) {
    return;
  }

  roomState._tokenToInvite[token] = memberEvent;
}

function _updateDisplayNameCache(roomState, userId, displayName) {
  const oldName = roomState._userIdsToDisplayNames[userId];
  delete roomState._userIdsToDisplayNames[userId];

  if (oldName) {
    // Remove the old name from the cache.
    // We clobber the user_id > name lookup but the name -> [user_id] lookup
    // means we need to remove that user ID from that array rather than nuking
    // the lot.
    const strippedOldName = utils.removeHiddenChars(oldName);
    const existingUserIds = roomState._displayNameToUserIds[strippedOldName];

    if (existingUserIds) {
      // remove this user ID from this array
      const filteredUserIDs = existingUserIds.filter(id => id !== userId);
      roomState._displayNameToUserIds[strippedOldName] = filteredUserIDs;
    }
  }

  roomState._userIdsToDisplayNames[userId] = displayName;
  const strippedDisplayname = displayName && utils.removeHiddenChars(displayName); // an empty stripped displayname (undefined/'') will be set to MXID in room-member.js

  if (strippedDisplayname) {
    if (!roomState._displayNameToUserIds[strippedDisplayname]) {
      roomState._displayNameToUserIds[strippedDisplayname] = [];
    }

    roomState._displayNameToUserIds[strippedDisplayname].push(userId);
  }
}
/**
 * Fires whenever the event dictionary in room state is updated.
 * @event module:client~MatrixClient#"RoomState.events"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomState} state The room state whose RoomState.events dictionary
 * was updated.
 * @param {MatrixEvent} prevEvent The event being replaced by the new state, if
 * known. Note that this can differ from `getPrevContent()` on the new state event
 * as this is the store's view of the last state, not the previous state provided
 * by the server.
 * @example
 * matrixClient.on("RoomState.events", function(event, state, prevEvent){
 *   var newStateEvent = event;
 * });
 */

/**
 * Fires whenever a member in the members dictionary is updated in any way.
 * @event module:client~MatrixClient#"RoomState.members"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {RoomState} state The room state whose RoomState.members dictionary
 * was updated.
 * @param {RoomMember} member The room member that was updated.
 * @example
 * matrixClient.on("RoomState.members", function(event, state, member){
 *   var newMembershipState = member.membership;
 * });
 */

/**
* Fires whenever a member is added to the members dictionary. The RoomMember
* will not be fully populated yet (e.g. no membership state) but will already
* be available in the members dictionary.
* @event module:client~MatrixClient#"RoomState.newMember"
* @param {MatrixEvent} event The matrix event which caused this event to fire.
* @param {RoomState} state The room state whose RoomState.members dictionary
* was updated with a new entry.
* @param {RoomMember} member The room member that was added.
* @example
* matrixClient.on("RoomState.newMember", function(event, state, member){
*   // add event listeners on 'member'
* });
*/

/***/ }),

/***/ "429b":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("faa1").EventEmitter;


/***/ }),

/***/ "42cd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/user/view/pnuser/index.vue?vue&type=template&id=d18e99d2&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'isBlocked': _vm.blocked},attrs:{"id":"userViewPnuser"}},[(_vm.userinfo.keys && _vm.userinfo.keys.length)?_c('div',{staticClass:"haskeys"},[_c('i',{staticClass:"fas fa-lock"})]):_vm._e(),_c('div',{staticClass:"name"},[_c('span',[_vm._v(" "+_vm._s(_vm.userinfo.name)+" ")])]),_c('div',{staticClass:"imageWrapper"},[_c('userpic',{attrs:{"mode":"Contact","userinfo":_vm.userinfo,"blocked":_vm.blocked}})],1),(_vm.activeuser.id != _vm.userinfo.id)?_c('div',{staticClass:"gotoprofile"},[_c('button',{staticClass:"button small black rounded",on:{"click":_vm.gotopocketnetprofile}},[_vm._v(" "+_vm._s(_vm.$t("button.goToPocketnetProfile"))+" ")])]):_vm._e(),_c('div',{staticClass:"info"},[(_vm.userinfo.source)?_c('div',{staticClass:"infoPart"},[_c('div',{staticClass:"label"},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("caption.followers"))+" ")])]),_c('div',{staticClass:"value"},[_c('span',[_vm._v(_vm._s(_vm.userinfo.source.subscribers_count))])])]):_vm._e(),(_vm.userinfo.source &&  _vm.userinfo.source.reputation.toFixed)?_c('div',{staticClass:"infoPart"},[_c('div',{staticClass:"label"},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("caption.reputation"))+" ")])]),_c('div',{staticClass:"value"},[_c('span',[_vm._v(_vm._s(_vm.userinfo.source.reputation.toFixed(1)))])])]):_vm._e(),(_vm.userinfo.source)?_c('div',{staticClass:"infoPart"},[_c('div',{staticClass:"label"},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("caption.following"))+" ")])]),_c('div',{staticClass:"value"},[_c('span',[_vm._v(_vm._s(_vm.userinfo.source.subscribes_count))])])]):_vm._e()])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/user/view/pnuser/index.vue?vue&type=template&id=d18e99d2&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/user/view/pnuser?vue&type=script&lang=js&

/* harmony default export */ var pnuser_vue_type_script_lang_js_ = ({
  name: 'userViewPnuser',
  props: {
    userinfo: Object,
    blocked: false
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    activeuser: function () {
      return this.core.user.userinfo;
    },
    href: function () {
      var domain = window.pocketnetdomain || 'pocketnet.app';
      return 'https://' + domain + '/' + this.userinfo.source.name;
    }
  }),
  methods: {
    gotopocketnetprofile: function () {
      if (this.core.backtoapp) this.core.backtoapp(this.href);else window.open(this.href, "_blank");
    }
  }
});
// CONCATENATED MODULE: ./src/components/user/view/pnuser?vue&type=script&lang=js&
 /* harmony default export */ var view_pnuser_vue_type_script_lang_js_ = (pnuser_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/user/view/pnuser/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("5588")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  view_pnuser_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "d18e99d2",
  null
  ,true
)

/* harmony default export */ var pnuser = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "4328":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stringify = __webpack_require__("4127");
var parse = __webpack_require__("9e6a");
var formats = __webpack_require__("b313");

module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};


/***/ }),

/***/ "4362":
/***/ (function(module, exports, __webpack_require__) {

exports.nextTick = function nextTick(fn) {
    var args = Array.prototype.slice.call(arguments);
    args.shift();
    setTimeout(function () {
        fn.apply(null, args);
    }, 0);
};

exports.platform = exports.arch = 
exports.execPath = exports.title = 'browser';
exports.pid = 1;
exports.browser = true;
exports.env = {};
exports.argv = [];

exports.binding = function (name) {
	throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    exports.cwd = function () { return cwd };
    exports.chdir = function (dir) {
        if (!path) path = __webpack_require__("df7c");
        cwd = path.resolve(dir, cwd);
    };
})();

exports.exit = exports.kill = 
exports.umask = exports.dlopen = 
exports.uptime = exports.memoryUsage = 
exports.uvCounters = function() {};
exports.features = {};


/***/ }),

/***/ "4382":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_eb4df516_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("790c");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_eb4df516_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_eb4df516_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_eb4df516_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_eb4df516_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "438e":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".minimized.active .dummyline[data-v-33d22462]{height:44px;opacity:.3}.minimized.active .dummyicon[data-v-33d22462]{width:44px;height:44px;opacity:.3}.previewWrapper[data-v-33d22462]{cursor:pointer;display:flex;align-items:center;padding:10px 0}.previewWrapper .dummyline[data-v-33d22462]{margin-top:.25em;height:22px;border-radius:5px;transition:.3s}.previewWrapper .dummyicon[data-v-33d22462]{width:22px;height:22px;border-radius:50%;margin:0 auto;transition:.3s}.previewWrapper .iconWrapper[data-v-33d22462]{width:44px;display:flex;align-items:center;min-width:44px}.previewWrapper .iconWrapper .oneuser i[data-v-33d22462]{font-size:.7em}.previewWrapper .infoWrapper[data-v-33d22462]{padding-left:.5em;flex-grow:1;overflow:hidden;text-overflow:ellipsis;min-height:50px}.emptyEvent span[data-v-33d22462]{color:rgb(var(--color-good));font-size:.8em}.eventsLine[data-v-33d22462]{position:relative}.eventsLine .roomMuted[data-v-33d22462]{position:absolute;right:8px;top:0}.eventsLine .roomMuted i[data-v-33d22462]{color:rgb(var(--neutral-grad-3))}.eventsLine[data-v-33d22462] .previewMessage{max-width:90%;overflow:hidden;text-overflow:ellipsis}.eventsLine[data-v-33d22462] .deletedMessage{text-align:left;font-size:.9em}.eventsLine[data-v-33d22462] span{color:rgb(var(--neutral-grad-4));opacity:.8;font-size:.9em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.roomMuted[data-v-33d22462]{position:relative;top:-3px;left:6px}.roomMuted i[data-v-33d22462]{font-size:.7em}.summaryLine[data-v-33d22462]{display:flex;min-height:25px}.summaryLine .time[data-v-33d22462]{padding-top:.25em;opacity:.3;font-weight:500;text-align:right;white-space:nowrap;text-overflow:ellipsis;padding-right:.5em}.summaryLine .time[data-v-33d22462] span{font-size:.8em;display:block}.summaryLine .caption[data-v-33d22462]{flex-grow:1;display:flex;align-items:center}.summaryLine .caption[data-v-33d22462] span{font-size:1em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:500;display:inline-block;max-width:190px}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "4400":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomSummary = RoomSummary;
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/room-summary
 */

/**
 * Construct a new Room Summary. A summary can be used for display on a recent
 * list, without having to load the entire room list into memory.
 * @constructor
 * @param {string} roomId Required. The ID of this room.
 * @param {Object} info Optional. The summary info. Additional keys are supported.
 * @param {string} info.title The title of the room (e.g. <code>m.room.name</code>)
 * @param {string} info.desc The description of the room (e.g.
 * <code>m.room.topic</code>)
 * @param {Number} info.numMembers The number of joined users.
 * @param {string[]} info.aliases The list of aliases for this room.
 * @param {Number} info.timestamp The timestamp for this room.
 */

function RoomSummary(roomId, info) {
  this.roomId = roomId;
  this.info = info;
}

/***/ }),

/***/ "44ad":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");
var fails = __webpack_require__("d039");
var classof = __webpack_require__("c6b6");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "44c8":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("b0be");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("34ec60f1", content, shadowRoot)
};

/***/ }),

/***/ "4563":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "4578":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_ex_sass_vue_type_style_index_0_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9818");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_ex_sass_vue_type_style_index_0_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_ex_sass_vue_type_style_index_0_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_ex_sass_vue_type_style_index_0_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_ex_sass_vue_type_style_index_0_id_3e6353d6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "4606":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_792279b0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2369");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_792279b0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_792279b0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_792279b0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_792279b0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "467f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__("2d83");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "4681":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "47a0":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".mod-wrapper[data-v-96a5a68e]{position:absolute;top:0;left:0;justify-content:center;height:100%}.mod-wrapper[data-v-96a5a68e],.modal-window[data-v-96a5a68e]{display:flex;align-items:center;width:100%}.modal-window[data-v-96a5a68e]{border:1px solid rgb(var(--background-main));flex-direction:column;background-color:rgb(var(--background-total-theme));padding:1em;max-width:300px;margin:0 auto;border-radius:5px}.modal-window .btn[data-v-96a5a68e]{width:85%;padding:10px 5px;margin-top:25px;background-color:rgb(var(--color-bg-ac));border-radius:5px;color:#fff;cursor:pointer}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "480d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "485a":
/***/ (function(module, exports, __webpack_require__) {

var call = __webpack_require__("c65b");
var isCallable = __webpack_require__("1626");
var isObject = __webpack_require__("861d");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "4930":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__("2d00");
var fails = __webpack_require__("d039");

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "4a0c":
/***/ (function(module) {

module.exports = JSON.parse("{\"name\":\"axios\",\"version\":\"0.21.4\",\"description\":\"Promise based HTTP client for the browser and node.js\",\"main\":\"index.js\",\"scripts\":{\"test\":\"grunt test\",\"start\":\"node ./sandbox/server.js\",\"build\":\"NODE_ENV=production grunt build\",\"preversion\":\"npm test\",\"version\":\"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json\",\"postversion\":\"git push && git push --tags\",\"examples\":\"node ./examples/server.js\",\"coveralls\":\"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\",\"fix\":\"eslint --fix lib/**/*.js\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/axios/axios.git\"},\"keywords\":[\"xhr\",\"http\",\"ajax\",\"promise\",\"node\"],\"author\":\"Matt Zabriskie\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/axios/axios/issues\"},\"homepage\":\"https://axios-http.com\",\"devDependencies\":{\"coveralls\":\"^3.0.0\",\"es6-promise\":\"^4.2.4\",\"grunt\":\"^1.3.0\",\"grunt-banner\":\"^0.6.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-clean\":\"^1.1.0\",\"grunt-contrib-watch\":\"^1.0.0\",\"grunt-eslint\":\"^23.0.0\",\"grunt-karma\":\"^4.0.0\",\"grunt-mocha-test\":\"^0.13.3\",\"grunt-ts\":\"^6.0.0-beta.19\",\"grunt-webpack\":\"^4.0.2\",\"istanbul-instrumenter-loader\":\"^1.0.0\",\"jasmine-core\":\"^2.4.1\",\"karma\":\"^6.3.2\",\"karma-chrome-launcher\":\"^3.1.0\",\"karma-firefox-launcher\":\"^2.1.0\",\"karma-jasmine\":\"^1.1.1\",\"karma-jasmine-ajax\":\"^0.1.13\",\"karma-safari-launcher\":\"^1.0.0\",\"karma-sauce-launcher\":\"^4.3.6\",\"karma-sinon\":\"^1.0.5\",\"karma-sourcemap-loader\":\"^0.3.8\",\"karma-webpack\":\"^4.0.2\",\"load-grunt-tasks\":\"^3.5.2\",\"minimist\":\"^1.2.0\",\"mocha\":\"^8.2.1\",\"sinon\":\"^4.5.0\",\"terser-webpack-plugin\":\"^4.2.3\",\"typescript\":\"^4.0.5\",\"url-search-params\":\"^0.10.0\",\"webpack\":\"^4.44.2\",\"webpack-dev-server\":\"^3.11.0\"},\"browser\":{\"./lib/adapters/http.js\":\"./lib/adapters/xhr.js\"},\"jsdelivr\":\"dist/axios.min.js\",\"unpkg\":\"dist/axios.min.js\",\"typings\":\"./index.d.ts\",\"dependencies\":{\"follow-redirects\":\"^1.14.0\"},\"bundlesize\":[{\"path\":\"./dist/axios.min.js\",\"threshold\":\"5kB\"}]}");

/***/ }),

/***/ "4a1e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-page-transition/src/components/VuePageTransition.vue?vue&type=template&id=108c57b8&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('transition',{attrs:{"name":_vm.transition,"mode":_vm.mode}},[_vm._t("default")],2),_c('div',{staticClass:"overlay-top"}),_c('div',{staticClass:"overlay-right"}),_c('div',{staticClass:"overlay-bottom"}),_c('div',{staticClass:"overlay-left"})],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/editedplugins/vue-page-transition/src/components/VuePageTransition.vue?vue&type=template&id=108c57b8&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-page-transition/src/components/VuePageTransition.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var VuePageTransitionvue_type_script_lang_js_ = ({
  name: 'vue-page-transition',
  props: ['name'],

  data() {
    return {
      transition: 'fade',
      mode: 'out-in'
    };
  },

  created() {
    this.$router.beforeEach((to, from, next) => {
      this.transition = to.meta.transition ? to.meta.transition : this.$props.name;
      next();
    });
  }

});
// CONCATENATED MODULE: ./src/editedplugins/vue-page-transition/src/components/VuePageTransition.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_VuePageTransitionvue_type_script_lang_js_ = (VuePageTransitionvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/editedplugins/vue-page-transition/src/components/VuePageTransition.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("2200")
if (style0.__inject__) style0.__inject__(context)
var style1 = __webpack_require__("1b79")
if (style1.__inject__) style1.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  components_VuePageTransitionvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "108c57b8",
  null
  ,true
)

/* harmony default export */ var VuePageTransition = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "4a7b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "4acf":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ":root{--overlay-bg:#1867c0;--transition-duration:.35s}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "4b1c":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "4cbb":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_06594ccd_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("73c2");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_06594ccd_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_06594ccd_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_06594ccd_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_06594ccd_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "4d5e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * AES-CTR using a WebCrypto (or similar) API
 */
class WebCryptoAesCtr {
    constructor(key, crypto) {
        this.key = key;
        this.crypto = crypto;
    }
    static importKey(crypto, keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only AES-128 and AES-256 supported. AES-192 is not.
            if (keyData.length !== 16 && keyData.length !== 32) {
                throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);
            }
            const key = yield crypto.subtle.importKey("raw", keyData, "AES-CTR", false, ["encrypt"]);
            return new WebCryptoAesCtr(key, crypto);
        });
    }
    encryptCtr(iv, plaintext) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphertext = yield this.crypto.subtle.encrypt({ name: "AES-CTR", counter: iv, length: 16 }, this.key, plaintext);
            return new Uint8Array(ciphertext);
        });
    }
    clear() {
        // TODO: actually clear something. Do we need to?
        return this;
    }
}
exports.default = WebCryptoAesCtr;


/***/ }),

/***/ "4d64":
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__("fc6a");
var toAbsoluteIndex = __webpack_require__("23cb");
var lengthOfArrayLike = __webpack_require__("07fa");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "4df7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemoryCryptoStore = void 0;

var _defineProperty2 = _interopRequireDefault(__webpack_require__("9523"));

var _logger = __webpack_require__("63c7");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        (0, _defineProperty2.default)(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}
/**
 * Internal module. in-memory storage for e2e.
 *
 * @module
 */

/**
 * @implements {module:crypto/store/base~CryptoStore}
 */


class MemoryCryptoStore {
  constructor() {
    this._outgoingRoomKeyRequests = [];
    this._account = null;
    this._crossSigningKeys = null;
    this._privateKeys = {};
    this._backupKeys = {}; // Map of {devicekey -> {sessionId -> session pickle}}

    this._sessions = {}; // Map of {devicekey -> array of problems}

    this._sessionProblems = {}; // Map of {userId -> deviceId -> true}

    this._notifiedErrorDevices = {}; // Map of {senderCurve25519Key+'/'+sessionId -> session data object}

    this._inboundGroupSessions = {};
    this._inboundGroupSessionsWithheld = {}; // Opaque device data object

    this._deviceData = null; // roomId -> Opaque roomInfo object

    this._rooms = {}; // Set of {senderCurve25519Key+'/'+sessionId}

    this._sessionsNeedingBackup = {}; // roomId -> array of [senderKey, sessionId]

    this._sharedHistoryInboundGroupSessions = {};
  }
  /**
   * Ensure the database exists and is up-to-date.
   *
   * This must be called before the store can be used.
   *
   * @return {Promise} resolves to the store.
   */


  startup() {
    var _this = this;

    return _asyncToGenerator(function* () {
      // No startup work to do for the memory store.
      return _this;
    })();
  }
  /**
   * Delete all data from this store.
   *
   * @returns {Promise} Promise which resolves when the store has been cleared.
   */


  deleteAllData() {
    return Promise.resolve();
  }
  /**
   * Look for an existing outgoing room key request, and if none is found,
   * add a new one
   *
   * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the
   *    same instance as passed in, or the existing one.
   */


  getOrAddOutgoingRoomKeyRequest(request) {
    const requestBody = request.requestBody;
    return utils.promiseTry(() => {
      // first see if we already have an entry for this request.
      const existing = this._getOutgoingRoomKeyRequest(requestBody);

      if (existing) {
        // this entry matches the request - return it.
        _logger.logger.log(`already have key request outstanding for ` + `${requestBody.room_id} / ${requestBody.session_id}: ` + `not sending another`);

        return existing;
      } // we got to the end of the list without finding a match
      // - add the new request.


      _logger.logger.log(`enqueueing key request for ${requestBody.room_id} / ` + requestBody.session_id);

      this._outgoingRoomKeyRequests.push(request);

      return request;
    });
  }
  /**
   * Look for an existing room key request
   *
   * @param {module:crypto~RoomKeyRequestBody} requestBody
   *    existing request to look for
   *
   * @return {Promise} resolves to the matching
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    not found
   */


  getOutgoingRoomKeyRequest(requestBody) {
    return Promise.resolve(this._getOutgoingRoomKeyRequest(requestBody));
  }
  /**
   * Looks for existing room key request, and returns the result synchronously.
   *
   * @internal
   *
   * @param {module:crypto~RoomKeyRequestBody} requestBody
   *    existing request to look for
   *
   * @return {module:crypto/store/base~OutgoingRoomKeyRequest?}
   *    the matching request, or null if not found
   */


  _getOutgoingRoomKeyRequest(requestBody) {
    for (const existing of this._outgoingRoomKeyRequests) {
      if (utils.deepCompare(existing.requestBody, requestBody)) {
        return existing;
      }
    }

    return null;
  }
  /**
   * Look for room key requests by state
   *
   * @param {Array<Number>} wantedStates list of acceptable states
   *
   * @return {Promise} resolves to the a
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    there are no pending requests in those states
   */


  getOutgoingRoomKeyRequestByState(wantedStates) {
    for (const req of this._outgoingRoomKeyRequests) {
      for (const state of wantedStates) {
        if (req.state === state) {
          return Promise.resolve(req);
        }
      }
    }

    return Promise.resolve(null);
  }
  /**
   *
   * @param {Number} wantedState
   * @return {Promise<Array<*>>} All OutgoingRoomKeyRequests in state
   */


  getAllOutgoingRoomKeyRequestsByState(wantedState) {
    return Promise.resolve(this._outgoingRoomKeyRequests.filter(r => r.state == wantedState));
  }

  getOutgoingRoomKeyRequestsByTarget(userId, deviceId, wantedStates) {
    const results = [];

    for (const req of this._outgoingRoomKeyRequests) {
      for (const state of wantedStates) {
        if (req.state === state && req.recipients.includes({
          userId,
          deviceId
        })) {
          results.push(req);
        }
      }
    }

    return Promise.resolve(results);
  }
  /**
   * Look for an existing room key request by id and state, and update it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   * @param {Object} updates        name/value map of updates to apply
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}
   *    updated request, or null if no matching row was found
   */


  updateOutgoingRoomKeyRequest(requestId, expectedState, updates) {
    for (const req of this._outgoingRoomKeyRequests) {
      if (req.requestId !== requestId) {
        continue;
      }

      if (req.state != expectedState) {
        _logger.logger.warn(`Cannot update room key request from ${expectedState} ` + `as it was already updated to ${req.state}`);

        return Promise.resolve(null);
      }

      Object.assign(req, updates);
      return Promise.resolve(req);
    }

    return Promise.resolve(null);
  }
  /**
   * Look for an existing room key request by id and state, and delete it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   *
   * @returns {Promise} resolves once the operation is completed
   */


  deleteOutgoingRoomKeyRequest(requestId, expectedState) {
    for (let i = 0; i < this._outgoingRoomKeyRequests.length; i++) {
      const req = this._outgoingRoomKeyRequests[i];

      if (req.requestId !== requestId) {
        continue;
      }

      if (req.state != expectedState) {
        _logger.logger.warn(`Cannot delete room key request in state ${req.state} ` + `(expected ${expectedState})`);

        return Promise.resolve(null);
      }

      this._outgoingRoomKeyRequests.splice(i, 1);

      return Promise.resolve(req);
    }

    return Promise.resolve(null);
  } // Olm Account


  getAccount(txn, func) {
    func(this._account);
  }

  storeAccount(txn, newData) {
    this._account = newData;
  }

  getCrossSigningKeys(txn, func) {
    func(this._crossSigningKeys);
  }

  getSecretStorePrivateKey(txn, func, type) {
    const result = this._privateKeys[type];
    return func(result || null);
  }

  storeCrossSigningKeys(txn, keys) {
    this._crossSigningKeys = keys;
  }

  storeSecretStorePrivateKey(txn, type, key) {
    this._privateKeys[type] = key;
  } // Olm Sessions


  countEndToEndSessions(txn, func) {
    return Object.keys(this._sessions).length;
  }

  getEndToEndSession(deviceKey, sessionId, txn, func) {
    const deviceSessions = this._sessions[deviceKey] || {};
    func(deviceSessions[sessionId] || null);
  }

  getEndToEndSessions(deviceKey, txn, func) {
    func(this._sessions[deviceKey] || {});
  }

  getAllEndToEndSessions(txn, func) {
    Object.entries(this._sessions).forEach(_ref => {
      let [deviceKey, deviceSessions] = _ref;
      Object.entries(deviceSessions).forEach(_ref2 => {
        let [sessionId, session] = _ref2;
        func(_objectSpread(_objectSpread({}, session), {}, {
          deviceKey,
          sessionId
        }));
      });
    });
  }

  storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn) {
    let deviceSessions = this._sessions[deviceKey];

    if (deviceSessions === undefined) {
      deviceSessions = {};
      this._sessions[deviceKey] = deviceSessions;
    }

    deviceSessions[sessionId] = sessionInfo;
  }

  storeEndToEndSessionProblem(deviceKey, type, fixed) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const problems = _this2._sessionProblems[deviceKey] = _this2._sessionProblems[deviceKey] || [];
      problems.push({
        type,
        fixed,
        time: Date.now()
      });
      problems.sort((a, b) => {
        return a.time - b.time;
      });
    })();
  }

  getEndToEndSessionProblem(deviceKey, timestamp) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const problems = _this3._sessionProblems[deviceKey] || [];

      if (!problems.length) {
        return null;
      }

      const lastProblem = problems[problems.length - 1];

      for (const problem of problems) {
        if (problem.time > timestamp) {
          return Object.assign({}, problem, {
            fixed: lastProblem.fixed
          });
        }
      }

      if (lastProblem.fixed) {
        return null;
      } else {
        return lastProblem;
      }
    })();
  }

  filterOutNotifiedErrorDevices(devices) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const notifiedErrorDevices = _this4._notifiedErrorDevices;
      const ret = [];

      for (const device of devices) {
        const {
          userId,
          deviceInfo
        } = device;

        if (userId in notifiedErrorDevices) {
          if (!(deviceInfo.deviceId in notifiedErrorDevices[userId])) {
            ret.push(device);
            notifiedErrorDevices[userId][deviceInfo.deviceId] = true;
          }
        } else {
          ret.push(device);
          notifiedErrorDevices[userId] = {
            [deviceInfo.deviceId]: true
          };
        }
      }

      return ret;
    })();
  } // Inbound Group Sessions


  getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func) {
    const k = senderCurve25519Key + '/' + sessionId;
    func(this._inboundGroupSessions[k] || null, this._inboundGroupSessionsWithheld[k] || null);
  }

  getAllEndToEndInboundGroupSessions(txn, func) {
    for (const key of Object.keys(this._inboundGroupSessions)) {
      // we can't use split, as the components we are trying to split out
      // might themselves contain '/' characters. We rely on the
      // senderKey being a (32-byte) curve25519 key, base64-encoded
      // (hence 43 characters long).
      func({
        senderKey: key.substr(0, 43),
        sessionId: key.substr(44),
        sessionData: this._inboundGroupSessions[key]
      });
    }

    func(null);
  }

  addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    const k = senderCurve25519Key + '/' + sessionId;

    if (this._inboundGroupSessions[k] === undefined) {
      this._inboundGroupSessions[k] = sessionData;
    }
  }

  storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    this._inboundGroupSessions[senderCurve25519Key + '/' + sessionId] = sessionData;
  }

  storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn) {
    const k = senderCurve25519Key + '/' + sessionId;
    this._inboundGroupSessionsWithheld[k] = sessionData;
  } // Device Data


  getEndToEndDeviceData(txn, func) {
    func(this._deviceData);
  }

  storeEndToEndDeviceData(deviceData, txn) {
    this._deviceData = deviceData;
  } // E2E rooms


  storeEndToEndRoom(roomId, roomInfo, txn) {
    this._rooms[roomId] = roomInfo;
  }

  getEndToEndRooms(txn, func) {
    func(this._rooms);
  }

  getSessionsNeedingBackup(limit) {
    const sessions = [];

    for (const session in this._sessionsNeedingBackup) {
      if (this._inboundGroupSessions[session]) {
        sessions.push({
          senderKey: session.substr(0, 43),
          sessionId: session.substr(44),
          sessionData: this._inboundGroupSessions[session]
        });

        if (limit && session.length >= limit) {
          break;
        }
      }
    }

    return Promise.resolve(sessions);
  }

  countSessionsNeedingBackup() {
    return Promise.resolve(Object.keys(this._sessionsNeedingBackup).length);
  }

  unmarkSessionsNeedingBackup(sessions) {
    for (const session of sessions) {
      const sessionKey = session.senderKey + '/' + session.sessionId;
      delete this._sessionsNeedingBackup[sessionKey];
    }

    return Promise.resolve();
  }

  markSessionsNeedingBackup(sessions) {
    for (const session of sessions) {
      const sessionKey = session.senderKey + '/' + session.sessionId;
      this._sessionsNeedingBackup[sessionKey] = true;
    }

    return Promise.resolve();
  }

  addSharedHistoryInboundGroupSession(roomId, senderKey, sessionId) {
    const sessions = this._sharedHistoryInboundGroupSessions[roomId] || [];
    sessions.push([senderKey, sessionId]);
    this._sharedHistoryInboundGroupSessions[roomId] = sessions;
  }

  getSharedHistoryInboundGroupSessions(roomId) {
    return Promise.resolve(this._sharedHistoryInboundGroupSessions[roomId] || []);
  } // Session key backups


  doTxn(mode, stores, func) {
    return Promise.resolve(func(null));
  }

}

exports.MemoryCryptoStore = MemoryCryptoStore;

/***/ }),

/***/ "4ea4":
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "4ec4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterComponent = FilterComponent;
/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module filter-component
 */

/**
 * Checks if a value matches a given field value, which may be a * terminated
 * wildcard pattern.
 * @param {String} actual_value  The value to be compared
 * @param {String} filter_value  The filter pattern to be compared
 * @return {bool} true if the actual_value matches the filter_value
 */

function _matches_wildcard(actual_value, filter_value) {
  if (filter_value.endsWith("*")) {
    const type_prefix = filter_value.slice(0, -1);
    return actual_value.substr(0, type_prefix.length) === type_prefix;
  } else {
    return actual_value === filter_value;
  }
}
/**
 * FilterComponent is a section of a Filter definition which defines the
 * types, rooms, senders filters etc to be applied to a particular type of resource.
 * This is all ported over from synapse's Filter object.
 *
 * N.B. that synapse refers to these as 'Filters', and what js-sdk refers to as
 * 'Filters' are referred to as 'FilterCollections'.
 *
 * @constructor
 * @param {Object} filter_json the definition of this filter JSON, e.g. { 'contains_url': true }
 */


function FilterComponent(filter_json) {
  this.filter_json = filter_json;
  this.types = filter_json.types || null;
  this.not_types = filter_json.not_types || [];
  this.rooms = filter_json.rooms || null;
  this.not_rooms = filter_json.not_rooms || [];
  this.senders = filter_json.senders || null;
  this.not_senders = filter_json.not_senders || [];
  this.contains_url = filter_json.contains_url || null;
}
/**
 * Checks with the filter component matches the given event
 * @param {MatrixEvent} event event to be checked against the filter
 * @return {bool} true if the event matches the filter
 */


FilterComponent.prototype.check = function (event) {
  return this._checkFields(event.getRoomId(), event.getSender(), event.getType(), event.getContent() ? event.getContent().url !== undefined : false);
};
/**
 * Checks whether the filter component matches the given event fields.
 * @param {String} room_id       the room_id for the event being checked
 * @param {String} sender        the sender of the event being checked
 * @param {String} event_type    the type of the event being checked
 * @param {String} contains_url  whether the event contains a content.url field
 * @return {bool} true if the event fields match the filter
 */


FilterComponent.prototype._checkFields = function (room_id, sender, event_type, contains_url) {
  const literal_keys = {
    "rooms": function (v) {
      return room_id === v;
    },
    "senders": function (v) {
      return sender === v;
    },
    "types": function (v) {
      return _matches_wildcard(event_type, v);
    }
  };
  const self = this;

  for (let n = 0; n < Object.keys(literal_keys).length; n++) {
    const name = Object.keys(literal_keys)[n];
    const match_func = literal_keys[name];
    const not_name = "not_" + name;
    const disallowed_values = self[not_name];

    if (disallowed_values.filter(match_func).length > 0) {
      return false;
    }

    const allowed_values = self[name];

    if (allowed_values && allowed_values.length > 0) {
      const anyMatch = allowed_values.some(match_func);

      if (!anyMatch) {
        return false;
      }
    }
  }

  const contains_url_filter = this.filter_json.contains_url;

  if (contains_url_filter !== undefined) {
    if (contains_url_filter !== contains_url) {
      return false;
    }
  }

  return true;
};
/**
 * Filters a list of events down to those which match this filter component
 * @param {MatrixEvent[]} events  Events to be checked againt the filter component
 * @return {MatrixEvent[]} events which matched the filter component
 */


FilterComponent.prototype.filter = function (events) {
  return events.filter(this.check, this);
};
/**
 * Returns the limit field for a given filter component, providing a default of
 * 10 if none is otherwise specified.  Cargo-culted from Synapse.
 * @return {Number} the limit for this filter component.
 */


FilterComponent.prototype.limit = function () {
  return this.filter_json.limit !== undefined ? this.filter_json.limit : 10;
};

/***/ }),

/***/ "4f4d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


/***/ }),

/***/ "4f5a":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("3139");


class User {
  constructor(core, p) {
    if (!p) p = {};
    this.core = core;
    this.state = 0;
    this.keysupdatetimeout = null;
    this.userinfo = {
      image: '',
      name: '',
      id: '',
      keys: []
    };
    this.private = [];
  }

  destroy() {
    if (this.keysupdatetimeout) {
      clearTimeout(this.keysupdatetimeout);
    }

    this.keysupdatetimeout = null;
    this.state = 0;
    this.userinfo = {
      image: '',
      name: '',
      id: '',
      keys: []
    };
    this.private = [];
  }

  setCredentials(credentials) {
    if (credentials) this.credentials = credentials;
  }

  setUsersInfo(usersinfo, reload) {
    _.each(usersinfo || [], v => {
      this.core.store.commit('SET_USERINFO', {
        info: v,
        reload: reload
      });
    });
  }

  setContacts(usersinfo) {//this.core.store.commit('SET_CONTACTS', usersinfo)
  }

  myMatrixId() {
    return this.matrixId(this.userinfo.id);
  }

  matrixId(id, domain) {
    id || (id = '');
    if (id.indexOf("@") == 0) return id;
    return '@' + id + ':' + (domain || this.core.domain);
  }

  fromMatrixId(matrixid) {
    return _functions_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].getmatrixid(matrixid);
  }

}

/* harmony default export */ __webpack_exports__["a"] = (User);

/***/ }),

/***/ "4fd1":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("3fb5")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ 5:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "5059":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _application_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("3139");
var EXIF = __webpack_require__("6f45");



var Images = function () {
  var self = this;

  self.orientation = function (image, exif) {
    return new Promise((resolve, reject) => {
      if (!exif.orientation) {
        return resolve(image);
      }

      var img = new Image(),
          canvas = document.createElement("canvas"),
          ctx = canvas.getContext('2d');
      img.src = srcData;

      img.onload = function () {
        var width = img.width,
            height = img.height; // set proper canvas dimensions before transform & export

        if ($.inArray(exif.orientation, [5, 6, 7, 8]) > -1) {
          canvas.width = height;
          canvas.height = width;
        } else {
          canvas.width = width;
          canvas.height = height;
        } // transform context before drawing image


        switch (exif.orientation) {
          case 1:
            // normal
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 2:
            // flip horizontal
            ctx.translate(width, 0);
            ctx.scale(-1, 1);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 3:
            // rotate 180
            ctx.translate(width, height);
            ctx.rotate(Math.PI);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 4:
            // flip vertical
            ctx.translate(0, height);
            ctx.scale(1, -1);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 5:
            // flip vertical, rotate 90 clockwise
            ctx.rotate(Math.PI / 2);
            ctx.scale(1, -1);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 6:
            // rotate 90 clockwise
            ctx.rotate(Math.PI / 2);
            ctx.translate(0, -height);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 7:
            // flip horizontal, rotate 90 counter clockwise
            ctx.rotate(Math.PI / 2);
            ctx.translate(width, -height);
            ctx.scale(-1, 1);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          case 8:
            // rotate 90 counter clockwise
            ctx.rotate(-Math.PI / 2);
            ctx.translate(-width, 0);
            ctx.drawImage(this, 0, 0, width, height);
            break;

          default:
            // normal
            ctx.drawImage(this, 0, 0, width, height);
            return;
        } // Draw img into canvas
        // ctx.drawImage(img, 0, 0, width, height);


        var url = canvas.toDataURL("image/jpeg", 0.95);
        $(canvas).remove();
        resolve(url);
      };
    });
  };

  self.autorotation = function (file, base64) {
    return new Promise((resolve, reject) => {
      if (file && !_application_functions__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].isios()) {
        EXIF.getData(file, function () {
          var exif = EXIF.getAllTags(this);
          self.orientation(base64, exif).then(res => {
            return resolve(res);
          });
        });
      } else {
        return resolve(base64);
      }
    });
  };

  self.srcToData = function (url, callback) {
    var xhr = new XMLHttpRequest();

    xhr.onload = function () {
      var reader = new FileReader();

      reader.onloadend = function () {
        callback(reader.result);
      };

      reader.readAsDataURL(xhr.response);
    };

    xhr.onerror = function () {};

    xhr.open('GET', url);
    xhr.responseType = 'blob';
    xhr.send();
  };

  self.resize = {
    fit: function (srcData, width, height, format, quality) {
      var imageObj = new Image(),
          canvas = document.createElement("canvas"),
          ctx = canvas.getContext('2d'),
          aspectRadio,
          newWidth,
          newHeight;
      imageObj.crossOrigin = "Anonymous";
      imageObj.src = srcData;
      format || (format = 'image/jpeg');
      quality || (quality = 1);
      return new Promise((resolve, reject) => {
        imageObj.onload = function () {
          aspectRadio = imageObj.height / imageObj.width;
          newHeight = imageObj.height;
          newWidth = imageObj.width;

          if (newHeight <= height && newWidth <= width) {} else {
            if (newWidth > width) {
              newWidth = width;
              newHeight = width * aspectRadio;
            }

            if (newHeight > height) {
              newHeight = height;
              newWidth = newHeight / aspectRadio;
            }

            var c = Math.max((newHeight - height) / newHeight, (newWidth - width) / newWidth);

            if (c > 0) {
              newHeight = newHeight * (c + 1);
              newWidth = newWidth * (c + 1);
            }
          }

          canvas.width = newWidth;
          canvas.height = newHeight;
          ctx.drawImage(imageObj, 0, 0, newWidth, newHeight);
          var url = canvas.toDataURL(format, quality);
          $(canvas).remove();
          resolve(url);
        };
      });
    },
    def: function (srcData, width, height, format, quality) {
      var imageObj = new Image(),
          canvas = document.createElement("canvas"),
          ctx = canvas.getContext('2d'),
          aspectRadio,
          newWidth,
          newHeight;
      imageObj.crossOrigin = "Anonymous";
      imageObj.src = srcData;
      format || (format = 'image/jpeg');
      quality || (quality = 1);
      return new Promise((resolve, reject) => {
        imageObj.onload = function () {
          aspectRadio = imageObj.height / imageObj.width;
          newHeight = imageObj.height;
          newWidth = imageObj.width;

          if (newHeight <= height && newWidth <= width) {} else {
            if (newWidth > width) {
              newWidth = width;
              newHeight = width * aspectRadio;
            }

            if (newHeight > height) {
              newHeight = height;
              newWidth = newHeight / aspectRadio;
            }
          }

          canvas.width = newWidth;
          canvas.height = newHeight;
          ctx.drawImage(imageObj, 0, 0, newWidth, newHeight);
          var url = canvas.toDataURL(format, quality);
          $(canvas).remove();
          resolve(url);
        };
      });
    }
  };

  self.grayscaleImage = function (srcData, clbk) {
    var image = new Image();
    image.src = srcData;
    return new Promise((resolve, reject) => {
      image.onload = function () {
        var myCanvas = document.createElement("canvas");
        var myCanvasContext = myCanvas.getContext("2d");
        var imgWidth = image.width;
        var imgHeight = image.height;
        myCanvas.width = imgWidth;
        myCanvas.height = imgHeight;
        myCanvasContext.drawImage(image, 0, 0);
        var imageData = myCanvasContext.getImageData(0, 0, imgWidth, imgHeight);
        var j = 0,
            i = 0;

        for (i = 0; i < imageData.height; i++) {
          for (j = 0; j < imageData.width; j++) {
            var index = i * 4 * imageData.width + j * 4;
            var red = imageData.data[index];
            var green = imageData.data[index + 1];
            var blue = imageData.data[index + 2];
            var alpha = imageData.data[index + 3];
            var average = (3 * red + green + blue) / 3;
            imageData.data[index] = average;
            imageData.data[index + 1] = average;
            imageData.data[index + 2] = average;
            imageData.data[index + 3] = alpha;
          }
        }

        myCanvasContext.putImageData(imageData, 0, 0, 0, 0, imageData.width, imageData.height);
        resolve(myCanvas.toDataURL());
      };
    });
  };

  self.wh = function (base64) {
    const img = new Image();
    var imgInfo = {};
    return new Promise((resolve, reject) => {
      img.onload = function () {
        imgInfo.w = this.width;
        imgInfo.h = this.height;
        resolve(imgInfo);
      };

      img.onerror = function (e) {
        reject(e);
      };

      img.src = base64; //this.info = imgInfo
    });
  };

  return self;
};

/* harmony default export */ __webpack_exports__["a"] = (Images);

/***/ }),

/***/ "50c4":
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__("5926");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "5156":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__("1696");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "51a2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("0ac3").PassThrough


/***/ }),

/***/ "51c5":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("9dd7");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("a806657a", content, shadowRoot)
};

/***/ }),

/***/ "5270":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var transformData = __webpack_require__("c401");
var isCancel = __webpack_require__("2e67");
var defaults = __webpack_require__("2444");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "52ce":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_a8a70f9c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8157");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_a8a70f9c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_a8a70f9c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_a8a70f9c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_a8a70f9c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "52ef":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("2e6a");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("3df99155", content, shadowRoot)
};

/***/ }),

/***/ "5402":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__("00ce");
var callBound = __webpack_require__("545e");
var inspect = __webpack_require__("2714");

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */
var listGetNode = function (list, key) { // eslint-disable-line consistent-return
	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {
		if (curr.key === key) {
			prev.next = curr.next;
			curr.next = list.next;
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		}
	}
};

var listGet = function (objects, key) {
	var node = listGetNode(objects, key);
	return node && node.value;
};
var listSet = function (objects, key, value) {
	var node = listGetNode(objects, key);
	if (node) {
		node.value = value;
	} else {
		// Prepend the new node to the beginning of the list
		objects.next = { // eslint-disable-line no-param-reassign
			key: key,
			next: objects.next,
			value: value
		};
	}
};
var listHas = function (objects, key) {
	return !!listGetNode(objects, key);
};

module.exports = function getSideChannel() {
	var $wm;
	var $m;
	var $o;
	var channel = {
		assert: function (key) {
			if (!channel.has(key)) {
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			}
		},
		get: function (key) { // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapGet($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapGet($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listGet($o, key);
				}
			}
		},
		has: function (key) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if ($wm) {
					return $weakMapHas($wm, key);
				}
			} else if ($Map) {
				if ($m) {
					return $mapHas($m, key);
				}
			} else {
				if ($o) { // eslint-disable-line no-lonely-if
					return listHas($o, key);
				}
			}
			return false;
		},
		set: function (key, value) {
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
				if (!$wm) {
					$wm = new $WeakMap();
				}
				$weakMapSet($wm, key, value);
			} else if ($Map) {
				if (!$m) {
					$m = new $Map();
				}
				$mapSet($m, key, value);
			} else {
				if (!$o) {
					/*
					 * Initialize the linked list as an empty node, so that we don't have
					 * to special-case handling of the first node: we can always refer to
					 * it as (previous node).next, instead of something like (list).head
					 */
					$o = { key: {}, next: null };
				}
				listSet($o, key, value);
			}
		}
	};
	return channel;
};


/***/ }),

/***/ "545e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var GetIntrinsic = __webpack_require__("00ce");

var callBind = __webpack_require__("3eb1");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "5588":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_d18e99d2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7608");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_d18e99d2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_d18e99d2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_d18e99d2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_d18e99d2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "5609":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".fade-enter .modal-backdrop,.fade-leave-to .modal-backdrop{opacity:0}.fade-enter .modal-wrapper,.fade-leave-to .modal-wrapper{transform:translateY(150%)!important}.fade-enter-active,.fade-leave-active{transition:.3s}.modal-backdrop{position:absolute;z-index:30;top:0;bottom:0;left:0;right:0;background:rgba(var(--background-total-theme),.15);backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);display:block;justify-content:center;align-items:center;z-index:2023;opacity:1;transition:.3s}#modal.mobile .modal-backdrop,#modal.mobile .modal-wrapper{position:fixed}#modal.mobile .modal-backdrop{background:rgba(0,17,44,.75)}#modal.mobile .modal-wrapper{border:0}#modal.bout .modal-backdrop{position:fixed}#modal.bout .modal-wrapper{position:fixed;z-index:2023}#modal.minimized .modal-wrapper{top:-30px;left:auto;right:0;width:344px;position:fixed;z-index:2023222;border-bottom:0}#modal.minimized .modal-backdrop{left:auto;border-radius:8px;top:-60px;right:0;width:344px;position:fixed}#modal.minimized .modal::-webkit-scrollbar{width:0!important}#modal.minimized.bin{display:none}#modal.minimized.bin.active{display:block}#modal.minimized.bin .modal-backdrop,#modal.minimized.bin .modal-wrapper{position:absolute}.modal-wrapper{top:7%;transition:.3s;overflow:hidden}.modal,.modal-wrapper{position:absolute;left:0;right:0;bottom:0}.modal{border-top-left-radius:10px;border-top-right-radius:10px;border-top:1px solid rgba(var(--neutral-grad-3),.2);background:rgb(var(--background-total-theme));overflow-x:hidden;max-width:640px;margin:0 auto;box-shadow:0 7px 12px -5px rgba(var(--color-shadow-base),.7);z-index:2023;top:0;overscroll-behavior:contain}.modal-close{position:absolute;top:0;right:0;padding:1em;width:50px;text-align:center;color:rgb(var(--neutral-grad-4));cursor:pointer;transition:.3s}@media (pointer:fine){.modal-close:hover{color:rgb(var(--text-color))}}.modal-footer,.modal-header{padding:1em 1em;display:flex;max-width:640px;margin:0 auto}.modal-header{color:rgb(var(--text-color));justify-content:space-between;font-weight:700}.modal-footer{justify-content:flex-end}.mwork{padding:1em 1em}.modal-body{padding:0}.eff{text-align:center;color:rgb(var(--color-txt-ac));width:100%}.eff i{font-size:.2em}.btn-close{border:none;padding:1em;cursor:pointer;font-weight:700;color:rgb(var(--neutral-grad-4));background:transparent}.btn-success{color:#fff;background:rgb(var(--color-bg-ac));border:1px solid rgb(var(--color-bg-ac))}@media only screen and (max-width:640px){.modal{min-width:0;width:100%;height:100%}.modal-footer{position:absolute;bottom:0;right:0;left:0}}.separator{width:5px}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "5692":
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__("c430");
var store = __webpack_require__("c6cd");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.24.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "56ef":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");
var uncurryThis = __webpack_require__("e330");
var getOwnPropertyNamesModule = __webpack_require__("241c");
var getOwnPropertySymbolsModule = __webpack_require__("7418");
var anObject = __webpack_require__("825a");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "5722":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e4f39dca_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("e71b");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e4f39dca_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e4f39dca_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e4f39dca_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e4f39dca_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "577e":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("f5df");

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ "57d8":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".opacity[data-v-332740e2]{opacity:0}.chatIcon[data-v-332740e2]{width:100%;position:relative}.unknowngroupusersicon[data-v-332740e2]{position:absolute;left:0;top:0;bottom:0;right:0;font-size:.7em;display:flex;justify-content:center;align-items:center;color:#fff;text-shadow:0 0 2px rgba(0,11,58,.714),0 0 3px rgba(0,8,43,.519)}.unknowngroupusers .bgimage[data-v-332740e2]{transform:scale(.7)}.chatGroupIcon img[data-v-332740e2]{width:100%;height:100%;border-radius:50%;-o-object-fit:cover;object-fit:cover;-o-object-position:50% 50%;object-position:50% 50%;position:absolute;top:0;z-index:100}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "5896":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "5926":
/***/ (function(module, exports, __webpack_require__) {

var trunc = __webpack_require__("b42e");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "59ed":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("1626");
var tryToString = __webpack_require__("0d51");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "5a2d":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("3dc4");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("37939c28", content, shadowRoot)
};

/***/ }),

/***/ "5a74":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
// This file is imported into lib/wc client bundles.

if (typeof window !== 'undefined') {
  var currentScript = window.document.currentScript
  if (Object({"NODE_ENV":"production","BASE_URL":"/"}).NEED_CURRENTSCRIPT_POLYFILL) {
    var getCurrentScript = __webpack_require__("8875")
    currentScript = getCurrentScript()

    // for backward compatibility, because previously we directly included the polyfill
    if (!('currentScript' in document)) {
      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })
    }
  }

  var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)
  if (src) {
    __webpack_require__.p = src[1] // eslint-disable-line
  }
}

// Indicate to webpack that this file can be concatenated
/* harmony default export */ var setPublicPath = (null);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js
var vue_esm = __webpack_require__("a026");

// CONCATENATED MODULE: ./node_modules/@vue/web-component-wrapper/dist/vue-wc-wrapper.js
const camelizeRE = /-(\w)/g;
const camelize = str => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '')
};

const hyphenateRE = /\B([A-Z])/g;
const hyphenate = str => {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
};

function getInitialProps (propsList) {
  const res = {};
  propsList.forEach(key => {
    res[key] = undefined;
  });
  return res
}

function injectHook (options, key, hook) {
  options[key] = [].concat(options[key] || []);
  options[key].unshift(hook);
}

function callHooks (vm, hook) {
  if (vm) {
    const hooks = vm.$options[hook] || [];
    hooks.forEach(hook => {
      hook.call(vm);
    });
  }
}

function createCustomEvent (name, args) {
  return new CustomEvent(name, {
    bubbles: false,
    cancelable: false,
    detail: args
  })
}

const isBoolean = val => /function Boolean/.test(String(val));
const isNumber = val => /function Number/.test(String(val));

function convertAttributeValue (value, name, { type } = {}) {
  if (isBoolean(type)) {
    if (value === 'true' || value === 'false') {
      return value === 'true'
    }
    if (value === '' || value === name || value != null) {
      return true
    }
    return value
  } else if (isNumber(type)) {
    const parsed = parseFloat(value, 10);
    return isNaN(parsed) ? value : parsed
  } else {
    return value
  }
}

function toVNodes (h, children) {
  const res = [];
  for (let i = 0, l = children.length; i < l; i++) {
    res.push(toVNode(h, children[i]));
  }
  return res
}

function toVNode (h, node) {
  if (node.nodeType === 3) {
    return node.data.trim() ? node.data : null
  } else if (node.nodeType === 1) {
    const data = {
      attrs: getAttributes(node),
      domProps: {
        innerHTML: node.innerHTML
      }
    };
    if (data.attrs.slot) {
      data.slot = data.attrs.slot;
      delete data.attrs.slot;
    }
    return h(node.tagName, data)
  } else {
    return null
  }
}

function getAttributes (node) {
  const res = {};
  for (let i = 0, l = node.attributes.length; i < l; i++) {
    const attr = node.attributes[i];
    res[attr.nodeName] = attr.nodeValue;
  }
  return res
}

function wrap (Vue, Component) {
  const isAsync = typeof Component === 'function' && !Component.cid;
  let isInitialized = false;
  let hyphenatedPropsList;
  let camelizedPropsList;
  let camelizedPropsMap;

  function initialize (Component) {
    if (isInitialized) return

    const options = typeof Component === 'function'
      ? Component.options
      : Component;

    // extract props info
    const propsList = Array.isArray(options.props)
      ? options.props
      : Object.keys(options.props || {});
    hyphenatedPropsList = propsList.map(hyphenate);
    camelizedPropsList = propsList.map(camelize);
    const originalPropsAsObject = Array.isArray(options.props) ? {} : options.props || {};
    camelizedPropsMap = camelizedPropsList.reduce((map, key, i) => {
      map[key] = originalPropsAsObject[propsList[i]];
      return map
    }, {});

    // proxy $emit to native DOM events
    injectHook(options, 'beforeCreate', function () {
      const emit = this.$emit;
      this.$emit = (name, ...args) => {
        this.$root.$options.customElement.dispatchEvent(createCustomEvent(name, args));
        return emit.call(this, name, ...args)
      };
    });

    injectHook(options, 'created', function () {
      // sync default props values to wrapper on created
      camelizedPropsList.forEach(key => {
        this.$root.props[key] = this[key];
      });
    });

    // proxy props as Element properties
    camelizedPropsList.forEach(key => {
      Object.defineProperty(CustomElement.prototype, key, {
        get () {
          return this._wrapper.props[key]
        },
        set (newVal) {
          this._wrapper.props[key] = newVal;
        },
        enumerable: false,
        configurable: true
      });
    });

    isInitialized = true;
  }

  function syncAttribute (el, key) {
    const camelized = camelize(key);
    const value = el.hasAttribute(key) ? el.getAttribute(key) : undefined;
    el._wrapper.props[camelized] = convertAttributeValue(
      value,
      key,
      camelizedPropsMap[camelized]
    );
  }

  class CustomElement extends HTMLElement {
    constructor () {
      const self = super();
      self.attachShadow({ mode: 'open' });

      const wrapper = self._wrapper = new Vue({
        name: 'shadow-root',
        customElement: self,
        shadowRoot: self.shadowRoot,
        data () {
          return {
            props: {},
            slotChildren: []
          }
        },
        render (h) {
          return h(Component, {
            ref: 'inner',
            props: this.props
          }, this.slotChildren)
        }
      });

      // Use MutationObserver to react to future attribute & slot content change
      const observer = new MutationObserver(mutations => {
        let hasChildrenChange = false;
        for (let i = 0; i < mutations.length; i++) {
          const m = mutations[i];
          if (isInitialized && m.type === 'attributes' && m.target === self) {
            syncAttribute(self, m.attributeName);
          } else {
            hasChildrenChange = true;
          }
        }
        if (hasChildrenChange) {
          wrapper.slotChildren = Object.freeze(toVNodes(
            wrapper.$createElement,
            self.childNodes
          ));
        }
      });
      observer.observe(self, {
        childList: true,
        subtree: true,
        characterData: true,
        attributes: true
      });
    }

    get vueComponent () {
      return this._wrapper.$refs.inner
    }

    connectedCallback () {
      const wrapper = this._wrapper;
      if (!wrapper._isMounted) {
        // initialize attributes
        const syncInitialAttributes = () => {
          wrapper.props = getInitialProps(camelizedPropsList);
          hyphenatedPropsList.forEach(key => {
            syncAttribute(this, key);
          });
        };

        if (isInitialized) {
          syncInitialAttributes();
        } else {
          // async & unresolved
          Component().then(resolved => {
            if (resolved.__esModule || resolved[Symbol.toStringTag] === 'Module') {
              resolved = resolved.default;
            }
            initialize(resolved);
            syncInitialAttributes();
          });
        }
        // initialize children
        wrapper.slotChildren = Object.freeze(toVNodes(
          wrapper.$createElement,
          this.childNodes
        ));
        wrapper.$mount();
        this.shadowRoot.appendChild(wrapper.$el);
      } else {
        callHooks(this.vueComponent, 'activated');
      }
    }

    disconnectedCallback () {
      callHooks(this.vueComponent, 'deactivated');
    }
  }

  if (!isAsync) {
    initialize(Component);
  }

  return CustomElement
}

/* harmony default export */ var vue_wc_wrapper = (wrap);

// EXTERNAL MODULE: ./node_modules/css-loader/dist/runtime/api.js
var api = __webpack_require__("24fb");

// EXTERNAL MODULE: ./node_modules/vue-style-loader/lib/addStylesShadow.js + 1 modules
var addStylesShadow = __webpack_require__("35d6");

// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=template&id=01d24e5e&shadow
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"app",attrs:{"id":"matrix-root","theme":_vm.theme}},[_c('div',{staticClass:"rootcontent",class:{pip: _vm.pip, 'bin' : _vm.pocketnet, 'fix' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, active: _vm.active, mobile: _vm.mobile, unselect: _vm.unselect}},[_c('div',{staticClass:"chatwrapper",on:{"click":_vm.iteraction}},[_c('div',[(_vm.closebybg)?_c('div',{staticClass:"backface",on:{"click":_vm.hide}}):_vm._e(),_c('MainWrapper'),(_vm.globalpreloader)?_c('preloader'):_vm._e(),_c('transition',{attrs:{"name":"fade"}},[(_vm.unauthorized)?_c('div',{staticClass:"fixedallwrapper likeoffline"},[_c('userUnauthorized')],1):_vm._e()])],1)])]),_c('div',{attrs:{"hidden":"","id":"sprite-plyr"}},[_c('svg',{attrs:{"xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink"}},[_c('symbol',{attrs:{"id":"plyr-airplay"}},[_c('path',{attrs:{"d":"M16 1H2a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h3v-2H3V3h12v8h-2v2h3a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1z"}}),_c('path',{attrs:{"d":"M4 17h10l-5-6z"}})]),_c('symbol',{attrs:{"id":"plyr-captions-off"}},[_c('path',{attrs:{"d":"M1 1c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h4.6l2.7 2.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.7-2.7H17c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1H1zm4.52 10.15c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41C8.47 4.96 7.46 3.76 5.5 3.76c-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69zm7.57 0c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41c-.28-1.15-1.29-2.35-3.25-2.35-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69z","fill-rule":"evenodd","fill-opacity":".5"}})]),_c('symbol',{attrs:{"id":"plyr-captions-on"}},[_c('path',{attrs:{"d":"M1 1c-.6 0-1 .4-1 1v11c0 .6.4 1 1 1h4.6l2.7 2.7c.2.2.4.3.7.3.3 0 .5-.1.7-.3l2.7-2.7H17c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1H1zm4.52 10.15c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41C8.47 4.96 7.46 3.76 5.5 3.76c-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69zm7.57 0c1.99 0 3.01-1.32 3.28-2.41l-1.29-.39c-.19.66-.78 1.45-1.99 1.45-1.14 0-2.2-.83-2.2-2.34 0-1.61 1.12-2.37 2.18-2.37 1.23 0 1.78.75 1.95 1.43l1.3-.41c-.28-1.15-1.29-2.35-3.25-2.35-1.9 0-3.61 1.44-3.61 3.7 0 2.26 1.65 3.69 3.63 3.69z","fill-rule":"evenodd"}})]),_c('symbol',{attrs:{"id":"plyr-download"}},[_c('path',{attrs:{"d":"M9 13c.3 0 .5-.1.7-.3L15.4 7 14 5.6l-4 4V1H8v8.6l-4-4L2.6 7l5.7 5.7c.2.2.4.3.7.3zm-7 2h14v2H2z"}})]),_c('symbol',{attrs:{"id":"plyr-enter-fullscreen"}},[_c('path',{attrs:{"d":"M10 3h3.6l-4 4L11 8.4l4-4V8h2V1h-7zM7 9.6l-4 4V10H1v7h7v-2H4.4l4-4z"}})]),_c('symbol',{attrs:{"id":"plyr-exit-fullscreen"}},[_c('path',{attrs:{"d":"M1 12h3.6l-4 4L2 17.4l4-4V17h2v-7H1zM16 .6l-4 4V1h-2v7h7V6h-3.6l4-4z"}})]),_c('symbol',{attrs:{"id":"plyr-fast-forward"}},[_c('path',{attrs:{"d":"M7.875 7.171L0 1v16l7.875-6.171V17L18 9 7.875 1z"}})]),_c('symbol',{attrs:{"id":"plyr-logo-vimeo"}},[_c('path',{attrs:{"d":"M17 5.3c-.1 1.6-1.2 3.7-3.3 6.4-2.2 2.8-4 4.2-5.5 4.2-.9 0-1.7-.9-2.4-2.6C5 10.9 4.4 6 3 6c-.1 0-.5.3-1.2.8l-.8-1c.8-.7 3.5-3.4 4.7-3.5 1.2-.1 2 .7 2.3 2.5.3 2 .8 6.1 1.8 6.1.9 0 2.5-3.4 2.6-4 .1-.9-.3-1.9-2.3-1.1.8-2.6 2.3-3.8 4.5-3.8 1.7.1 2.5 1.2 2.4 3.3z"}})]),_c('symbol',{attrs:{"id":"plyr-logo-youtube"}},[_c('path',{attrs:{"d":"M16.8 5.8c-.2-1.3-.8-2.2-2.2-2.4C12.4 3 9 3 9 3s-3.4 0-5.6.4C2 3.6 1.3 4.5 1.2 5.8 1 7.1 1 9 1 9s0 1.9.2 3.2c.2 1.3.8 2.2 2.2 2.4C5.6 15 9 15 9 15s3.4 0 5.6-.4c1.4-.3 2-1.1 2.2-2.4.2-1.3.2-3.2.2-3.2s0-1.9-.2-3.2zM7 12V6l5 3-5 3z"}})]),_c('symbol',{attrs:{"id":"plyr-muted"}},[_c('path',{attrs:{"d":"M12.4 12.5l2.1-2.1 2.1 2.1 1.4-1.4L15.9 9 18 6.9l-1.4-1.4-2.1 2.1-2.1-2.1L11 6.9 13.1 9 11 11.1zM3.786 6.008H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z"}})]),_c('symbol',{attrs:{"id":"plyr-pause"}},[_c('path',{attrs:{"d":"M6 1H3c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1zm6 0c-.6 0-1 .4-1 1v14c0 .6.4 1 1 1h3c.6 0 1-.4 1-1V2c0-.6-.4-1-1-1h-3z"}})]),_c('symbol',{attrs:{"id":"plyr-pip"}},[_c('path',{attrs:{"d":"M13.293 3.293L7.022 9.564l1.414 1.414 6.271-6.271L17 7V1h-6z"}}),_c('path',{attrs:{"d":"M13 15H3V5h5V3H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-6h-2v5z"}})]),_c('symbol',{attrs:{"id":"plyr-play"}},[_c('path',{attrs:{"d":"M15.562 8.1L3.87.225c-.818-.562-1.87 0-1.87.9v15.75c0 .9 1.052 1.462 1.87.9L15.563 9.9c.584-.45.584-1.35 0-1.8z"}})]),_c('symbol',{attrs:{"id":"plyr-restart"}},[_c('path',{attrs:{"d":"M9.7 1.2l.7 6.4 2.1-2.1c1.9 1.9 1.9 5.1 0 7-.9 1-2.2 1.5-3.5 1.5-1.3 0-2.6-.5-3.5-1.5-1.9-1.9-1.9-5.1 0-7 .6-.6 1.4-1.1 2.3-1.3l-.6-1.9C6 2.6 4.9 3.2 4 4.1 1.3 6.8 1.3 11.2 4 14c1.3 1.3 3.1 2 4.9 2 1.9 0 3.6-.7 4.9-2 2.7-2.7 2.7-7.1 0-9.9L16 1.9l-6.3-.7z"}})]),_c('symbol',{attrs:{"id":"plyr-rewind"}},[_c('path',{attrs:{"d":"M10.125 1L0 9l10.125 8v-6.171L18 17V1l-7.875 6.171z"}})]),_c('symbol',{attrs:{"id":"plyr-settings"}},[_c('path',{attrs:{"d":"M16.135 7.784a2 2 0 0 1-1.23-2.969c.322-.536.225-.998-.094-1.316l-.31-.31c-.318-.318-.78-.415-1.316-.094a2 2 0 0 1-2.969-1.23C10.065 1.258 9.669 1 9.219 1h-.438c-.45 0-.845.258-.997.865a2 2 0 0 1-2.969 1.23c-.536-.322-.999-.225-1.317.093l-.31.31c-.318.318-.415.781-.093 1.317a2 2 0 0 1-1.23 2.969C1.26 7.935 1 8.33 1 8.781v.438c0 .45.258.845.865.997a2 2 0 0 1 1.23 2.969c-.322.536-.225.998.094 1.316l.31.31c.319.319.782.415 1.316.094a2 2 0 0 1 2.969 1.23c.151.607.547.865.997.865h.438c.45 0 .845-.258.997-.865a2 2 0 0 1 2.969-1.23c.535.321.997.225 1.316-.094l.31-.31c.318-.318.415-.781.094-1.316a2 2 0 0 1 1.23-2.969c.607-.151.865-.547.865-.997v-.438c0-.451-.26-.846-.865-.997zM9 12a3 3 0 1 1 0-6 3 3 0 0 1 0 6z"}})]),_c('symbol',{attrs:{"id":"plyr-volume"}},[_c('path',{attrs:{"d":"M15.6 3.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4C15.4 5.9 16 7.4 16 9c0 1.6-.6 3.1-1.8 4.3-.4.4-.4 1 0 1.4.2.2.5.3.7.3.3 0 .5-.1.7-.3C17.1 13.2 18 11.2 18 9s-.9-4.2-2.4-5.7z"}}),_c('path',{attrs:{"d":"M11.282 5.282a.909.909 0 0 0 0 1.316c.735.735.995 1.458.995 2.402 0 .936-.425 1.917-.995 2.487a.909.909 0 0 0 0 1.316c.145.145.636.262 1.018.156a.725.725 0 0 0 .298-.156C13.773 11.733 14.13 10.16 14.13 9c0-.17-.002-.34-.011-.51-.053-.992-.319-2.005-1.522-3.208a.909.909 0 0 0-1.316 0zm-7.496.726H.714C.286 6.008 0 6.31 0 6.76v4.512c0 .452.286.752.714.752h3.072l4.071 3.858c.5.3 1.143 0 1.143-.602V2.752c0-.601-.643-.977-1.143-.601L3.786 6.008z"}})])])])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/App.vue?vue&type=template&id=01d24e5e&shadow

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/main/index.vue?vue&type=template&id=c44504aa&scoped=true&
var mainvue_type_template_id_c44504aa_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"main-wrapper",class:{minimized: _vm.minimized, active: _vm.active}},[(!_vm.mobile)?_c('vue-page-transition',{attrs:{"name":"fade-in-right"}},[_c('router-view')],1):_c('router-view'),(_vm.showFooter)?_c('FooterChat'):_vm._e(),(_vm.gallery)?_c('gallery',{attrs:{"images":_vm.gallery.images,"index":_vm.gallery.index},on:{"close":_vm.closeGallery}}):_vm._e()],1)}
var mainvue_type_template_id_c44504aa_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/main/index.vue?vue&type=template&id=c44504aa&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/layouts/footerChat/index.vue?vue&type=template&id=517e1e1f&scoped=true&
var footerChatvue_type_template_id_517e1e1f_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"footer-chat",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active}},[_c('div',{staticClass:"work"},[_c('div',{staticClass:"menuItems"},[_c('div',{staticClass:"menuItem bottom-nav__icon",class:{active : _vm.activecontacts},on:{"click":function($event){return _vm.gotona('/contacts')}}},[_vm._m(0),_c('div',{staticClass:"label"},[_vm._v(" "+_vm._s(_vm.$t("caption.contacts"))+" ")])]),_c('div',{staticClass:"menuItem bottom-nav__icon",class:{active : _vm.activechats},on:{"click":function($event){return _vm.gotona('/chats')}}},[_vm._m(1),_c('div',{staticClass:"label"},[_vm._v(" "+_vm._s(_vm.$t("caption.chats"))+" ")]),(_vm.notificationCount)?_c('div',{staticClass:"unseen chatMessages"},[_vm._v(" "+_vm._s(_vm.notificationCount > 99 ? '99' : _vm.notificationCount)+" ")]):_vm._e()]),(!_vm.pocketnet)?_c('div',{staticClass:"menuItem bottom-nav__icon",class:{active : _vm.activesettings},on:{"click":function($event){return _vm.gotona('/settings')}}},[_vm._m(2),_c('div',{staticClass:"label"},[_vm._v(" "+_vm._s(_vm.$t("caption.settings"))+" ")])]):_vm._e()])])])}
var footerChatvue_type_template_id_517e1e1f_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-user-friends"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-comments"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-cog"})])}]


// CONCATENATED MODULE: ./src/components/layouts/footerChat/index.vue?vue&type=template&id=517e1e1f&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/layouts/footerChat?vue&type=script&lang=js&

/* harmony default export */ var footerChat_vue_type_script_lang_js_ = ({
  name: "footerChat",
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active,
    auth: state => state.auth,
    notificationCount: state => state.allnotifications,
    current: function () {
      return this.$route.name;
    },
    activesettings: function () {
      return this.current == 'settings';
    },
    activecontacts: function () {
      return this.current == 'contact' || this.current == 'contacts';
    },
    activechats: function () {
      return this.current == 'chat' || this.current == 'chats';
    },
    mobile: function () {
      return this.$store.state.mobile;
    }
  }),
  methods: {
    gotona(r) {
      this.$router.push(r).catch(e => {});
      this.$store.commit('active', true);
      this.$store.commit('setiteraction', true);
    },

    movefromchat: function () {
      if (this.core.backtoapp) this.core.backtoapp();
    }
  }
});
// CONCATENATED MODULE: ./src/components/layouts/footerChat?vue&type=script&lang=js&
 /* harmony default export */ var layouts_footerChat_vue_type_script_lang_js_ = (footerChat_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/layouts/footerChat/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("9e80")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  layouts_footerChat_vue_type_script_lang_js_,
  footerChatvue_type_template_id_517e1e1f_scoped_true_render,
  footerChatvue_type_template_id_517e1e1f_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "517e1e1f",
  null
  ,true
)

/* harmony default export */ var footerChat = (component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/gallery/index.vue?vue&type=template&id=d609e530&
var galleryvue_type_template_id_d609e530_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.images && _vm.images.length)?_c('v-photoswipe',{attrs:{"isOpen":_vm.isOpen,"items":_vm.images,"options":_vm.options},on:{"close":_vm.close,"sharecordova":_vm.sharecordova}}):_vm._e()}
var galleryvue_type_template_id_d609e530_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/gallery/index.vue?vue&type=template&id=d609e530&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/gallery/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//import {PhotoSwipe, PhotoSwipeGallery} from "@/editedplugins/v-photoswipe/src/index.js";
/* harmony default export */ var galleryvue_type_script_lang_js_ = ({
  props: {
    images: Array,
    index: Number
  },
  components: {
    //vPhotoswipe : PhotoSwipe,
    vPhotoswipe: () => {
      return Promise.all(/* import() */[__webpack_require__.e(17), __webpack_require__.e(7)]).then(__webpack_require__.bind(null, "29a3")).then(p => {
        return p.PhotoSwipe;
      });
    }
  },
  data: () => {
    return {
      isOpen: false
    };
  },

  mounted() {
    this.init();
  },

  computed: {
    options: function () {
      var o = {
        index: 0,
        arrowEl: true,
        fullscreenEl: false,
        shareEl: false,
        history: false
      };
      return o;
    }
  },
  methods: {
    close() {
      this.isOpen = false;
      this.$emit('close');
    },

    init() {
      this.isOpen = true;
      this.$set(this.options, 'index', this.index);
    },

    sharecordova: function (src) {
      if (window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareWithOptions({
          files: [src]
        });
      }
    }
  }
});
// CONCATENATED MODULE: ./src/components/gallery/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_galleryvue_type_script_lang_js_ = (galleryvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/gallery/index.vue





/* normalize component */

var gallery_component = Object(componentNormalizer["a" /* default */])(
  components_galleryvue_type_script_lang_js_,
  galleryvue_type_template_id_d609e530_render,
  galleryvue_type_template_id_d609e530_staticRenderFns,
  false,
  null,
  null,
  null
  ,true
)

/* harmony default export */ var gallery = (gallery_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/main?vue&type=script&lang=js&



/* harmony default export */ var main_vue_type_script_lang_js_ = ({
  name: "mainWrapper",
  components: {
    FooterChat: footerChat,
    gallery: gallery
  },
  data: function () {
    return {
      prevRoute: null,
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },

  beforeRouteEnter(to, from, next) {
    next(vm => {
      vm.prevRoute = from;
    });
  },

  beforeRouteLeave(to, from, next) {
    this.$store.commit('setmodal', null);
    next();
  },

  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    ...Object(vuex_esm["c" /* mapState */])(['currentUserChat', 'minimized', 'gallery', 'active', 'mobile']),
    showFooter: function () {
      return this.$route.name != 'chat' || this.minimized;
    }
  }),
  methods: {
    closeGallery: function () {
      this.$store.commit('GALLERY', null);
    }
  }
});
// CONCATENATED MODULE: ./src/components/main?vue&type=script&lang=js&
 /* harmony default export */ var components_main_vue_type_script_lang_js_ = (main_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/main/index.vue



function main_injectStyles (context) {
  
  var style0 = __webpack_require__("a36f")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var main_component = Object(componentNormalizer["a" /* default */])(
  components_main_vue_type_script_lang_js_,
  mainvue_type_template_id_c44504aa_scoped_true_render,
  mainvue_type_template_id_c44504aa_scoped_true_staticRenderFns,
  false,
  main_injectStyles,
  "c44504aa",
  null
  ,true
)

/* harmony default export */ var main = (main_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/user/unauthorized/index.vue?vue&type=template&id=16157ecb&scoped=true&
var unauthorizedvue_type_template_id_16157ecb_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'fix' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, active: _vm.active},attrs:{"id":"userUnauthorized"}},[_c('div',{staticClass:"table"},[_c('div',{staticClass:"cell"},[_c('div',{staticClass:"wrapper"},[(!_vm.loading)?_c('div',[(_vm.unauthorized == 'unauthorized')?_c('div',[_vm._m(0),_c('div',{staticClass:"label"},[_vm._v(" User unauthorized ")])]):_vm._e(),(_vm.unauthorized == 'deleted')?_c('div',[_vm._m(1),_c('div',{staticClass:"label"},[_vm._v(" User deleted ")])]):_vm._e(),(_vm.unauthorized == 'unknown')?_c('div',[_vm._m(2),_c('div',{staticClass:"label"},[_vm._v(" "+_vm._s(_vm.$t('caption.accNotFound'))+" ")]),(_vm.connect && _vm.usersinfo[_vm.connect])?_c('div',{staticClass:"connect"},[_vm._m(3),_c('preview',{attrs:{"contact":_vm.usersinfo[_vm.connect],"mode":"mini"}})],1):_vm._e(),(_vm.joinroom && !_vm.connect)?_c('div',{staticClass:"connect joinroom"},[_vm._m(4)]):_vm._e()]):_vm._e(),_c('div',{staticClass:"actions"},[_c('button',{staticClass:"button small",on:{"click":_vm.refresh}},[_vm._v(" Refresh "),_c('i',{staticClass:"fas fa-sync"})]),(_vm.mobile)?_c('button',{staticClass:"button small ghost",on:{"click":_vm.movefromchat}},[_c('i',{staticClass:"fas fa-arrow-right"})]):_vm._e()])]):_c('div',[_c('i',{staticClass:"fas fa-spinner fa-spin"})])])])])])}
var unauthorizedvue_type_template_id_16157ecb_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-user-slash"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-user-slash"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"icon"},[_c('i',{staticClass:"fas fa-spinner fa-spin"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"connectCaption"},[_c('span',[_vm._v(" When registration is complete, you will be connected to ")])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"connectCaption"},[_c('span',[_vm._v(" When registration is complete, you will be redirect to public room ")])])}]


// CONCATENATED MODULE: ./src/components/user/unauthorized/index.vue?vue&type=template&id=16157ecb&scoped=true&

// EXTERNAL MODULE: ./src/components/contacts/preview/index.vue + 4 modules
var preview = __webpack_require__("92a6");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/user/unauthorized/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var unauthorizedvue_type_script_lang_js_ = ({
  name: 'userUnauthorized',
  props: {
    data: Object
  },
  data: function () {
    return {
      loading: false,
      intrv: null
    };
  },
  components: {
    preview: preview["a" /* default */]
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    pocketnet: state => state.pocketnet,
    minimized: function () {
      if (this.mobile) return false;
      return this.$store.state.minimized;
    },
    active: function () {
      if (this.mobile) return false;
      return this.$store.state.active;
    },
    auth: state => state.auth,
    connect: state => state.connect,
    joinroom: state => state.joinroom,
    unauthorized: function () {
      return this.$store.state.unauthorized;
    },
    mobile: function () {
      return this.$store.state.mobile;
    },
    usersinfo: function () {
      return this.$store.state.users;
    }
  }),
  beforeDestroy: function () {
    if (this.intrv) {
      clearInterval(this.intrv);
      this.intrv = null;
    }
  },
  methods: {
    refresh: function (auto) {
      if (!auto) this.loading = true;
      this.core.initWithUser().then(r => {
        setTimeout(() => {
          this.loading = false;
        }, 350);
      });
    },
    movefromchat: function () {
      if (this.core.backtoapp) this.core.backtoapp();
    }
  },
  mounted: function () {
    if (this.connect) this.core.user.usersInfo([this.connect]);

    if (this.unauthorized == 'unknown') {
      this.intrv = setInterval(() => {
        this.refresh(true);
      }, 20000);
    }
  }
});
// CONCATENATED MODULE: ./src/components/user/unauthorized/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var user_unauthorizedvue_type_script_lang_js_ = (unauthorizedvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/user/unauthorized/index.vue



function unauthorized_injectStyles (context) {
  
  var style0 = __webpack_require__("c412")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var unauthorized_component = Object(componentNormalizer["a" /* default */])(
  user_unauthorizedvue_type_script_lang_js_,
  unauthorizedvue_type_template_id_16157ecb_scoped_true_render,
  unauthorizedvue_type_template_id_16157ecb_scoped_true_staticRenderFns,
  false,
  unauthorized_injectStyles,
  "16157ecb",
  null
  ,true
)

/* harmony default export */ var unauthorized = (unauthorized_component.exports);
// EXTERNAL MODULE: ./src/application/functions.js
var functions = __webpack_require__("3139");

// CONCATENATED MODULE: ./src/vuex/store.js



vue_esm["default"].use(vuex_esm["a" /* default */]);
var themes = {
  white: "White",
  black: "Dark",
  classic: "Classic"
};
var mex = {
  theme: function (state, value) {
    if (themes[value]) {
      state.theme = value;
    }
  }
};
var activetimeout = null;
var store = new vuex_esm["a" /* default */].Store({
  state: {
    contacts: {},
    contactsFromMatrix: {},
    contactsMap: {},
    chats: [],
    prechats: [],
    chatsMap: {},
    events: {},
    users: {},
    typing: {},
    icon: null,
    loading: false,
    online: true,
    unauthorized: false,
    theme: 'white',
    themes: themes,
    signedUpUsers: [],
    pocketnet: '',
    mobile: '',
    voiceMessagesEnabled: '',
    currentPlayingVoiceMessage: null,
    current_user: {},
    minimized: true,
    active: false,
    activeBlock: {},
    globalpreloader: false,
    allnotifications: 0,
    pocketteammessages: [],
    readedteammessages: {},
    chatsready: false,
    autohide: false,
    iteraction: false,
    roomMembes: [],
    gallery: null,
    share: null,
    contact: null,
    connect: null,
    joinroom: null,
    chatusers: {},
    force: {},
    wasunhidden: false,
    hiddenInParent: false,
    hideOptimization: false,
    modalShowed: null,
    menu: null,
    pinchat: false,
    lastroom: null,
    dontreadreceipts: false,
    voicerecording: false,
    deletedrooms: {},
    pkoindisabled: false //share : {url : 'https://yandex.ru/'} //null

  },
  getters: {
    getUser: state => {
      return state.user;
    },
    getConnection: state => {
      return state.localMatrixStore;
    },
    getSignedUpUsers: state => {
      return state.signedUpUsers;
    }
  },
  mutations: {
    SET_CURRENT_PLAYING_VOICE_MESSAGE(state, message) {
      state.currentPlayingVoiceMessage = message;
    },

    setUser(state, userData) {
      state.current_user = userData || {};
    },

    clearall(state) {
      state.contacts = {};
      state.contactsFromMatrix = {};
      state.contactsMap = {};
      state.chats = [];
      state.prechats = [];
      state.chatsMap = {};
      state.events = {};
      state.users = {};
      state.typing = {};
      state.icon = null;
      state.loading = false;
      state.online = true;
      state.unauthorized = false;
      state.signedUpUsers = [];
      /*state.pocketnet = ''*/

      state.current_user = {};
      state.minimized = false;
      state.active = false;
      state.activeBlock = {};
      state.globalpreloader = false;
      state.allnotifications = 0;
      state.pocketteammessages = [];
      state.readedteammessages = {};
      state.chatsready = false;
      state.autohide = false;
      state.gallery = null;
      state.modalShowed = null;
      state.menu = null;
      state.pinchat = false;
      state.dontreadreceipts = false;
      state.lastroom = null;
      state.voicerecording = false; // state.share = null

      if (state.mobile) {
        state.active = false;
        state.iteraction = false;
        state.minimized = false;
        return;
      } else state.minimized = true;

      if (activetimeout) {
        clearTimeout(activetimeout);
        activetimeout = null;
      }
    },

    blockactive(state, a) {
      if (a.value) vue_esm["default"].set(state.activeBlock, a.item, a.value);else vue_esm["default"].delete(state.activeBlock, a.item, a.value);
    },

    globalpreloader: function (state, value) {
      state.globalpreloader = value;
    },

    icon(state, value) {
      state.icon = value;
      var mv = functions["a" /* default */].deep(window, 'window.POCKETNETINSTANCE.mobile.vibration');

      if (mv) {
        mv.small();
      }
    },

    pkoindisabled(state, value) {
      state.pkoindisabled = value && value == 'true' ? true : false;
    },

    wasunhidden(state, value) {
      state.wasunhidden = true;
    },

    hiddenInParent(state, value) {
      state.hiddenInParent = value;
    },

    hideOptimization(state, value) {
      state.hideOptimization = value;
    },

    pinchat(state, value) {
      state.pinchat = value;
      localStorage['pinchat'] = value ? true : '';
    },

    dontreadreceipts(state, value) {
      state.dontreadreceipts = value;
      localStorage['dontreadreceipts'] = value ? true : '';
    },

    SET_LAST_ROOM(state, value) {
      if (!value) state.lastroom = null;else state.lastroom = {
        id: value,
        time: new Date()
      };
    },

    active(state, value) {
      if (state.mobile) {
        state.active = false;
        state.iteraction = false;
        return;
      }

      var time = 50;
      if (!value) time = 1000;
      activetimeout = functions["a" /* default */].slowMade(() => {
        if (!value) {
          if (!_.isEmpty(state.activeBlock)) {
            return;
          }

          state.iteraction = false;
        }

        state.active = value;

        if (!state.active) {
          state.share = null;
          delete state.activeBlock.share;
        }
      }, activetimeout, time);
    },

    setiteraction(state, value) {
      state.iteraction = value;
    },

    maximize(state, route) {
      state.minimized = false;
    },

    minimize(state, v) {
      if (state.mobile) {
        state.minimized = false;
        return;
      }

      if (state.minimized) {
        state.activeBlock = {};
        state.active = false;
      }

      state.minimized = true;
    },

    setmodal(state, v) {
      state.modalShowed = v;
    },

    setPocketnet(state, pocketnet) {
      state.pocketnet = pocketnet;
    },

    setMobile(state, mobile) {
      state.mobile = mobile;
    },

    setVoiceMessagesEnabled(state, voiceMessagesEnabled) {
      state.voiceMessagesEnabled = voiceMessagesEnabled;
    },

    ls(state) {
      if (typeof localStorage.getItem('pinchat') != 'undefined') state.pinchat = localStorage.getItem('pinchat') ? true : false;
      if (typeof localStorage.getItem('dontreadreceipts') != 'undefined') state.dontreadreceipts = localStorage.getItem('dontreadreceipts') ? true : false;
    },

    init(state) {
      mex.theme(state, localStorage.getItem('theme') || 'white');
    },

    ALL_NOTIFICATIONS_COUNT(state, rooms) {
      var n = new Date();

      var count = _.filter(rooms, room => {
        if (room._selfMembership === 'invite') {
          var users = store._vm.core.mtrx.anotherChatUsers(room);

          if (users.length == 1 && store._vm.core.mtrx.blockeduser(users[0].userId)) {
            return false;
          }

          if (functions["a" /* default */].date.addseconds(new Date(room.summary.lastModified), 86400) > n) return true;
        }
      });

      state.allnotifications = _.reduce(rooms, (s, chat) => {
        return s + (chat.getUnreadNotificationCount() || 0);
      }, 0) + count.length;

      if (state.chats.length <= 3) {
        // Count notifications from pocketnet team room
        var pocketMessages = _.filter(state.pocketteammessages, function (m) {
          return !state.readedteammessages[m.id];
        }).length;

        state.allnotifications += pocketMessages;
      }

      var external = functions["a" /* default */].deep(store, '_vm.core.external.clbks.ALL_NOTIFICATIONS_COUNT') || {};

      _.each(external, function (e) {
        e(state.allnotifications);
      });

      return state.allnotifications;
    },

    SET_CHATS_READY(state, v) {
      state.chatsready = v;
    },

    SET_PRECHATS_TO_STORE(state, chats) {
      state.prechats = chats;
    },

    SET_CHAT_TO_FORCE(state, id) {
      vue_esm["default"].set(state.force, id, true);
    },

    SET_CHATS_TO_STORE(state, chats) {
      state.chats = chats;
      var chatsMap = {};

      _.each(chats, chat => {
        var aid = chat.info.title.replace("#", '');

        if (!state.chatsMap[chat.roomId] || state.force[chat.roomId]) {
          vue_esm["default"].set(state.chatsMap, chat.roomId, chat);
        }

        if (!state.chatsMap[aid] || state.force[chat.roomId]) {
          vue_esm["default"].set(state.chatsMap, aid, chat);
        }

        chatsMap[chat.roomId] = chat;
        chatsMap[chat.info.title.replace("#", '')] = chat;
        vue_esm["default"].delete(state.force, chat.roomId);
      });

      _.each(state.chatsMap, function (c, id) {
        if (!chatsMap[id]) vue_esm["default"].delete(state.chatsMap, id);
      }); //state.chatsMap = chatsMap;

    },

    SET_EVENTS_TO_STORE(state, events) {
      //state.events = events
      _.each(events, function (ev, k) {
        var timeline = [];

        _.each(ev.timeline, function (__e) {
          var e = __e.event;
          var _e = {
            event: {
              content: _.clone(e.content),
              event_id: e.event_id,
              origin_server_ts: e.origin_server_ts,
              room_id: e.room_id,
              sender: e.sender,
              state_key: e.state_key,
              type: e.type
            },
            get: () => __e
          };
          timeline.push(_e);
        });

        vue_esm["default"].set(state.events, k, {
          timeline
        });
      });
    },

    SET_TYPING_TO_STORE(state, data) {
      state.typing[data.room] || (state.typing[data.room] = {});
      state.typing[data.room][data.name] = data.typing;

      function allTrue(data) {
        for (var o in data) if (!data[o]) return false;

        return true;
      }

      allTrue(data.typing);
    },

    DELETE_ROOM(state, roomid) {
      vue_esm["default"].set(state.deletedrooms, roomid, true);
    },

    SET_CONTACTS(state, v) {
      var mp = {};

      _.each(v, function (c) {
        mp[c.id] = c;
      });

      state.contacts = mp;
      store.commit('SET_CONTACTS_MAP');
    },

    SET_CHATS_USERS(state, v) {
      _.each(v || {}, function (u, i) {
        if (!state.chatusers[i] || !_.isEqual(state.chatusers[i], u)) {
          vue_esm["default"].set(state.chatusers, i, u);
        }
      }); //state.chatusers = v || {}

    },

    SET_CONTACTS_FROM_MATRIX(state, v) {
      var mp = {};

      _.each(v, function (c) {
        if (functions["a" /* default */].getmatrixid(c.id) != (store._vm.core.user.userinfo && store._vm.core.user.userinfo.id)) mp[c.id] = c;
      });

      state.contactsFromMatrix = mp;
      store.commit('SET_CONTACTS_MAP');
    },

    SET_CONTACTS_MAP(state) {
      var contactsMap = {};

      _.each(state.contacts, function (contact) {
        contactsMap[contact.id] = contact;
      });

      _.each(state.contactsFromMatrix, function (contact) {
        contactsMap[contact.id] = contact;
      });

      state.contactsMap = contactsMap;
    },

    SET_UNAUTHORIZED(state, v) {
      state.unauthorized = v;
    },

    SET_USERINFO(state, v) {
      if (!v.info) return;
      if (v.reload || !state.users[v.info.id]) vue_esm["default"].set(state.users, v.info.id, v.info);
    },

    SET_CURRENT_ROOM(state, v) {
      state.currentRoom = v;
    },

    CLEAR_USERSINFO(state, v) {
      state.users = {};
    },

    GALLERY(state, v) {
      state.gallery = v || null;
      var fu = null;

      if (v) {
        fu = functions["a" /* default */].deep(window, 'window.POCKETNETINSTANCE.mobile.statusbar.gallerybackground');
      } else {
        fu = functions["a" /* default */].deep(window, 'window.POCKETNETINSTANCE.mobile.statusbar.background');
      }

      if (fu) {
        fu();
      }
    },

    SHARE(state, v) {
      state.share = v || null;

      if (!state.mobile) {
        state.activeBlock.share = true;
        state.active = true;
      }
    },

    CONNECT(state, v) {
      state.connect = v;
    },

    JOINROOM(state, v) {
      state.joinroom = v;
    },

    CONTACT(state, v) {
      state.contact = v || null;
    },

    theme(state, value) {
      mex.theme(state, value);
    },

    SET_POCKETTEAMMESSAGES(state, v) {
      state.pocketteammessages = v; // Check local storage

      var readedMessagesStr = localStorage.getItem('readedpocketteammessages');

      if (readedMessagesStr) {
        try {
          var readedMessages = JSON.parse(readedMessagesStr);
          state.readedteammessages = readedMessages;
        } catch (e) {
          localStorage.removeItem('readedpocketteammessages');
          state.readedteammessages = {};
        }
      }
    },

    SET_READEDTEAMMESSAGES(state, v) {
      if (v && v.length > 0) {
        var readedMessages = {};

        _.each(v, function (m) {
          readedMessages[m.id] = true;
        });

        state.readedteammessages = readedMessages; // Update local storage

        localStorage.setItem('readedpocketteammessages', JSON.stringify(readedMessages));
      }
    },

    SET_MENU(state, v) {
      state.menu = v;
    },

    SET_VOICERECORDING(state, v) {
      state.voicerecording = v;
    }

  },
  actions: {
    SET_CHAT_MEMBERS(_ref, chat) {
      let {
        commit
      } = _ref;
    },

    TYPING_EVENT(_ref2, member) {
      let {
        commit
      } = _ref2;
      let room = member.roomId;
      let name = member.name;
      let data = {
        room,
        name,
        typing: member.typing
      };
      commit('SET_TYPING_TO_STORE', data);
    },

    CHAT_MEMBERS(_ref3) {
      let {
        commit
      } = _ref3;
    },

    SHOW_GALLERY_FROMEVENTS(_ref4, _ref5) {
      let {
        commit,
        dispatch
      } = _ref4;
      let {
        events,
        event
      } = _ref5;
      var images = [],
          index = 0;

      var encrypted = function (event) {
        return functions["a" /* default */].deep(event, 'event.content.info.secrets') ? true : false;
      };

      _.each(events, event => {
        if (event.event.content.msgtype === 'm.image') {
          var url = event.event.content.url;

          if (encrypted(event)) {
            url = event.event.decryptedImage;
          }

          images.push({
            src: url,
            w: event.event.content.info.w || 500,
            h: event.event.content.info.h || 500,
            eventId: event.event.event_id
          });
        }
      });

      images = _.filter(images, function (i) {
        return i.src;
      });
      index = images.map(function (e) {
        return e.eventId;
      }).indexOf(event.event.event_id);
      dispatch('SHOW_GALLERY', {
        images,
        index
      });
    },

    SHOW_GALLERY(_ref6, _ref7) {
      let {
        commit
      } = _ref6;
      let {
        images,
        index
      } = _ref7;
      if (!index) index = 0;
      if (!images) images = [];

      if (images.length) {
        commit('GALLERY', {
          images: images,
          index: index
        });
      } else {
        commit('GALLERY', null);
      }
    },

    RELOAD_CHAT_USERS(_ref8, m_chats) {
      let {
        commit
      } = _ref8;
      return store._vm.core.mtrx.kit.usersInfoForChats(m_chats, true).then(i => {
        commit('SET_CHATS_USERS', store._vm.core.mtrx.kit.usersFromChats(m_chats));
        return Promise.resolve();
      }).catch(e => {
        return Promise.resolve();
      });
    },

    FETCH_CHATS(_ref9) {
      let {
        commit
      } = _ref9;
      var m_chats = functions["a" /* default */].deep(store._vm, 'core.mtrx.store.rooms') || {};

      var id = store._vm.core.user.myMatrixId();

      var chats = _.map(m_chats, function (r) {
        if (r.getLastActiveTimestamp() === -9007199254740991) {
          if (r.getMember(id)) {
            r.summary.lastModified = r.getMember(id).events.member.event.origin_server_ts;
          }
        } else {
          r.summary.lastModified = r.getLastActiveTimestamp();
        }

        return r.summary;
      });

      commit('SET_PRECHATS_TO_STORE', chats);
      return store._vm.core.mtrx.kit.allchatmembers(m_chats).then(r => {
        commit('SET_CHATS_TO_STORE', chats);
        commit('SET_CHATS_USERS', store._vm.core.mtrx.kit.usersFromChats(m_chats));
        return store._vm.core.mtrx.kit.fillContacts(m_chats);
      });
      return Promise.resolve();
      return store._vm.core.mtrx.kit.usersInfoForChats(m_chats).then(i => {
        commit('SET_CHATS_USERS', store._vm.core.mtrx.kit.usersFromChats(m_chats));
        commit('SET_CONTACTS_FROM_MATRIX', _.filter(i, m => {
          return m.id !== (store._vm.core.user.userinfo && store._vm.core.user.userinfo.id);
        }));
        return Promise.resolve();
      }).catch(e => {
        return Promise.resolve();
      });
    },

    FETCH_EVENTS(_ref10) {
      let {
        commit
      } = _ref10;
      var m_chats = functions["a" /* default */].deep(store._vm, 'core.mtrx.store.rooms') || {};
      var events = {};

      _.each(m_chats, function (chat) {
        events[chat.roomId] = {};
        var timeline = [].concat(chat.timeline, chat.currentState.getStateEvents('m.room.member'));
        events[chat.roomId].timeline = timeline;
      });

      _.each(events, function (e) {
        e.timeline = _.sortBy(e.timeline, function (event) {
          return event.getDate();
        });
      });

      commit('SET_EVENTS_TO_STORE', events); //store._vm.core.mtrx.kit.usersInfoForChatsStore(m_chats).then(i => {
      //})
    }

  }
});
/* harmony default export */ var vuex_store = (store);
// CONCATENATED MODULE: ./node_modules/vue-router/dist/vue-router.esm.js
/*!
  * vue-router v3.5.3
  * (c) 2021 Evan You
  * @license MIT
  */
/*  */

function assert (condition, message) {
  if (!condition) {
    throw new Error(("[vue-router] " + message))
  }
}

function warn (condition, message) {
  if (!condition) {
    typeof console !== 'undefined' && console.warn(("[vue-router] " + message));
  }
}

function extend (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function (str) { return encodeURIComponent(str)
    .replace(encodeReserveRE, encodeReserveReplacer)
    .replace(commaRE, ','); };

function decode (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    if (false) {}
  }
  return str
}

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     false && false;
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    var value = extraQuery[key];
    parsedQuery[key] = Array.isArray(value)
      ? value.map(castQueryParamValue)
      : castQueryParamValue(value);
  }
  return parsedQuery
}

var castQueryParamValue = function (value) { return (value == null || typeof value === 'object' ? value : String(value)); };

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj
    ? Object.keys(obj)
      .map(function (key) {
        var val = obj[key];

        if (val === undefined) {
          return ''
        }

        if (val === null) {
          return encode(key)
        }

        if (Array.isArray(val)) {
          var result = [];
          val.forEach(function (val2) {
            if (val2 === undefined) {
              return
            }
            if (val2 === null) {
              result.push(encode(key));
            } else {
              result.push(encode(key) + '=' + encode(val2));
            }
          });
          return result.join('&')
        }

        return encode(key) + '=' + encode(val)
      })
      .filter(function (x) { return x.length > 0; })
      .join('&')
    : null;
  return res ? ("?" + res) : ''
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery = router && router.options.stringifyQuery;

  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }
  return Object.freeze(route)
}

function clone (value) {
  if (Array.isArray(value)) {
    return value.map(clone)
  } else if (value && typeof value === 'object') {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res
  } else {
    return value
  }
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b, onlyPath) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && (onlyPath ||
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query))
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      (onlyPath || (
        a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params))
      )
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  // handle null value #1566
  if (!a || !b) { return a === b }
  var aKeys = Object.keys(a).sort();
  var bKeys = Object.keys(b).sort();
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key, i) {
    var aVal = a[key];
    var bKey = bKeys[i];
    if (bKey !== key) { return false }
    var bVal = b[key];
    // query values can be null and undefined
    if (aVal == null || bVal == null) { return aVal === bVal }
    // check nested equality
    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal)
    }
    return String(aVal) === String(bVal)
  })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

function handleRouteEntered (route) {
  for (var i = 0; i < route.matched.length; i++) {
    var record = route.matched[i];
    for (var name in record.instances) {
      var instance = record.instances[name];
      var cbs = record.enteredCbs[name];
      if (!instance || !cbs) { continue }
      delete record.enteredCbs[name];
      for (var i$1 = 0; i$1 < cbs.length; i$1++) {
        if (!instance._isBeingDestroyed) { cbs[i$1](instance); }
      }
    }
  }
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    // used by devtools to display a router-view badge
    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode ? parent.$vnode.data : {};
      if (vnodeData.routerView) {
        depth++;
      }
      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      var cachedData = cache[name];
      var cachedComponent = cachedData && cachedData.component;
      if (cachedComponent) {
        // #2301
        // pass props
        if (cachedData.configProps) {
          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);
        }
        return h(cachedComponent, data, children)
      } else {
        // render previous empty view
        return h()
      }
    }

    var matched = route.matched[depth];
    var component = matched && matched.components[name];

    // render empty node if no matched route or no config component
    if (!matched || !component) {
      cache[name] = null;
      return h()
    }

    // cache component
    cache[name] = { component: component };

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // register instance in init hook
    // in case kept-alive component be actived when routes changed
    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive &&
        vnode.componentInstance &&
        vnode.componentInstance !== matched.instances[name]
      ) {
        matched.instances[name] = vnode.componentInstance;
      }

      // if the route transition has already been confirmed then we weren't
      // able to call the cbs during confirmation as the component was not
      // registered yet, so we call it here.
      handleRouteEntered(route);
    };

    var configProps = matched.props && matched.props[name];
    // save route and configProps in cache
    if (configProps) {
      extend(cache[name], {
        route: route,
        configProps: configProps
      });
      fillPropsinData(component, data, route, configProps);
    }

    return h(component, data, children)
  }
};

function fillPropsinData (component, data, route, configProps) {
  // resolve props
  var propsToPass = data.props = resolveProps(route, configProps);
  if (propsToPass) {
    // clone to prevent mutation
    propsToPass = data.props = extend({}, propsToPass);
    // pass non-declared props as attrs
    var attrs = data.attrs = data.attrs || {};
    for (var key in propsToPass) {
      if (!component.props || !(key in component.props)) {
        attrs[key] = propsToPass[key];
        delete propsToPass[key];
      }
    }
  }
}

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
    default:
      if (false) {}
  }
}

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/+/g, '/')
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options), options)
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/*  */

// $flow-disable-line
var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  params = params || {};
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = pathToRegexp_1.compile(path));

    // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string
    if (typeof params.pathMatch === 'string') { params[0] = params.pathMatch; }

    return filler(params, { pretty: true })
  } catch (e) {
    if (false) {}
    return ''
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}

/*  */

function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next._normalized) {
    return next
  } else if (next.name) {
    next = extend({}, raw);
    var params = next.params;
    if (params && typeof params === 'object') {
      next.params = extend({}, params);
    }
    return next
  }

  // relative params
  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params$1 = extend(extend({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params$1;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params$1, ("path " + (current.path)));
    } else if (false) {}
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function () {};

var warnedCustomSlot;
var warnedTagProp;
var warnedEventProp;

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    custom: Boolean,
    exact: Boolean,
    exactPath: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    ariaCurrentValue: {
      type: String,
      default: 'page'
    },
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(
      this.to,
      current,
      this.append
    );
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback =
      globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback =
      globalExactActiveClass == null
        ? 'router-link-exact-active'
        : globalExactActiveClass;
    var activeClass =
      this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass =
      this.exactActiveClass == null
        ? exactActiveClassFallback
        : this.exactActiveClass;

    var compareTarget = route.redirectedFrom
      ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget, this.exactPath);
    classes[activeClass] = this.exact || this.exactPath
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = { class: classes };

    var scopedSlot =
      !this.$scopedSlots.$hasNormal &&
      this.$scopedSlots.default &&
      this.$scopedSlots.default({
        href: href,
        route: route,
        navigate: handler,
        isActive: classes[activeClass],
        isExactActive: classes[exactActiveClass]
      });

    if (scopedSlot) {
      if (false) {}
      if (scopedSlot.length === 1) {
        return scopedSlot[0]
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        if (false) {}
        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot)
      }
    }

    if (false) {}

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href, 'aria-current': ariaCurrentValue };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = (a.data = extend({}, a.data));
        aData.on = aData.on || {};
        // transform existing events in both objects into arrays so we can push later
        for (var event in aData.on) {
          var handler$1 = aData.on[event];
          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        }
        // append new listeners for router-link
        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = (a.data.attrs = extend({}, a.data.attrs));
        aAttrs.href = href;
        aAttrs['aria-current'] = ariaCurrentValue;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
};

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed && _Vue === Vue) { return }
  install.installed = true;

  _Vue = Vue;

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this._routerRoot._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this._routerRoot._route }
  });

  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap,
  parentRoute
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  // $flow-disable-line
  var pathMap = oldPathMap || Object.create(null);
  // $flow-disable-line
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route, parentRoute);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  if (false) { var pathNames, found; }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;
  if (false) {}

  var pathToRegexpOptions =
    route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    alias: route.alias
      ? typeof route.alias === 'string'
        ? [route.alias]
        : route.alias
      : [],
    instances: {},
    enteredCbs: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props:
      route.props == null
        ? {}
        : route.components
          ? route.props
          : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (false) {}
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];
    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];
      if (false) {}

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        aliasRoute,
        parent,
        record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (false) {}
  }
}

function compileRouteRegex (
  path,
  pathToRegexpOptions
) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  if (false) { var keys; }
  return regex
}

function normalizePath (
  path,
  parent,
  strict
) {
  if (!strict) { path = path.replace(/\/$/, ''); }
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */



function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function addRoute (parentOrRoute, route) {
    var parent = (typeof parentOrRoute !== 'object') ? nameMap[parentOrRoute] : undefined;
    // $flow-disable-line
    createRouteMap([route || parentOrRoute], pathList, pathMap, nameMap, parent);

    // add aliases of parent
    if (parent && parent.alias.length) {
      createRouteMap(
        // $flow-disable-line route is defined if parent is
        parent.alias.map(function (alias) { return ({ path: alias, children: [route] }); }),
        pathList,
        pathMap,
        nameMap,
        parent
      );
    }
  }

  function getRoutes () {
    return pathList.map(function (path) { return pathMap[path]; })
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (false) {}
      if (!record) { return _createRoute(null, location) }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
      return _createRoute(record, location, redirectedFrom)
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
      ? originalRedirect(createRoute(record, location, null, router))
      : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (false) {}
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (false) {}
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      if (false) {}
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoute: addRoute,
    getRoutes: getRoutes,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */

// use User Timing api (if present) for more accurate key precision
var Time =
  inBrowser && window.performance && window.performance.now
    ? window.performance
    : Date;

function genStateKey () {
  return Time.now().toFixed(3)
}

var _key = genStateKey();

function getStateKey () {
  return _key
}

function setStateKey (key) {
  return (_key = key)
}

/*  */

var positionStore = Object.create(null);

function setupScroll () {
  // Prevent browser scroll behavior on History popstate
  if ('scrollRestoration' in window.history) {
    window.history.scrollRestoration = 'manual';
  }
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't
  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, '');
  // preserve existing history state as it could be overriden by the user
  var stateCopy = extend({}, window.history.state);
  stateCopy.key = getStateKey();
  window.history.replaceState(stateCopy, '', absolutePath);
  window.addEventListener('popstate', handlePopState);
  return function () {
    window.removeEventListener('popstate', handlePopState);
  }
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  if (false) {}

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(
      router,
      to,
      from,
      isPop ? position : null
    );

    if (!shouldScroll) {
      return
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll
        .then(function (shouldScroll) {
          scrollToPosition((shouldScroll), position);
        })
        .catch(function (err) {
          if (false) {}
        });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function handlePopState (e) {
  saveScrollPosition();
  if (e.state && e.state.key) {
    setStateKey(e.state.key);
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  }
}

function isValidPosition (obj) {
  return vue_router_esm_isNumber(obj.x) || vue_router_esm_isNumber(obj.y)
}

function normalizePosition (obj) {
  return {
    x: vue_router_esm_isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: vue_router_esm_isNumber(obj.y) ? obj.y : window.pageYOffset
  }
}

function normalizeOffset (obj) {
  return {
    x: vue_router_esm_isNumber(obj.x) ? obj.x : 0,
    y: vue_router_esm_isNumber(obj.y) ? obj.y : 0
  }
}

function vue_router_esm_isNumber (v) {
  return typeof v === 'number'
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition (shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';
  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
      ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
      : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset =
        shouldScroll.offset && typeof shouldScroll.offset === 'object'
          ? shouldScroll.offset
          : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    // $flow-disable-line
    if ('scrollBehavior' in document.documentElement.style) {
      window.scrollTo({
        left: position.x,
        top: position.y,
        // $flow-disable-line
        behavior: shouldScroll.behavior
      });
    } else {
      window.scrollTo(position.x, position.y);
    }
  }
}

/*  */

var supportsPushState =
  inBrowser &&
  (function () {
    var ua = window.navigator.userAgent;

    if (
      (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
      ua.indexOf('Mobile Safari') !== -1 &&
      ua.indexOf('Chrome') === -1 &&
      ua.indexOf('Windows Phone') === -1
    ) {
      return false
    }

    return window.history && typeof window.history.pushState === 'function'
  })();

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      // preserve existing history state as it could be overriden by the user
      var stateCopy = extend({}, history.state);
      stateCopy.key = getStateKey();
      history.replaceState(stateCopy, '', url);
    } else {
      history.pushState({ key: setStateKey(genStateKey()) }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

// When changing thing, also edit router.d.ts
var NavigationFailureType = {
  redirected: 2,
  aborted: 4,
  cancelled: 8,
  duplicated: 16
};

function createNavigationRedirectedError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.redirected,
    ("Redirected when going from \"" + (from.fullPath) + "\" to \"" + (stringifyRoute(
      to
    )) + "\" via a navigation guard.")
  )
}

function createNavigationDuplicatedError (from, to) {
  var error = createRouterError(
    from,
    to,
    NavigationFailureType.duplicated,
    ("Avoided redundant navigation to current location: \"" + (from.fullPath) + "\".")
  );
  // backwards compatible with the first introduction of Errors
  error.name = 'NavigationDuplicated';
  return error
}

function createNavigationCancelledError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.cancelled,
    ("Navigation cancelled from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" with a new navigation.")
  )
}

function createNavigationAbortedError (from, to) {
  return createRouterError(
    from,
    to,
    NavigationFailureType.aborted,
    ("Navigation aborted from \"" + (from.fullPath) + "\" to \"" + (to.fullPath) + "\" via a navigation guard.")
  )
}

function createRouterError (from, to, type, message) {
  var error = new Error(message);
  error._isRouter = true;
  error.from = from;
  error.to = to;
  error.type = type;

  return error
}

var propertiesToLog = ['params', 'query', 'hash'];

function stringifyRoute (to) {
  if (typeof to === 'string') { return to }
  if ('path' in to) { return to.path }
  var location = {};
  propertiesToLog.forEach(function (key) {
    if (key in to) { location[key] = to[key]; }
  });
  return JSON.stringify(location, null, 2)
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

function isNavigationFailure (err, errorType) {
  return (
    isError(err) &&
    err._isRouter &&
    (errorType == null || err.type === errorType)
  )
}

/*  */

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           false && false;
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

var hasSymbol =
  typeof Symbol === 'function' &&
  typeof Symbol.toStringTag === 'symbol';

function isESModule (obj) {
  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (called) { return }
    called = true;
    return fn.apply(this, args)
  }
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
  this.listeners = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (
  location,
  onComplete,
  onAbort
) {
    var this$1 = this;

  var route;
  // catch redirect option https://github.com/vuejs/vue-router/issues/3201
  try {
    route = this.router.match(location, this.current);
  } catch (e) {
    this.errorCbs.forEach(function (cb) {
      cb(e);
    });
    // Exception should still be thrown
    throw e
  }
  var prev = this.current;
  this.confirmTransition(
    route,
    function () {
      this$1.updateRoute(route);
      onComplete && onComplete(route);
      this$1.ensureURL();
      this$1.router.afterHooks.forEach(function (hook) {
        hook && hook(route, prev);
      });

      // fire ready cbs once
      if (!this$1.ready) {
        this$1.ready = true;
        this$1.readyCbs.forEach(function (cb) {
          cb(route);
        });
      }
    },
    function (err) {
      if (onAbort) {
        onAbort(err);
      }
      if (err && !this$1.ready) {
        // Initial redirection should not mark the history as ready yet
        // because it's triggered by the redirection instead
        // https://github.com/vuejs/vue-router/issues/3225
        // https://github.com/vuejs/vue-router/issues/3331
        if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {
          this$1.ready = true;
          this$1.readyErrorCbs.forEach(function (cb) {
            cb(err);
          });
        }
      }
    }
  );
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1 = this;

  var current = this.current;
  this.pending = route;
  var abort = function (err) {
    // changed after adding errors with
    // https://github.com/vuejs/vue-router/pull/3047 before that change,
    // redirect and aborted navigation would produce an err == null
    if (!isNavigationFailure(err) && isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        if (false) {}
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  var lastRouteIndex = route.matched.length - 1;
  var lastCurrentIndex = current.matched.length - 1;
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    lastRouteIndex === lastCurrentIndex &&
    route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]
  ) {
    this.ensureURL();
    if (route.hash) {
      handleScroll(this.router, current, route, false);
    }
    return abort(createNavigationDuplicatedError(current, route))
  }

  var ref = resolveQueue(
    this.current.matched,
    route.matched
  );
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort(createNavigationCancelledError(current, route))
    }
    try {
      hook(route, current, function (to) {
        if (to === false) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(createNavigationAbortedError(current, route));
        } else if (isError(to)) {
          this$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' &&
            (typeof to.path === 'string' || typeof to.name === 'string'))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort(createNavigationRedirectedError(current, route));
          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort(createNavigationCancelledError(current, route))
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          handleRouteEntered(route);
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  this.current = route;
  this.cb && this.cb(route);
};

History.prototype.setupListeners = function setupListeners () {
  // Default implementation is empty
};

History.prototype.teardown = function teardown () {
  // clean up event listeners
  // https://github.com/vuejs/vue-router/issues/2341
  this.listeners.forEach(function (cleanupListener) {
    cleanupListener();
  });
  this.listeners = [];

  // reset current history route
  // https://github.com/vuejs/vue-router/issues/3294
  this.current = START;
  this.pending = null;
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated
) {
  return extractGuards(
    activated,
    'beforeRouteEnter',
    function (guard, _, match, key) {
      return bindEnterGuard(guard, match, key)
    }
  )
}

function bindEnterGuard (
  guard,
  match,
  key
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        if (!match.enteredCbs[key]) {
          match.enteredCbs[key] = [];
        }
        match.enteredCbs[key].push(cb);
      }
      next(cb);
    })
  }
}

/*  */

var HTML5History = /*@__PURE__*/(function (History) {
  function HTML5History (router, base) {
    History.call(this, router, base);

    this._startLocation = getLocation(this.base);
  }

  if ( History ) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create( History && History.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current;

      // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.
      var location = getLocation(this$1.base);
      if (this$1.current === START && location === this$1._startLocation) {
        return
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    };
    window.addEventListener('popstate', handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener('popstate', handleRoutingEvent);
    });
  };

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = window.location.pathname;
  var pathLowerCase = path.toLowerCase();
  var baseLowerCase = base.toLowerCase();
  // base="/a" shouldn't turn path="/app" into "/a/pp"
  // https://github.com/vuejs/vue-router/issues/3555
  // so we ensure the trailing slash in the base
  if (base && ((pathLowerCase === baseLowerCase) ||
    (pathLowerCase.indexOf(cleanPath(baseLowerCase + '/')) === 0))) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */

var HashHistory = /*@__PURE__*/(function (History) {
  function HashHistory (router, base, fallback) {
    History.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History ) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create( History && History.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current;
      if (!ensureSlash()) {
        return
      }
      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    };
    var eventType = supportsPushState ? 'popstate' : 'hashchange';
    window.addEventListener(
      eventType,
      handleRoutingEvent
    );
    this.listeners.push(function () {
      window.removeEventListener(eventType, handleRoutingEvent);
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(
      location,
      function (route) {
        pushHash(route.fullPath);
        handleScroll(this$1.router, route, fromRoute, false);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(
      location,
      function (route) {
        replaceHash(route.fullPath);
        handleScroll(this$1.router, route, fromRoute, false);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  // empty path
  if (index < 0) { return '' }

  href = href.slice(index + 1);

  return href
}

function getUrl (path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return (base + "#" + path)
}

function pushHash (path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash (path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}

/*  */

var AbstractHistory = /*@__PURE__*/(function (History) {
  function AbstractHistory (router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History ) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create( History && History.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(
      location,
      function (route) {
        this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
        this$1.index++;
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(
      location,
      function (route) {
        this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
        onComplete && onComplete(route);
      },
      onAbort
    );
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(
      route,
      function () {
        var prev = this$1.current;
        this$1.index = targetIndex;
        this$1.updateRoute(route);
        this$1.router.afterHooks.forEach(function (hook) {
          hook && hook(route, prev);
        });
      },
      function (err) {
        if (isNavigationFailure(err, NavigationFailureType.duplicated)) {
          this$1.index = targetIndex;
        }
      }
    );
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */

var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};

  if (false) {}
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback =
    mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
    default:
      if (false) {}
  }
};

var prototypeAccessors = { currentRoute: { configurable: true } };

VueRouter.prototype.match = function match (raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1 = this;

   false &&
    false;

  this.apps.push(app);

  // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639
  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);
    if (index > -1) { this$1.apps.splice(index, 1); }
    // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused
    if (this$1.app === app) { this$1.app = this$1.apps[0] || null; }

    if (!this$1.app) { this$1.history.teardown(); }
  });

  // main app previously initialized
  // return as we don't need to set up new history listener
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History || history instanceof HashHistory) {
    var handleInitialScroll = function (routeOrError) {
      var from = history.current;
      var expectScroll = this$1.options.scrollBehavior;
      var supportsScroll = supportsPushState && expectScroll;

      if (supportsScroll && 'fullPath' in routeOrError) {
        handleScroll(this$1, routeOrError, from, false);
      }
    };
    var setupListeners = function (routeOrError) {
      history.setupListeners();
      handleInitialScroll(routeOrError);
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupListeners,
      setupListeners
    );
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

  // $flow-disable-line
  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.push(location, resolve, reject);
    })
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

  // $flow-disable-line
  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.replace(location, resolve, reject);
    })
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply(
    [],
    route.matched.map(function (m) {
      return Object.keys(m.components).map(function (key) {
        return m.components[key]
      })
    })
  )
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.getRoutes = function getRoutes () {
  return this.matcher.getRoutes()
};

VueRouter.prototype.addRoute = function addRoute (parentOrRoute, route) {
  this.matcher.addRoute(parentOrRoute, route);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  if (false) {}
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

VueRouter.install = install;
VueRouter.version = '3.5.3';
VueRouter.isNavigationFailure = isNavigationFailure;
VueRouter.NavigationFailureType = NavigationFailureType;
VueRouter.START_LOCATION = START;

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ var vue_router_esm = (VueRouter);

// CONCATENATED MODULE: ./src/router/router.js


vue_esm["default"].use(vue_router_esm);
const router = new vue_router_esm({
  routes: [{
    path: '/contacts',
    name: 'contacts',
    component: () => __webpack_require__.e(/* import() */ 13).then(__webpack_require__.bind(null, "bfc0"))
  }, {
    path: '/contact',
    name: 'contact',
    component: () => __webpack_require__.e(/* import() */ 15).then(__webpack_require__.bind(null, "4fe8"))
  }, {
    path: '/chats',
    name: 'chats',
    component: () => Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "9a41"))
  }, {
    path: '/chat',
    name: 'chat',
    component: () => Promise.all(/* import() */[__webpack_require__.e(1), __webpack_require__.e(18), __webpack_require__.e(0), __webpack_require__.e(5)]).then(__webpack_require__.bind(null, "ee79"))
  }, {
    path: '/publicPreview',
    name: 'publicPreview',
    component: () => __webpack_require__.e(/* import() */ 10).then(__webpack_require__.bind(null, "5500"))
  }, {
    path: '/chatSettings',
    name: 'chatSettings',
    component: () => __webpack_require__.e(/* import() */ 12).then(__webpack_require__.bind(null, "9394"))
  }, {
    path: '/chatInfo',
    name: 'chatInfo',
    component: () => Promise.all(/* import() */[__webpack_require__.e(1), __webpack_require__.e(0), __webpack_require__.e(4)]).then(__webpack_require__.bind(null, "266d"))
  }, {
    path: '/teamRoom',
    name: 'teamRoom',
    component: () => __webpack_require__.e(/* import() */ 16).then(__webpack_require__.bind(null, "4779"))
  }, {
    path: '/settings',
    name: 'settings',
    component: () => __webpack_require__.e(/* import() */ 9).then(__webpack_require__.bind(null, "8a21"))
  }, {
    path: '/invite',
    name: 'invite',
    component: () => __webpack_require__.e(/* import() */ 8).then(__webpack_require__.bind(null, "bd26"))
  }],
  mode: document.getElementById('automomous') ? 'history' : 'abstract'
});
/* harmony default export */ var router_router = (router);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/modal/index.vue?vue&type=template&id=0f016832&
var modalvue_type_template_id_0f016832_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"fade"}},[_c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, active: _vm.active, mobile: _vm.mobile},attrs:{"id":"modal"}},[_c('div',{staticClass:"modal-backdrop",on:{"click":_vm.close}}),_c('div',{staticClass:"modal-wrapper"},[_c('div',{staticClass:"modal",attrs:{"role":"dialog","aria-labelledby":"modalTitle","aria-describedby":"modalDescription"}},[_c('div',{staticClass:"modal-header"},[_vm._t("header",function(){return [_vm._v(" "+_vm._s(_vm.$t("caption.header"))+" ")]})],2),_c('div',{staticClass:"modal-body",attrs:{"id":"modalDescription"}},[_vm._t("body")],2),(_vm.displayFooter)?_c('div',{staticClass:"modal-footer"}):_vm._e(),_c('div',{staticClass:"modal-close",on:{"click":_vm.close}},[_c('i',{staticClass:"fas fa-times"})])])])])])}
var modalvue_type_template_id_0f016832_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/modal/index.vue?vue&type=template&id=0f016832&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/modal?vue&type=script&lang=js&

/* harmony default export */ var modal_vue_type_script_lang_js_ = ({
  name: 'modal',
  props: {
    displayFooter: {
      default: true,
      type: Boolean
    },
    cantclose: Boolean
  },
  data: function () {
    return {
      loading: false
    };
  },

  mounted() {
    this.$store.commit('active', true);
    this.$store.commit('blockactive', {
      value: true,
      item: 'modal'
    });
  },

  destroyed() {
    this.$store.commit('blockactive', {
      value: false,
      item: 'modal'
    });
  },

  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active,
    mobile: state => state.mobile
  }),
  methods: {
    close: function () {
      this.$emit('close');
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/modal?vue&type=script&lang=js&
 /* harmony default export */ var assets_modal_vue_type_script_lang_js_ = (modal_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/modal/index.vue



function modal_injectStyles (context) {
  
  var style0 = __webpack_require__("edeb")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var modal_component = Object(componentNormalizer["a" /* default */])(
  assets_modal_vue_type_script_lang_js_,
  modalvue_type_template_id_0f016832_render,
  modalvue_type_template_id_0f016832_staticRenderFns,
  false,
  modal_injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var modal = (modal_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/pmenu/index.vue?vue&type=template&id=6078dda8&scoped=true&
var pmenuvue_type_template_id_6078dda8_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"pmenu",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, active: _vm.active, mobile: _vm.mobile}},[(_vm.menu)?_c('div',{staticClass:"menubgwrapper"},[_c('div',{staticClass:"backgr",on:{"click":function($event){return _vm.hidePopup()}}}),_c('div',{staticClass:"menuwrapper"},[_c('simpleMenu',{attrs:{"items":_vm.menu.items},scopedSlots:_vm._u([{key:"default",fn:function(slotProps){return [_vm._t("default",function(){return [_c('div',{staticClass:"menu-item",on:{"click":function($event){return _vm.menuItemClick(slotProps.item)}}},[_c('div',{staticClass:"iconWrapper"},[(slotProps.item.icon)?_c('i',{class:slotProps.item.icon}):_vm._e()]),_c('div',{staticClass:"title"},[_vm._v(" "+_vm._s(slotProps.item.title)+" ")])])]},{"item":slotProps.item})]}}],null,true)}),_c('div',{staticClass:"cancelWrapper"},[_c('div',{staticClass:"menu-item",on:{"click":function($event){return _vm.hidePopup()}}},[_c('div',{staticClass:"iconWrapper"}),_c('div',{staticClass:"title"},[_vm._v(_vm._s(_vm.$t("cancel")))])])])],1)]):_vm._e()])}
var pmenuvue_type_template_id_6078dda8_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/pmenu/index.vue?vue&type=template&id=6078dda8&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/simpleMenu/simpleMenu.vue?vue&type=template&id=79bb4e47&scoped=true&
var simpleMenuvue_type_template_id_79bb4e47_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"items"},[_c('transition-group',{attrs:{"name":"menulis2t","tag":"div"}},_vm._l((_vm.filteredItems),function(item){return _c('div',{key:item.click,staticClass:"item"},[_vm._t("default",function(){return [_c('router-link',{attrs:{"to":'/' + item.route}},[_c('div',{staticClass:"iwr"},[(item.icon)?_c('i',{class:item.icon}):_vm._e(),_c('span',[_vm._v(_vm._s(item.name && typeof item.name === 'string' ? item.name : 'undefined'))])])])]},{"item":item})],2)}),0)],1)])}
var simpleMenuvue_type_template_id_79bb4e47_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/simpleMenu/simpleMenu.vue?vue&type=template&id=79bb4e47&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/simpleMenu/simpleMenu.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var simpleMenuvue_type_script_lang_js_ = ({
  name: 'simpleMenu',
  props: {
    items: {
      type: Array,
      required: true
    }
  },
  computed: {
    filteredItems: function () {
      return this.items.filter(item => !item.hidden);
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/simpleMenu/simpleMenu.vue?vue&type=script&lang=js&
 /* harmony default export */ var simpleMenu_simpleMenuvue_type_script_lang_js_ = (simpleMenuvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/simpleMenu/simpleMenu.vue



function simpleMenu_injectStyles (context) {
  
  var style0 = __webpack_require__("62d6")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var simpleMenu_component = Object(componentNormalizer["a" /* default */])(
  simpleMenu_simpleMenuvue_type_script_lang_js_,
  simpleMenuvue_type_template_id_79bb4e47_scoped_true_render,
  simpleMenuvue_type_template_id_79bb4e47_scoped_true_staticRenderFns,
  false,
  simpleMenu_injectStyles,
  "79bb4e47",
  null
  ,true
)

/* harmony default export */ var simpleMenu = (simpleMenu_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/pmenu?vue&type=script&lang=js&


/* harmony default export */ var pmenu_vue_type_script_lang_js_ = ({
  name: 'pmenu',
  props: {},
  components: {
    simpleMenu: simpleMenu
  },
  data: function () {
    return {
      last: null
    };
  },
  watch: {},
  computed: { ...Object(vuex_esm["c" /* mapState */])({
      pocketnet: state => state.pocketnet,
      minimized: state => state.minimized,
      mobile: state => state.mobile,
      active: state => state.active,
      hiddenInParent: state => state.hiddenInParent,
      menu: state => state.menu
    })
  },
  methods: {
    menuItemClick(item) {
      if (this.menu) {
        this.last = this.menu;
        this.menu.handler(item, this.menu.item, {
          hidePopup: this.hidePopup,
          showPopup: this.showPopup
        }); // this.$emit('itemClicked', item, this.menu.item, );
      }
    },

    showPopup: function () {
      if (this.last) {
        this.$store.commit('SET_MENU', this.last);
        this.last = null;
      }
    },

    hidePopup() {
      this.$store.commit('SET_MENU', null);
    }

  }
});
// CONCATENATED MODULE: ./src/components/assets/pmenu?vue&type=script&lang=js&
 /* harmony default export */ var assets_pmenu_vue_type_script_lang_js_ = (pmenu_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/pmenu/index.vue



function pmenu_injectStyles (context) {
  
  var style0 = __webpack_require__("994e")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var pmenu_component = Object(componentNormalizer["a" /* default */])(
  assets_pmenu_vue_type_script_lang_js_,
  pmenuvue_type_template_id_6078dda8_scoped_true_render,
  pmenuvue_type_template_id_6078dda8_scoped_true_staticRenderFns,
  false,
  pmenu_injectStyles,
  "6078dda8",
  null
  ,true
)

/* harmony default export */ var pmenu = (pmenu_component.exports);
// EXTERNAL MODULE: ./src/editedplugins/vue-page-transition/src/index.js
var vue_page_transition_src = __webpack_require__("7a1f");

// CONCATENATED MODULE: ./node_modules/vue-textarea-autosize/dist/vue-textarea-autosize.esm.js
/*!
 * vue-textarea-autosize v1.1.1 
 * (c) 2019 Saymon
 * Released under the MIT License.
 */
//
//
//
//
//
//
//
var script = {
  name: 'TextareaAutosize',
  props: {
    value: {
      type: [String, Number],
      default: ''
    },
    autosize: {
      type: Boolean,
      default: true
    },
    minHeight: {
      type: [Number],
      'default': null
    },
    maxHeight: {
      type: [Number],
      'default': null
    },

    /*
     * Force !important for style properties
     */
    important: {
      type: [Boolean, Array],
      default: false
    }
  },
  data: function data() {
    return {
      // data property for v-model binding with real textarea tag
      val: null,
      // works when content height becomes more then value of the maxHeight property
      maxHeightScroll: false,
      height: 'auto'
    };
  },
  computed: {
    computedStyles: function computedStyles() {
      if (!this.autosize) return {};
      return {
        resize: !this.isResizeImportant ? 'none' : 'none !important',
        height: this.height,
        overflow: this.maxHeightScroll ? 'auto' : !this.isOverflowImportant ? 'hidden' : 'hidden !important'
      };
    },
    isResizeImportant: function isResizeImportant() {
      var imp = this.important;
      return imp === true || Array.isArray(imp) && imp.includes('resize');
    },
    isOverflowImportant: function isOverflowImportant() {
      var imp = this.important;
      return imp === true || Array.isArray(imp) && imp.includes('overflow');
    },
    isHeightImportant: function isHeightImportant() {
      var imp = this.important;
      return imp === true || Array.isArray(imp) && imp.includes('height');
    }
  },
  watch: {
    value: function value(val) {
      this.val = val;
    },
    val: function val(_val) {
      this.$nextTick(this.resize);
      this.$emit('input', _val);
    },
    minHeight: function minHeight() {
      this.$nextTick(this.resize);
    },
    maxHeight: function maxHeight() {
      this.$nextTick(this.resize);
    },
    autosize: function autosize(val) {
      if (val) this.resize();
    }
  },
  methods: {
    resize: function resize() {
      var _this = this;

      var important = this.isHeightImportant ? 'important' : '';
      this.height = "auto".concat(important ? ' !important' : '');
      this.$nextTick(function () {
        var contentHeight = _this.$el.scrollHeight + 1;

        if (_this.minHeight) {
          contentHeight = contentHeight < _this.minHeight ? _this.minHeight : contentHeight;
        }

        if (_this.maxHeight) {
          if (contentHeight > _this.maxHeight) {
            contentHeight = _this.maxHeight;
            _this.maxHeightScroll = true;
          } else {
            _this.maxHeightScroll = false;
          }
        }

        var heightVal = contentHeight + 'px';
        _this.height = "".concat(heightVal).concat(important ? ' !important' : '');
      });
      return this;
    }
  },
  created: function created() {
    this.val = this.value;
  },
  mounted: function mounted() {
    this.resize();
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
/* server only */
, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== 'boolean') {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  } // Vue.extend constructor export interop.


  var options = typeof script === 'function' ? script.options : script; // render functions

  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true; // functional template

    if (isFunctionalTemplate) {
      options.functional = true;
    }
  } // scopedId


  if (scopeId) {
    options._scopeId = scopeId;
  }

  var hook;

  if (moduleIdentifier) {
    // server build
    hook = function hook(context) {
      // 2.3 injection
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
      // 2.2 with runInNewContext: true

      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      } // inject component styles


      if (style) {
        style.call(this, createInjectorSSR(context));
      } // register component module identifier for async chunk inference


      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    }; // used by ssr in case component is cached and beforeCreate
    // never gets called


    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function () {
      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
    } : function (context) {
      style.call(this, createInjector(context));
    };
  }

  if (hook) {
    if (options.functional) {
      // register for functional component in vue file
      var originalRender = options.render;

      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }

  return script;
}

var normalizeComponent_1 = normalizeComponent;

/* script */
const __vue_script__ = script;

/* template */
var __vue_render__ = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('textarea',{directives:[{name:"model",rawName:"v-model",value:(_vm.val),expression:"val"}],style:(_vm.computedStyles),domProps:{"value":(_vm.val)},on:{"focus":_vm.resize,"input":function($event){if($event.target.composing){ return; }_vm.val=$event.target.value;}}})};
var __vue_staticRenderFns__ = [];

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  

  
  var TextareaAutosize = normalizeComponent_1(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

var version = '1.1.1';

var vue_textarea_autosize_esm_install = function install(Vue) {
  Vue.component('TextareaAutosize', TextareaAutosize);
};

var vue_textarea_autosize_esm_plugin = {
  install: vue_textarea_autosize_esm_install,
  version: version
};

if (typeof window !== 'undefined' && window.Vue) {
  window.Vue.use(vue_textarea_autosize_esm_plugin);
}

/* harmony default export */ var vue_textarea_autosize_esm = (vue_textarea_autosize_esm_plugin);

// CONCATENATED MODULE: ./node_modules/vue-i18n/dist/vue-i18n.esm.js
/*!
 * vue-i18n v8.27.0 
 * (c) 2022 kazuya kawaguchi
 * Released under the MIT License.
 */
/*  */

/**
 * constants
 */

var numberFormatKeys = [
  'compactDisplay',
  'currency',
  'currencyDisplay',
  'currencySign',
  'localeMatcher',
  'notation',
  'numberingSystem',
  'signDisplay',
  'style',
  'unit',
  'unitDisplay',
  'useGrouping',
  'minimumIntegerDigits',
  'minimumFractionDigits',
  'maximumFractionDigits',
  'minimumSignificantDigits',
  'maximumSignificantDigits'
];

/**
 * utilities
 */

function vue_i18n_esm_warn (msg, err) {
  if (typeof console !== 'undefined') {
    console.warn('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.warn(err.stack);
    }
  }
}

function vue_i18n_esm_error (msg, err) {
  if (typeof console !== 'undefined') {
    console.error('[vue-i18n] ' + msg);
    /* istanbul ignore if */
    if (err) {
      console.error(err.stack);
    }
  }
}

var isArray = Array.isArray;

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function vue_i18n_esm_isBoolean (val) {
  return typeof val === 'boolean'
}

function isString (val) {
  return typeof val === 'string'
}

var vue_i18n_esm_toString = Object.prototype.toString;
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return vue_i18n_esm_toString.call(obj) === OBJECT_STRING
}

function isNull (val) {
  return val === null || val === undefined
}

function isFunction (val) {
  return typeof val === 'function'
}

function parseArgs () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  var locale = null;
  var params = null;
  if (args.length === 1) {
    if (isObject(args[0]) || isArray(args[0])) {
      params = args[0];
    } else if (typeof args[0] === 'string') {
      locale = args[0];
    }
  } else if (args.length === 2) {
    if (typeof args[0] === 'string') {
      locale = args[0];
    }
    /* istanbul ignore if */
    if (isObject(args[1]) || isArray(args[1])) {
      params = args[1];
    }
  }

  return { locale: locale, params: params }
}

function looseClone (obj) {
  return JSON.parse(JSON.stringify(obj))
}

function remove (arr, item) {
  if (arr.delete(item)) {
    return arr
  }
}

function arrayFrom (arr) {
  var ret = [];
  arr.forEach(function (a) { return ret.push(a); });
  return ret
}

function includes (arr, item) {
  return !!~arr.indexOf(item)
}

var vue_i18n_esm_hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return vue_i18n_esm_hasOwnProperty.call(obj, key)
}

function merge (target) {
  var arguments$1 = arguments;

  var output = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments$1[i];
    if (source !== undefined && source !== null) {
      var key = (void 0);
      for (key in source) {
        if (hasOwn(source, key)) {
          if (isObject(source[key])) {
            output[key] = merge(output[key], source[key]);
          } else {
            output[key] = source[key];
          }
        }
      }
    }
  }
  return output
}

function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = isArray(a);
      var isArrayB = isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Sanitizes html special characters from input strings. For mitigating risk of XSS attacks.
 * @param rawText The raw input from the user that should be escaped.
 */
function escapeHtml(rawText) {
  return rawText
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&apos;')
}

/**
 * Escapes html tags and special symbols from all provided params which were returned from parseArgs().params.
 * This method performs an in-place operation on the params object.
 *
 * @param {any} params Parameters as provided from `parseArgs().params`.
 *                     May be either an array of strings or a string->any map.
 *
 * @returns The manipulated `params` object.
 */
function escapeParams(params) {
  if(params != null) {
    Object.keys(params).forEach(function (key) {
      if(typeof(params[key]) == 'string') {
        params[key] = escapeHtml(params[key]);
      }
    });
  }
  return params
}

/*  */

function vue_i18n_esm_extend (Vue) {
  if (!Vue.prototype.hasOwnProperty('$i18n')) {
    // $FlowFixMe
    Object.defineProperty(Vue.prototype, '$i18n', {
      get: function get () { return this._i18n }
    });
  }

  Vue.prototype.$t = function (key) {
    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var i18n = this.$i18n;
    return i18n._t.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this ].concat( values ))
  };

  Vue.prototype.$tc = function (key, choice) {
    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];

    var i18n = this.$i18n;
    return i18n._tc.apply(i18n, [ key, i18n.locale, i18n._getMessages(), this, choice ].concat( values ))
  };

  Vue.prototype.$te = function (key, locale) {
    var i18n = this.$i18n;
    return i18n._te(key, i18n.locale, i18n._getMessages(), locale)
  };

  Vue.prototype.$d = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).d.apply(ref, [ value ].concat( args ))
  };

  Vue.prototype.$n = function (value) {
    var ref;

    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];
    return (ref = this.$i18n).n.apply(ref, [ value ].concat( args ))
  };
}

/*  */

/**
 * Mixin
 * 
 * If `bridge` mode, empty mixin is returned,
 * else regulary mixin implementation is returned.
 */
function defineMixin (bridge) {
  if ( bridge === void 0 ) bridge = false;

  function mounted () {
    if (this !== this.$root && this.$options.__INTLIFY_META__ && this.$el) {
      this.$el.setAttribute('data-intlify', this.$options.__INTLIFY_META__);
    }
  }

  return bridge
    ? { mounted: mounted } // delegate `vue-i18n-bridge` mixin implementation
    : { // regulary 
    beforeCreate: function beforeCreate () {
      var options = this.$options;
      options.i18n = options.i18n || ((options.__i18nBridge || options.__i18n) ? {} : null);

      if (options.i18n) {
        if (options.i18n instanceof VueI18n) {
          // init locale messages via custom blocks
          if ((options.__i18nBridge || options.__i18n)) {
            try {
              var localeMessages = options.i18n && options.i18n.messages ? options.i18n.messages : {};
              var _i18n = options.__i18nBridge || options.__i18n;
              _i18n.forEach(function (resource) {
                localeMessages = merge(localeMessages, JSON.parse(resource));
              });
              Object.keys(localeMessages).forEach(function (locale) {
                options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);
              });
            } catch (e) {
              if (false) {}
            }
          }
          this._i18n = options.i18n;
          this._i18nWatcher = this._i18n.watchI18nData();
        } else if (isPlainObject(options.i18n)) {
          var rootI18n = this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n
            ? this.$root.$i18n
            : null;
          // component local i18n
          if (rootI18n) {
            options.i18n.root = this.$root;
            options.i18n.formatter = rootI18n.formatter;
            options.i18n.fallbackLocale = rootI18n.fallbackLocale;
            options.i18n.formatFallbackMessages = rootI18n.formatFallbackMessages;
            options.i18n.silentTranslationWarn = rootI18n.silentTranslationWarn;
            options.i18n.silentFallbackWarn = rootI18n.silentFallbackWarn;
            options.i18n.pluralizationRules = rootI18n.pluralizationRules;
            options.i18n.preserveDirectiveContent = rootI18n.preserveDirectiveContent;
          }

          // init locale messages via custom blocks
          if ((options.__i18nBridge || options.__i18n)) {
            try {
              var localeMessages$1 = options.i18n && options.i18n.messages ? options.i18n.messages : {};
              var _i18n$1 = options.__i18nBridge || options.__i18n;
              _i18n$1.forEach(function (resource) {
                localeMessages$1 = merge(localeMessages$1, JSON.parse(resource));
              });
              options.i18n.messages = localeMessages$1;
            } catch (e) {
              if (false) {}
            }
          }

          var ref = options.i18n;
          var sharedMessages = ref.sharedMessages;
          if (sharedMessages && isPlainObject(sharedMessages)) {
            options.i18n.messages = merge(options.i18n.messages, sharedMessages);
          }

          this._i18n = new VueI18n(options.i18n);
          this._i18nWatcher = this._i18n.watchI18nData();

          if (options.i18n.sync === undefined || !!options.i18n.sync) {
            this._localeWatcher = this.$i18n.watchLocale();
          }

          if (rootI18n) {
            rootI18n.onComponentInstanceCreated(this._i18n);
          }
        } else {
          if (false) {}
        }
      } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
        // root i18n
        this._i18n = this.$root.$i18n;
      } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
        // parent i18n
        this._i18n = options.parent.$i18n;
      }
    },

    beforeMount: function beforeMount () {
      var options = this.$options;
      options.i18n = options.i18n || ((options.__i18nBridge || options.__i18n) ? {} : null);

      if (options.i18n) {
        if (options.i18n instanceof VueI18n) {
          // init locale messages via custom blocks
          this._i18n.subscribeDataChanging(this);
          this._subscribing = true;
        } else if (isPlainObject(options.i18n)) {
          this._i18n.subscribeDataChanging(this);
          this._subscribing = true;
        } else {
          if (false) {}
        }
      } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {
        this._i18n.subscribeDataChanging(this);
        this._subscribing = true;
      }
    },

    mounted: mounted,

    beforeDestroy: function beforeDestroy () {
      if (!this._i18n) { return }

      var self = this;
      this.$nextTick(function () {
        if (self._subscribing) {
          self._i18n.unsubscribeDataChanging(self);
          delete self._subscribing;
        }

        if (self._i18nWatcher) {
          self._i18nWatcher();
          self._i18n.destroyVM();
          delete self._i18nWatcher;
        }

        if (self._localeWatcher) {
          self._localeWatcher();
          delete self._localeWatcher;
        }
      });
    }
  }
}

/*  */

var interpolationComponent = {
  name: 'i18n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    path: {
      type: String,
      required: true
    },
    locale: {
      type: String
    },
    places: {
      type: [Array, Object]
    }
  },
  render: function render (h, ref) {
    var data = ref.data;
    var parent = ref.parent;
    var props = ref.props;
    var slots = ref.slots;

    var $i18n = parent.$i18n;
    if (!$i18n) {
      if (false) {}
      return
    }

    var path = props.path;
    var locale = props.locale;
    var places = props.places;
    var params = slots();
    var children = $i18n.i(
      path,
      locale,
      onlyHasDefaultPlace(params) || places
        ? useLegacyPlaces(params.default, places)
        : params
    );

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag ? h(tag, data, children) : children
  }
};

function onlyHasDefaultPlace (params) {
  var prop;
  for (prop in params) {
    if (prop !== 'default') { return false }
  }
  return Boolean(prop)
}

function useLegacyPlaces (children, places) {
  var params = places ? createParamsFromPlaces(places) : {};

  if (!children) { return params }

  // Filter empty text nodes
  children = children.filter(function (child) {
    return child.tag || child.text.trim() !== ''
  });

  var everyPlace = children.every(vnodeHasPlaceAttribute);
  if (false) {}

  return children.reduce(
    everyPlace ? assignChildPlace : assignChildIndex,
    params
  )
}

function createParamsFromPlaces (places) {
  if (false) {}

  return Array.isArray(places)
    ? places.reduce(assignChildIndex, {})
    : Object.assign({}, places)
}

function assignChildPlace (params, child) {
  if (child.data && child.data.attrs && child.data.attrs.place) {
    params[child.data.attrs.place] = child;
  }
  return params
}

function assignChildIndex (params, child, index) {
  params[index] = child;
  return params
}

function vnodeHasPlaceAttribute (vnode) {
  return Boolean(vnode.data && vnode.data.attrs && vnode.data.attrs.place)
}

/*  */

var numberComponent = {
  name: 'i18n-n',
  functional: true,
  props: {
    tag: {
      type: [String, Boolean, Object],
      default: 'span'
    },
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    },
    locale: {
      type: String
    }
  },
  render: function render (h, ref) {
    var props = ref.props;
    var parent = ref.parent;
    var data = ref.data;

    var i18n = parent.$i18n;

    if (!i18n) {
      if (false) {}
      return null
    }

    var key = null;
    var options = null;

    if (isString(props.format)) {
      key = props.format;
    } else if (isObject(props.format)) {
      if (props.format.key) {
        key = props.format.key;
      }

      // Filter out number format options only
      options = Object.keys(props.format).reduce(function (acc, prop) {
        var obj;

        if (includes(numberFormatKeys, prop)) {
          return Object.assign({}, acc, ( obj = {}, obj[prop] = props.format[prop], obj ))
        }
        return acc
      }, null);
    }

    var locale = props.locale || i18n.locale;
    var parts = i18n._ntp(props.value, locale, key, options);

    var values = parts.map(function (part, index) {
      var obj;

      var slot = data.scopedSlots && data.scopedSlots[part.type];
      return slot ? slot(( obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj )) : part.value
    });

    var tag = (!!props.tag && props.tag !== true) || props.tag === false ? props.tag : 'span';
    return tag
      ? h(tag, {
        attrs: data.attrs,
        'class': data['class'],
        staticClass: data.staticClass
      }, values)
      : values
  }
};

/*  */

function bind (el, binding, vnode) {
  if (!vue_i18n_esm_assert(el, vnode)) { return }

  vue_i18n_esm_t(el, binding, vnode);
}

function update (el, binding, vnode, oldVNode) {
  if (!vue_i18n_esm_assert(el, vnode)) { return }

  var i18n = vnode.context.$i18n;
  if (localeEqual(el, vnode) &&
    (looseEqual(binding.value, binding.oldValue) &&
     looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale)))) { return }

  vue_i18n_esm_t(el, binding, vnode);
}

function unbind (el, binding, vnode, oldVNode) {
  var vm = vnode.context;
  if (!vm) {
    vue_i18n_esm_warn('Vue instance does not exists in VNode context');
    return
  }

  var i18n = vnode.context.$i18n || {};
  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {
    el.textContent = '';
  }
  el._vt = undefined;
  delete el['_vt'];
  el._locale = undefined;
  delete el['_locale'];
  el._localeMessage = undefined;
  delete el['_localeMessage'];
}

function vue_i18n_esm_assert (el, vnode) {
  var vm = vnode.context;
  if (!vm) {
    vue_i18n_esm_warn('Vue instance does not exists in VNode context');
    return false
  }

  if (!vm.$i18n) {
    vue_i18n_esm_warn('VueI18n instance does not exists in Vue instance');
    return false
  }

  return true
}

function localeEqual (el, vnode) {
  var vm = vnode.context;
  return el._locale === vm.$i18n.locale
}

function vue_i18n_esm_t (el, binding, vnode) {
  var ref$1, ref$2;

  var value = binding.value;

  var ref = parseValue(value);
  var path = ref.path;
  var locale = ref.locale;
  var args = ref.args;
  var choice = ref.choice;
  if (!path && !locale && !args) {
    vue_i18n_esm_warn('value type not supported');
    return
  }

  if (!path) {
    vue_i18n_esm_warn('`path` is required in v-t directive');
    return
  }

  var vm = vnode.context;
  if (choice != null) {
    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [ path, choice ].concat( makeParams(locale, args) ));
  } else {
    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [ path ].concat( makeParams(locale, args) ));
  }
  el._locale = vm.$i18n.locale;
  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);
}

function parseValue (value) {
  var path;
  var locale;
  var args;
  var choice;

  if (isString(value)) {
    path = value;
  } else if (isPlainObject(value)) {
    path = value.path;
    locale = value.locale;
    args = value.args;
    choice = value.choice;
  }

  return { path: path, locale: locale, args: args, choice: choice }
}

function makeParams (locale, args) {
  var params = [];

  locale && params.push(locale);
  if (args && (Array.isArray(args) || isPlainObject(args))) {
    params.push(args);
  }

  return params
}

var vue_i18n_esm_Vue;

function vue_i18n_esm_install (_Vue, options) {
  if ( options === void 0 ) options = { bridge: false };

  /* istanbul ignore if */
  if (false) {}
  vue_i18n_esm_install.installed = true;

  vue_i18n_esm_Vue = _Vue;

  var version = (vue_i18n_esm_Vue.version && Number(vue_i18n_esm_Vue.version.split('.')[0])) || -1;
  /* istanbul ignore if */
  if (false) {}

  vue_i18n_esm_extend(vue_i18n_esm_Vue);
  vue_i18n_esm_Vue.mixin(defineMixin(options.bridge));
  vue_i18n_esm_Vue.directive('t', { bind: bind, update: update, unbind: unbind });
  vue_i18n_esm_Vue.component(interpolationComponent.name, interpolationComponent);
  vue_i18n_esm_Vue.component(numberComponent.name, numberComponent);

  // use simple mergeStrategies to prevent i18n instance lose '__proto__'
  var strats = vue_i18n_esm_Vue.config.optionMergeStrategies;
  strats.i18n = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };
}

/*  */

var BaseFormatter = function BaseFormatter () {
  this._caches = Object.create(null);
};

BaseFormatter.prototype.interpolate = function interpolate (message, values) {
  if (!values) {
    return [message]
  }
  var tokens = this._caches[message];
  if (!tokens) {
    tokens = vue_i18n_esm_parse(message);
    this._caches[message] = tokens;
  }
  return vue_i18n_esm_compile(tokens, values)
};



var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;

function vue_i18n_esm_parse (format) {
  var tokens = [];
  var position = 0;

  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === '{') {
      if (text) {
        tokens.push({ type: 'text', value: text });
      }

      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== '}') {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === '}';

      var type = RE_TOKEN_LIST_VALUE.test(sub)
        ? 'list'
        : isClosed && RE_TOKEN_NAMED_VALUE.test(sub)
          ? 'named'
          : 'unknown';
      tokens.push({ value: sub, type: type });
    } else if (char === '%') {
      // when found rails i18n syntax, skip text capture
      if (format[(position)] !== '{') {
        text += char;
      }
    } else {
      text += char;
    }
  }

  text && tokens.push({ type: 'text', value: text });

  return tokens
}

function vue_i18n_esm_compile (tokens, values) {
  var compiled = [];
  var index = 0;

  var mode = Array.isArray(values)
    ? 'list'
    : isObject(values)
      ? 'named'
      : 'unknown';
  if (mode === 'unknown') { return compiled }

  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break
      case 'named':
        if (mode === 'named') {
          compiled.push((values)[token.value]);
        } else {
          if (false) {}
        }
        break
      case 'unknown':
        if (false) {}
        break
    }
    index++;
  }

  return compiled
}

/*  */

/**
 *  Path parser
 *  - Inspired:
 *    Vue.js Path parser
 */

// actions
var APPEND = 0;
var PUSH = 1;
var INC_SUB_PATH_DEPTH = 2;
var PUSH_SUB_PATH = 3;

// states
var BEFORE_PATH = 0;
var IN_PATH = 1;
var BEFORE_IDENT = 2;
var IN_IDENT = 3;
var IN_SUB_PATH = 4;
var IN_SINGLE_QUOTE = 5;
var IN_DOUBLE_QUOTE = 6;
var AFTER_PATH = 7;
var ERROR = 8;

var pathStateMachine = [];

pathStateMachine[BEFORE_PATH] = {
  'ws': [BEFORE_PATH],
  'ident': [IN_IDENT, APPEND],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[IN_PATH] = {
  'ws': [IN_PATH],
  '.': [BEFORE_IDENT],
  '[': [IN_SUB_PATH],
  'eof': [AFTER_PATH]
};

pathStateMachine[BEFORE_IDENT] = {
  'ws': [BEFORE_IDENT],
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND]
};

pathStateMachine[IN_IDENT] = {
  'ident': [IN_IDENT, APPEND],
  '0': [IN_IDENT, APPEND],
  'number': [IN_IDENT, APPEND],
  'ws': [IN_PATH, PUSH],
  '.': [BEFORE_IDENT, PUSH],
  '[': [IN_SUB_PATH, PUSH],
  'eof': [AFTER_PATH, PUSH]
};

pathStateMachine[IN_SUB_PATH] = {
  "'": [IN_SINGLE_QUOTE, APPEND],
  '"': [IN_DOUBLE_QUOTE, APPEND],
  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
  ']': [IN_PATH, PUSH_SUB_PATH],
  'eof': ERROR,
  'else': [IN_SUB_PATH, APPEND]
};

pathStateMachine[IN_SINGLE_QUOTE] = {
  "'": [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_SINGLE_QUOTE, APPEND]
};

pathStateMachine[IN_DOUBLE_QUOTE] = {
  '"': [IN_SUB_PATH, APPEND],
  'eof': ERROR,
  'else': [IN_DOUBLE_QUOTE, APPEND]
};

/**
 * Check if an expression is a literal value.
 */

var literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral (exp) {
  return literalValueRE.test(exp)
}

/**
 * Strip quotes from a string
 */

function stripQuotes (str) {
  var a = str.charCodeAt(0);
  var b = str.charCodeAt(str.length - 1);
  return a === b && (a === 0x22 || a === 0x27)
    ? str.slice(1, -1)
    : str
}

/**
 * Determine the type of a character in a keypath.
 */

function getPathCharType (ch) {
  if (ch === undefined || ch === null) { return 'eof' }

  var code = ch.charCodeAt(0);

  switch (code) {
    case 0x5B: // [
    case 0x5D: // ]
    case 0x2E: // .
    case 0x22: // "
    case 0x27: // '
      return ch

    case 0x5F: // _
    case 0x24: // $
    case 0x2D: // -
      return 'ident'

    case 0x09: // Tab
    case 0x0A: // Newline
    case 0x0D: // Return
    case 0xA0:  // No-break space
    case 0xFEFF:  // Byte Order Mark
    case 0x2028:  // Line Separator
    case 0x2029:  // Paragraph Separator
      return 'ws'
  }

  return 'ident'
}

/**
 * Format a subPath, return its plain form if it is
 * a literal string or number. Otherwise prepend the
 * dynamic indicator (*).
 */

function formatSubPath (path) {
  var trimmed = path.trim();
  // invalid leading 0
  if (path.charAt(0) === '0' && isNaN(path)) { return false }

  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed
}

/**
 * Parse a string path into an array of segments
 */

function parse$1 (path) {
  var keys = [];
  var index = -1;
  var mode = BEFORE_PATH;
  var subPathDepth = 0;
  var c;
  var key;
  var newChar;
  var type;
  var transition;
  var action;
  var typeMap;
  var actions = [];

  actions[PUSH] = function () {
    if (key !== undefined) {
      keys.push(key);
      key = undefined;
    }
  };

  actions[APPEND] = function () {
    if (key === undefined) {
      key = newChar;
    } else {
      key += newChar;
    }
  };

  actions[INC_SUB_PATH_DEPTH] = function () {
    actions[APPEND]();
    subPathDepth++;
  };

  actions[PUSH_SUB_PATH] = function () {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = IN_SUB_PATH;
      actions[APPEND]();
    } else {
      subPathDepth = 0;
      if (key === undefined) { return false }
      key = formatSubPath(key);
      if (key === false) {
        return false
      } else {
        actions[PUSH]();
      }
    }
  };

  function maybeUnescapeQuote () {
    var nextChar = path[index + 1];
    if ((mode === IN_SINGLE_QUOTE && nextChar === "'") ||
      (mode === IN_DOUBLE_QUOTE && nextChar === '"')) {
      index++;
      newChar = '\\' + nextChar;
      actions[APPEND]();
      return true
    }
  }

  while (mode !== null) {
    index++;
    c = path[index];

    if (c === '\\' && maybeUnescapeQuote()) {
      continue
    }

    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap['else'] || ERROR;

    if (transition === ERROR) {
      return // parse error
    }

    mode = transition[0];
    action = actions[transition[1]];
    if (action) {
      newChar = transition[2];
      newChar = newChar === undefined
        ? c
        : newChar;
      if (action() === false) {
        return
      }
    }

    if (mode === AFTER_PATH) {
      return keys
    }
  }
}





var I18nPath = function I18nPath () {
  this._cache = Object.create(null);
};

/**
 * External parse that check for a cache hit first
 */
I18nPath.prototype.parsePath = function parsePath (path) {
  var hit = this._cache[path];
  if (!hit) {
    hit = parse$1(path);
    if (hit) {
      this._cache[path] = hit;
    }
  }
  return hit || []
};

/**
 * Get path value from path string
 */
I18nPath.prototype.getPathValue = function getPathValue (obj, path) {
  if (!isObject(obj)) { return null }

  var paths = this.parsePath(path);
  if (paths.length === 0) {
    return null
  } else {
    var length = paths.length;
    var last = obj;
    var i = 0;
    while (i < length) {
      var value = last[paths[i]];
      if (value === undefined || value === null) {
        return null
      }
      last = value;
      i++;
    }

    return last
  }
};

/*  */



var htmlTagMatcher = /<\/?[\w\s="/.':;#-\/]+>/;
var linkKeyMatcher = /(?:@(?:\.[a-z]+)?:(?:[\w\-_|./]+|\([\w\-_|./]+\)))/g;
var linkKeyPrefixMatcher = /^@(?:\.([a-z]+))?:/;
var bracketsMatcher = /[()]/g;
var defaultModifiers = {
  'upper': function (str) { return str.toLocaleUpperCase(); },
  'lower': function (str) { return str.toLocaleLowerCase(); },
  'capitalize': function (str) { return ("" + (str.charAt(0).toLocaleUpperCase()) + (str.substr(1))); }
};

var defaultFormatter = new BaseFormatter();

var VueI18n = function VueI18n (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #290
  /* istanbul ignore if */
  if (!vue_i18n_esm_Vue && typeof window !== 'undefined' && window.Vue) {
    vue_i18n_esm_install(window.Vue);
  }

  var locale = options.locale || 'en-US';
  var fallbackLocale = options.fallbackLocale === false
    ? false
    : options.fallbackLocale || 'en-US';
  var messages = options.messages || {};
  var dateTimeFormats = options.dateTimeFormats || options.datetimeFormats || {};
  var numberFormats = options.numberFormats || {};

  this._vm = null;
  this._formatter = options.formatter || defaultFormatter;
  this._modifiers = options.modifiers || {};
  this._missing = options.missing || null;
  this._root = options.root || null;
  this._sync = options.sync === undefined ? true : !!options.sync;
  this._fallbackRoot = options.fallbackRoot === undefined
    ? true
    : !!options.fallbackRoot;
  this._fallbackRootWithEmptyString = options.fallbackRootWithEmptyString === undefined
    ? true
    : !!options.fallbackRootWithEmptyString;
  this._formatFallbackMessages = options.formatFallbackMessages === undefined
    ? false
    : !!options.formatFallbackMessages;
  this._silentTranslationWarn = options.silentTranslationWarn === undefined
    ? false
    : options.silentTranslationWarn;
  this._silentFallbackWarn = options.silentFallbackWarn === undefined
    ? false
    : !!options.silentFallbackWarn;
  this._dateTimeFormatters = {};
  this._numberFormatters = {};
  this._path = new I18nPath();
  this._dataListeners = new Set();
  this._componentInstanceCreatedListener = options.componentInstanceCreatedListener || null;
  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined
    ? false
    : !!options.preserveDirectiveContent;
  this.pluralizationRules = options.pluralizationRules || {};
  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';
  this._postTranslation = options.postTranslation || null;
  this._escapeParameterHtml = options.escapeParameterHtml || false;

  if ('__VUE_I18N_BRIDGE__' in options) {
    this.__VUE_I18N_BRIDGE__ = options.__VUE_I18N_BRIDGE__;
  }

  /**
   * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`
   * @param choicesLength {number} an overall amount of available choices
   * @returns a final choice index
  */
  this.getChoiceIndex = function (choice, choicesLength) {
    var thisPrototype = Object.getPrototypeOf(this$1);
    if (thisPrototype && thisPrototype.getChoiceIndex) {
      var prototypeGetChoiceIndex = (thisPrototype.getChoiceIndex);
      return (prototypeGetChoiceIndex).call(this$1, choice, choicesLength)
    }

    // Default (old) getChoiceIndex implementation - english-compatible
    var defaultImpl = function (_choice, _choicesLength) {
      _choice = Math.abs(_choice);

      if (_choicesLength === 2) {
        return _choice
          ? _choice > 1
            ? 1
            : 0
          : 1
      }

      return _choice ? Math.min(_choice, 2) : 0
    };

    if (this$1.locale in this$1.pluralizationRules) {
      return this$1.pluralizationRules[this$1.locale].apply(this$1, [choice, choicesLength])
    } else {
      return defaultImpl(choice, choicesLength)
    }
  };


  this._exist = function (message, key) {
    if (!message || !key) { return false }
    if (!isNull(this$1._path.getPathValue(message, key))) { return true }
    // fallback for flat key
    if (message[key]) { return true }
    return false
  };

  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }

  this._initVM({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    dateTimeFormats: dateTimeFormats,
    numberFormats: numberFormats
  });
};

var vue_i18n_esm_prototypeAccessors = { vm: { configurable: true },messages: { configurable: true },dateTimeFormats: { configurable: true },numberFormats: { configurable: true },availableLocales: { configurable: true },locale: { configurable: true },fallbackLocale: { configurable: true },formatFallbackMessages: { configurable: true },missing: { configurable: true },formatter: { configurable: true },silentTranslationWarn: { configurable: true },silentFallbackWarn: { configurable: true },preserveDirectiveContent: { configurable: true },warnHtmlInMessage: { configurable: true },postTranslation: { configurable: true },sync: { configurable: true } };

VueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage (locale, level, message) {
  var paths = [];

  var fn = function (level, locale, message, paths) {
    if (isPlainObject(message)) {
      Object.keys(message).forEach(function (key) {
        var val = message[key];
        if (isPlainObject(val)) {
          paths.push(key);
          paths.push('.');
          fn(level, locale, val, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(key);
          fn(level, locale, val, paths);
          paths.pop();
        }
      });
    } else if (isArray(message)) {
      message.forEach(function (item, index) {
        if (isPlainObject(item)) {
          paths.push(("[" + index + "]"));
          paths.push('.');
          fn(level, locale, item, paths);
          paths.pop();
          paths.pop();
        } else {
          paths.push(("[" + index + "]"));
          fn(level, locale, item, paths);
          paths.pop();
        }
      });
    } else if (isString(message)) {
      var ret = htmlTagMatcher.test(message);
      if (ret) {
        var msg = "Detected HTML in message '" + message + "' of keypath '" + (paths.join('')) + "' at '" + locale + "'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp";
        if (level === 'warn') {
          vue_i18n_esm_warn(msg);
        } else if (level === 'error') {
          vue_i18n_esm_error(msg);
        }
      }
    }
  };

  fn(level, locale, message, paths);
};

VueI18n.prototype._initVM = function _initVM (data) {
  var silent = vue_i18n_esm_Vue.config.silent;
  vue_i18n_esm_Vue.config.silent = true;
  this._vm = new vue_i18n_esm_Vue({ data: data, __VUE18N__INSTANCE__: true });
  vue_i18n_esm_Vue.config.silent = silent;
};

VueI18n.prototype.destroyVM = function destroyVM () {
  this._vm.$destroy();
};

VueI18n.prototype.subscribeDataChanging = function subscribeDataChanging (vm) {
  this._dataListeners.add(vm);
};

VueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging (vm) {
  remove(this._dataListeners, vm);
};

VueI18n.prototype.watchI18nData = function watchI18nData () {
    var this$1 = this;
  return this._vm.$watch('$data', function () {
    var listeners = arrayFrom(this$1._dataListeners);
    var i = listeners.length;
    while(i--) {
      vue_i18n_esm_Vue.nextTick(function () {
        listeners[i] && listeners[i].$forceUpdate();
      });
    }
  }, { deep: true })
};

VueI18n.prototype.watchLocale = function watchLocale (composer) {
  if (!composer) {
    /* istanbul ignore if */
    if (!this._sync || !this._root) { return null }
    var target = this._vm;
    return this._root.$i18n.vm.$watch('locale', function (val) {
      target.$set(target, 'locale', val);
      target.$forceUpdate();
    }, { immediate: true })
  } else {
    // deal with vue-i18n-bridge
    if (!this.__VUE_I18N_BRIDGE__) { return null }
    var self = this;
    var target$1 = this._vm;
    return this.vm.$watch('locale', function (val) {
      target$1.$set(target$1, 'locale', val);
      if (self.__VUE_I18N_BRIDGE__ && composer) {
        composer.locale.value = val;
      }
      target$1.$forceUpdate();
    }, { immediate: true })
  }
};

VueI18n.prototype.onComponentInstanceCreated = function onComponentInstanceCreated (newI18n) {
  if (this._componentInstanceCreatedListener) {
    this._componentInstanceCreatedListener(newI18n, this);
  }
};

vue_i18n_esm_prototypeAccessors.vm.get = function () { return this._vm };

vue_i18n_esm_prototypeAccessors.messages.get = function () { return looseClone(this._getMessages()) };
vue_i18n_esm_prototypeAccessors.dateTimeFormats.get = function () { return looseClone(this._getDateTimeFormats()) };
vue_i18n_esm_prototypeAccessors.numberFormats.get = function () { return looseClone(this._getNumberFormats()) };
vue_i18n_esm_prototypeAccessors.availableLocales.get = function () { return Object.keys(this.messages).sort() };

vue_i18n_esm_prototypeAccessors.locale.get = function () { return this._vm.locale };
vue_i18n_esm_prototypeAccessors.locale.set = function (locale) {
  this._vm.$set(this._vm, 'locale', locale);
};

vue_i18n_esm_prototypeAccessors.fallbackLocale.get = function () { return this._vm.fallbackLocale };
vue_i18n_esm_prototypeAccessors.fallbackLocale.set = function (locale) {
  this._localeChainCache = {};
  this._vm.$set(this._vm, 'fallbackLocale', locale);
};

vue_i18n_esm_prototypeAccessors.formatFallbackMessages.get = function () { return this._formatFallbackMessages };
vue_i18n_esm_prototypeAccessors.formatFallbackMessages.set = function (fallback) { this._formatFallbackMessages = fallback; };

vue_i18n_esm_prototypeAccessors.missing.get = function () { return this._missing };
vue_i18n_esm_prototypeAccessors.missing.set = function (handler) { this._missing = handler; };

vue_i18n_esm_prototypeAccessors.formatter.get = function () { return this._formatter };
vue_i18n_esm_prototypeAccessors.formatter.set = function (formatter) { this._formatter = formatter; };

vue_i18n_esm_prototypeAccessors.silentTranslationWarn.get = function () { return this._silentTranslationWarn };
vue_i18n_esm_prototypeAccessors.silentTranslationWarn.set = function (silent) { this._silentTranslationWarn = silent; };

vue_i18n_esm_prototypeAccessors.silentFallbackWarn.get = function () { return this._silentFallbackWarn };
vue_i18n_esm_prototypeAccessors.silentFallbackWarn.set = function (silent) { this._silentFallbackWarn = silent; };

vue_i18n_esm_prototypeAccessors.preserveDirectiveContent.get = function () { return this._preserveDirectiveContent };
vue_i18n_esm_prototypeAccessors.preserveDirectiveContent.set = function (preserve) { this._preserveDirectiveContent = preserve; };

vue_i18n_esm_prototypeAccessors.warnHtmlInMessage.get = function () { return this._warnHtmlInMessage };
vue_i18n_esm_prototypeAccessors.warnHtmlInMessage.set = function (level) {
    var this$1 = this;

  var orgLevel = this._warnHtmlInMessage;
  this._warnHtmlInMessage = level;
  if (orgLevel !== level && (level === 'warn' || level === 'error')) {
    var messages = this._getMessages();
    Object.keys(messages).forEach(function (locale) {
      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);
    });
  }
};

vue_i18n_esm_prototypeAccessors.postTranslation.get = function () { return this._postTranslation };
vue_i18n_esm_prototypeAccessors.postTranslation.set = function (handler) { this._postTranslation = handler; };

vue_i18n_esm_prototypeAccessors.sync.get = function () { return this._sync };
vue_i18n_esm_prototypeAccessors.sync.set = function (val) { this._sync = val; };

VueI18n.prototype._getMessages = function _getMessages () { return this._vm.messages };
VueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats () { return this._vm.dateTimeFormats };
VueI18n.prototype._getNumberFormats = function _getNumberFormats () { return this._vm.numberFormats };

VueI18n.prototype._warnDefault = function _warnDefault (locale, key, result, vm, values, interpolateMode) {
  if (!isNull(result)) { return result }
  if (this._missing) {
    var missingRet = this._missing.apply(null, [locale, key, vm, values]);
    if (isString(missingRet)) {
      return missingRet
    }
  } else {
    if (false) {}
  }

  if (this._formatFallbackMessages) {
    var parsedArgs = parseArgs.apply(void 0, values);
    return this._render(key, interpolateMode, parsedArgs.params, key)
  } else {
    return key
  }
};

VueI18n.prototype._isFallbackRoot = function _isFallbackRoot (val) {
  return (this._fallbackRootWithEmptyString? !val : isNull(val)) && !isNull(this._root) && this._fallbackRoot
};

VueI18n.prototype._isSilentFallbackWarn = function _isSilentFallbackWarn (key) {
  return this._silentFallbackWarn instanceof RegExp
    ? this._silentFallbackWarn.test(key)
    : this._silentFallbackWarn
};

VueI18n.prototype._isSilentFallback = function _isSilentFallback (locale, key) {
  return this._isSilentFallbackWarn(key) && (this._isFallbackRoot() || locale !== this.fallbackLocale)
};

VueI18n.prototype._isSilentTranslationWarn = function _isSilentTranslationWarn (key) {
  return this._silentTranslationWarn instanceof RegExp
    ? this._silentTranslationWarn.test(key)
    : this._silentTranslationWarn
};

VueI18n.prototype._interpolate = function _interpolate (
  locale,
  message,
  key,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  if (!message) { return null }

  var pathRet = this._path.getPathValue(message, key);
  if (isArray(pathRet) || isPlainObject(pathRet)) { return pathRet }

  var ret;
  if (isNull(pathRet)) {
    /* istanbul ignore else */
    if (isPlainObject(message)) {
      ret = message[key];
      if (!(isString(ret) || isFunction(ret))) {
        if (false) {}
        return null
      }
    } else {
      return null
    }
  } else {
    /* istanbul ignore else */
    if (isString(pathRet) || isFunction(pathRet)) {
      ret = pathRet;
    } else {
      if (false) {}
      return null
    }
  }

  // Check for the existence of links within the translated string
  if (isString(ret) && (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0)) {
    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);
  }

  return this._render(ret, interpolateMode, values, key)
};

VueI18n.prototype._link = function _link (
  locale,
  message,
  str,
  host,
  interpolateMode,
  values,
  visitedLinkStack
) {
  var ret = str;

  // Match all the links within the local
  // We are going to replace each of
  // them with its translation
  var matches = ret.match(linkKeyMatcher);

  // eslint-disable-next-line no-autofix/prefer-const
  for (var idx in matches) {
    // ie compatible: filter custom array
    // prototype method
    if (!matches.hasOwnProperty(idx)) {
      continue
    }
    var link = matches[idx];
    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);
    var linkPrefix = linkKeyPrefixMatches[0];
      var formatterName = linkKeyPrefixMatches[1];

    // Remove the leading @:, @.case: and the brackets
    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');

    if (includes(visitedLinkStack, linkPlaceholder)) {
      if (false) {}
      return ret
    }
    visitedLinkStack.push(linkPlaceholder);

    // Translate the link
    var translated = this._interpolate(
      locale, message, linkPlaceholder, host,
      interpolateMode === 'raw' ? 'string' : interpolateMode,
      interpolateMode === 'raw' ? undefined : values,
      visitedLinkStack
    );

    if (this._isFallbackRoot(translated)) {
      if (false) {}
      /* istanbul ignore if */
      if (!this._root) { throw Error('unexpected error') }
      var root = this._root.$i18n;
      translated = root._translate(
        root._getMessages(), root.locale, root.fallbackLocale,
        linkPlaceholder, host, interpolateMode, values
      );
    }
    translated = this._warnDefault(
      locale, linkPlaceholder, translated, host,
      isArray(values) ? values : [values],
      interpolateMode
    );

    if (this._modifiers.hasOwnProperty(formatterName)) {
      translated = this._modifiers[formatterName](translated);
    } else if (defaultModifiers.hasOwnProperty(formatterName)) {
      translated = defaultModifiers[formatterName](translated);
    }

    visitedLinkStack.pop();

    // Replace the link with the translated
    ret = !translated ? ret : ret.replace(link, translated);
  }

  return ret
};

VueI18n.prototype._createMessageContext = function _createMessageContext (values, formatter, path, interpolateMode) {
    var this$1 = this;

  var _list = isArray(values) ? values : [];
  var _named = isObject(values) ? values : {};
  var list = function (index) { return _list[index]; };
  var named = function (key) { return _named[key]; };
  var messages = this._getMessages();
  var locale = this.locale;

  return {
    list: list,
    named: named,
    values: values,
    formatter: formatter,
    path: path,
    messages: messages,
    locale: locale,
    linked: function (linkedKey) { return this$1._interpolate(locale, messages[locale] || {}, linkedKey, null, interpolateMode, undefined, [linkedKey]); }
  }
};

VueI18n.prototype._render = function _render (message, interpolateMode, values, path) {
  if (isFunction(message)) {
    return message(
      this._createMessageContext(values, this._formatter || defaultFormatter, path, interpolateMode)
    )
  }

  var ret = this._formatter.interpolate(message, values, path);

  // If the custom formatter refuses to work - apply the default one
  if (!ret) {
    ret = defaultFormatter.interpolate(message, values, path);
  }

  // if interpolateMode is **not** 'string' ('row'),
  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter
  return interpolateMode === 'string' && !isString(ret) ? ret.join('') : ret
};

VueI18n.prototype._appendItemToChain = function _appendItemToChain (chain, item, blocks) {
  var follow = false;
  if (!includes(chain, item)) {
    follow = true;
    if (item) {
      follow = item[item.length - 1] !== '!';
      item = item.replace(/!/g, '');
      chain.push(item);
      if (blocks && blocks[item]) {
        follow = blocks[item];
      }
    }
  }
  return follow
};

VueI18n.prototype._appendLocaleToChain = function _appendLocaleToChain (chain, locale, blocks) {
  var follow;
  var tokens = locale.split('-');
  do {
    var item = tokens.join('-');
    follow = this._appendItemToChain(chain, item, blocks);
    tokens.splice(-1, 1);
  } while (tokens.length && (follow === true))
  return follow
};

VueI18n.prototype._appendBlockToChain = function _appendBlockToChain (chain, block, blocks) {
  var follow = true;
  for (var i = 0; (i < block.length) && (vue_i18n_esm_isBoolean(follow)); i++) {
    var locale = block[i];
    if (isString(locale)) {
      follow = this._appendLocaleToChain(chain, locale, blocks);
    }
  }
  return follow
};

VueI18n.prototype._getLocaleChain = function _getLocaleChain (start, fallbackLocale) {
  if (start === '') { return [] }

  if (!this._localeChainCache) {
    this._localeChainCache = {};
  }

  var chain = this._localeChainCache[start];
  if (!chain) {
    if (!fallbackLocale) {
      fallbackLocale = this.fallbackLocale;
    }
    chain = [];

    // first block defined by start
    var block = [start];

    // while any intervening block found
    while (isArray(block)) {
      block = this._appendBlockToChain(
        chain,
        block,
        fallbackLocale
      );
    }

    // last block defined by default
    var defaults;
    if (isArray(fallbackLocale)) {
      defaults = fallbackLocale;
    } else if (isObject(fallbackLocale)) {
      /* $FlowFixMe */
      if (fallbackLocale['default']) {
        defaults = fallbackLocale['default'];
      } else {
        defaults = null;
      }
    } else {
      defaults = fallbackLocale;
    }

    // convert defaults to array
    if (isString(defaults)) {
      block = [defaults];
    } else {
      block = defaults;
    }
    if (block) {
      this._appendBlockToChain(
        chain,
        block,
        null
      );
    }
    this._localeChainCache[start] = chain;
  }
  return chain
};

VueI18n.prototype._translate = function _translate (
  messages,
  locale,
  fallback,
  key,
  host,
  interpolateMode,
  args
) {
  var chain = this._getLocaleChain(locale, fallback);
  var res;
  for (var i = 0; i < chain.length; i++) {
    var step = chain[i];
    res =
      this._interpolate(step, messages[step], key, host, interpolateMode, args, [key]);
    if (!isNull(res)) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        vue_i18n_esm_warn(("Fall back to translate the keypath '" + key + "' with '" + step + "' locale."));
      }
      return res
    }
  }
  return null
};

VueI18n.prototype._t = function _t (key, _locale, messages, host) {
    var ref;

    var values = [], len = arguments.length - 4;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 4 ];
  if (!key) { return '' }

  var parsedArgs = parseArgs.apply(void 0, values);
  if(this._escapeParameterHtml) {
    parsedArgs.params = escapeParams(parsedArgs.params);
  }

  var locale = parsedArgs.locale || _locale;

  var ret = this._translate(
    messages, locale, this.fallbackLocale, key,
    host, 'string', parsedArgs.params
  );
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return (ref = this._root).$t.apply(ref, [ key ].concat( values ))
  } else {
    ret = this._warnDefault(locale, key, ret, host, values, 'string');
    if (this._postTranslation && ret !== null && ret !== undefined) {
      ret = this._postTranslation(ret, key);
    }
    return ret
  }
};

VueI18n.prototype.t = function t (key) {
    var ref;

    var values = [], len = arguments.length - 1;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];
  return (ref = this)._t.apply(ref, [ key, this.locale, this._getMessages(), null ].concat( values ))
};

VueI18n.prototype._i = function _i (key, locale, messages, host, values) {
  var ret =
    this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.i(key, locale, values)
  } else {
    return this._warnDefault(locale, key, ret, host, [values], 'raw')
  }
};

VueI18n.prototype.i = function i (key, locale, values) {
  /* istanbul ignore if */
  if (!key) { return '' }

  if (!isString(locale)) {
    locale = this.locale;
  }

  return this._i(key, locale, this._getMessages(), null, values)
};

VueI18n.prototype._tc = function _tc (
  key,
  _locale,
  messages,
  host,
  choice
) {
    var ref;

    var values = [], len = arguments.length - 5;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 5 ];
  if (!key) { return '' }
  if (choice === undefined) {
    choice = 1;
  }

  var predefined = { 'count': choice, 'n': choice };
  var parsedArgs = parseArgs.apply(void 0, values);
  parsedArgs.params = Object.assign(predefined, parsedArgs.params);
  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];
  return this.fetchChoice((ref = this)._t.apply(ref, [ key, _locale, messages, host ].concat( values )), choice)
};

VueI18n.prototype.fetchChoice = function fetchChoice (message, choice) {
  /* istanbul ignore if */
  if (!message || !isString(message)) { return null }
  var choices = message.split('|');

  choice = this.getChoiceIndex(choice, choices.length);
  if (!choices[choice]) { return message }
  return choices[choice].trim()
};

VueI18n.prototype.tc = function tc (key, choice) {
    var ref;

    var values = [], len = arguments.length - 2;
    while ( len-- > 0 ) values[ len ] = arguments[ len + 2 ];
  return (ref = this)._tc.apply(ref, [ key, this.locale, this._getMessages(), null, choice ].concat( values ))
};

VueI18n.prototype._te = function _te (key, locale, messages) {
    var args = [], len = arguments.length - 3;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 3 ];

  var _locale = parseArgs.apply(void 0, args).locale || locale;
  return this._exist(messages[_locale], key)
};

VueI18n.prototype.te = function te (key, locale) {
  return this._te(key, this.locale, this._getMessages(), locale)
};

VueI18n.prototype.getLocaleMessage = function getLocaleMessage (locale) {
  return looseClone(this._vm.messages[locale] || {})
};

VueI18n.prototype.setLocaleMessage = function setLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, message);
};

VueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage (locale, message) {
  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {
    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);
  }
  this._vm.$set(this._vm.messages, locale, merge(
    typeof this._vm.messages[locale] !== 'undefined' && Object.keys(this._vm.messages[locale]).length
      ? Object.assign({}, this._vm.messages[locale])
      : {},
    message
  ));
};

VueI18n.prototype.getDateTimeFormat = function getDateTimeFormat (locale) {
  return looseClone(this._vm.dateTimeFormats[locale] || {})
};

VueI18n.prototype.setDateTimeFormat = function setDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, format);
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat (locale, format) {
  this._vm.$set(this._vm.dateTimeFormats, locale, merge(this._vm.dateTimeFormats[locale] || {}, format));
  this._clearDateTimeFormat(locale, format);
};

VueI18n.prototype._clearDateTimeFormat = function _clearDateTimeFormat (locale, format) {
  // eslint-disable-next-line no-autofix/prefer-const
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._dateTimeFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._dateTimeFormatters[id];
  }
};

VueI18n.prototype._localizeDateTime = function _localizeDateTime (
  value,
  locale,
  fallback,
  dateTimeFormats,
  key
) {
  var _locale = locale;
  var formats = dateTimeFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = dateTimeFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        vue_i18n_esm_warn(("Fall back to '" + step + "' datetime formats from '" + current + "' datetime formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];
    var id = _locale + "__" + key;
    var formatter = this._dateTimeFormatters[id];
    if (!formatter) {
      formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);
    }
    return formatter.format(value)
  }
};

VueI18n.prototype._d = function _d (value, locale, key) {
  /* istanbul ignore if */
  if (false) {}

  if (!key) {
    return new Intl.DateTimeFormat(locale).format(value)
  }

  var ret =
    this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.d(value, key, locale)
  } else {
    return ret || ''
  }
};

VueI18n.prototype.d = function d (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._d(value, locale, key)
};

VueI18n.prototype.getNumberFormat = function getNumberFormat (locale) {
  return looseClone(this._vm.numberFormats[locale] || {})
};

VueI18n.prototype.setNumberFormat = function setNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, format);
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype.mergeNumberFormat = function mergeNumberFormat (locale, format) {
  this._vm.$set(this._vm.numberFormats, locale, merge(this._vm.numberFormats[locale] || {}, format));
  this._clearNumberFormat(locale, format);
};

VueI18n.prototype._clearNumberFormat = function _clearNumberFormat (locale, format) {
  // eslint-disable-next-line no-autofix/prefer-const
  for (var key in format) {
    var id = locale + "__" + key;

    if (!this._numberFormatters.hasOwnProperty(id)) {
      continue
    }

    delete this._numberFormatters[id];
  }
};

VueI18n.prototype._getNumberFormatter = function _getNumberFormatter (
  value,
  locale,
  fallback,
  numberFormats,
  key,
  options
) {
  var _locale = locale;
  var formats = numberFormats[_locale];

  var chain = this._getLocaleChain(locale, fallback);
  for (var i = 0; i < chain.length; i++) {
    var current = _locale;
    var step = chain[i];
    formats = numberFormats[step];
    _locale = step;
    // fallback locale
    if (isNull(formats) || isNull(formats[key])) {
      if (step !== locale && "production" !== 'production' && !this._isSilentTranslationWarn(key) && !this._isSilentFallbackWarn(key)) {
        vue_i18n_esm_warn(("Fall back to '" + step + "' number formats from '" + current + "' number formats."));
      }
    } else {
      break
    }
  }

  if (isNull(formats) || isNull(formats[key])) {
    return null
  } else {
    var format = formats[key];

    var formatter;
    if (options) {
      // If options specified - create one time number formatter
      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));
    } else {
      var id = _locale + "__" + key;
      formatter = this._numberFormatters[id];
      if (!formatter) {
        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);
      }
    }
    return formatter
  }
};

VueI18n.prototype._n = function _n (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (false) {}
    return ''
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.format(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.format(value);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n.n(value, Object.assign({}, { key: key, locale: locale }, options))
  } else {
    return ret || ''
  }
};

VueI18n.prototype.n = function n (value) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  var locale = this.locale;
  var key = null;
  var options = null;

  if (args.length === 1) {
    if (isString(args[0])) {
      key = args[0];
    } else if (isObject(args[0])) {
      if (args[0].locale) {
        locale = args[0].locale;
      }
      if (args[0].key) {
        key = args[0].key;
      }

      // Filter out number format options only
      options = Object.keys(args[0]).reduce(function (acc, key) {
          var obj;

        if (includes(numberFormatKeys, key)) {
          return Object.assign({}, acc, ( obj = {}, obj[key] = args[0][key], obj ))
        }
        return acc
      }, null);
    }
  } else if (args.length === 2) {
    if (isString(args[0])) {
      key = args[0];
    }
    if (isString(args[1])) {
      locale = args[1];
    }
  }

  return this._n(value, locale, key, options)
};

VueI18n.prototype._ntp = function _ntp (value, locale, key, options) {
  /* istanbul ignore if */
  if (!VueI18n.availabilities.numberFormat) {
    if (false) {}
    return []
  }

  if (!key) {
    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);
    return nf.formatToParts(value)
  }

  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);
  var ret = formatter && formatter.formatToParts(value);
  if (this._isFallbackRoot(ret)) {
    if (false) {}
    /* istanbul ignore if */
    if (!this._root) { throw Error('unexpected error') }
    return this._root.$i18n._ntp(value, locale, key, options)
  } else {
    return ret || []
  }
};

Object.defineProperties( VueI18n.prototype, vue_i18n_esm_prototypeAccessors );

var availabilities;
// $FlowFixMe
Object.defineProperty(VueI18n, 'availabilities', {
  get: function get () {
    if (!availabilities) {
      var intlDefined = typeof Intl !== 'undefined';
      availabilities = {
        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',
        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined'
      };
    }

    return availabilities
  }
});

VueI18n.install = vue_i18n_esm_install;
VueI18n.version = '8.27.0';

/* harmony default export */ var vue_i18n_esm = (VueI18n);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-m-message/src/message-template.vue?vue&type=template&id=7da7e992&
var message_templatevue_type_template_id_7da7e992_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('transition',{attrs:{"name":"m-message-fade","mode":"in-out"}},[_c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.show),expression:"show"}],staticClass:"m-message-wrapper",class:_vm.wrapperClassName,style:({
      width: _vm.width
    })},[_c('mmessage',{class:[_vm.type && 'm-message--' + _vm.type, _vm.className],attrs:{"event":_vm.event,"chat":_vm.chat,"closable":_vm.showClose,"is-collapsed":_vm.isCollapsed,"close-handler":_vm.close,"click-handler":_vm.click,"title":_vm.title,"supportHTML":_vm.supportHTML},nativeOn:{"mouseenter":function($event){return _vm.clearTimer.apply(null, arguments)},"mouseleave":function($event){return _vm.startTimer.apply(null, arguments)}}},[_c('template',{slot:"icon"},[(_vm.iconImg)?_c('img',{staticClass:"m-message--icon",attrs:{"src":_vm.iconImg}}):(_vm.type)?_c('icon',{staticClass:"m-message--icon",attrs:{"name":_vm.type}}):_vm._e()],1)],2)],1)])}
var message_templatevue_type_template_id_7da7e992_staticRenderFns = []


// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/message-template.vue?vue&type=template&id=7da7e992&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-m-message/src/mmessage.vue?vue&type=template&id=03371e2c&
var mmessagevue_type_template_id_03371e2c_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.visible),expression:"visible"}],staticClass:"m-message"},[(_vm.iconImg || _vm.$slots.icon)?_c('div',{staticClass:"m-message-icons",on:{"click":_vm.handleClick}},[(_vm.iconImg)?_c('img',{staticClass:"m-message--icon",attrs:{"src":_vm.iconImg,"alt":"Img"}}):_vm._t("icon")],2):_vm._e(),_c('div',{staticClass:"m-message-content",on:{"click":_vm.handleClick}},[(_vm.title || _vm.$slots.title)?_c('div',{staticClass:"m-message--title"},[_vm._t("title",function(){return [_vm._v(" "+_vm._s(_vm.title)+" ")]})],2):_vm._e(),(_vm.event && _vm.chat)?_c('event',{attrs:{"event":_vm.event,"chat":_vm.chat,"preview":true}}):_c('div',{staticClass:"m-message--body"},[_vm._t("message")],2)],1)])}
var mmessagevue_type_template_id_03371e2c_staticRenderFns = []


// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/mmessage.vue?vue&type=template&id=03371e2c&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-m-message/src/mmessage.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var mmessagevue_type_script_lang_js_ = ({
  name: 'm-mmessage',
  props: {
    event: event,
    iconImg: String,
    closable: Boolean,
    closeHandler: Function,
    clickHandler: Function,
    chat: {},
    title: String,
    supportHTML: Boolean,
    // content support html
    isCollapsed: {
      type: Boolean,
      default: true
    }
  },

  data() {
    return {
      visible: true,
      collapsed: this.isCollapsed
    };
  },

  components: {
    'event': () => Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "6167"))
  },
  methods: {
    triggerCollapse() {
      this.collapsed = !this.collapsed;
    },

    handleClick: function () {
      if (typeof this.clickHandler === 'function') this.clickHandler(this.close);
    },

    close() {
      this.visible = false;
    },

    handleClose() {
      if (typeof this.closeHandler === 'function') this.closeHandler(this.close);else this.close();
    }

  },

  mounted() {}

});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/mmessage.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_mmessagevue_type_script_lang_js_ = (mmessagevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/mmessage.vue





/* normalize component */

var mmessage_component = Object(componentNormalizer["a" /* default */])(
  src_mmessagevue_type_script_lang_js_,
  mmessagevue_type_template_id_03371e2c_render,
  mmessagevue_type_template_id_03371e2c_staticRenderFns,
  false,
  null,
  null,
  null
  ,true
)

/* harmony default export */ var mmessage = (mmessage_component.exports);
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/icon.js


const icons = {};
const addIcon = function (name, options) {
  icons[name] = options;
};
const Icon = {
  name: 'Icon',
  props: {
    name: String,
    color: String
  },
  computed: {
    svg() {
      return icons[this.name];
    }

  },

  // eslint-disable-next-line
  render(h) {
    const svg = this.svg;

    if (!svg) {
      // eslint-disable-next-line
      console.warn(`The name of '${this.name}' could not be found.`);
      return `<span class="m-svg-icon"></span>`;
    }

    const style = {
      color: this.color ? this.color : svg.fill ? svg.fill : null
    };
    return `<span class={['m-svg-icon', 'm-svg-icon--' + this.name]}>
        <svg
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          viewBox={svg.viewBox}
          style={style}
          class={svg.class}>
          { svg.defs && <defs domPropsInnerHTML={svg.defs}></defs> }
          { svg.path && <path fill="currentColor" d={svg.path} /> }
          { svg.html && <g domPropsInnerHTML={svg.html}></g> }
          {this.$slots.default}
        </svg>
      </span>`;
  }

};
Icon.add = addIcon;
/* harmony default export */ var icon = (Icon);
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/svgs/info.js
/* harmony default export */ var svgs_info = ({
  name: 'info',
  fill: '#1CADF2',
  viewBox: '0 0 1024 1024',
  path: 'M512,72C269,72,72,269,72,512s197,440,440,440s440-197,440-440S755,72,512,72z M581,673.9 c-33.2,49.9-67,88.3-123.8,88.3c-38.8-6.3-54.7-34.1-46.3-62.4L484,457.6c1.8-5.9-1.2-12.3-6.6-14.2c-5.4-1.9-15.9,5.1-25.1,15.1 l-44.2,53.2c-1.2-8.9-0.1-23.7-0.1-29.6c33.2-49.9,87.8-89.2,124.8-89.2c35.2,3.6,51.8,31.7,45.7,62.6l-73.6,243.3 c-1,5.5,1.9,11.1,6.9,12.8c5.4,1.9,16.8-5.1,26-15.1l44.2-53.1C583,652.3,581,667.9,581,673.9z M571.2,357.6 c-28,0-50.6-20.4-50.6-50.4c0-30,22.7-50.3,50.6-50.3c28,0,50.6,20.4,50.6,50.3C621.8,337.3,599.1,357.6,571.2,357.6z'
});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/svgs/success.js
/* harmony default export */ var success = ({
  name: 'success',
  fill: '#17B77E',
  viewBox: '0 0 1024 1024',
  path: 'M512,72C269,72,72,269,72,512s197,440,440,440s440-197,440-440S755,72,512,72L512,72z M758.9,374 c-48.5,48.6-81.2,76.9-172.3,186.8c-52.6,63.4-102.3,131.5-102.7,132L462.1,720c-4.6,6.1-13.5,6.8-19.1,1.6L267.9,558.9 c-17.8-16.5-18.8-44.4-2.3-62.2s44.4-18.8,62.2-2.3l104.9,97.5c5.5,5.1,14.1,4.5,18.9-1.3c16.2-20.1,38.4-44.5,62.4-68.6 c90.2-90.9,145.6-139.7,175.2-161.3c36-26.2,77.3-48.6,87.3-36.2C792,343.9,782.5,350.3,758.9,374L758.9,374z'
});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/svgs/error.js
/* harmony default export */ var svgs_error = ({
  name: 'error',
  fill: '#F56C6C',
  viewBox: '0 0 1024 1024',
  path: 'M512,952C269,952,72,755,72,512S269,72,512,72s440,197,440,440S755,952,512,952z M579.7,512l101.6-101.6 c18.7-18.7,18.7-49,0-67.7c-18.7-18.7-49-18.7-67.7,0l0,0L512,444.3L410.4,342.7c-18.7-18.7-49-18.7-67.7,0s-18.7,49,0,67.7 L444.3,512L342.7,613.6c-18.7,18.7-18.7,49,0,67.7c18.7,18.7,49,18.7,67.7,0L512,579.7l101.6,101.6c18.7,18.7,49,18.7,67.7,0 c18.7-18.7,18.7-49,0-67.7L579.7,512z'
});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/svgs/warning.js
/* harmony default export */ var warning = ({
  name: 'warning',
  fill: '#FFC603',
  viewBox: '0 0 1024 1024',
  path: 'M512,952C269,952,72,755,72,512S269,72,512,72s440,197,440,440S755,952,512,952z M510,770.8 c30.4,0,55-24.6,55-55s-24.6-55-55-55s-55,24.6-55,55S479.6,770.8,510,770.8z M509.8,255.3c-39.3,0-71.2,31.9-71.2,71.2 c0,3.1,0.2,6.2,0.6,9.3L472.4,588c2.5,19.3,18.9,33.7,38.4,33.7c19.4,0,35.8-14.4,38.2-33.7l31.8-252.2c5-39.2-22.8-75-62-79.9 C515.9,255.5,512.8,255.3,509.8,255.3z'
});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/svgs/loading.js
/* harmony default export */ var svgs_loading = ({
  name: 'loading',
  viewBox: '0 0 50 50',
  class: 'm-loading-icon m-loading-wipe',
  defs: `<style>
    .m-loading-icon {
      stroke: #343640;
      stroke-width: 3.5;
      stroke-linecap: round;
      background: none;
      vertical-align: middle;
    }
    .m-loading-icon .m-loading-icon-bg-path{
      fill: none;
      stroke: #F2F2F2;
    }
    .m-loading-icon .m-loading-icon-active-path{
      fill: none;
      stroke: #20a0ff;
      transform-origin: 50% 50%;
    }
    .m-loading-wipe .m-loading-icon-active-path{
      stroke-dasharray: 90, 150;
      stroke-dashoffset: 0;
      animation: loading-wipe 1.5s ease-in-out infinite, loading-rotate 2s linear infinite;
    }
    .m-loading-default .m-loading-icon-active-path{
      stroke-dasharray: 60, 150;
      animation: loading-rotate 0.8s linear infinite;
    }

    @keyframes loading-rotate{
      to{transform:rotate(1turn)}
    }
    @keyframes loading-wipe{
      0%{
        stroke-dasharray:1,200;
        stroke-dashoffset:0;
      }
      50%{
        stroke-dasharray:90,150;
        stroke-dashoffset:-40px;
      }
      to{
        stroke-dasharray:90,150;
        stroke-dashoffset:-120px;
      }
    }
  </style>`,
  html: '<circle cx="25" cy="25" r="20" class="m-loading-icon-bg-path"></circle><circle cx="25" cy="25" r="20" class="m-loading-icon-active-path"></circle>'
});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/icon/index.js






icon.add(svgs_info.name, svgs_info);
icon.add(success.name, success);
icon.add(svgs_error.name, svgs_error);
icon.add(warning.name, warning);
icon.add(svgs_loading.name, svgs_loading);
/* harmony default export */ var src_icon = (icon);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-m-message/src/message-template.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var message_templatevue_type_script_lang_js_ = ({
  components: {
    Icon: src_icon,
    mmessage: mmessage
  },

  data() {
    return {
      show: false,
      type: 'info',
      iconImg: '',
      title: '',
      message: {},
      roomId: '',
      event: null,
      chat: null,
      duration: 3000,
      showClose: false,
      isCollapsed: false,
      width: '',
      className: '',
      wrapperClassName: '',
      supportHTML: false,
      onClose: null,
      onClick: null,
      timer: null,
      closed: false
    };
  },

  watch: {
    closed(val) {
      if (val) {
        this.show = false;
        this.$el.addEventListener('animationend', this.destroyElement);
      }
    }

  },
  methods: {
    close() {
      this.closed = true;

      if (typeof this.onClose === 'function') {
        this.onClose(this);
      }
    },

    click() {
      if (typeof this.onClick === 'function') {
        this.onClick(this);
      }
    },

    clearTimer() {
      clearTimeout(this.timer);
    },

    startTimer() {
      if (this.duration > 0 && this.type !== 'loading') {
        this.timer = setTimeout(() => {
          if (!this.closed) {
            this.close();
          }
        }, this.duration);
      }
    },

    destroyElement() {
      this.$el.removeEventListener('transitionend', this.destroyElement);
      this.$destroy(true);
      this.$el.parentNode.removeChild(this.$el);
    }

  },

  mounted() {
    if (this.type !== 'loading') {
      this.startTimer();

      if (this.duration <= 0) {
        this.showClose = true;
      }
    }
  }

});
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/message-template.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_message_templatevue_type_script_lang_js_ = (message_templatevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/message-template.vue





/* normalize component */

var message_template_component = Object(componentNormalizer["a" /* default */])(
  src_message_templatevue_type_script_lang_js_,
  message_templatevue_type_template_id_7da7e992_render,
  message_templatevue_type_template_id_7da7e992_staticRenderFns,
  false,
  null,
  null,
  null
  ,true
)

/* harmony default export */ var message_template = (message_template_component.exports);
// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/message.js


const MessageConstructor = vue_esm["default"].extend(message_template);
const instances = [];
let message_count = 1;
const containers = {};

const Message = function (options) {
  let userOnClose = options.onClose;
  let userOnClick = options.onClick;
  const position = options.position || 'top-center';
  const hasMask = options.hasMask || false;
  const containerKey = position + (hasMask ? '-mask' : '');
  let containerEl = containers[containerKey];

  if (!containerEl) {
    containerEl = containers[containerKey] = document.createElement('div');
    containerEl.className = ['m-message-container', 'is-' + position, hasMask ? 'has-mask' : ''].filter(function (e) {
      return !!e;
    }).join(' ');
    document.body.appendChild(containerEl);
  }

  if (options.zIndex) {
    containerEl.style.zIndex = options.zIndex;
  }

  const id = message_count++;

  options.onClose = function () {
    Message.close(id, userOnClose);
  };

  options.onClick = function () {
    Message.click(id, userOnClick, userOnClose);
  };

  const instance = new MessageConstructor({
    el: document.createElement('div'),
    data: options
  });
  instance.id = id;
  instance.containerKey = containerKey; // for position of bottom-*

  if (position.indexOf('bottom') === 0 && containerEl.firstChild) {
    containerEl.insertBefore(instance.$el, containerEl.firstChild);
  } else {
    containerEl.appendChild(instance.$el);
  } // 挂载后再设置显示才有过渡效果


  instance.show = true;
  instances.push(instance);
  return instance;
};

Message.click = function (id, userOnClick, userOnClose) {
  for (let i = 0, len = instances.length; i < len; i++) {
    if (id === instances[i].id) {
      const {
        containerKey,
        hasMask
      } = instances[i]; // 响应options.onClose

      if (typeof userOnClick === 'function') {
        userOnClick(instances[i]);
      }
    }
  }

  Message.close(id, userOnClose);
};

Message.close = function (id, userOnClose) {
  for (let i = 0, len = instances.length; i < len; i++) {
    if (id === instances[i].id) {
      const {
        containerKey,
        hasMask
      } = instances[i]; // 响应options.onClose

      if (typeof userOnClose === 'function') {
        userOnClose(instances[i]);
      }

      instances[i] = null;
      instances.splice(i, 1);
      const index = instances.findIndex(function (e) {
        return e.containerKey === containerKey;
      }); // 如果开启遮罩，300ms 后移除容器（不移除白屏时间太长）

      if (hasMask && index === -1) {
        setTimeout(function () {
          containers[containerKey].remove();
          containers[containerKey] = null;
        }, 300);
      }

      break;
    }
  }

  setTimeout(function () {
    // 当前没有消息后，移除容器
    if (instances.length === 0) {
      for (let type in containers) {
        if (containers[type]) {
          containers[type].remove();
          containers[type] = null;
        }
      }
    }
  }, 300);
};

Message.closeAll = function () {
  for (let i = instances.length - 1; i >= 0; i--) {
    instances[i].close();
  }
};

const types = ['info', 'success', 'error', 'warning', 'loading'];
types.forEach(type => {
  Message[type] = function (options) {
    options = typeof options === 'string' ? {
      message: options
    } : options;
    return Message({ ...options,
      type
    });
  };
});
/* harmony default export */ var message = (Message);
// EXTERNAL MODULE: ./src/editedplugins/vue-m-message/src/asd.css
var asd = __webpack_require__("a45a");

// CONCATENATED MODULE: ./src/editedplugins/vue-m-message/src/index.js




message.install = function (Vue, options) {
  if (options && options.name) {
    Vue.prototype[`$${options.name}`] = message;
  } else {
    Vue.prototype.$message = message;
  }
};

const MMessage = mmessage;
/* harmony default export */ var vue_m_message_src = (message);
// EXTERNAL MODULE: ./src/editedplugins/vue-m-message/dist/index.css
var dist = __webpack_require__("2e4b");

// EXTERNAL MODULE: ./node_modules/vue2-touch-events/index.js
var vue2_touch_events = __webpack_require__("0086");
var vue2_touch_events_default = /*#__PURE__*/__webpack_require__.n(vue2_touch_events);

// EXTERNAL MODULE: ./node_modules/vuejs-dialog/dist/vuejs-dialog.min.js
var vuejs_dialog_min = __webpack_require__("03a5");
var vuejs_dialog_min_default = /*#__PURE__*/__webpack_require__.n(vuejs_dialog_min);

// EXTERNAL MODULE: ./node_modules/vue-js-toggle-button/dist/index.js
var vue_js_toggle_button_dist = __webpack_require__("f206");
var vue_js_toggle_button_dist_default = /*#__PURE__*/__webpack_require__.n(vue_js_toggle_button_dist);

// EXTERNAL MODULE: ./src/components/events/event/index.vue + 54 modules
var events_event = __webpack_require__("6167");

// EXTERNAL MODULE: ./node_modules/vuejs-dialog/dist/vuejs-dialog.min.css
var dist_vuejs_dialog_min = __webpack_require__("c5c5");

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
var asyncToGenerator = __webpack_require__("1da1");

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
var defineProperty = __webpack_require__("ade3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.typed-array.at.js
var es_typed_array_at = __webpack_require__("907a");

// CONCATENATED MODULE: ./src/application/mtrxkit.js

var cachestorage = {};

class mtrxkit_MTRXKIT {
  constructor(core, p) {
    if (!p) p = {};
    this.core = core;
  }

  tetatetchat(m_chat) {
    if (!m_chat) return false;
    if (typeof m_chat.tetatet != 'undefined') return m_chat.tetatet;
    var users = this.core.mtrx.chatUsersInfo(m_chat.roomId);
    var tt = false;

    if (users.length == 2) {
      tt = m_chat.name == '#' + this.tetatetid(users[0], users[1]);
    }

    if (users.length > 1) m_chat.tetatet = tt;
    return tt;
  }

  tetatetid(user1, user2) {
    var seed = 2;
    if (user1.id == user2.id) return null;
    var id = parseInt(user1.id, 16) * parseInt(user2.id, 16) * seed;
    if (cachestorage[id]) return cachestorage[id];
    var hash = functions["a" /* default */].sha224(id.toString()).toString('hex');
    cachestorage[id] = hash;
    return hash;
  }

  unknowngroupusers(m_chat) {
    return m_chat && m_chat._selfMembership === 'invite' && !m_chat.summary.members && !this.tetatetchat(this.m_chat);
  }

  usersFromChats(m_chats) {
    var users = {};

    _.each(m_chats, chat => {
      users[chat.roomId] = _.map(_.uniq([].concat(_.toArray(chat.currentState.members), chat.summary.members || []), r => {
        return r.userId;
      }), function (r) {
        return {
          userId: functions["a" /* default */].getmatrixid(r.userId),
          membership: r.membership,
          powerLevel: r.powerLevel
        };
      });
    });

    return users;
  }

  prepareChat(m_chat) {
    return this.usersInfoForChatsStore([m_chat]).then(() => {
      return this.core.pcrypto.addroom(m_chat);
    });
  }

  fillContacts(m_chats) {
    m_chats = _.filter(m_chats, ch => {
      return ch._selfMembership == 'join' && ch.name.length == 57;
    });
    return this.usersInfoForChatsStore(m_chats).then(i => {
      this.core.store.commit('SET_CONTACTS_FROM_MATRIX', _.filter(i, m => {
        return !this.core.user.userinfo || m.id !== this.core.user.userinfo.id;
      }));
    });
  }

  usersInfoForChatsStore(m_chats, reload) {
    return this.usersInfoForChats(m_chats, reload).then(i => {
      this.core.store.commit('SET_CHATS_USERS', this.usersFromChats(m_chats));
      return Promise.resolve(i);
    }).catch(e => {
      return Promise.resolve();
    });
  }

  allchatmembers(m_chats, reload, withinvite) {
    var members = [];
    var promises = [];

    if (withinvite) {
      var promises = _.map(m_chats, chat => {
        if (chat._selfMembership === 'invite' && (!chat.summary.members || reload) && !chat.summary.membersloading) {
          chat.summary.membersloading = true;
          return chat._loadMembersFromServer().then(r => {
            chat.summary.membersloading = false;
            chat.summary.members = _.map(r, user => {
              return {
                name: functions["a" /* default */].getmatrixid(user.state_key),
                membership: user.content.membership,
                user: user,
                userId: user.state_key,
                powerLevel: user.content.powerLevel || 0
              };
            });

            if (chat._selfMembership === 'invite' && this.core.user.userinfo) {
              if (!_.find(chat.summary.members, m => {
                return m.userId == this.core.user.matrixId(this.core.user.userinfo.id);
              })) {
                chat.summary.members.push({
                  name: this.core.user.userinfo.id,
                  membership: 'invite',
                  user: this.core.user.userinfo,
                  userId: this.core.user.matrixId(this.core.user.userinfo.id),
                  powerLevel: 0
                });
              }
            }

            return Promise.resolve();
          }).catch(e => {
            chat.summary.membersloading = false;
            return Promise.resolve();
          });
        }

        return Promise.resolve();
      });
    }

    return Promise.all(promises).then(r => {
      _.each(m_chats, chat => {
        members = members.concat(_.toArray(chat.currentState.members), chat.summary.members || []);
      });

      members = _.uniq(members, function (m) {
        return m.userId;
      });
      return Promise.resolve(members);
    });
  }

  usersInfoForChats(m_chats, reload) {
    /// TODO FILTER CONTACTS
    return this.allchatmembers(m_chats, reload).then(members => {
      return this.usersInfo(members, reload);
    });
  }

  usersInfoById(id) {
    var ids = [functions["a" /* default */].getmatrixid(id)];
    return this.core.user.usersInfo(ids, false).then(r => {
      return Promise.resolve(r[0]);
    });
  }

  usersInfo(members, reload) {
    var ids = _.map(members, function (m) {
      return functions["a" /* default */].getmatrixid(m.userId);
    });

    ids = _.uniq(ids);
    return this.core.user.usersInfo(ids, false, reload);
  }

  groupId(users) {
    let id = [];
    let idForInviting = [];
    let self = this;
    users.forEach(user => {
      idForInviting.push(this.core.user.matrixId(user.id));
    });
    users.forEach(function (user) {
      let idsForHash = parseInt(user.id, 16);
      id.push(idsForHash);
    });
    const groupNameId = id.reduce((product, n) => product * n, 1);
    const mGroupNamId = functions["a" /* default */].makeid(groupNameId);
    let hash = functions["a" /* default */].sha224(mGroupNamId.toString()).toString('hex');
    return {
      hash: hash,
      idForInviting: idForInviting
    };
  }

  groupIdLight(ids) {
    let id = [];
    let idForInviting = [];
    let self = this;
    var domains = [null];
    if (window.chatinvitedomains) domains = [].concat(domains, window.chatinvitedomains);

    _.each(domains, domain => {
      _.each(ids, id => {
        idForInviting.push(this.core.user.matrixId(id, domain));
      });
    });

    _.each(ids, _id => {
      let idsForHash = parseInt(_id, 16);
      id.push(idsForHash);
    });

    const groupNameId = id.reduce((product, n) => product * n, 1);
    const mGroupNamId = functions["a" /* default */].makeid(groupNameId);
    let hash = functions["a" /* default */].sha224(mGroupNamId.toString()).toString('hex');
    return {
      hash: hash,
      idForInviting: idForInviting
    };
  }

  chatIsPublic(chat) {
    var join_rules = chat.currentState.getStateEvents("m.room.join_rules");
    console.log('join_rules', join_rules);
    return _.find(join_rules, v => {
      return functions["a" /* default */].deep(v, 'event.content.join_rule') == 'public';
    }) ? true : false;
  }

}

/* harmony default export */ var mtrxkit = (mtrxkit_MTRXKIT);
// EXTERNAL MODULE: ./src/application/utils/images.js
var utils_images = __webpack_require__("5059");

// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

// CONCATENATED MODULE: ./node_modules/@fingerprintjs/fingerprintjs/dist/fp.esm.js
/**
 * FingerprintJS v3.3.2 - Copyright (c) FingerprintJS, Inc, 2021 (https://fingerprintjs.com)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 *
 * This software contains code from open-source projects:
 * MurmurHash3 by Karan Lyons (https://github.com/karanlyons/murmurHash3.js)
 */



var fp_esm_version = "3.3.2";

function wait(durationMs, resolveWith) {
    return new Promise(function (resolve) { return setTimeout(resolve, durationMs, resolveWith); });
}
function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {
    if (deadlineTimeout === void 0) { deadlineTimeout = Infinity; }
    var requestIdleCallback = window.requestIdleCallback;
    if (requestIdleCallback) {
        // The function `requestIdleCallback` loses the binding to `window` here.
        // `globalThis` isn't always equal `window` (see https://github.com/fingerprintjs/fingerprintjs/issues/683).
        // Therefore, an error can occur. `call(window,` prevents the error.
        return new Promise(function (resolve) { return requestIdleCallback.call(window, function () { return resolve(); }, { timeout: deadlineTimeout }); });
    }
    else {
        return wait(Math.min(fallbackTimeout, deadlineTimeout));
    }
}
function isPromise(value) {
    return value && typeof value.then === 'function';
}
/**
 * Calls a maybe asynchronous function without creating microtasks when the function is synchronous.
 * Catches errors in both cases.
 *
 * If just you run a code like this:
 * ```
 * console.time('Action duration')
 * await action()
 * console.timeEnd('Action duration')
 * ```
 * The synchronous function time can be measured incorrectly because another microtask may run before the `await`
 * returns the control back to the code.
 */
function awaitIfAsync(action, callback) {
    try {
        var returnedValue = action();
        if (isPromise(returnedValue)) {
            returnedValue.then(function (result) { return callback(true, result); }, function (error) { return callback(false, error); });
        }
        else {
            callback(true, returnedValue);
        }
    }
    catch (error) {
        callback(false, error);
    }
}
/**
 * If you run many synchronous tasks without using this function, the JS main loop will be busy and asynchronous tasks
 * (e.g. completing a network request, rendering the page) won't be able to happen.
 * This function allows running many synchronous tasks such way that asynchronous tasks can run too in background.
 */
function forEachWithBreaks(items, callback, loopReleaseInterval) {
    if (loopReleaseInterval === void 0) { loopReleaseInterval = 16; }
    return __awaiter(this, void 0, void 0, function () {
        var lastLoopReleaseTime, i, now;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lastLoopReleaseTime = Date.now();
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < items.length)) return [3 /*break*/, 4];
                    callback(items[i], i);
                    now = Date.now();
                    if (!(now >= lastLoopReleaseTime + loopReleaseInterval)) return [3 /*break*/, 3];
                    lastLoopReleaseTime = now;
                    // Allows asynchronous actions and microtasks to happen
                    return [4 /*yield*/, wait(0)];
                case 2:
                    // Allows asynchronous actions and microtasks to happen
                    _a.sent();
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}

/*
 * Taken from https://github.com/karanlyons/murmurHash3.js/blob/a33d0723127e2e5415056c455f8aed2451ace208/murmurHash3.js
 */
//
// Given two 64bit ints (as an array of two 32bit ints) returns the two
// added together as a 64bit int (as an array of two 32bit ints).
//
function x64Add(m, n) {
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] + n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] + n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] + n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] + n[0];
    o[0] &= 0xffff;
    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
}
//
// Given two 64bit ints (as an array of two 32bit ints) returns the two
// multiplied together as a 64bit int (as an array of two 32bit ints).
//
function x64Multiply(m, n) {
    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
    var o = [0, 0, 0, 0];
    o[3] += m[3] * n[3];
    o[2] += o[3] >>> 16;
    o[3] &= 0xffff;
    o[2] += m[2] * n[3];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[2] += m[3] * n[2];
    o[1] += o[2] >>> 16;
    o[2] &= 0xffff;
    o[1] += m[1] * n[3];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[2] * n[2];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[1] += m[3] * n[1];
    o[0] += o[1] >>> 16;
    o[1] &= 0xffff;
    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];
    o[0] &= 0xffff;
    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
}
//
// Given a 64bit int (as an array of two 32bit ints) and an int
// representing a number of bit positions, returns the 64bit int (as an
// array of two 32bit ints) rotated left by that number of positions.
//
function x64Rotl(m, n) {
    n %= 64;
    if (n === 32) {
        return [m[1], m[0]];
    }
    else if (n < 32) {
        return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];
    }
    else {
        n -= 32;
        return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];
    }
}
//
// Given a 64bit int (as an array of two 32bit ints) and an int
// representing a number of bit positions, returns the 64bit int (as an
// array of two 32bit ints) shifted left by that number of positions.
//
function x64LeftShift(m, n) {
    n %= 64;
    if (n === 0) {
        return m;
    }
    else if (n < 32) {
        return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];
    }
    else {
        return [m[1] << (n - 32), 0];
    }
}
//
// Given two 64bit ints (as an array of two 32bit ints) returns the two
// xored together as a 64bit int (as an array of two 32bit ints).
//
function x64Xor(m, n) {
    return [m[0] ^ n[0], m[1] ^ n[1]];
}
//
// Given a block, returns murmurHash3's final x64 mix of that block.
// (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
// only place where we need to right shift 64bit ints.)
//
function x64Fmix(h) {
    h = x64Xor(h, [0, h[0] >>> 1]);
    h = x64Multiply(h, [0xff51afd7, 0xed558ccd]);
    h = x64Xor(h, [0, h[0] >>> 1]);
    h = x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
    h = x64Xor(h, [0, h[0] >>> 1]);
    return h;
}
//
// Given a string and an optional seed as an int, returns a 128 bit
// hash using the x64 flavor of MurmurHash3, as an unsigned hex.
//
function x64hash128(key, seed) {
    key = key || '';
    seed = seed || 0;
    var remainder = key.length % 16;
    var bytes = key.length - remainder;
    var h1 = [0, seed];
    var h2 = [0, seed];
    var k1 = [0, 0];
    var k2 = [0, 0];
    var c1 = [0x87c37b91, 0x114253d5];
    var c2 = [0x4cf5ad43, 0x2745937f];
    var i;
    for (i = 0; i < bytes; i = i + 16) {
        k1 = [
            (key.charCodeAt(i + 4) & 0xff) |
                ((key.charCodeAt(i + 5) & 0xff) << 8) |
                ((key.charCodeAt(i + 6) & 0xff) << 16) |
                ((key.charCodeAt(i + 7) & 0xff) << 24),
            (key.charCodeAt(i) & 0xff) |
                ((key.charCodeAt(i + 1) & 0xff) << 8) |
                ((key.charCodeAt(i + 2) & 0xff) << 16) |
                ((key.charCodeAt(i + 3) & 0xff) << 24),
        ];
        k2 = [
            (key.charCodeAt(i + 12) & 0xff) |
                ((key.charCodeAt(i + 13) & 0xff) << 8) |
                ((key.charCodeAt(i + 14) & 0xff) << 16) |
                ((key.charCodeAt(i + 15) & 0xff) << 24),
            (key.charCodeAt(i + 8) & 0xff) |
                ((key.charCodeAt(i + 9) & 0xff) << 8) |
                ((key.charCodeAt(i + 10) & 0xff) << 16) |
                ((key.charCodeAt(i + 11) & 0xff) << 24),
        ];
        k1 = x64Multiply(k1, c1);
        k1 = x64Rotl(k1, 31);
        k1 = x64Multiply(k1, c2);
        h1 = x64Xor(h1, k1);
        h1 = x64Rotl(h1, 27);
        h1 = x64Add(h1, h2);
        h1 = x64Add(x64Multiply(h1, [0, 5]), [0, 0x52dce729]);
        k2 = x64Multiply(k2, c2);
        k2 = x64Rotl(k2, 33);
        k2 = x64Multiply(k2, c1);
        h2 = x64Xor(h2, k2);
        h2 = x64Rotl(h2, 31);
        h2 = x64Add(h2, h1);
        h2 = x64Add(x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
    }
    k1 = [0, 0];
    k2 = [0, 0];
    switch (remainder) {
        case 15:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 14)], 48));
        // fallthrough
        case 14:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 13)], 40));
        // fallthrough
        case 13:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 12)], 32));
        // fallthrough
        case 12:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 11)], 24));
        // fallthrough
        case 11:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 10)], 16));
        // fallthrough
        case 10:
            k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 9)], 8));
        // fallthrough
        case 9:
            k2 = x64Xor(k2, [0, key.charCodeAt(i + 8)]);
            k2 = x64Multiply(k2, c2);
            k2 = x64Rotl(k2, 33);
            k2 = x64Multiply(k2, c1);
            h2 = x64Xor(h2, k2);
        // fallthrough
        case 8:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 7)], 56));
        // fallthrough
        case 7:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 6)], 48));
        // fallthrough
        case 6:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 5)], 40));
        // fallthrough
        case 5:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 4)], 32));
        // fallthrough
        case 4:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 3)], 24));
        // fallthrough
        case 3:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 2)], 16));
        // fallthrough
        case 2:
            k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 1)], 8));
        // fallthrough
        case 1:
            k1 = x64Xor(k1, [0, key.charCodeAt(i)]);
            k1 = x64Multiply(k1, c1);
            k1 = x64Rotl(k1, 31);
            k1 = x64Multiply(k1, c2);
            h1 = x64Xor(h1, k1);
        // fallthrough
    }
    h1 = x64Xor(h1, [0, key.length]);
    h2 = x64Xor(h2, [0, key.length]);
    h1 = x64Add(h1, h2);
    h2 = x64Add(h2, h1);
    h1 = x64Fmix(h1);
    h2 = x64Fmix(h2);
    h1 = x64Add(h1, h2);
    h2 = x64Add(h2, h1);
    return (('00000000' + (h1[0] >>> 0).toString(16)).slice(-8) +
        ('00000000' + (h1[1] >>> 0).toString(16)).slice(-8) +
        ('00000000' + (h2[0] >>> 0).toString(16)).slice(-8) +
        ('00000000' + (h2[1] >>> 0).toString(16)).slice(-8));
}

/**
 * Converts an error object to a plain object that can be used with `JSON.stringify`.
 * If you just run `JSON.stringify(error)`, you'll get `'{}'`.
 */
function errorToObject(error) {
    var _a;
    return __assign({ name: error.name, message: error.message, stack: (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\n') }, error);
}

/*
 * This file contains functions to work with pure data only (no browser features, DOM, side effects, etc).
 */
/**
 * Does the same as Array.prototype.includes but has better typing
 */
function fp_esm_includes(haystack, needle) {
    for (var i = 0, l = haystack.length; i < l; ++i) {
        if (haystack[i] === needle) {
            return true;
        }
    }
    return false;
}
/**
 * Like `!includes()` but with proper typing
 */
function excludes(haystack, needle) {
    return !fp_esm_includes(haystack, needle);
}
/**
 * Be careful, NaN can return
 */
function toInt(value) {
    return parseInt(value);
}
/**
 * Be careful, NaN can return
 */
function toFloat(value) {
    return parseFloat(value);
}
function replaceNaN(value, replacement) {
    return typeof value === 'number' && isNaN(value) ? replacement : value;
}
function countTruthy(values) {
    return values.reduce(function (sum, value) { return sum + (value ? 1 : 0); }, 0);
}
function round(value, base) {
    if (base === void 0) { base = 1; }
    if (Math.abs(base) >= 1) {
        return Math.round(value / base) * base;
    }
    else {
        // Sometimes when a number is multiplied by a small number, precision is lost,
        // for example 1234 * 0.0001 === 0.12340000000000001, and it's more precise divide: 1234 / (1 / 0.0001) === 0.1234.
        var counterBase = 1 / base;
        return Math.round(value * counterBase) / counterBase;
    }
}
/**
 * Parses a CSS selector into tag name with HTML attributes.
 * Only single element selector are supported (without operators like space, +, >, etc).
 *
 * Multiple values can be returned for each attribute. You decide how to handle them.
 */
function parseSimpleCssSelector(selector) {
    var _a, _b;
    var errorMessage = "Unexpected syntax '" + selector + "'";
    var tagMatch = /^\s*([a-z-]*)(.*)$/i.exec(selector);
    var tag = tagMatch[1] || undefined;
    var attributes = {};
    var partsRegex = /([.:#][\w-]+|\[.+?\])/gi;
    var addAttribute = function (name, value) {
        attributes[name] = attributes[name] || [];
        attributes[name].push(value);
    };
    for (;;) {
        var match = partsRegex.exec(tagMatch[2]);
        if (!match) {
            break;
        }
        var part = match[0];
        switch (part[0]) {
            case '.':
                addAttribute('class', part.slice(1));
                break;
            case '#':
                addAttribute('id', part.slice(1));
                break;
            case '[': {
                var attributeMatch = /^\[([\w-]+)([~|^$*]?=("(.*?)"|([\w-]+)))?(\s+[is])?\]$/.exec(part);
                if (attributeMatch) {
                    addAttribute(attributeMatch[1], (_b = (_a = attributeMatch[4]) !== null && _a !== void 0 ? _a : attributeMatch[5]) !== null && _b !== void 0 ? _b : '');
                }
                else {
                    throw new Error(errorMessage);
                }
                break;
            }
            default:
                throw new Error(errorMessage);
        }
    }
    return [tag, attributes];
}

function ensureErrorWithMessage(error) {
    return error && typeof error === 'object' && 'message' in error ? error : { message: error };
}
/**
 * Loads the given entropy source. Returns a function that gets an entropy component from the source.
 *
 * The result is returned synchronously to prevent `loadSources` from
 * waiting for one source to load before getting the components from the other sources.
 */
function loadSource(source, sourceOptions) {
    var isFinalResultLoaded = function (loadResult) {
        return typeof loadResult !== 'function';
    };
    var sourceLoadPromise = new Promise(function (resolveLoad) {
        var loadStartTime = Date.now();
        // `awaitIfAsync` is used instead of just `await` in order to measure the duration of synchronous sources
        // correctly (other microtasks won't affect the duration).
        awaitIfAsync(source.bind(null, sourceOptions), function () {
            var loadArgs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                loadArgs[_i] = arguments[_i];
            }
            var loadDuration = Date.now() - loadStartTime;
            // Source loading failed
            if (!loadArgs[0]) {
                return resolveLoad(function () { return ({ error: ensureErrorWithMessage(loadArgs[1]), duration: loadDuration }); });
            }
            var loadResult = loadArgs[1];
            // Source loaded with the final result
            if (isFinalResultLoaded(loadResult)) {
                return resolveLoad(function () { return ({ value: loadResult, duration: loadDuration }); });
            }
            // Source loaded with "get" stage
            resolveLoad(function () {
                return new Promise(function (resolveGet) {
                    var getStartTime = Date.now();
                    awaitIfAsync(loadResult, function () {
                        var getArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            getArgs[_i] = arguments[_i];
                        }
                        var duration = loadDuration + Date.now() - getStartTime;
                        // Source getting failed
                        if (!getArgs[0]) {
                            return resolveGet({ error: ensureErrorWithMessage(getArgs[1]), duration: duration });
                        }
                        // Source getting succeeded
                        resolveGet({ value: getArgs[1], duration: duration });
                    });
                });
            });
        });
    });
    return function getComponent() {
        return sourceLoadPromise.then(function (finalizeSource) { return finalizeSource(); });
    };
}
/**
 * Loads the given entropy sources. Returns a function that collects the entropy components.
 *
 * The result is returned synchronously in order to allow start getting the components
 * before the sources are loaded completely.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function loadSources(sources, sourceOptions, excludeSources) {
    var includedSources = Object.keys(sources).filter(function (sourceKey) { return excludes(excludeSources, sourceKey); });
    var sourceGetters = Array(includedSources.length);
    // Using `forEachWithBreaks` allows asynchronous sources to complete between synchronous sources
    // and measure the duration correctly
    forEachWithBreaks(includedSources, function (sourceKey, index) {
        sourceGetters[index] = loadSource(sources[sourceKey], sourceOptions);
    });
    return function getComponents() {
        return __awaiter(this, void 0, void 0, function () {
            var components, _i, includedSources_1, sourceKey, componentPromises, _loop_1, state_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        components = {};
                        for (_i = 0, includedSources_1 = includedSources; _i < includedSources_1.length; _i++) {
                            sourceKey = includedSources_1[_i];
                            components[sourceKey] = undefined;
                        }
                        componentPromises = Array(includedSources.length);
                        _loop_1 = function () {
                            var hasAllComponentPromises;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        hasAllComponentPromises = true;
                                        return [4 /*yield*/, forEachWithBreaks(includedSources, function (sourceKey, index) {
                                                if (!componentPromises[index]) {
                                                    // `sourceGetters` may be incomplete at this point of execution because `forEachWithBreaks` is asynchronous
                                                    if (sourceGetters[index]) {
                                                        componentPromises[index] = sourceGetters[index]().then(function (component) { return (components[sourceKey] = component); });
                                                    }
                                                    else {
                                                        hasAllComponentPromises = false;
                                                    }
                                                }
                                            })];
                                    case 1:
                                        _a.sent();
                                        if (hasAllComponentPromises) {
                                            return [2 /*return*/, "break"];
                                        }
                                        return [4 /*yield*/, wait(1)]; // Lets the source load loop continue
                                    case 2:
                                        _a.sent(); // Lets the source load loop continue
                                        return [2 /*return*/];
                                }
                            });
                        };
                        _a.label = 1;
                    case 1: return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 4];
                        _a.label = 3;
                    case 3: return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, Promise.all(componentPromises)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, components];
                }
            });
        });
    };
}

/*
 * Functions to help with features that vary through browsers
 */
/**
 * Checks whether the browser is based on Trident (the Internet Explorer engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isTrident() {
    var w = window;
    var n = navigator;
    // The properties are checked to be in IE 10, IE 11 and not to be in other browsers in October 2020
    return (countTruthy([
        'MSCSSMatrix' in w,
        'msSetImmediate' in w,
        'msIndexedDB' in w,
        'msMaxTouchPoints' in n,
        'msPointerEnabled' in n,
    ]) >= 4);
}
/**
 * Checks whether the browser is based on EdgeHTML (the pre-Chromium Edge engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isEdgeHTML() {
    // Based on research in October 2020
    var w = window;
    var n = navigator;
    return (countTruthy(['msWriteProfilerMark' in w, 'MSStream' in w, 'msLaunchUri' in n, 'msSaveBlob' in n]) >= 3 &&
        !isTrident());
}
/**
 * Checks whether the browser is based on Chromium without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isChromium() {
    // Based on research in October 2020. Tested to detect Chromium 42-86.
    var w = window;
    var n = navigator;
    return (countTruthy([
        'webkitPersistentStorage' in n,
        'webkitTemporaryStorage' in n,
        n.vendor.indexOf('Google') === 0,
        'webkitResolveLocalFileSystemURL' in w,
        'BatteryManager' in w,
        'webkitMediaStream' in w,
        'webkitSpeechGrammar' in w,
    ]) >= 5);
}
/**
 * Checks whether the browser is based on mobile or desktop Safari without using user-agent.
 * All iOS browsers use WebKit (the Safari engine).
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isWebKit() {
    // Based on research in September 2020
    var w = window;
    var n = navigator;
    return (countTruthy([
        'ApplePayError' in w,
        'CSSPrimitiveValue' in w,
        'Counter' in w,
        n.vendor.indexOf('Apple') === 0,
        'getStorageUpdates' in n,
        'WebKitMediaKeys' in w,
    ]) >= 4);
}
/**
 * Checks whether the WebKit browser is a desktop Safari.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isDesktopSafari() {
    var w = window;
    return (countTruthy([
        'safari' in w,
        !('DeviceMotionEvent' in w),
        !('ongestureend' in w),
        !('standalone' in navigator),
    ]) >= 3);
}
/**
 * Checks whether the browser is based on Gecko (Firefox engine) without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isGecko() {
    var _a, _b;
    var w = window;
    // Based on research in September 2020
    return (countTruthy([
        'buildID' in navigator,
        'MozAppearance' in ((_b = (_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : {}),
        'onmozfullscreenchange' in w,
        'mozInnerScreenX' in w,
        'CSSMozDocumentRule' in w,
        'CanvasCaptureMediaStream' in w,
    ]) >= 4);
}
/**
 * Checks whether the browser is based on Chromium version ≥86 without using user-agent.
 * It doesn't check that the browser is based on Chromium, there is a separate function for this.
 */
function isChromium86OrNewer() {
    // Checked in Chrome 85 vs Chrome 86 both on desktop and Android
    var w = window;
    return (countTruthy([
        !('MediaSettingsRange' in w),
        'RTCEncodedAudioFrame' in w,
        '' + w.Intl === '[object Intl]',
        '' + w.Reflect === '[object Reflect]',
    ]) >= 3);
}
/**
 * Checks whether the browser is based on WebKit version ≥606 (Safari ≥12) without using user-agent.
 * It doesn't check that the browser is based on WebKit, there is a separate function for this.
 *
 * @link https://en.wikipedia.org/wiki/Safari_version_history#Release_history Safari-WebKit versions map
 */
function isWebKit606OrNewer() {
    // Checked in Safari 9–14
    var w = window;
    return (countTruthy([
        'DOMRectList' in w,
        'RTCPeerConnectionIceEvent' in w,
        'SVGGeometryElement' in w,
        'ontransitioncancel' in w,
    ]) >= 3);
}
/**
 * Checks whether the device is an iPad.
 * It doesn't check that the engine is WebKit and that the WebKit isn't desktop.
 */
function isIPad() {
    // Checked on:
    // Safari on iPadOS (both mobile and desktop modes): 8, 11, 12, 13, 14
    // Chrome on iPadOS (both mobile and desktop modes): 11, 12, 13, 14
    // Safari on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14
    // Chrome on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14
    // Before iOS 13. Safari tampers the value in "request desktop site" mode since iOS 13.
    if (navigator.platform === 'iPad') {
        return true;
    }
    var s = screen;
    var screenRatio = s.width / s.height;
    return (countTruthy([
        'MediaSource' in window,
        !!Element.prototype.webkitRequestFullscreen,
        // iPhone 4S that runs iOS 9 matches this. But it won't match the criteria above, so it won't be detected as iPad.
        screenRatio > 0.65 && screenRatio < 1.53,
    ]) >= 2);
}
/**
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function getFullscreenElement() {
    var d = document;
    return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;
}
function exitFullscreen() {
    var d = document;
    // `call` is required because the function throws an error without a proper "this" context
    return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);
}
/**
 * Checks whether the device runs on Android without using user-agent.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function isAndroid() {
    var isItChromium = isChromium();
    var isItGecko = isGecko();
    // Only 2 browser engines are presented on Android.
    // Actually, there is also Android 4.1 browser, but it's not worth detecting it at the moment.
    if (!isItChromium && !isItGecko) {
        return false;
    }
    var w = window;
    // Chrome removes all words "Android" from `navigator` when desktop version is requested
    // Firefox keeps "Android" in `navigator.appVersion` when desktop version is requested
    return (countTruthy([
        'onorientationchange' in w,
        'orientation' in w,
        isItChromium && !('SharedWorker' in w),
        isItGecko && /android/i.test(navigator.appVersion),
    ]) >= 2);
}

/**
 * A deep description: https://fingerprintjs.com/blog/audio-fingerprinting/
 * Inspired by and based on https://github.com/cozylife/audio-fingerprint
 */
function getAudioFingerprint() {
    var w = window;
    var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;
    if (!AudioContext) {
        return -2 /* NotSupported */;
    }
    // In some browsers, audio context always stays suspended unless the context is started in response to a user action
    // (e.g. a click or a tap). It prevents audio fingerprint from being taken at an arbitrary moment of time.
    // Such browsers are old and unpopular, so the audio fingerprinting is just skipped in them.
    // See a similar case explanation at https://stackoverflow.com/questions/46363048/onaudioprocess-not-called-on-ios11#46534088
    if (doesCurrentBrowserSuspendAudioContext()) {
        return -1 /* KnownToSuspend */;
    }
    var hashFromIndex = 4500;
    var hashToIndex = 5000;
    var context = new AudioContext(1, hashToIndex, 44100);
    var oscillator = context.createOscillator();
    oscillator.type = 'triangle';
    oscillator.frequency.value = 10000;
    var compressor = context.createDynamicsCompressor();
    compressor.threshold.value = -50;
    compressor.knee.value = 40;
    compressor.ratio.value = 12;
    compressor.attack.value = 0;
    compressor.release.value = 0.25;
    oscillator.connect(compressor);
    compressor.connect(context.destination);
    oscillator.start(0);
    var _a = startRenderingAudio(context), renderPromise = _a[0], finishRendering = _a[1];
    var fingerprintPromise = renderPromise.then(function (buffer) { return fp_esm_getHash(buffer.getChannelData(0).subarray(hashFromIndex)); }, function (error) {
        if (error.name === "timeout" /* Timeout */ || error.name === "suspended" /* Suspended */) {
            return -3 /* Timeout */;
        }
        throw error;
    });
    // Suppresses the console error message in case when the fingerprint fails before requested
    fingerprintPromise.catch(function () { return undefined; });
    return function () {
        finishRendering();
        return fingerprintPromise;
    };
}
/**
 * Checks if the current browser is known to always suspend audio context
 */
function doesCurrentBrowserSuspendAudioContext() {
    return isWebKit() && !isDesktopSafari() && !isWebKit606OrNewer();
}
/**
 * Starts rendering the audio context.
 * When the returned function is called, the render process starts finishing.
 */
function startRenderingAudio(context) {
    var renderTryMaxCount = 3;
    var renderRetryDelay = 500;
    var runningMaxAwaitTime = 500;
    var runningSufficientTime = 5000;
    var finalize = function () { return undefined; };
    var resultPromise = new Promise(function (resolve, reject) {
        var isFinalized = false;
        var renderTryCount = 0;
        var startedRunningAt = 0;
        context.oncomplete = function (event) { return resolve(event.renderedBuffer); };
        var startRunningTimeout = function () {
            setTimeout(function () { return reject(makeInnerError("timeout" /* Timeout */)); }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));
        };
        var tryRender = function () {
            try {
                context.startRendering();
                switch (context.state) {
                    case 'running':
                        startedRunningAt = Date.now();
                        if (isFinalized) {
                            startRunningTimeout();
                        }
                        break;
                    // Sometimes the audio context doesn't start after calling `startRendering` (in addition to the cases where
                    // audio context doesn't start at all). A known case is starting an audio context when the browser tab is in
                    // background on iPhone. Retries usually help in this case.
                    case 'suspended':
                        // The audio context can reject starting until the tab is in foreground. Long fingerprint duration
                        // in background isn't a problem, therefore the retry attempts don't count in background. It can lead to
                        // a situation when a fingerprint takes very long time and finishes successfully. FYI, the audio context
                        // can be suspended when `document.hidden === false` and start running after a retry.
                        if (!document.hidden) {
                            renderTryCount++;
                        }
                        if (isFinalized && renderTryCount >= renderTryMaxCount) {
                            reject(makeInnerError("suspended" /* Suspended */));
                        }
                        else {
                            setTimeout(tryRender, renderRetryDelay);
                        }
                        break;
                }
            }
            catch (error) {
                reject(error);
            }
        };
        tryRender();
        finalize = function () {
            if (!isFinalized) {
                isFinalized = true;
                if (startedRunningAt > 0) {
                    startRunningTimeout();
                }
            }
        };
    });
    return [resultPromise, finalize];
}
function fp_esm_getHash(signal) {
    var hash = 0;
    for (var i = 0; i < signal.length; ++i) {
        hash += Math.abs(signal[i]);
    }
    return hash;
}
function makeInnerError(name) {
    var error = new Error(name);
    error.name = name;
    return error;
}

/**
 * Creates and keeps an invisible iframe while the given function runs.
 * The given function is called when the iframe is loaded and has a body.
 * The iframe allows to measure DOM sizes inside itself.
 *
 * Notice: passing an initial HTML code doesn't work in IE.
 *
 * Warning for package users:
 * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.
 */
function withIframe(action, initialHtml, domPollInterval) {
    var _a, _b, _c;
    if (domPollInterval === void 0) { domPollInterval = 50; }
    return __awaiter(this, void 0, void 0, function () {
        var d, iframe;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    d = document;
                    _d.label = 1;
                case 1:
                    if (!!d.body) return [3 /*break*/, 3];
                    return [4 /*yield*/, wait(domPollInterval)];
                case 2:
                    _d.sent();
                    return [3 /*break*/, 1];
                case 3:
                    iframe = d.createElement('iframe');
                    _d.label = 4;
                case 4:
                    _d.trys.push([4, , 10, 11]);
                    return [4 /*yield*/, new Promise(function (_resolve, _reject) {
                            var isComplete = false;
                            var resolve = function () {
                                isComplete = true;
                                _resolve();
                            };
                            var reject = function (error) {
                                isComplete = true;
                                _reject(error);
                            };
                            iframe.onload = resolve;
                            iframe.onerror = reject;
                            var style = iframe.style;
                            style.setProperty('display', 'block', 'important'); // Required for browsers to calculate the layout
                            style.position = 'absolute';
                            style.top = '0';
                            style.left = '0';
                            style.visibility = 'hidden';
                            if (initialHtml && 'srcdoc' in iframe) {
                                iframe.srcdoc = initialHtml;
                            }
                            else {
                                iframe.src = 'about:blank';
                            }
                            d.body.appendChild(iframe);
                            // WebKit in WeChat doesn't fire the iframe's `onload` for some reason.
                            // This code checks for the loading state manually.
                            // See https://github.com/fingerprintjs/fingerprintjs/issues/645
                            var checkReadyState = function () {
                                var _a, _b;
                                // The ready state may never become 'complete' in Firefox despite the 'load' event being fired.
                                // So an infinite setTimeout loop can happen without this check.
                                // See https://github.com/fingerprintjs/fingerprintjs/pull/716#issuecomment-986898796
                                if (isComplete) {
                                    return;
                                }
                                // Make sure iframe.contentWindow and iframe.contentWindow.document are both loaded
                                // The contentWindow.document can miss in JSDOM (https://github.com/jsdom/jsdom).
                                if (((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) === 'complete') {
                                    resolve();
                                }
                                else {
                                    setTimeout(checkReadyState, 10);
                                }
                            };
                            checkReadyState();
                        })];
                case 5:
                    _d.sent();
                    _d.label = 6;
                case 6:
                    if (!!((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.body)) return [3 /*break*/, 8];
                    return [4 /*yield*/, wait(domPollInterval)];
                case 7:
                    _d.sent();
                    return [3 /*break*/, 6];
                case 8: return [4 /*yield*/, action(iframe, iframe.contentWindow)];
                case 9: return [2 /*return*/, _d.sent()];
                case 10:
                    (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/];
            }
        });
    });
}
/**
 * Creates a DOM element that matches the given selector.
 * Only single element selector are supported (without operators like space, +, >, etc).
 */
function selectorToElement(selector) {
    var _a = parseSimpleCssSelector(selector), tag = _a[0], attributes = _a[1];
    var element = document.createElement(tag !== null && tag !== void 0 ? tag : 'div');
    for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {
        var name_1 = _b[_i];
        element.setAttribute(name_1, attributes[name_1].join(' '));
    }
    return element;
}

// We use m or w because these two characters take up the maximum width.
// And we use a LLi so that the same matching fonts can get separated.
var testString = 'mmMwWLliI0O&1';
// We test using 48px font size, we may use any size. I guess larger the better.
var textSize = '48px';
// A font will be compared against all the three default fonts.
// And if for any default fonts it doesn't match, then that font is available.
var baseFonts = ['monospace', 'sans-serif', 'serif'];
var fontList = [
    // This is android-specific font from "Roboto" family
    'sans-serif-thin',
    'ARNO PRO',
    'Agency FB',
    'Arabic Typesetting',
    'Arial Unicode MS',
    'AvantGarde Bk BT',
    'BankGothic Md BT',
    'Batang',
    'Bitstream Vera Sans Mono',
    'Calibri',
    'Century',
    'Century Gothic',
    'Clarendon',
    'EUROSTILE',
    'Franklin Gothic',
    'Futura Bk BT',
    'Futura Md BT',
    'GOTHAM',
    'Gill Sans',
    'HELV',
    'Haettenschweiler',
    'Helvetica Neue',
    'Humanst521 BT',
    'Leelawadee',
    'Letter Gothic',
    'Levenim MT',
    'Lucida Bright',
    'Lucida Sans',
    'Menlo',
    'MS Mincho',
    'MS Outlook',
    'MS Reference Specialty',
    'MS UI Gothic',
    'MT Extra',
    'MYRIAD PRO',
    'Marlett',
    'Meiryo UI',
    'Microsoft Uighur',
    'Minion Pro',
    'Monotype Corsiva',
    'PMingLiU',
    'Pristina',
    'SCRIPTINA',
    'Segoe UI Light',
    'Serifa',
    'SimHei',
    'Small Fonts',
    'Staccato222 BT',
    'TRAJAN PRO',
    'Univers CE 55 Medium',
    'Vrinda',
    'ZWAdobeF',
];
// kudos to http://www.lalit.org/lab/javascript-css-font-detect/
function getFonts() {
    // Running the script in an iframe makes it not affect the page look and not be affected by the page CSS. See:
    // https://github.com/fingerprintjs/fingerprintjs/issues/592
    // https://github.com/fingerprintjs/fingerprintjs/issues/628
    return withIframe(function (_, _a) {
        var document = _a.document;
        var holder = document.body;
        holder.style.fontSize = textSize;
        // div to load spans for the default fonts and the fonts to detect
        var spansContainer = document.createElement('div');
        var defaultWidth = {};
        var defaultHeight = {};
        // creates a span where the fonts will be loaded
        var createSpan = function (fontFamily) {
            var span = document.createElement('span');
            var style = span.style;
            style.position = 'absolute';
            style.top = '0';
            style.left = '0';
            style.fontFamily = fontFamily;
            span.textContent = testString;
            spansContainer.appendChild(span);
            return span;
        };
        // creates a span and load the font to detect and a base font for fallback
        var createSpanWithFonts = function (fontToDetect, baseFont) {
            return createSpan("'" + fontToDetect + "'," + baseFont);
        };
        // creates spans for the base fonts and adds them to baseFontsDiv
        var initializeBaseFontsSpans = function () {
            return baseFonts.map(createSpan);
        };
        // creates spans for the fonts to detect and adds them to fontsDiv
        var initializeFontsSpans = function () {
            // Stores {fontName : [spans for that font]}
            var spans = {};
            var _loop_1 = function (font) {
                spans[font] = baseFonts.map(function (baseFont) { return createSpanWithFonts(font, baseFont); });
            };
            for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {
                var font = fontList_1[_i];
                _loop_1(font);
            }
            return spans;
        };
        // checks if a font is available
        var isFontAvailable = function (fontSpans) {
            return baseFonts.some(function (baseFont, baseFontIndex) {
                return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] ||
                    fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];
            });
        };
        // create spans for base fonts
        var baseFontsSpans = initializeBaseFontsSpans();
        // create spans for fonts to detect
        var fontsSpans = initializeFontsSpans();
        // add all the spans to the DOM
        holder.appendChild(spansContainer);
        // get the default width for the three base fonts
        for (var index = 0; index < baseFonts.length; index++) {
            defaultWidth[baseFonts[index]] = baseFontsSpans[index].offsetWidth; // width for the default font
            defaultHeight[baseFonts[index]] = baseFontsSpans[index].offsetHeight; // height for the default font
        }
        // check available fonts
        return fontList.filter(function (font) { return isFontAvailable(fontsSpans[font]); });
    });
}

function getPlugins() {
    var rawPlugins = navigator.plugins;
    if (!rawPlugins) {
        return undefined;
    }
    var plugins = [];
    // Safari 10 doesn't support iterating navigator.plugins with for...of
    for (var i = 0; i < rawPlugins.length; ++i) {
        var plugin = rawPlugins[i];
        if (!plugin) {
            continue;
        }
        var mimeTypes = [];
        for (var j = 0; j < plugin.length; ++j) {
            var mimeType = plugin[j];
            mimeTypes.push({
                type: mimeType.type,
                suffixes: mimeType.suffixes,
            });
        }
        plugins.push({
            name: plugin.name,
            description: plugin.description,
            mimeTypes: mimeTypes,
        });
    }
    return plugins;
}

// https://www.browserleaks.com/canvas#how-does-it-work
function getCanvasFingerprint() {
    var _a = makeCanvasContext(), canvas = _a[0], context = _a[1];
    if (!isSupported(canvas, context)) {
        return { winding: false, geometry: '', text: '' };
    }
    return {
        winding: doesSupportWinding(context),
        geometry: makeGeometryImage(canvas, context),
        // Text is unstable:
        // https://github.com/fingerprintjs/fingerprintjs/issues/583
        // https://github.com/fingerprintjs/fingerprintjs/issues/103
        // Therefore it's extracted into a separate image.
        text: makeTextImage(canvas, context),
    };
}
function makeCanvasContext() {
    var canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    return [canvas, canvas.getContext('2d')];
}
function isSupported(canvas, context) {
    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
    return !!(context && canvas.toDataURL);
}
function doesSupportWinding(context) {
    // https://web.archive.org/web/20170825024655/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/
    // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas/winding.js
    context.rect(0, 0, 10, 10);
    context.rect(2, 2, 6, 6);
    return !context.isPointInPath(5, 5, 'evenodd');
}
function makeTextImage(canvas, context) {
    // Resizing the canvas cleans it
    canvas.width = 240;
    canvas.height = 60;
    context.textBaseline = 'alphabetic';
    context.fillStyle = '#f60';
    context.fillRect(100, 1, 62, 20);
    context.fillStyle = '#069';
    // It's important to use explicit built-in fonts in order to exclude the affect of font preferences
    // (there is a separate entropy source for them).
    context.font = '11pt "Times New Roman"';
    // The choice of emojis has a gigantic impact on rendering performance (especially in FF).
    // Some newer emojis cause it to slow down 50-200 times.
    // There must be no text to the right of the emoji, see https://github.com/fingerprintjs/fingerprintjs/issues/574
    // A bare emoji shouldn't be used because the canvas will change depending on the script encoding:
    // https://github.com/fingerprintjs/fingerprintjs/issues/66
    // Escape sequence shouldn't be used too because Terser will turn it into a bare unicode.
    var printedText = "Cwm fjordbank gly " + String.fromCharCode(55357, 56835) /* 😃 */;
    context.fillText(printedText, 2, 15);
    context.fillStyle = 'rgba(102, 204, 0, 0.2)';
    context.font = '18pt Arial';
    context.fillText(printedText, 4, 45);
    return save(canvas);
}
function makeGeometryImage(canvas, context) {
    // Resizing the canvas cleans it
    canvas.width = 122;
    canvas.height = 110;
    // Canvas blending
    // https://web.archive.org/web/20170826194121/http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/
    // http://jsfiddle.net/NDYV8/16/
    context.globalCompositeOperation = 'multiply';
    for (var _i = 0, _a = [
        ['#f2f', 40, 40],
        ['#2ff', 80, 40],
        ['#ff2', 60, 80],
    ]; _i < _a.length; _i++) {
        var _b = _a[_i], color = _b[0], x = _b[1], y = _b[2];
        context.fillStyle = color;
        context.beginPath();
        context.arc(x, y, 40, 0, Math.PI * 2, true);
        context.closePath();
        context.fill();
    }
    // Canvas winding
    // https://web.archive.org/web/20130913061632/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/
    // http://jsfiddle.net/NDYV8/19/
    context.fillStyle = '#f9c';
    context.arc(60, 60, 60, 0, Math.PI * 2, true);
    context.arc(60, 60, 20, 0, Math.PI * 2, true);
    context.fill('evenodd');
    return save(canvas);
}
function save(canvas) {
    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
    return canvas.toDataURL();
}

/**
 * This is a crude and primitive touch screen detection. It's not possible to currently reliably detect the availability
 * of a touch screen with a JS, without actually subscribing to a touch event.
 *
 * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/
 * @see https://github.com/Modernizr/Modernizr/issues/548
 */
function getTouchSupport() {
    var n = navigator;
    var maxTouchPoints = 0;
    var touchEvent;
    if (n.maxTouchPoints !== undefined) {
        maxTouchPoints = toInt(n.maxTouchPoints);
    }
    else if (n.msMaxTouchPoints !== undefined) {
        maxTouchPoints = n.msMaxTouchPoints;
    }
    try {
        document.createEvent('TouchEvent');
        touchEvent = true;
    }
    catch (_a) {
        touchEvent = false;
    }
    var touchStart = 'ontouchstart' in window;
    return {
        maxTouchPoints: maxTouchPoints,
        touchEvent: touchEvent,
        touchStart: touchStart,
    };
}

function getOsCpu() {
    return navigator.oscpu;
}

function getLanguages() {
    var n = navigator;
    var result = [];
    var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;
    if (language !== undefined) {
        result.push([language]);
    }
    if (Array.isArray(n.languages)) {
        // Starting from Chromium 86, there is only a single value in `navigator.language` in Incognito mode:
        // the value of `navigator.language`. Therefore the value is ignored in this browser.
        if (!(isChromium() && isChromium86OrNewer())) {
            result.push(n.languages);
        }
    }
    else if (typeof n.languages === 'string') {
        var languages = n.languages;
        if (languages) {
            result.push(languages.split(','));
        }
    }
    return result;
}

function getColorDepth() {
    return window.screen.colorDepth;
}

function getDeviceMemory() {
    // `navigator.deviceMemory` is a string containing a number in some unidentified cases
    return replaceNaN(toFloat(navigator.deviceMemory), undefined);
}

function getScreenResolution() {
    var s = screen;
    // Some browsers return screen resolution as strings, e.g. "1200", instead of a number, e.g. 1200.
    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.
    // Some browsers even return  screen resolution as not numbers.
    var parseDimension = function (value) { return replaceNaN(toInt(value), null); };
    var dimensions = [parseDimension(s.width), parseDimension(s.height)];
    dimensions.sort().reverse();
    return dimensions;
}

var screenFrameCheckInterval = 2500;
var roundingPrecision = 10;
// The type is readonly to protect from unwanted mutations
var screenFrameBackup;
var screenFrameSizeTimeoutId;
/**
 * Starts watching the screen frame size. When a non-zero size appears, the size is saved and the watch is stopped.
 * Later, when `getScreenFrame` runs, it will return the saved non-zero size if the current size is null.
 *
 * This trick is required to mitigate the fact that the screen frame turns null in some cases.
 * See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
 */
function watchScreenFrame() {
    if (screenFrameSizeTimeoutId !== undefined) {
        return;
    }
    var checkScreenFrame = function () {
        var frameSize = getCurrentScreenFrame();
        if (isFrameSizeNull(frameSize)) {
            screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);
        }
        else {
            screenFrameBackup = frameSize;
            screenFrameSizeTimeoutId = undefined;
        }
    };
    checkScreenFrame();
}
function getScreenFrame() {
    var _this = this;
    watchScreenFrame();
    return function () { return __awaiter(_this, void 0, void 0, function () {
        var frameSize;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    frameSize = getCurrentScreenFrame();
                    if (!isFrameSizeNull(frameSize)) return [3 /*break*/, 2];
                    if (screenFrameBackup) {
                        return [2 /*return*/, __spreadArrays(screenFrameBackup)];
                    }
                    if (!getFullscreenElement()) return [3 /*break*/, 2];
                    // Some browsers set the screen frame to zero when programmatic fullscreen is on.
                    // There is a chance of getting a non-zero frame after exiting the fullscreen.
                    // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
                    return [4 /*yield*/, exitFullscreen()];
                case 1:
                    // Some browsers set the screen frame to zero when programmatic fullscreen is on.
                    // There is a chance of getting a non-zero frame after exiting the fullscreen.
                    // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568
                    _a.sent();
                    frameSize = getCurrentScreenFrame();
                    _a.label = 2;
                case 2:
                    if (!isFrameSizeNull(frameSize)) {
                        screenFrameBackup = frameSize;
                    }
                    return [2 /*return*/, frameSize];
            }
        });
    }); };
}
/**
 * Sometimes the available screen resolution changes a bit, e.g. 1900x1440 → 1900x1439. A possible reason: macOS Dock
 * shrinks to fit more icons when there is too little space. The rounding is used to mitigate the difference.
 */
function getRoundedScreenFrame() {
    var _this = this;
    var screenFrameGetter = getScreenFrame();
    return function () { return __awaiter(_this, void 0, void 0, function () {
        var frameSize, processSize;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, screenFrameGetter()];
                case 1:
                    frameSize = _a.sent();
                    processSize = function (sideSize) { return (sideSize === null ? null : round(sideSize, roundingPrecision)); };
                    // It might look like I don't know about `for` and `map`.
                    // In fact, such code is used to avoid TypeScript issues without using `as`.
                    return [2 /*return*/, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];
            }
        });
    }); };
}
function getCurrentScreenFrame() {
    var s = screen;
    // Some browsers return screen resolution as strings, e.g. "1200", instead of a number, e.g. 1200.
    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.
    //
    // Some browsers (IE, Edge ≤18) don't provide `screen.availLeft` and `screen.availTop`. The property values are
    // replaced with 0 in such cases to not lose the entropy from `screen.availWidth` and `screen.availHeight`.
    return [
        replaceNaN(toFloat(s.availTop), null),
        replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null),
        replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null),
        replaceNaN(toFloat(s.availLeft), null),
    ];
}
function isFrameSizeNull(frameSize) {
    for (var i = 0; i < 4; ++i) {
        if (frameSize[i]) {
            return false;
        }
    }
    return true;
}

function getHardwareConcurrency() {
    // sometimes hardware concurrency is a string
    return replaceNaN(toInt(navigator.hardwareConcurrency), undefined);
}

function getTimezone() {
    var _a;
    var DateTimeFormat = (_a = window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat;
    if (DateTimeFormat) {
        var timezone = new DateTimeFormat().resolvedOptions().timeZone;
        if (timezone) {
            return timezone;
        }
    }
    // For browsers that don't support timezone names
    // The minus is intentional because the JS offset is opposite to the real offset
    var offset = -getTimezoneOffset();
    return "UTC" + (offset >= 0 ? '+' : '') + Math.abs(offset);
}
function getTimezoneOffset() {
    var currentYear = new Date().getFullYear();
    // The timezone offset may change over time due to daylight saving time (DST) shifts.
    // The non-DST timezone offset is used as the result timezone offset.
    // Since the DST season differs in the northern and the southern hemispheres,
    // both January and July timezones offsets are considered.
    return Math.max(
    // `getTimezoneOffset` returns a number as a string in some unidentified cases
    toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()), toFloat(new Date(currentYear, 6, 1).getTimezoneOffset()));
}

function getSessionStorage() {
    try {
        return !!window.sessionStorage;
    }
    catch (error) {
        /* SecurityError when referencing it means it exists */
        return true;
    }
}

// https://bugzilla.mozilla.org/show_bug.cgi?id=781447
function getLocalStorage() {
    try {
        return !!window.localStorage;
    }
    catch (e) {
        /* SecurityError when referencing it means it exists */
        return true;
    }
}

function getIndexedDB() {
    // IE and Edge don't allow accessing indexedDB in private mode, therefore IE and Edge will have different
    // visitor identifier in normal and private modes.
    if (isTrident() || isEdgeHTML()) {
        return undefined;
    }
    try {
        return !!window.indexedDB;
    }
    catch (e) {
        /* SecurityError when referencing it means it exists */
        return true;
    }
}

function getOpenDatabase() {
    return !!window.openDatabase;
}

function getCpuClass() {
    return navigator.cpuClass;
}

function getPlatform() {
    // Android Chrome 86 and 87 and Android Firefox 80 and 84 don't mock the platform value when desktop mode is requested
    var platform = navigator.platform;
    // iOS mocks the platform value when desktop version is requested: https://github.com/fingerprintjs/fingerprintjs/issues/514
    // iPad uses desktop mode by default since iOS 13
    // The value is 'MacIntel' on M1 Macs
    // The value is 'iPhone' on iPod Touch
    if (platform === 'MacIntel') {
        if (isWebKit() && !isDesktopSafari()) {
            return isIPad() ? 'iPad' : 'iPhone';
        }
    }
    return platform;
}

function getVendor() {
    return navigator.vendor || '';
}

/**
 * Checks for browser-specific (not engine specific) global variables to tell browsers with the same engine apart.
 * Only somewhat popular browsers are considered.
 */
function getVendorFlavors() {
    var flavors = [];
    for (var _i = 0, _a = [
        // Blink and some browsers on iOS
        'chrome',
        // Safari on macOS
        'safari',
        // Chrome on iOS (checked in 85 on 13 and 87 on 14)
        '__crWeb',
        '__gCrWeb',
        // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)
        'yandex',
        // Yandex Browser on iOS (checked in 21.2 on 14)
        '__yb',
        '__ybro',
        // Firefox on iOS (checked in 32 on 14)
        '__firefox__',
        // Edge on iOS (checked in 46 on 14)
        '__edgeTrackingPreventionStatistics',
        'webkit',
        // Opera Touch on iOS (checked in 2.6 on 14)
        'oprt',
        // Samsung Internet on Android (checked in 11.1)
        'samsungAr',
        // UC Browser on Android (checked in 12.10 and 13.0)
        'ucweb',
        'UCShellJava',
        // Puffin on Android (checked in 9.0)
        'puffinDevice',
    ]; _i < _a.length; _i++) {
        var key = _a[_i];
        var value = window[key];
        if (value && typeof value === 'object') {
            flavors.push(key);
        }
    }
    return flavors.sort();
}

/**
 * navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking
 * cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past with
 * site-specific exceptions. Don't rely on it.
 *
 * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js Taken from here
 */
function areCookiesEnabled() {
    var d = document;
    // Taken from here: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js
    // navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking
    // cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past
    // with site-specific exceptions. Don't rely on it.
    // try..catch because some in situations `document.cookie` is exposed but throws a
    // SecurityError if you try to access it; e.g. documents created from data URIs
    // or in sandboxed iframes (depending on flags/context)
    try {
        // Create cookie
        d.cookie = 'cookietest=1; SameSite=Strict;';
        var result = d.cookie.indexOf('cookietest=') !== -1;
        // Delete cookie
        d.cookie = 'cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT';
        return result;
    }
    catch (e) {
        return false;
    }
}

/**
 * Only single element selector are supported (no operators like space, +, >, etc).
 * `embed` and `position: fixed;` will be considered as blocked anyway because it always has no offsetParent.
 * Avoid `iframe` and anything with `[src=]` because they produce excess HTTP requests.
 *
 * See docs/content_blockers.md to learn how to make the list
 */
var filters = {
    abpIndo: [
        '#Iklan-Melayang',
        '#Kolom-Iklan-728',
        '#SidebarIklan-wrapper',
        'a[title="7naga poker" i]',
        '[title="ALIENBOLA" i]',
    ],
    abpvn: [
        '#quangcaomb',
        '.iosAdsiosAds-layout',
        '.quangcao',
        '[href^="https://r88.vn/"]',
        '[href^="https://zbet.vn/"]',
    ],
    adBlockFinland: [
        '.mainostila',
        '.sponsorit',
        '.ylamainos',
        'a[href*="/clickthrgh.asp?"]',
        'a[href^="https://app.readpeak.com/ads"]',
    ],
    adBlockPersian: [
        '#navbar_notice_50',
        'a[href^="http://g1.v.fwmrm.net/ad/"]',
        '.kadr',
        'TABLE[width="140px"]',
        '#divAgahi',
    ],
    adBlockWarningRemoval: ['#adblock-honeypot', '.adblocker-root', '.wp_adblock_detect'],
    adGuardAnnoyances: ['amp-embed[type="zen"]', '.hs-sosyal', '#cookieconsentdiv', 'div[class^="app_gdpr"]', '.as-oil'],
    adGuardBase: ['#ad-after', '#ad-p3', '.BetterJsPopOverlay', '#ad_300X250', '#bannerfloat22'],
    adGuardChinese: [
        '#piao_div_0[style*="width:140px;"]',
        'a[href*=".ttz5.cn"]',
        'a[href*=".yabovip2027.com/"]',
        '.tm3all2h4b',
        '.cc5278_banner_ad',
    ],
    adGuardFrench: [
        '.zonepub',
        '[class*="_adLeaderboard"]',
        '[id^="block-xiti_oas-"]',
        'a[href^="http://ptapjmp.com/"]',
        'a[href^="https://go.alvexo.com/"]',
    ],
    adGuardGerman: [
        '.banneritemwerbung_head_1',
        '.boxstartwerbung',
        '.werbung3',
        'a[href^="http://www.eis.de/index.phtml?refid="]',
        'a[href^="https://www.tipico.com/?affiliateId="]',
    ],
    adGuardJapanese: [
        '#kauli_yad_1',
        '#ad-giftext',
        '#adsSPRBlock',
        'a[href^="http://ad2.trafficgate.net/"]',
        'a[href^="http://www.rssad.jp/"]',
    ],
    adGuardMobile: ['amp-auto-ads', '#mgid_iframe', '.amp_ad', 'amp-embed[type="24smi"]', '#mgid_iframe1'],
    adGuardRussian: [
        'a[href^="https://ya-distrib.ru/r/"]',
        'a[href^="https://ad.letmeads.com/"]',
        '.reclama',
        'div[id^="smi2adblock"]',
        'div[id^="AdFox_banner_"]',
    ],
    adGuardSocial: [
        'a[href^="//www.stumbleupon.com/submit?url="]',
        'a[href^="//telegram.me/share/url?"]',
        '.etsy-tweet',
        '#inlineShare',
        '.popup-social',
    ],
    adGuardSpanishPortuguese: [
        '#barraPublicidade',
        '#Publicidade',
        '#publiEspecial',
        '#queTooltip',
        '[href^="http://ads.glispa.com/"]',
    ],
    adGuardTrackingProtection: [
        'amp-embed[type="taboola"]',
        '#qoo-counter',
        'a[href^="http://click.hotlog.ru/"]',
        'a[href^="http://hitcounter.ru/top/stat.php"]',
        'a[href^="http://top.mail.ru/jump"]',
    ],
    adGuardTurkish: [
        '#backkapat',
        '#reklami',
        'a[href^="http://adserv.ontek.com.tr/"]',
        'a[href^="http://izlenzi.com/campaign/"]',
        'a[href^="http://www.installads.net/"]',
    ],
    bulgarian: ['td#freenet_table_ads', '#adbody', '#ea_intext_div', '.lapni-pop-over', '#xenium_hot_offers'],
    easyList: ['#AD_banner_bottom', '#Ads_google_02', '#N-ad-article-rightRail-1', '#ad-fullbanner2', '#ad-zone-2'],
    easyListChina: [
        'a[href*=".wensixuetang.com/"]',
        'A[href*="/hth107.com/"]',
        '.appguide-wrap[onclick*="bcebos.com"]',
        '.frontpageAdvM',
        '#taotaole',
    ],
    easyListCookie: ['#adtoniq-msg-bar', '#CoockiesPage', '#CookieModal_cookiemodal', '#DO_CC_PANEL', '#ShowCookie'],
    easyListCzechSlovak: ['#onlajny-stickers', '#reklamni-box', '.reklama-megaboard', '.sklik', '[id^="sklikReklama"]'],
    easyListDutch: [
        '#advertentie',
        '#vipAdmarktBannerBlock',
        '.adstekst',
        'a[href^="https://xltube.nl/click/"]',
        '#semilo-lrectangle',
    ],
    easyListGermany: [
        'a[href^="http://www.hw-area.com/?dp="]',
        'a[href^="https://ads.sunmaker.com/tracking.php?"]',
        '.werbung-skyscraper2',
        '.bannergroup_werbung',
        '.ads_rechts',
    ],
    easyListItaly: [
        '.box_adv_annunci',
        '.sb-box-pubbliredazionale',
        'a[href^="http://affiliazioniads.snai.it/"]',
        'a[href^="https://adserver.html.it/"]',
        'a[href^="https://affiliazioniads.snai.it/"]',
    ],
    easyListLithuania: [
        '.reklamos_tarpas',
        '.reklamos_nuorodos',
        'img[alt="Reklaminis skydelis"]',
        'img[alt="Dedikuoti.lt serveriai"]',
        'img[alt="Hostingas Serveriai.lt"]',
    ],
    estonian: ['A[href*="http://pay4results24.eu"]'],
    fanboyAnnoyances: [
        '#feedback-tab',
        '#taboola-below-article',
        '.feedburnerFeedBlock',
        '.widget-feedburner-counter',
        '[title="Subscribe to our blog"]',
    ],
    fanboyAntiFacebook: ['.util-bar-module-firefly-visible'],
    fanboyEnhancedTrackers: [
        '.open.pushModal',
        '#issuem-leaky-paywall-articles-zero-remaining-nag',
        '#sovrn_container',
        'div[class$="-hide"][zoompage-fontsize][style="display: block;"]',
        '.BlockNag__Card',
    ],
    fanboySocial: [
        '.td-tags-and-social-wrapper-box',
        '.twitterContainer',
        '.youtube-social',
        'a[title^="Like us on Facebook"]',
        'img[alt^="Share on Digg"]',
    ],
    frellwitSwedish: [
        'a[href*="casinopro.se"][target="_blank"]',
        'a[href*="doktor-se.onelink.me"]',
        'article.category-samarbete',
        'div.holidAds',
        'ul.adsmodern',
    ],
    greekAdBlock: [
        'A[href*="adman.otenet.gr/click?"]',
        'A[href*="http://axiabanners.exodus.gr/"]',
        'A[href*="http://interactive.forthnet.gr/click?"]',
        'DIV.agores300',
        'TABLE.advright',
    ],
    hungarian: [
        'A[href*="ad.eval.hu"]',
        'A[href*="ad.netmedia.hu"]',
        'A[href*="daserver.ultraweb.hu"]',
        '#cemp_doboz',
        '.optimonk-iframe-container',
    ],
    iDontCareAboutCookies: [
        '.alert-info[data-block-track*="CookieNotice"]',
        '.ModuleTemplateCookieIndicator',
        '.o--cookies--container',
        '.cookie-msg-info-container',
        '#cookies-policy-sticky',
    ],
    icelandicAbp: ['A[href^="/framework/resources/forms/ads.aspx"]'],
    latvian: [
        'a[href="http://www.salidzini.lv/"][style="display: block; width: 120px; height: 40px; overflow: hidden; position: relative;"]',
        'a[href="http://www.salidzini.lv/"][style="display: block; width: 88px; height: 31px; overflow: hidden; position: relative;"]',
    ],
    listKr: [
        'a[href*="//kingtoon.slnk.kr"]',
        'a[href*="//playdsb.com/kr"]',
        'div.logly-lift-adz',
        'div[data-widget_id="ml6EJ074"]',
        'ins.daum_ddn_area',
    ],
    listeAr: [
        '.geminiLB1Ad',
        '.right-and-left-sponsers',
        'a[href*=".aflam.info"]',
        'a[href*="booraq.org"]',
        'a[href*="dubizzle.com/ar/?utm_source="]',
    ],
    listeFr: [
        'a[href^="http://promo.vador.com/"]',
        '#adcontainer_recherche',
        'a[href*="weborama.fr/fcgi-bin/"]',
        '.site-pub-interstitiel',
        'div[id^="crt-"][data-criteo-id]',
    ],
    officialPolish: [
        '#ceneo-placeholder-ceneo-12',
        '[href^="https://aff.sendhub.pl/"]',
        'a[href^="http://advmanager.techfun.pl/redirect/"]',
        'a[href^="http://www.trizer.pl/?utm_source"]',
        'div#skapiec_ad',
    ],
    ro: [
        'a[href^="//afftrk.altex.ro/Counter/Click"]',
        'a[href^="/magazin/"]',
        'a[href^="https://blackfridaysales.ro/trk/shop/"]',
        'a[href^="https://event.2performant.com/events/click"]',
        'a[href^="https://l.profitshare.ro/"]',
    ],
    ruAd: [
        'a[href*="//febrare.ru/"]',
        'a[href*="//utimg.ru/"]',
        'a[href*="://chikidiki.ru"]',
        '#pgeldiz',
        '.yandex-rtb-block',
    ],
    thaiAds: ['a[href*=macau-uta-popup]', '#ads-google-middle_rectangle-group', '.ads300s', '.bumq', '.img-kosana'],
    webAnnoyancesUltralist: [
        '#mod-social-share-2',
        '#social-tools',
        '.ctpl-fullbanner',
        '.zergnet-recommend',
        '.yt.btn-link.btn-md.btn',
    ],
};
/**
 * The order of the returned array means nothing (it's always sorted alphabetically).
 *
 * Notice that the source is slightly unstable.
 * Safari provides a 2-taps way to disable all content blockers on a page temporarily.
 * Also content blockers can be disabled permanently for a domain, but it requires 4 taps.
 * So empty array shouldn't be treated as "no blockers", it should be treated as "no signal".
 * If you are a website owner, don't make your visitors want to disable content blockers.
 */
function getDomBlockers(_a) {
    var debug = (_a === void 0 ? {} : _a).debug;
    return __awaiter(this, void 0, void 0, function () {
        var filterNames, allSelectors, blockedSelectors, activeBlockers;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!isApplicable()) {
                        return [2 /*return*/, undefined];
                    }
                    filterNames = Object.keys(filters);
                    allSelectors = (_b = []).concat.apply(_b, filterNames.map(function (filterName) { return filters[filterName]; }));
                    return [4 /*yield*/, getBlockedSelectors(allSelectors)];
                case 1:
                    blockedSelectors = _c.sent();
                    if (debug) {
                        printDebug(blockedSelectors);
                    }
                    activeBlockers = filterNames.filter(function (filterName) {
                        var selectors = filters[filterName];
                        var blockedCount = countTruthy(selectors.map(function (selector) { return blockedSelectors[selector]; }));
                        return blockedCount > selectors.length * 0.6;
                    });
                    activeBlockers.sort();
                    return [2 /*return*/, activeBlockers];
            }
        });
    });
}
function isApplicable() {
    // Safari (desktop and mobile) and all Android browsers keep content blockers in both regular and private mode
    return isWebKit() || isAndroid();
}
function getBlockedSelectors(selectors) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var d, root, elements, blockedSelectors, i, element, holder, i;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    d = document;
                    root = d.createElement('div');
                    elements = new Array(selectors.length);
                    blockedSelectors = {} // Set() isn't used just in case somebody need older browser support
                    ;
                    forceShow(root);
                    // First create all elements that can be blocked. If the DOM steps below are done in a single cycle,
                    // browser will alternate tree modification and layout reading, that is very slow.
                    for (i = 0; i < selectors.length; ++i) {
                        element = selectorToElement(selectors[i]);
                        holder = d.createElement('div') // Protects from unwanted effects of `+` and `~` selectors of filters
                        ;
                        forceShow(holder);
                        holder.appendChild(element);
                        root.appendChild(holder);
                        elements[i] = element;
                    }
                    _b.label = 1;
                case 1:
                    if (!!d.body) return [3 /*break*/, 3];
                    return [4 /*yield*/, wait(50)];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 1];
                case 3:
                    d.body.appendChild(root);
                    try {
                        // Then check which of the elements are blocked
                        for (i = 0; i < selectors.length; ++i) {
                            if (!elements[i].offsetParent) {
                                blockedSelectors[selectors[i]] = true;
                            }
                        }
                    }
                    finally {
                        // Then remove the elements
                        (_a = root.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(root);
                    }
                    return [2 /*return*/, blockedSelectors];
            }
        });
    });
}
function forceShow(element) {
    element.style.setProperty('display', 'block', 'important');
}
function printDebug(blockedSelectors) {
    var message = 'DOM blockers debug:\n```';
    for (var _i = 0, _a = Object.keys(filters); _i < _a.length; _i++) {
        var filterName = _a[_i];
        message += "\n" + filterName + ":";
        for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {
            var selector = _c[_b];
            message += "\n  " + selector + " " + (blockedSelectors[selector] ? '🚫' : '➡️');
        }
    }
    // console.log is ok here because it's under a debug clause
    // eslint-disable-next-line no-console
    console.log(message + "\n```");
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-gamut
 */
function getColorGamut() {
    // rec2020 includes p3 and p3 includes srgb
    for (var _i = 0, _a = ['rec2020', 'p3', 'srgb']; _i < _a.length; _i++) {
        var gamut = _a[_i];
        if (matchMedia("(color-gamut: " + gamut + ")").matches) {
            return gamut;
        }
    }
    return undefined;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors
 */
function areColorsInverted() {
    if (doesMatch('inverted')) {
        return true;
    }
    if (doesMatch('none')) {
        return false;
    }
    return undefined;
}
function doesMatch(value) {
    return matchMedia("(inverted-colors: " + value + ")").matches;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors
 */
function areColorsForced() {
    if (doesMatch$1('active')) {
        return true;
    }
    if (doesMatch$1('none')) {
        return false;
    }
    return undefined;
}
function doesMatch$1(value) {
    return matchMedia("(forced-colors: " + value + ")").matches;
}

var maxValueToCheck = 100;
/**
 * If the display is monochrome (e.g. black&white), the value will be ≥0 and will mean the number of bits per pixel.
 * If the display is not monochrome, the returned value will be 0.
 * If the browser doesn't support this feature, the returned value will be undefined.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/monochrome
 */
function getMonochromeDepth() {
    if (!matchMedia('(min-monochrome: 0)').matches) {
        // The media feature isn't supported by the browser
        return undefined;
    }
    // A variation of binary search algorithm can be used here.
    // But since expected values are very small (≤10), there is no sense in adding the complexity.
    for (var i = 0; i <= maxValueToCheck; ++i) {
        if (matchMedia("(max-monochrome: " + i + ")").matches) {
            return i;
        }
    }
    throw new Error('Too high value');
}

/**
 * @see https://www.w3.org/TR/mediaqueries-5/#prefers-contrast
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast
 */
function getContrastPreference() {
    if (doesMatch$2('no-preference')) {
        return 0 /* None */;
    }
    // The sources contradict on the keywords. Probably 'high' and 'low' will never be implemented.
    // Need to check it when all browsers implement the feature.
    if (doesMatch$2('high') || doesMatch$2('more')) {
        return 1 /* More */;
    }
    if (doesMatch$2('low') || doesMatch$2('less')) {
        return -1 /* Less */;
    }
    if (doesMatch$2('forced')) {
        return 10 /* ForcedColors */;
    }
    return undefined;
}
function doesMatch$2(value) {
    return matchMedia("(prefers-contrast: " + value + ")").matches;
}

/**
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
 */
function isMotionReduced() {
    if (doesMatch$3('reduce')) {
        return true;
    }
    if (doesMatch$3('no-preference')) {
        return false;
    }
    return undefined;
}
function doesMatch$3(value) {
    return matchMedia("(prefers-reduced-motion: " + value + ")").matches;
}

/**
 * @see https://www.w3.org/TR/mediaqueries-5/#dynamic-range
 */
function isHDR() {
    if (doesMatch$4('high')) {
        return true;
    }
    if (doesMatch$4('standard')) {
        return false;
    }
    return undefined;
}
function doesMatch$4(value) {
    return matchMedia("(dynamic-range: " + value + ")").matches;
}

var M = Math; // To reduce the minified code size
var fallbackFn = function () { return 0; };
/**
 * @see https://gitlab.torproject.org/legacy/trac/-/issues/13018
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=531915
 */
function getMathFingerprint() {
    // Native operations
    var acos = M.acos || fallbackFn;
    var acosh = M.acosh || fallbackFn;
    var asin = M.asin || fallbackFn;
    var asinh = M.asinh || fallbackFn;
    var atanh = M.atanh || fallbackFn;
    var atan = M.atan || fallbackFn;
    var sin = M.sin || fallbackFn;
    var sinh = M.sinh || fallbackFn;
    var cos = M.cos || fallbackFn;
    var cosh = M.cosh || fallbackFn;
    var tan = M.tan || fallbackFn;
    var tanh = M.tanh || fallbackFn;
    var exp = M.exp || fallbackFn;
    var expm1 = M.expm1 || fallbackFn;
    var log1p = M.log1p || fallbackFn;
    // Operation polyfills
    var powPI = function (value) { return M.pow(M.PI, value); };
    var acoshPf = function (value) { return M.log(value + M.sqrt(value * value - 1)); };
    var asinhPf = function (value) { return M.log(value + M.sqrt(value * value + 1)); };
    var atanhPf = function (value) { return M.log((1 + value) / (1 - value)) / 2; };
    var sinhPf = function (value) { return M.exp(value) - 1 / M.exp(value) / 2; };
    var coshPf = function (value) { return (M.exp(value) + 1 / M.exp(value)) / 2; };
    var expm1Pf = function (value) { return M.exp(value) - 1; };
    var tanhPf = function (value) { return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1); };
    var log1pPf = function (value) { return M.log(1 + value); };
    // Note: constant values are empirical
    return {
        acos: acos(0.123124234234234242),
        acosh: acosh(1e308),
        acoshPf: acoshPf(1e154),
        asin: asin(0.123124234234234242),
        asinh: asinh(1),
        asinhPf: asinhPf(1),
        atanh: atanh(0.5),
        atanhPf: atanhPf(0.5),
        atan: atan(0.5),
        sin: sin(-1e300),
        sinh: sinh(1),
        sinhPf: sinhPf(1),
        cos: cos(10.000000000123),
        cosh: cosh(1),
        coshPf: coshPf(1),
        tan: tan(-1e300),
        tanh: tanh(1),
        tanhPf: tanhPf(1),
        exp: exp(1),
        expm1: expm1(1),
        expm1Pf: expm1Pf(1),
        log1p: log1p(10),
        log1pPf: log1pPf(10),
        powPI: powPI(-100),
    };
}

/**
 * We use m or w because these two characters take up the maximum width.
 * Also there are a couple of ligatures.
 */
var defaultText = 'mmMwWLliI0fiflO&1';
/**
 * Settings of text blocks to measure. The keys are random but persistent words.
 */
var presets = {
    /**
     * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,
     * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.
     */
    default: [],
    /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */
    apple: [{ font: '-apple-system-body' }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    serif: [{ fontFamily: 'serif' }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    sans: [{ fontFamily: 'sans-serif' }],
    /** User can change it in desktop Chrome and desktop Firefox. */
    mono: [{ fontFamily: 'monospace' }],
    /**
     * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.
     * The height can be 0 in Chrome on a retina display.
     */
    min: [{ fontSize: '1px' }],
    /** Tells one OS from another in desktop Chrome. */
    system: [{ fontFamily: 'system-ui' }],
};
/**
 * The result is a dictionary of the width of the text samples.
 * Heights aren't included because they give no extra entropy and are unstable.
 *
 * The result is very stable in IE 11, Edge 18 and Safari 14.
 * The result changes when the OS pixel density changes in Chromium 87. The real pixel density is required to solve,
 * but seems like it's impossible: https://stackoverflow.com/q/1713771/1118709.
 * The "min" and the "mono" (only on Windows) value may change when the page is zoomed in Firefox 87.
 */
function getFontPreferences() {
    return withNaturalFonts(function (document, container) {
        var elements = {};
        var sizes = {};
        // First create all elements to measure. If the DOM steps below are done in a single cycle,
        // browser will alternate tree modification and layout reading, that is very slow.
        for (var _i = 0, _a = Object.keys(presets); _i < _a.length; _i++) {
            var key = _a[_i];
            var _b = presets[key], _c = _b[0], style = _c === void 0 ? {} : _c, _d = _b[1], text = _d === void 0 ? defaultText : _d;
            var element = document.createElement('span');
            element.textContent = text;
            element.style.whiteSpace = 'nowrap';
            for (var _e = 0, _f = Object.keys(style); _e < _f.length; _e++) {
                var name_1 = _f[_e];
                var value = style[name_1];
                if (value !== undefined) {
                    element.style[name_1] = value;
                }
            }
            elements[key] = element;
            container.appendChild(document.createElement('br'));
            container.appendChild(element);
        }
        // Then measure the created elements
        for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {
            var key = _h[_g];
            sizes[key] = elements[key].getBoundingClientRect().width;
        }
        return sizes;
    });
}
/**
 * Creates a DOM environment that provides the most natural font available, including Android OS font.
 * Measurements of the elements are zoom-independent.
 * Don't put a content to measure inside an absolutely positioned element.
 */
function withNaturalFonts(action, containerWidthPx) {
    if (containerWidthPx === void 0) { containerWidthPx = 4000; }
    /*
     * Requirements for Android Chrome to apply the system font size to a text inside an iframe:
     * - The iframe mustn't have a `display: none;` style;
     * - The text mustn't be positioned absolutely;
     * - The text block must be wide enough.
     *   2560px on some devices in portrait orientation for the biggest font size option (32px);
     * - There must be much enough text to form a few lines (I don't know the exact numbers);
     * - The text must have the `text-size-adjust: none` style. Otherwise the text will scale in "Desktop site" mode;
     *
     * Requirements for Android Firefox to apply the system font size to a text inside an iframe:
     * - The iframe document must have a header: `<meta name="viewport" content="width=device-width, initial-scale=1" />`.
     *   The only way to set it is to use the `srcdoc` attribute of the iframe;
     * - The iframe content must get loaded before adding extra content with JavaScript;
     *
     * https://example.com as the iframe target always inherits Android font settings so it can be used as a reference.
     *
     * Observations on how page zoom affects the measurements:
     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;
     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;
     * - macOS Safari 14.0: offsetWidth = 5% fluctuation;
     * - macOS Safari 14.0: getBoundingClientRect = 5% fluctuation;
     * - iOS Safari 9, 10, 11.0, 12.0: haven't found a way to zoom a page (pinch doesn't change layout);
     * - iOS Safari 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;
     * - iOS Safari 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;
     * - iOS Safari 14.0: offsetWidth = 100% reliable;
     * - iOS Safari 14.0: getBoundingClientRect = 100% reliable;
     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + offsetWidth = 1px fluctuation;
     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + getBoundingClientRect = 100% reliable;
     * - Chrome 87: offsetWidth = 1px fluctuation;
     * - Chrome 87: getBoundingClientRect = 0.7px fluctuation;
     * - Firefox 48, 51: offsetWidth = 10% fluctuation;
     * - Firefox 48, 51: getBoundingClientRect = 10% fluctuation;
     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: offsetWidth = width 100% reliable, height 10% fluctuation;
     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: getBoundingClientRect = width 100% reliable, height 10%
     *   fluctuation;
     * - Android Chrome 86: haven't found a way to zoom a page (pinch doesn't change layout);
     * - Android Firefox 84: font size in accessibility settings changes all the CSS sizes, but offsetWidth and
     *   getBoundingClientRect keep measuring with regular units, so the size reflects the font size setting and doesn't
     *   fluctuate;
     * - IE 11, Edge 18: zoom 1/devicePixelRatio + offsetWidth = 100% reliable;
     * - IE 11, Edge 18: zoom 1/devicePixelRatio + getBoundingClientRect = reflects the zoom level;
     * - IE 11, Edge 18: offsetWidth = 100% reliable;
     * - IE 11, Edge 18: getBoundingClientRect = 100% reliable;
     */
    return withIframe(function (_, iframeWindow) {
        var iframeDocument = iframeWindow.document;
        var iframeBody = iframeDocument.body;
        var bodyStyle = iframeBody.style;
        bodyStyle.width = containerWidthPx + "px";
        bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = 'none';
        // See the big comment above
        if (isChromium()) {
            iframeBody.style.zoom = "" + 1 / iframeWindow.devicePixelRatio;
        }
        else if (isWebKit()) {
            iframeBody.style.zoom = 'reset';
        }
        // See the big comment above
        var linesOfText = iframeDocument.createElement('div');
        linesOfText.textContent = __spreadArrays(Array((containerWidthPx / 20) << 0)).map(function () { return 'word'; }).join(' ');
        iframeBody.appendChild(linesOfText);
        return action(iframeDocument, iframeBody);
    }, '<!doctype html><html><head><meta name="viewport" content="width=device-width, initial-scale=1">');
}

/**
 * The list of entropy sources used to make visitor identifiers.
 *
 * This value isn't restricted by Semantic Versioning, i.e. it may be changed without bumping minor or major version of
 * this package.
 */
var fp_esm_sources = {
    // READ FIRST:
    // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source
    // to learn how entropy source works and how to make your own.
    // The sources run in this exact order.
    // The asynchronous sources are at the start to run in parallel with other sources.
    fonts: getFonts,
    domBlockers: getDomBlockers,
    fontPreferences: getFontPreferences,
    audio: getAudioFingerprint,
    screenFrame: getRoundedScreenFrame,
    osCpu: getOsCpu,
    languages: getLanguages,
    colorDepth: getColorDepth,
    deviceMemory: getDeviceMemory,
    screenResolution: getScreenResolution,
    hardwareConcurrency: getHardwareConcurrency,
    timezone: getTimezone,
    sessionStorage: getSessionStorage,
    localStorage: getLocalStorage,
    indexedDB: getIndexedDB,
    openDatabase: getOpenDatabase,
    cpuClass: getCpuClass,
    platform: getPlatform,
    plugins: getPlugins,
    canvas: getCanvasFingerprint,
    touchSupport: getTouchSupport,
    vendor: getVendor,
    vendorFlavors: getVendorFlavors,
    cookiesEnabled: areCookiesEnabled,
    colorGamut: getColorGamut,
    invertedColors: areColorsInverted,
    forcedColors: areColorsForced,
    monochrome: getMonochromeDepth,
    contrast: getContrastPreference,
    reducedMotion: isMotionReduced,
    hdr: isHDR,
    math: getMathFingerprint,
};
/**
 * Loads the built-in entropy sources.
 * Returns a function that collects the entropy components to make the visitor identifier.
 */
function loadBuiltinSources(options) {
    return loadSources(fp_esm_sources, options, []);
}

var commentTemplate = '$ if upgrade to Pro: https://fpjs.dev/pro';
function getConfidence(components) {
    var openConfidenceScore = getOpenConfidenceScore(components);
    var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);
    return { score: openConfidenceScore, comment: commentTemplate.replace(/\$/g, "" + proConfidenceScore) };
}
function getOpenConfidenceScore(components) {
    // In order to calculate the true probability of the visitor identifier being correct, we need to know the number of
    // website visitors (the higher the number, the less the probability because the fingerprint entropy is limited).
    // JS agent doesn't know the number of visitors, so we can only do an approximate assessment.
    if (isAndroid()) {
        return 0.4;
    }
    // Safari (mobile and desktop)
    if (isWebKit()) {
        return isDesktopSafari() ? 0.5 : 0.3;
    }
    var platform = components.platform.value || '';
    // Windows
    if (/^Win/.test(platform)) {
        // The score is greater than on macOS because of the higher variety of devices running Windows.
        // Chrome provides more entropy than Firefox according too
        // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Windows%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D
        // So we assign the same score to them.
        return 0.6;
    }
    // macOS
    if (/^Mac/.test(platform)) {
        // Chrome provides more entropy than Safari and Safari provides more entropy than Firefox.
        // Chrome is more popular than Safari and Safari is more popular than Firefox according to
        // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Mac%20OS%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D
        // So we assign the same score to them.
        return 0.5;
    }
    // Another platform, e.g. a desktop Linux. It's rare, so it should be pretty unique.
    return 0.7;
}
function deriveProConfidenceScore(openConfidenceScore) {
    return round(0.99 + 0.01 * openConfidenceScore, 0.0001);
}

function componentsToCanonicalString(components) {
    var result = '';
    for (var _i = 0, _a = Object.keys(components).sort(); _i < _a.length; _i++) {
        var componentKey = _a[_i];
        var component = components[componentKey];
        var value = component.error ? 'error' : JSON.stringify(component.value);
        result += "" + (result ? '|' : '') + componentKey.replace(/([:|\\])/g, '\\$1') + ":" + value;
    }
    return result;
}
function componentsToDebugString(components) {
    return JSON.stringify(components, function (_key, value) {
        if (value instanceof Error) {
            return errorToObject(value);
        }
        return value;
    }, 2);
}
function hashComponents(components) {
    return x64hash128(componentsToCanonicalString(components));
}
/**
 * Makes a GetResult implementation that calculates the visitor id hash on demand.
 * Designed for optimisation.
 */
function makeLazyGetResult(components) {
    var visitorIdCache;
    // This function runs very fast, so there is no need to make it lazy
    var confidence = getConfidence(components);
    // A plain class isn't used because its getters and setters aren't enumerable.
    return {
        get visitorId() {
            if (visitorIdCache === undefined) {
                visitorIdCache = hashComponents(this.components);
            }
            return visitorIdCache;
        },
        set visitorId(visitorId) {
            visitorIdCache = visitorId;
        },
        confidence: confidence,
        components: components,
        version: fp_esm_version,
    };
}
/**
 * A delay is required to ensure consistent entropy components.
 * See https://github.com/fingerprintjs/fingerprintjs/issues/254
 * and https://github.com/fingerprintjs/fingerprintjs/issues/307
 * and https://github.com/fingerprintjs/fingerprintjs/commit/945633e7c5f67ae38eb0fea37349712f0e669b18
 */
function prepareForSources(delayFallback) {
    if (delayFallback === void 0) { delayFallback = 50; }
    // A proper deadline is unknown. Let it be twice the fallback timeout so that both cases have the same average time.
    return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);
}
/**
 * The function isn't exported from the index file to not allow to call it without `load()`.
 * The hiding gives more freedom for future non-breaking updates.
 *
 * A factory function is used instead of a class to shorten the attribute names in the minified code.
 * Native private class fields could've been used, but TypeScript doesn't allow them with `"target": "es5"`.
 */
function makeAgent(getComponents, debug) {
    var creationTime = Date.now();
    return {
        get: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var startTime, components, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            startTime = Date.now();
                            return [4 /*yield*/, getComponents()];
                        case 1:
                            components = _a.sent();
                            result = makeLazyGetResult(components);
                            if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {
                                // console.log is ok here because it's under a debug clause
                                // eslint-disable-next-line no-console
                                console.log("Copy the text below to get the debug data:\n\n```\nversion: " + result.version + "\nuserAgent: " + navigator.userAgent + "\ntimeBetweenLoadAndGet: " + (startTime - creationTime) + "\nvisitorId: " + result.visitorId + "\ncomponents: " + componentsToDebugString(components) + "\n```");
                            }
                            return [2 /*return*/, result];
                    }
                });
            });
        },
    };
}
/**
 * Sends an unpersonalized AJAX request to collect installation statistics
 */
function monitor() {
    // The FingerprintJS CDN (https://github.com/fingerprintjs/cdn) replaces `window.__fpjs_d_m` with `true`
    if (window.__fpjs_d_m || Math.random() >= 0.01) {
        return;
    }
    try {
        var request = new XMLHttpRequest();
        request.open('get', "https://openfpcdn.io/fingerprintjs/v" + fp_esm_version + "/npm-monitoring", true);
        request.send();
    }
    catch (error) {
        // console.error is ok here because it's an unexpected error handler
        // eslint-disable-next-line no-console
        console.error(error);
    }
}
/**
 * Builds an instance of Agent and waits a delay required for a proper operation.
 */
function load(_a) {
    var _b = _a === void 0 ? {} : _a, delayFallback = _b.delayFallback, debug = _b.debug, _c = _b.monitoring, monitoring = _c === void 0 ? true : _c;
    return __awaiter(this, void 0, void 0, function () {
        var getComponents;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (monitoring) {
                        monitor();
                    }
                    return [4 /*yield*/, prepareForSources(delayFallback)];
                case 1:
                    _d.sent();
                    getComponents = loadBuiltinSources({ debug: debug });
                    return [2 /*return*/, makeAgent(getComponents, debug)];
            }
        });
    });
}

// The default export is a syntax sugar (`import * as FP from '...' → import FP from '...'`).
// It should contain all the public exported values.
var fp_esm_index = { load: load, hashComponents: hashComponents, componentsToDebugString: componentsToDebugString };
// The exports below are for private usage. They may change unexpectedly. Use them at your own risk.
/** Not documented, out of Semantic Versioning, usage is at your own risk */
var murmurX64Hash128 = x64hash128;

/* harmony default export */ var fp_esm = (fp_esm_index);


// EXTERNAL MODULE: ./node_modules/qs/lib/index.js
var lib = __webpack_require__("4328");
var lib_default = /*#__PURE__*/__webpack_require__.n(lib);

// EXTERNAL MODULE: ./node_modules/file-saver/dist/FileSaver.min.js
var FileSaver_min = __webpack_require__("21a6");
var FileSaver_min_default = /*#__PURE__*/__webpack_require__.n(FileSaver_min);

// EXTERNAL MODULE: ./src/application/chatstorage.js
var chatstorage = __webpack_require__("6129");

// CONCATENATED MODULE: ./src/application/mtrx.js




const sdk = __webpack_require__("0a00");









var mtrx_axios = __webpack_require__("bc3a");

console.log("sdk", sdk);

class mtrx_MTRX {
  constructor(core, p) {
    Object(defineProperty["a" /* default */])(this, "fastsync", function () {
      var state = this.client.getSyncState();

      if (state === "PREPARED" || state === "SYNCING") {} else {
        return this.client.retryImmediately().catch(e => {
          console.log('fastsyncerror', e);
        });
      }
    });

    if (!p) p = {};
    this.core = core;
    this.baseUrl = p.baseUrl;
    this.ready = false;
    this.error = false;
    this.kit = new mtrxkit(this.core, p);
    this.sdk = sdk;
    this.sync = '';
    this.nd = false;
    this.version = 4;
    this.dversion = '2';
    this.backup = {};
    this.db = null;
    this.customrequest = true;
    this.devicekey = 'm8_device';
  }

  setCredentials() {
    var _this = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      return _this.core.user.matrixCredentials().then(credentials => {
        _this.credentials = credentials;
        return Promise.resolve(credentials);
      });
    })();
  }

  getDevices() {
    var devices = localStorage[this.devicekey] || '';

    if (devices) {
      try {
        var d = JSON.parse(devices);
        return d;
      } catch (e) {}
    }

    return {};
  }

  setDevice(device, userkey) {
    var devices = this.getDevices();
    devices[userkey] = device;
    localStorage[this.devicekey] = JSON.stringify(devices);
    localStorage.device_ = JSON.stringify(device);
  }

  getDevice(userkey) {// return localStorage.m8_device;
    // var devices = this.getDevices()
    // return devices[userkey] || null
  }

  request(opts, clbk) {
    var response = null;
    var error = null;
    const cancelTokenSource = mtrx_axios.CancelToken.source();
    var aopts = {
      url: opts.uri,
      params: opts.qs,
      data: JSON.parse(opts.body || "{}"),
      timeout: opts.timeout,
      headers: opts.headers,
      json: opts.json,
      method: opts.method,
      withCredentials: opts.withCredentials,
      _matrix_opts: opts,
      cancelToken: cancelTokenSource.token,
      paramsSerializer: function (params) {
        return lib_default.a.stringify(params, opts.qsStringifyOptions);
      }
    };
    var req = mtrx_axios(aopts).then(response => {
      return Promise.resolve(response);
    }).catch(e => {
      error = e;
      response = e.response;
      return Promise.resolve(response);
    }).then(response => {
      var parsederror = error;

      if (error) {
        try {
          parsederror = JSON.parse(functions["a" /* default */].deep(response, 'request.responseText'));
          error = new sdk.MatrixError(parsederror);
        } catch (e) {} //error.error = parsederror

      }

      clbk(error, response, functions["a" /* default */].deep(response, 'request.responseText') || '');
      /*if (error)
        return Promise.reject(parsederror)*/
    });

    req.abort = function () {
      cancelTokenSource.cancel();
    };

    return req;
    /*
    uri	string	The complete URI.
    method	string	The HTTP method.
    qs	Object	The query parameters to append to the URI.
    body	Object	The JSON-serializable object.
    json	boolean	True if this is a JSON request.
    _matrix_opts
    */
  }

  getFingerprint() {
    var _this2 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      var fp = yield fp_esm.load();
      var result = yield fp.get();
      return result.visitorId + _this2.dversion;
    })();
  }

  createMtrxClient(opts) {
    var client = sdk.createClient(opts);

    client.getProfileInfo = function () {
      return Promise.resolve({
        avatar_url: '',
        displayname: 'test'
      });
    };

    return client;
  }

  getClient() {
    var _this3 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      yield _this3.setCredentials();
      var userClientData = {
        baseUrl: _this3.baseUrl
      };
      var opts = {
        baseUrl: _this3.baseUrl
      };
      if (_this3.customrequest) opts.request = _this3.request;

      var client = _this3.createMtrxClient(opts);

      try {
        var userData = yield client.login('m.login.password', {
          user: _this3.credentials.username,
          password: _this3.credentials.password
        });
      } catch (e) {
        if (e && e.indexOf && e.indexOf('M_USER_DEACTIVATED') > -1) {
          _this3.error = 'M_USER_DEACTIVATED';
          return null;
        }

        if (yield client.isUsernameAvailable(_this3.credentials.username)) {
          userData = yield client.register(_this3.credentials.username, _this3.credentials.password, null, {
            type: 'm.login.dummy' //signature : this.core.user.signature('matrix')

          });
        } else {
          throw 'Signup error, username is not available: ' + e;
        }
      }

      localStorage.accessToken = userData.access_token;
      var store = new sdk.IndexedDBStore({
        indexedDB: window.indexedDB,
        dbName: 'matrix-js-sdk:' + _this3.credentials.username
      });
      yield store.startup();
      Object.assign(userClientData, {
        userId: userData.user_id,
        accessToken: userData.access_token,
        unstableClientRelationAggregation: true,
        timelineSupport: true,
        store: store // deviceId: userData.device_id,

      });
      if (_this3.customrequest) userClientData.request = _this3.request;

      var userClient = _this3.createMtrxClient(userClientData);

      window.client = userClient;
      window.core = _this3.core;
      yield userClient.startClient({
        pollTimeout: 60000,
        resolveInvitesToProfiles: true
      });
      _this3.access = userClientData;
      _this3.client = userClient;
      return userClient;
    })();
  }

  clearstorage(key) {
    var keys = Object.keys(localStorage),
        i = keys.length;

    while (i--) {
      if (keys[i] && keys[i].indexOf(key) == 0) {
        localStorage.removeItem(keys[i]);
      }
    }
  }

  clearstore() {
    var version = Number(localStorage.matrixversion || '0');

    if (version < this.version) {
      this.clearstorage('crypto.');
      this.clearstorage('session.');
      var keys = ['', '2', '3', '4', '5', '6', '8'];

      _.each(keys, function (key) {
        delete localStorage['m' + key + '_device'];
      });
    }

    localStorage.matrixversion = this.version;
  }

  createClient() {
    var _this4 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      try {
        _this4.client = yield _this4.getClient();
        _this4.store = _this4.client.store;
        _this4.ready = true;
      } catch (e) {
        _this4.error = e;
      }

      return true;
    })();
  }

  wait() {
    return functions["a" /* default */].pretry(() => {
      return this.ready;
    }).then(() => {
      if (this.error) {
        return Promise.reject(this.error);
      }

      return Promise.resolve();
    });
  }

  waitchats() {
    return functions["a" /* default */].pretry(() => {
      return this.chatsready;
    }).then(() => {
      if (this.error) {
        return Promise.reject(this.error);
      }

      return Promise.resolve();
    });
  }

  me(id) {
    var _this$core$user$useri;

    return functions["a" /* default */].getmatrixid(id) == ((_this$core$user$useri = this.core.user.userinfo) === null || _this$core$user$useri === void 0 ? void 0 : _this$core$user$useri.id);
  }

  reciepts(event) {
    var room = null;
    return functions["a" /* default */].pretry(() => {
      var rooms = this.core.mtrx.store.rooms;
      room = rooms[event.getRoomId()];
      return room;
    }).then(() => {
      return room.getReceiptsForEvent(event);
    });
  }

  storeFileLocal(url, file) {
    return file.arrayBuffer().then(arrayBuffer => {
      const blob = new Blob([new Uint8Array(arrayBuffer)], {
        type: file.type
      });

      if (window.POCKETNETINSTANCE && window.POCKETNETINSTANCE.storage && window.cordova) {
        return window.POCKETNETINSTANCE.storage.saveFile(url, blob);
      } else {
        if (this.db) {
          return this.db.set(url, blob);
        }
      }
    });
  }

  download(url) {
    // Function to download the file
    var dlFile = () => {
      return functions["a" /* default */].fetchLocal(url).then(response => {
        // Update the storage before returning
        if (window.POCKETNETINSTANCE && window.POCKETNETINSTANCE.storage && window.cordova) {
          window.POCKETNETINSTANCE.storage.saveFile(url, response.data);
        } else {
          if (this.db) {
            this.db.set(url, response.data);
          }
        }

        return Promise.resolve(response.data);
      });
    }; // Check if file is saved in the storage


    if (window.POCKETNETINSTANCE && window.POCKETNETINSTANCE.storage && window.cordova) {
      return window.POCKETNETINSTANCE.storage.loadFile(url).then(file => {
        return Promise.resolve(file);
      }, e => {
        // Nothing in storage, download file
        return dlFile();
      });
    } else {
      if (this.db) {
        return this.db.get(url).then(file => {
          return Promise.resolve(file);
        }).catch(() => {
          return dlFile();
        });
      }

      return dlFile();
    }
  }

  customRoomType(roomId) {
    var _ev$event;

    var room = this.core.mtrx.client.getRoom(roomId);
    if (!room) return null;
    var ev = room.currentState.getStateEvents("m.room.custom", "") || {};
    return (_ev$event = ev.event) === null || _ev$event === void 0 ? void 0 : _ev$event.content.type;
  }

  isReaded(event, me) {
    return this.reciepts(event).then(reciepts => {
      return Promise.resolve(_.find(reciepts, reciept => {
        var m = this.me(reciept.userId);
        return reciept.type == 'm.read' && (me && m || !m && !me);
      }));
    });
  }

  initEvents() {
    let self = this;
    let userId = this.core.mtrx.client.credentials.userId;
    this.client.on("RoomMember.membership", (event, member) => {
      if (!this.chatsready) return;

      if ((member.membership === "invite" || member.membership === "join") && event.getSender() !== userId) {
        this.core.notifier.event(event);
      }
    });
    this.client.on("Room.timeline", (message, member) => {
      if (!this.chatsready) return;
      if (!message.event.content) return;

      if (message.event.content.msgtype === 'm.file') {
        message.event.content.pbody = JSON.parse(message.event.content.body);
      }

      if (message.getSender() !== userId) {
        var m_chat = this.core.mtrx.client.getRoom(message.event.room_id);
        if (message.event.content['m.relates_to'] && message.event.content['m.relates_to']["rel_type"] == 'm.replace') return false;
        if (m_chat && this.core.pcrypto.rooms[message.event.room_id]) this.core.notifier.event(message, m_chat);
      }
    });
    this.client.on("RoomMember.typing", (event, member) => {
      this.core.store.dispatch('TYPING_EVENT', member);
    });
    this.client.on('sync', (state, prevState, res) => {
      if (state === 'PREPARED') {
        this.setready();
      }

      this.core.store.dispatch('FETCH_CHATS').then(r => {
        this.core.store.dispatch('FETCH_EVENTS');
        this.core.store.commit('ALL_NOTIFICATIONS_COUNT', this.client.getRooms());
      });
    });
  }

  setready() {
    if (!this.chatsready) {
      this.chatsready = true;
      this.core.store.commit('SET_CHATS_READY', true);
    }
  }

  initdb() {
    return Object(chatstorage["a" /* default */])('files', 1).then(db => {
      this.db = db;
      return Promise.resolve();
    }).catch(() => {
      return Promise.resolve();
    });
  }

  init() {
    return this.createClient().then(() => {
      if (this.error) {
        return Promise.reject(this.error);
      }

      return this.initdb();
    }).then(() => {
      this.initEvents();
      return Promise.resolve();
    });
  }

  deactivateAccount() {
    if (this.client) {
      return this.client.deactivateAccount(this.credentials, true);
    }

    return Promise.reject('noclient');
  }

  destroy() {
    if (this.client) {
      // Before client is stopped, delete the pusher if needed
      if (window.cordova) {
        this.deletePusher();
      }

      this.client.stopClient();
    }

    this.chatsready = false;
    this.ready = false;
    this.error = false;
  } // Try to delete the current pusher if needed


  deletePusher() {
    // Try to get a saved token
    if (!window.cordova) return;
    var savedToken;
    if (localStorage) savedToken = localStorage.getItem('fcmtoken5');

    if (savedToken && this.client.setPusher) {
      var appName = 'pocketnet';
      var pusherData = {
        app_display_name: appName,
        app_id: appName + window.cordova.platformId,
        data: {
          url: this.core.mtrx.baseUrl + '/_matrix/push/v1/notify',
          default_payload: {
            aps: {
              "sound": "default",
              "content-available": 1
            }
          }
        },
        device_display_name: window.device.manufacturer + " " + window.device.model,
        kind: null,
        // Set to null to delete the pusher
        lang: localStorage.getItem('loc') || 'en',
        pushkey: savedToken
      };
      this.core.mtrx.client.setPusher(pusherData).then(() => {
        localStorage.removeItem('fcmtoken5');
      }, err => {
        console.log(err);
      });
    }
  }

  uploadContent(file, save) {
    return this.client.uploadContent(file).then(src => {
      return Promise.resolve(this.core.mtrx.client.mxcUrlToHttp(src));
    }).then(url => {
      if (save) {
        return this.storeFileLocal(url, file).then(() => {
          return Promise.resolve(url);
        }).catch(e => {
          return Promise.resolve(url);
        });
      }

      return Promise.resolve();
    });
  }
  /*transaction(roomId, txId){
    this.client.sendEvent(roomId, "m.room.message", {
        txId: roomId,
      msgtype: "m.notice"
      }, "");
  }*/


  originalEvent(id, timeline) {
    var rtr = timeline._timelineSet.getRelationsForEvent(e.event.event_id, 'm.reference', 'm.room.message');

    if (rtr) {
      var events = rtr.getRelations();
      return events[0];
    }
  }

  clearEventId(event) {
    var previd = null;
    if (event.event.content['m.relates_to'] && event.event.content['m.relates_to']['rel_type'] == 'm.replace') previd = event.event.content['m.relates_to']['event_id'];
    return previd || event.getId();
  }

  textEvent(chat, text) {
    if (chat.pcrypto.canBeEncrypt()) {
      return chat.pcrypto.encryptEvent(text);
    }

    return Promise.resolve(this.sdk.ContentHelpers.makeTextMessage(text));
  }

  sendtext(chat, text, _ref) {
    let {
      relation,
      from
    } = _ref;
    return this.textEvent(chat, text).then(r => {
      if (relation) {
        r['m.relates_to'] = {
          "rel_type": relation.type,
          "event_id": this.clearEventId(relation.event)
        };
      }

      if (from) {
        r['from'] = from;
      }

      if (chat.pcrypto.canBeEncrypt()) {
        return this.client.sendEvent(chat.roomId, 'm.room.message', r);
      } else return this.client.sendMessage(chat.roomId, r);
    });
  }

  sendFile(chat, file, meta, _ref2, notenc) {
    let {
      relation,
      from
    } = _ref2;
    if (!meta) meta = {};
    var fileInfo = {};
    fileInfo.name = file.name;
    fileInfo.size = file.size;

    var encpromise = (() => Promise.resolve(file))();

    var promise = null;

    if (chat.pcrypto.canBeEncrypt() && !notenc) {
      encpromise = chat.pcrypto.encryptFile(file).then(r => {
        fileInfo.secrets = r.secrets;
        return Promise.resolve(r.file);
      });
    }

    return encpromise.then(file => {
      promise = this.client.uploadContent(file);
      if (promise.abort) meta.abort = promise.abort;
      return promise;
    }).then(src => {
      if (meta.aborted) return Promise.reject('aborted');
      return Promise.resolve(this.client.mxcUrlToHttp(src));
    }).then(url => {
      fileInfo.url = url;
      let body = JSON.stringify(fileInfo);
      var r = {
        body: body,
        msgtype: 'm.file'
      };

      if (relation) {
        r['m.relates_to'] = {
          "rel_type": relation.type,
          "event_id": this.clearEventId(relation.event)
        };
      }

      if (from) {
        r['from'] = from;
      }

      return this.client.sendMessage(chat.roomId, r);
    });
  }

  sendImageBase64(chat, base64, meta, p) {
    var method = 'toFileFetch';
    if (base64.indexOf('data:') > -1) method = 'toFile';
    return functions["a" /* default */].Base64[method](base64).then(file => {
      return this.sendImage(chat, base64, file, meta, p);
    });
  }

  sendAudioBase64(chat, base64, meta, p) {
    var method = 'toFileFetch';
    if (base64.indexOf('data:') > -1) method = 'toFile';
    return functions["a" /* default */].Base64[method](base64).then(file => {
      return this.sendAudio(chat, base64, file, meta, p);
    });
  }

  sendImage(chat, base64, file, meta) {
    let {
      relation,
      from
    } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    if (!file) return this.sendImageBase64(chat, base64, meta);
    var i = new utils_images["a" /* default */]();
    var info = {};
    if (!meta) meta = {};
    return i.wh(base64).then(_info => {
      info = _info;
      if (from) info.from = from;

      if (chat.pcrypto.canBeEncrypt()) {
        return chat.pcrypto.encryptFile(file).then(r => {
          info.secrets = r.secrets;
          return Promise.resolve(r.file);
        });
      }

      return Promise.resolve(file);
    }).then(file => {
      var promise = this.core.mtrx.uploadContent(file, true);
      if (promise.abort) meta.abort = promise.abort;
      return promise;
    }).then(image => {
      if (meta.aborted) return Promise.reject('aborted');
      return this.client.sendImageMessage(chat.roomId, image, info, 'Image');
    });
  }

  sendAudio(chat, base64, file, meta) {
    let {
      relation,
      from
    } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    if (!file) return this.sendAudioBase64(chat, base64, meta);
    let info = {};
    info.from = from;
    return new Promise(resolve => {
      if (chat.pcrypto.canBeEncrypt()) {
        console.log("??????????");
        return chat.pcrypto.encryptFile(file).then(r => {
          info.secrets = r.secrets;
          return resolve(r.file);
        });
      }

      resolve(file);
    }).then(file => {
      let promise = this.core.mtrx.uploadContent(file, true);
      if (promise.abort) meta.abort = promise.abort;
      return promise;
    }).then(audio => {
      console.log(audio, info);
      if (meta.aborted) return Promise.reject('aborted');
      return this.client.sendAudioMessage(chat.roomId, audio, info, 'Audio');
    });
  }

  getFile(chat, event) {
    var _this5 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      try {
        var decryptKey = yield chat.pcrypto.decryptKey(event.event);
        event.event.decryptKey = decryptKey;
      } catch (e) {
        return Promise.reject(e);
      }

      return _this5.download(event.event.content.pbody.url).then(blob => {
        return chat.pcrypto.decryptFile(blob, decryptKey);
      }).then(r => {
        return Promise.resolve({
          file: r,
          name: event.event.content.pbody.name
        });
      }).catch(e => {
        return Promise.reject(e);
      });
    })();
  }

  downloadFile(chat, event) {
    var _this6 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      return _this6.getFile(chat, event).then(r => {
        if (window.cordova && functions["a" /* default */].saveFileCordova) {
          return new Promise((resolve, reject) => {
            functions["a" /* default */].saveFileCordova(r.file, r.name, function (i, e) {
              if (e) {
                console.error(e);
              }

              if (!e) resolve();else reject('unable');
            });
          });
        }

        return FileSaver_min_default.a.saveAs(r.file, r.name);
      }).catch(e => {
        console.error(e);
        return Promise.reject(e);
      });
    })();
  }

  getAudioUnencrypt(chat, event) {
    var _this7 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      console.log('getAudioUnencrypt');

      if (event.event.content.audioData) {
        return Promise.resolve(event.event.content.audioData);
      }

      return _this7.download(event.event.content.url, true).then(r => {
        return functions["a" /* default */].readFile(r);
      }).then(arraybuffer => {
        event.event.content.audioData = arraybuffer;
        return Promise.resolve(arraybuffer);
      });
    })();
  }

  getAudio(chat, event) {
    var _this8 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      if (event.event.decryptedAudio) {
        return Promise.resolve(event.event.decryptedAudio);
      }

      try {
        var decryptKey = yield chat.pcrypto.decryptKey(event.event);
        event.event.decryptKey = decryptKey;
        return _this8.download(event.event.content.url, true).then(blob => {
          return chat.pcrypto.decryptFile(blob, decryptKey);
        }).then(r => {
          return functions["a" /* default */].readFile(r);
        }).then(arraybuffer => {
          event.event.decryptedAudio = arraybuffer;
          return Promise.resolve(event.event.decryptedAudio);
        }).catch(e => {
          return Promise.reject(e);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    })();
  }

  getImage(chat, event) {
    var _this9 = this;

    return Object(asyncToGenerator["a" /* default */])(function* () {
      if (event.event.decryptedImage) {
        return Promise.resolve(event.event.decryptedImage);
      }

      try {
        var decryptKey = yield chat.pcrypto.decryptKey(event.event);
        event.event.decryptKey = decryptKey;
        return _this9.download(event.event.content.url, true).then(blob => {
          return chat.pcrypto.decryptFile(blob, decryptKey);
        }).then(r => {
          return functions["a" /* default */].Base64.fromFile(r);
        }).then(url => {
          event.event.decryptedImage = url.replace('data:file;', 'data:image/jpeg;');
          return Promise.resolve(event.event.decryptedImage);
        }).catch(e => {
          return Promise.reject(e);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    })();
  }

  shareInChat(id, share) {
    var m_chat = this.client.getRoom(id); //// share.openwithItems []
    //// https://github.com/j3k0/cordova-plugin-openwith (item.type ---> resize)

    return this.core.mtrx.kit.prepareChat(m_chat).then(r => {
      var promises = []; //// todo resize images.resize.fit

      _.each(share.images, base64 => {
        var promise = this.sendImageBase64(m_chat, base64, {}, {
          from: share.from
        });
        promises.push(promise);
      });

      _.each(share.files, file => {
        promises.push(this.sendFile(m_chat, file, {}, {
          from: share.from
        }));
      });

      _.each(share.urls, url => {
        promises.push(this.sendtext(m_chat, url, {
          from: share.from
        }));
      });

      _.each(share.messages, text => {
        promises.push(this.sendtext(m_chat, text, {
          from: share.from
        }));
      });

      _.each(share.audio, arraybuffer => {
        var base64 = 'data:audio/mpeg;base64,' + functions["a" /* default */]._arrayBufferToBase64(arraybuffer);

        promises.push(this.sendAudioBase64(m_chat, base64, {}, {
          from: share.from
        }));
      });

      return Promise.all(promises);
    });
  }

  opencontact(contact) {
    this.core.store.commit('setmodal', {
      caption: contact.name,
      type: 'contact',
      data: {
        contact: contact
      }
    });
  }

  complain(caption, p) {
    this.core.store.commit('setmodal', {
      caption: caption,
      type: 'complain',
      data: p
    });
  }

  blockeduser(id) {
    if (!this.core.mtrx.client) return;
    return this.core.mtrx.client.isUserIgnored(this.core.user.matrixId(id));
  }

  blockUser(userId) {
    userId = this.core.user.matrixId(userId);

    if (this.client.isUserIgnored(userId)) {
      return Promise.resolve();
    }

    var blackList = this.client.getIgnoredUsers();
    blackList.push(userId);
    return this.client.setIgnoredUsers(blackList).then(r => {
      return Promise.resolve(r);
    });
  }

  unblockUser(userId) {
    userId = this.core.user.matrixId(userId);

    if (!this.client.isUserIgnored(userId)) {
      return Promise.resolve();
    }

    var blackList = this.client.getIgnoredUsers();
    blackList = _.filter(blackList, function (_id) {
      return userId != _id;
    });
    return this.client.setIgnoredUsers(blackList).then(r => {
      return Promise.resolve(r);
    });
  }

  chatUsersInfo(roomId, m) {
    if (!m) m = 'chatUsers';
    var _users = this.core.store.state.users;
    return _.filter(_.map(this[m](roomId), user => {
      return _users[user.userId];
    }), function (u) {
      return u;
    });
  }

  chatUsers(roomId) {
    return this.core.store.state.chatusers[roomId] || [];
  }

  anotherChatUsers(roomId) {
    return _.filter(this.chatUsers(roomId), user => {
      return user.userId != this.core.user.userinfo.id;
    });
  }

}

/* harmony default export */ var mtrx = (mtrx_MTRX);
// CONCATENATED MODULE: ./src/application/notifier.js

//require('ion-sound')
 //const { Howl, Howler } = require('howler');

class notifier_Notifier {
  constructor(core, p) {
    Object(defineProperty["a" /* default */])(this, "key", 'showednotifications');

    Object(defineProperty["a" /* default */])(this, "showed", {});

    Object(defineProperty["a" /* default */])(this, "show", function (info, click) {
      if (typeof click != 'function') {
        var route = click;

        click = () => {
          this.core.vm.$router.push(route).catch(e => {});
          if (this.core.apptochat) this.core.apptochat();
        };
      }

      var position = "bottom-right";

      if (this.core.vm.$store.state.mobile) {
        position = 'top-left';
      }

      this.core.vm.$message({
        event: info.event,
        title: info.title,
        message: info.message,
        roomId: info.roomId,
        iconImg: info.icon || null,
        onClick: click,
        zIndex: 999,
        supportHTML: true,
        wrapperClassName: "notificationWrapper",
        position: position,
        type: 'info',
        chat: info.chat,
        duration: 5000
      });
    });

    if (!p) p = {};
    this.core = core;
    this.showed = JSON.parse(localStorage[this.key] || "{}");
    this.ion = null;
    if (typeof ion != 'undefined') this.ion = ion;
    /*ion.sound({
      sounds: [
    	{
    	  name: "glass"
    	}
      ],
      path: "sounds/",
      preload: true
    });*/
  }

  addshowed(id) {
    this.showed = JSON.parse(localStorage[this.key] || "{}");
    this.showed[id] = true;
    localStorage[this.key] = JSON.stringify(this.showed);
  }

  clearshowed() {
    this.showed = {};
    localStorage[this.key] = JSON.stringify(this.showed);
  }

  playsound() {
    // If cordova is available, use the media plugin to play a sound
    if (window.Media && window.cordova && window.cordova.file && window.cordova.file.applicationDirectory) {
      var soundSrc = window.cordova.file.applicationDirectory + 'www/sounds/glass.mp3';
      if (soundSrc.startsWith('file://')) soundSrc = soundSrc.substring(7);
      var notificationSound = new Media(soundSrc); // Play audio

      notificationSound.play();
    } // Else, try to use the Howler sound plugin
    else if (window.ion) {
      ion.sound.play('glass');
      /*var notificationSound = new Howl({
      	src: ['sounds/glass.mp3'],
      	html5: true
      });
      notificationSound.play();*/
    }
  }

  notifySoundOrAction() {
    var lastsounddate = localStorage['lastsounddate'] || null;

    if (lastsounddate) {
      lastsounddate = new Date(lastsounddate);

      if (functions["a" /* default */].date.addseconds(lastsounddate, 10) > new Date()) {
        return;
      }
    }

    localStorage['lastsounddate'] = new Date();

    if (window.cordova && window.POCKETNETINSTANCE) {
      window.POCKETNETINSTANCE.mobile.vibration.small();
    } else {
      this.playsound();
    }
  }

  decrypt(event, chat) {
    return this.core.mtrx.kit.prepareChat(chat).then(r => {
      if (event.event.decrypted) {
        return Promise.resolve();
      }

      return chat.pcrypto.decryptEvent(event.event);
    }).catch(e => {
      return Promise.resolve();
    });
  }

  message(event, user, chat) {
    var state = this.core.vm.$store.state;
    if (this.showed[event.event.event_id]) return;
    this.addshowed(event.event.event_id);
    var external = functions["a" /* default */].deep(this, 'core.external.clbks.NOTIFICATION') || {};
    var ctype = '';
    var t = functions["a" /* default */].deep(event, 'event.type');
    if (['m.room.member'].indexOf(t) > -1) ctype = 'invite';
    if (['m.room.message'].indexOf(t) > -1) ctype = 'message';
    if (['m.room.name'].indexOf(t) > -1) ctype = '';
    if (['m.room.power_levels'].indexOf(t) > -1) ctype = 'moder';
    if (['m.room.redaction'].indexOf(t) > -1) ctype = 'redaction';
    if (functions["a" /* default */].deep(event, 'event.content.msgtype') == 'm.encrypted') ctype = 'encrypted';

    var c = () => {
      var msg = {
        title: user.name,
        event: event,
        message: event.event.content.type == 'm.encrypted' ? "***" : event.event.content.body,
        // event.content.body,
        roomId: event.event.room_id,
        icon: user.image,
        chat: chat,
        ctype: ctype
      };

      _.each(external, function (e) {
        e(msg);
      });

      if (state.currentRoom === event.event.room_id && !this.core.hiddenInParent) {
        return;
      }

      this.notifySoundOrAction();
      this.show(msg, '/chat?id=' + event.event.room_id);
    };

    if (ctype == 'encrypted') {
      this.decrypt(event, chat).then(c);
    } else {
      c();
    }
  }

  event(event, chat) {
    let pushAction = this.core.mtrx.client.getPushActionsForEvent(event);
    if (!pushAction.notify) return; //let timeFromNow = moment(moment.utc(event.event.origin_server_ts).toDate()).local().fromNow()

    var date = moment(moment.utc(event.event.origin_server_ts).toDate()).local().toDate();
    var iftime = functions["a" /* default */].date.addseconds(date, 10) > moment().toDate();
    if (!iftime) return;
    this.core.mtrx.isReaded(event, true).then(r => {
      if (r) return;

      if (!this.core.mtrx.me(event.getSender()) && event.getSender() && event.getSender() !== this.core.mtrx.client.credentials.userId) {
        this.core.user.usersInfo([functions["a" /* default */].getmatrixid(event.getSender())]).then(info => {
          if (info && info[0]) {
            this.message(event, info[0], chat);
          }
        });
      }
    });
  }

}

/* harmony default export */ var notifier = (notifier_Notifier);
// EXTERNAL MODULE: ./src/application/user/pnuser.js
var pnuser = __webpack_require__("e7f6");

// EXTERNAL MODULE: ./node_modules/@nelsonomuto/axios-request-timeout/dist/index.js
var axios_request_timeout_dist = __webpack_require__("6967");
var axios_request_timeout_dist_default = /*#__PURE__*/__webpack_require__.n(axios_request_timeout_dist);

// CONCATENATED MODULE: ./src/application/axios.js


var Axios = __webpack_require__("bc3a");



var {
  error: axios_error,
  byError
} = __webpack_require__("d854");




var Axios = function () {
  var datakeys = ['data.result'];
  var errorkeys = ['data.error'];

  function axios(_x) {
    return _axios.apply(this, arguments);
  }

  function _axios() {
    _axios = Object(asyncToGenerator["a" /* default */])(function* (_ref) {
      let {
        to: to,
        data: data
      } = _ref;
      data || (data = {});

      _.each(data, (v, i) => {
        if (_.isArray(v) || _.isObject(v)) {
          data[i] = JSON.stringify(v);
        }
      });

      var response = null;

      try {
        response = yield axios_request_timeout_dist_default()({
          method: 'post',
          headers: {
            'content-type': 'application/x-www-form-urlencoded'
          },
          url: to,
          data: lib_default.a.stringify(data),
          timeout: 35000
        });
      } catch (e) {
        response = e.response;
      }

      if (!response) {
        return Promise.reject('noresponse');
      } ////errors


      var ke = _.find(errorkeys, function (k) {
        return functions["a" /* default */].deep(response.data, k);
      });

      if (ke) {
        return Promise.reject(byError(functions["a" /* default */].deep(response.data, ke)));
      } ////result


      var k = _.find(datakeys, function (k) {
        return functions["a" /* default */].deep(response.data, k);
      });

      if (k) {
        return Promise.resolve(functions["a" /* default */].deep(response.data, k));
      } ////result


      return Promise.reject('error');
    });
    return _axios.apply(this, arguments);
  }

  return {
    axios
  };
};

/* harmony default export */ var application_axios = (Axios);
// CONCATENATED MODULE: ./src/application/api.js



var {
  error: api_error
} = __webpack_require__("d854");



var ApiWrapper = function (core) {
  var self = this;
  var a = new application_axios();
  var cache = {};
  var loading = {};
  var storages = {};
  var apis = {
    pocketnet: null
  };

  var ep = function () {
    return Promise.resolve();
  };

  var getstorage = function (p) {
    if (!storages[p.storage]) {
      return Object(chatstorage["a" /* default */])(p.storage, p.version || 1, p.time).then(storage => {
        storages[p.storage] = storage;
        return Promise.resolve(storage);
      });
    }

    return Promise.resolve(storages[p.storage]);
  };

  var scasheAct = function (ids, key, resultsKey, reload, storageparameters) {
    if (!_.isArray(ids)) ids = [ids];
    var waitLoading = {};
    if (!resultsKey) resultsKey = key;

    if (!cache[key]) {
      cache[key] = {};
    }

    if (!loading[key]) {
      loading[key] = {};
    }

    return (storageparameters ? getstorage(storageparameters) : ep()).then(storage => {
      if (storage) {
        return Promise.all(_.map(ids, id => {
          if (cache[key][id]) {
            return Promise.resolve();
          }

          return storage.get(id).then(stored => {
            cache[key][stored[resultsKey]] = stored;
            return Promise.resolve();
          }).catch(e => {
            return Promise.resolve();
          });
        }));
      }

      return Promise.resolve();
    }).then(r => {
      var idtoloadPrev = _.uniq(_.filter(ids, function (id) {
        return reload || !cache[key][id] || cache[key][id].nocache;
      }));

      var idtoload = _.filter(idtoloadPrev, function (id) {
        if (!loading[key][id]) {
          loading[key][id] = true;
          return true;
        }

        waitLoading[id] = true;
      });

      var handleResults = function (result, _ids) {
        return (storageparameters ? getstorage(storageparameters) : ep()).then(storage => {
          if (storage) {
            return Promise.all(_.map(result, row => {
              if (!row[resultsKey]) {
                return Promise.resolve();
              }

              return storage.set(row[resultsKey], row);
            }));
          }

          return Promise.resolve();
        }).then(() => {
          _.each(result, function (row) {
            if (row[resultsKey]) {
              cache[key][row[resultsKey]] = row;
            }
          });

          _.each(_ids, function (id) {
            delete loading[key][id];
            delete waitLoading[id];
            if (!cache[key][id]) cache[key][id] = 'error';
          });

          var nresult = {};
          return functions["a" /* default */].pretry(() => {
            _.each(ids, function (id) {
              if (cache[key][id]) {
                if (cache[key][id] != 'error') nresult[id] = cache[key][id];
                delete loading[key][id];
                delete waitLoading[id];
              }
            });

            return _.toArray(waitLoading).length == 0;
          }).then(() => {
            return Promise.resolve(nresult);
          });
        });
      };

      return Promise.resolve({
        id: idtoload,
        handle: handleResults
      });
    });
  };

  var waitonline = function () {
    if (!core || !core.waitonline) {
      return Promise.resolve();
    }

    return core.waitonline();
  };

  var crequest = function (ids, key, rkey, reload, storageparameters) {
    return scasheAct(ids, key, rkey, reload, storageparameters).then(sh => {
      if (!sh.id.length) {
        return sh.handle([]);
      }

      return Promise.reject(sh);
    });
  };

  var request = function (data, to) {
    return waitonline().then(() => {
      data || (data = {});
      return a.axios({
        to,
        data
      }).then(r => {
        return Promise.resolve(r);
      }).catch(e => {
        if (e == 'noresponse') {
          return new Promise((resolve, reject) => {
            setTimeout(function () {
              request(data, to).then(r => {
                return resolve(r);
              }).catch(e => {
                return reject(e);
              });
            }, 3000);
          });
        }

        return Promise.reject(e);
      });
    });
  };

  self.clearCache = function (key) {
    if (!key) {
      cache = {};
    } else {
      delete cache[key];
    }
  };

  self.pocketnet = {
    common: (data, method) => {
      if (!data) data = {};
      if (!apis.pocketnet) apis.pocketnet = functions["a" /* default */].deep(window, 'POCKETNETINSTANCE.api');

      if (!apis.pocketnet && typeof Api != 'undefined') {
        apis.pocketnet = new Api(core);
      }

      if (apis.pocketnet) {
        return apis.pocketnet.initIf().then(() => {
          return apis.pocketnet.wait.ready('use', 3000);
        }).then(r => {
          return apis.pocketnet.rpc(method, data.parameters);
        }).catch(e => {
          return {
            error: e
          };
        });
      }

      data.method = method;
      data.node = '185.148.147.15';
      data.parameters = functions["a" /* default */].hexEncode(JSON.stringify(data.parameters || ""));
      return request(data, servers.pocketnet + '/rpc-' + (method || "common"));
    },
    userState: addresses => {
      if (!_.isArray(addresses)) addresses = [addresses];
      var parameters = [addresses.join(',')];
      return self.pocketnet.common({
        parameters
      }, 'getuserstate');
    },
    userStateMe: address => {
      var cacheresult = functions["a" /* default */].deep(window, 'POCKETNETINSTANCE.platform.sdk.ustate.storage.' + address);

      if (cacheresult) {
        return Promise.resolve(cacheresult);
      }

      return self.pocketnet.userState(address);
    },
    userInfoCached: (addresses, reload) => {
      var rescached = [];

      if (!reload) {
        rescached = _.filter(_.map(addresses, address => {
          return functions["a" /* default */].deep(window, 'POCKETNETINSTANCE.platform.sdk.userscl.storage.' + address) || null;
        }), u => {
          return u;
        });
        addresses = _.filter(addresses, a => {
          return !_.find(rescached, r => {
            return r.address == a;
          });
        });
      }

      return self.pocketnet.userInfo(addresses, reload).then(rs => {
        rs = _.toArray(rs);

        _.each(rescached, c => {
          rs.push(c);
        });

        return Promise.resolve(rs);
      });
    },
    search: text => {
      var parameters = [text, 'users'];
      return self.pocketnet.common({
        parameters
      }, 'searchusers').then(data => {
        return Promise.resolve(data || []);
      });
    },
    userInfo: (addresses, reload) => {
      if (!addresses.length) {
        return Promise.resolve([]);
      }

      return crequest(addresses, 'pocketnet_userInfo', 'address', reload, {
        storage: 'userInfo',
        time: 60 * 60 * 24
      }).catch(sh => {
        if (!sh || !sh.id) {
          return Promise.reject(sh);
        }

        var parameters = [sh.id, '1'];
        return self.pocketnet.common({
          parameters
        }, 'getuserprofile').then(results => {
          return sh.handle(results, sh.id);
        });
      });
    },
    postInfo: params => {
      var parameters = [[params.parameters]];
      return self.pocketnet.common({
        parameters
      }, 'getrawtransactionwithmessagebyid').then(results => {
        return Promise.resolve(results);
      });
    },
    pocketNetProfileAddress: profile_name => {
      var parameters = [[profile_name.parameters]];
      return self.pocketnet.common({
        parameters
      }, 'getuseraddress').then(results => {
        return Promise.resolve(results);
      });
    },
    pocketNetProfileInfo: profile_address => {
      var parameters = [[profile_address.parameters]];
      return self.pocketnet.common({
        parameters
      }, 'getuserprofile').then(results => {
        return Promise.resolve(results);
      });
    }
  };
  return self;
};

/* harmony default export */ var application_api = (ApiWrapper);
// EXTERNAL MODULE: ./src/application/pcrypto.js
var pcrypto = __webpack_require__("9c21");

// EXTERNAL MODULE: ./src/application/listeners.js
var listeners = __webpack_require__("ebaa");

// CONCATENATED MODULE: ./src/application/media.js


var media_Media = function () {
  var self = this;
  self.gettingmedia = false;
  var permissions = {
    ios: {
      audio: function () {
        return new Promise((resolve, reject) => {
          window.audioinput.checkMicrophonePermission(function (hasPermission) {
            if (hasPermission) {
              resolve();
            } else {
              // Ask the user for permission to access the microphone
              window.audioinput.getMicrophonePermission(function (hasPermission, message) {
                if (hasPermission) {
                  resolve();
                } else {
                  reject('permissions');
                }
              });
            }
          });
        });
      },
      video: function () {
        return new Promise((resolve, reject) => {
          var needMic = true;
          var needCamera = true;
          cordova.plugins.iosrtc.requestPermission(needMic, needCamera, function (permissionApproved) {
            // permissionApproved will be true if user accepted permission otherwise will be false.
            if (permissionApproved) resolve();else reject('permissions');
          });
        });
      }
    },
    audio: function () {
      var permissions = window.cordova.plugins.permissions;
      return new Promise((resolve, reject) => {
        if (permissions) {
          var request = function () {
            permissions.requestPermission(permissions.RECORD_AUDIO, status => {
              if (status.hasPermission) {
                resolve();
              } else {
                reject('permissions');
              }
            }, err => {
              console.error(err);
              reject('permissions');
            });
          };

          permissions.checkPermission(permissions.RECORD_AUDIO, status => {
            if (status.hasPermission) {
              resolve();
            } else {
              request();
            }
          }, err => {
            console.error(err);
            request();
          });
        } else {
          reject('permissions');
        }
      });
    },
    video: function () {
      var permissions = window.cordova.plugins.permissions;
      return new Promise((resolve, reject) => {
        if (permissions) {
          permissions.hasPermission(permissions.CAMERA, status => {
            if (status.hasPermission) {
              resolve();
            } else {
              permissions.requestPermission(permissions.CAMERA, () => {
                resolve();
              }, () => {
                reject('permissions');
              });
            }
          });
        } else {
          reject('permissions');
        }
      });
    }
  };

  var initPermissions = function (mediasettings) {
    var callperm = function (f, setting) {
      if (setting) {
        return f();
      } else {
        return Promise.resolve();
      }
    };

    if (window.cordova && window.device) {
      var ios = functions["a" /* default */].isios();
      return callperm(ios ? permissions.ios.audio : permissions.audio, mediasettings.audio).then(() => {
        return callperm(ios ? permissions.ios.video : permissions.video, mediasettings.video);
      }).catch(e => {
        console.error("E", e);
        return Promise.reject(e);
      });
    }

    return Promise.resolve();
  };

  var initMedia = function (mediasettings) {
    return new Promise((resolve, reject) => {
      initPermissions(mediasettings).then(() => {
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          navigator.mediaDevices.getUserMedia(mediasettings).then(resolve).catch(reject);
        } else {
          (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia)(mediasettings, resolve, reject);
        }
      }).catch(reject);
    });
  };

  self.get = function (mediasettings) {
    return initMedia(mediasettings);
  };

  self.permissions = initPermissions;
};

/* harmony default export */ var media = (media_Media);
// CONCATENATED MODULE: ./node_modules/audio-recorder-polyfill/wave-encoder/index.js
// Copied from https://github.com/chris-rudmin/Recorderjs

/* harmony default export */ var wave_encoder = (() => {
  let BYTES_PER_SAMPLE = 2

  let recorded = []

  function encode (buffer) {
    let length = buffer.length
    let data = new Uint8Array(length * BYTES_PER_SAMPLE)
    for (let i = 0; i < length; i++) {
      let index = i * BYTES_PER_SAMPLE
      let sample = buffer[i]
      if (sample > 1) {
        sample = 1
      } else if (sample < -1) {
        sample = -1
      }
      sample = sample * 32768
      data[index] = sample
      data[index + 1] = sample >> 8
    }
    recorded.push(data)
  }

  function dump (sampleRate) {
    let bufferLength = recorded.length ? recorded[0].length : 0
    let length = recorded.length * bufferLength
    let wav = new Uint8Array(44 + length)
    let view = new DataView(wav.buffer)

    // RIFF identifier 'RIFF'
    view.setUint32(0, 1380533830, false)
    // file length minus RIFF identifier length and file description length
    view.setUint32(4, 36 + length, true)
    // RIFF type 'WAVE'
    view.setUint32(8, 1463899717, false)
    // format chunk identifier 'fmt '
    view.setUint32(12, 1718449184, false)
    // format chunk length
    view.setUint32(16, 16, true)
    // sample format (raw)
    view.setUint16(20, 1, true)
    // channel count
    view.setUint16(22, 1, true)
    // sample rate
    view.setUint32(24, sampleRate, true)
    // byte rate (sample rate * block align)
    view.setUint32(28, sampleRate * BYTES_PER_SAMPLE, true)
    // block align (channel count * bytes per sample)
    view.setUint16(32, BYTES_PER_SAMPLE, true)
    // bits per sample
    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true)
    // data chunk identifier 'data'
    view.setUint32(36, 1684108385, false)
    // data chunk length
    view.setUint32(40, length, true)

    // eslint-disable-next-line unicorn/no-for-loop
    for (let i = 0; i < recorded.length; i++) {
      wav.set(recorded[i], i * bufferLength + 44)
    }

    recorded = []
    postMessage(wav.buffer, [wav.buffer])
  }

  onmessage = e => {
    if (e.data[0] === 'encode') {
      encode(e.data[1])
    } else if (e.data[0] === 'dump') {
      dump(e.data[1])
    }
  }
});

// CONCATENATED MODULE: ./node_modules/audio-recorder-polyfill/index.js


let AudioContext = window.AudioContext || window.webkitAudioContext

let createWorker = fn => {
  let js = fn
    .toString()
    .replace(/^(\(\)\s*=>|function\s*\(\))\s*{/, '')
    .replace(/}$/, '')
  let blob = new Blob([js])
  return new Worker(URL.createObjectURL(blob))
}

let audio_recorder_polyfill_error = method => {
  let event = new Event('error')
  event.data = new Error('Wrong state for ' + method)
  return event
}

let context

/**
 * Audio Recorder with MediaRecorder API.
 *
 * @example
 * navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {
 *   let recorder = new MediaRecorder(stream)
 * })
 */
class MediaRecorder {
  /**
   * @param {MediaStream} stream The audio stream to record.
   */
  constructor (stream, config = null) {
    /**
     * The `MediaStream` passed into the constructor.
     * @type {MediaStream}
     */
    this.stream = stream
    this.config = config
    /**
     * The current state of recording process.
     * @type {"inactive"|"recording"|"paused"}
     */
    this.state = 'inactive'

    this.em = document.createDocumentFragment()
    this.encoder = createWorker(MediaRecorder.encoder)

    let recorder = this
    this.encoder.addEventListener('message', e => {
      let event = new Event('dataavailable')
      event.data = new Blob([e.data], { type: recorder.mimeType })
      recorder.em.dispatchEvent(event)
      if (recorder.state === 'inactive') {
        recorder.em.dispatchEvent(new Event('stop'))
      }
    })
  }

  /**
   * Begins recording media.
   *
   * @param {number} [timeslice] The milliseconds to record into each `Blob`.
   *                             If this parameter isn’t included, single `Blob`
   *                             will be recorded.
   *
   * @return {undefined}
   *
   * @example
   * recordButton.addEventListener('click', () => {
   *   recorder.start()
   * })
   */
  start (timeslice) {
    if (this.state !== 'inactive') {
      return this.em.dispatchEvent(audio_recorder_polyfill_error('start'))
    }

    this.state = 'recording'

    if (!context) {
      context = new AudioContext(this.config)
    }
    this.clone = this.stream.clone()
    this.input = context.createMediaStreamSource(this.clone)
    this.processor = context.createScriptProcessor(2048, 1, 1)

    this.encoder.postMessage(['init', context.sampleRate])

    this.processor.onaudioprocess = e => {
      if (this.state === 'recording') {
        this.encoder.postMessage(['encode', e.inputBuffer.getChannelData(0)])
      }
    }

    this.input.connect(this.processor)
    this.processor.connect(context.destination)

    this.em.dispatchEvent(new Event('start'))

    if (timeslice) {
      this.slicing = setInterval(() => {
        if (this.state === 'recording') this.requestData()
      }, timeslice)
    }

    return undefined
  }

  /**
   * Stop media capture and raise `dataavailable` event with recorded data.
   *
   * @return {undefined}
   *
   * @example
   * finishButton.addEventListener('click', () => {
   *   recorder.stop()
   * })
   */
  stop () {
    if (this.state === 'inactive') {
      return this.em.dispatchEvent(audio_recorder_polyfill_error('stop'))
    }

    this.requestData()
    this.state = 'inactive'
    this.clone.getTracks().forEach(track => {
      track.stop()
    })
    this.processor.disconnect()
    this.input.disconnect()
    return clearInterval(this.slicing)
  }

  /**
   * Pauses recording of media streams.
   *
   * @return {undefined}
   *
   * @example
   * pauseButton.addEventListener('click', () => {
   *   recorder.pause()
   * })
   */
  pause () {
    if (this.state !== 'recording') {
      return this.em.dispatchEvent(audio_recorder_polyfill_error('pause'))
    }

    this.state = 'paused'
    return this.em.dispatchEvent(new Event('pause'))
  }

  /**
   * Resumes media recording when it has been previously paused.
   *
   * @return {undefined}
   *
   * @example
   * resumeButton.addEventListener('click', () => {
   *   recorder.resume()
   * })
   */
  resume () {
    if (this.state !== 'paused') {
      return this.em.dispatchEvent(audio_recorder_polyfill_error('resume'))
    }

    this.state = 'recording'
    return this.em.dispatchEvent(new Event('resume'))
  }

  /**
   * Raise a `dataavailable` event containing the captured media.
   *
   * @return {undefined}
   *
   * @example
   * this.on('nextData', () => {
   *   recorder.requestData()
   * })
   */
  requestData () {
    if (this.state === 'inactive') {
      return this.em.dispatchEvent(audio_recorder_polyfill_error('requestData'))
    }

    return this.encoder.postMessage(['dump', context.sampleRate])
  }

  /**
   * Add listener for specified event type.
   *
   * @param {"start"|"stop"|"pause"|"resume"|"dataavailable"|"error"}
   * type Event type.
   * @param {function} listener The listener function.
   *
   * @return {undefined}
   *
   * @example
   * recorder.addEventListener('dataavailable', e => {
   *   audio.src = URL.createObjectURL(e.data)
   * })
   */
  addEventListener (...args) {
    this.em.addEventListener(...args)
  }

  /**
   * Remove event listener.
   *
   * @param {"start"|"stop"|"pause"|"resume"|"dataavailable"|"error"}
   * type Event type.
   * @param {function} listener The same function used in `addEventListener`.
   *
   * @return {undefined}
   */
  removeEventListener (...args) {
    this.em.removeEventListener(...args)
  }

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {Event} event The event object.
   *
   * @return {boolean} Is event was no canceled by any listener.
   */
  dispatchEvent (...args) {
    this.em.dispatchEvent(...args)
  }
}

/**
 * The MIME type that is being used for recording.
 * @type {string}
 */
MediaRecorder.prototype.mimeType = 'audio/wav'

/**
 * Returns `true` if the MIME type specified is one the polyfill can record.
 *
 * This polyfill supports `audio/wav` and `audio/mpeg`.
 *
 * @param {string} mimeType The mimeType to check.
 *
 * @return {boolean} `true` on `audio/wav` and `audio/mpeg` MIME type.
 */
MediaRecorder.isTypeSupported = mimeType => {
  return MediaRecorder.prototype.mimeType === mimeType
}

/**
 * `true` if MediaRecorder can not be polyfilled in the current browser.
 * @type {boolean}
 *
 * @example
 * if (MediaRecorder.notSupported) {
 *   showWarning('Audio recording is not supported in this browser')
 * }
 */
MediaRecorder.notSupported = !navigator.mediaDevices || !AudioContext

/**
 * Converts RAW audio buffer to compressed audio files.
 * It will be loaded to Web Worker.
 * By default, WAVE encoder will be used.
 * @type {function}
 *
 * @example
 * MediaRecorder.prototype.mimeType = 'audio/ogg'
 * MediaRecorder.encoder = oggEncoder
 */
MediaRecorder.encoder = wave_encoder

/* harmony default export */ var audio_recorder_polyfill = (MediaRecorder);

// CONCATENATED MODULE: ./node_modules/audio-recorder-polyfill/mpeg-encoder/index.js



/* harmony default export */ var mpeg_encoder = (() => {
  importScripts(
    'https://cdnjs.cloudflare.com/ajax/libs/lamejs/1.2.0/lame.min.js'
  )

  let CHANNELS = 1
  let KBPS = 128
  let DEFAULT_SAMPLE_RATE = 44100

  let encoder
  let recorded = new Int8Array()

  function concat (a, b) {
    if (b.length === 0) {
      return a
    }
    let c = new Int8Array(a.length + b.length)
    c.set(a)
    c.set(b, a.length)
    return c
  }

  function init (sampleRate) {
    encoder = new lamejs.Mp3Encoder(
      CHANNELS,
      sampleRate || DEFAULT_SAMPLE_RATE,
      KBPS
    )
  }

  function encode (buffer) {
    for (let i = 0; i < buffer.length; i++) {
      buffer[i] = buffer[i] * 32767.5
    }

    let buf = encoder.encodeBuffer(buffer)
    recorded = concat(recorded, buf)
  }

  function dump () {
    let buf = encoder.flush()
    recorded = concat(recorded, buf)
    let buffer = recorded.buffer
    recorded = new Int8Array()
    postMessage(buffer, [buffer])
  }

  onmessage = e => {
    if (e.data[0] === 'init') {
      init(e.data[1])
    } else if (e.data[0] === 'encode') {
      encode(e.data[1])
    } else {
      dump(e.data[1])
    }
  }
});

// CONCATENATED MODULE: ./src/application/index.js










/*
import pcm from '@/application/utils/pcm.js'
let Mp3 = require('js-mp3');
*/

/*
var {register} = require('extendable-media-recorder')
var {connect} = require('extendable-media-recorder-wav-encoder')*/



audio_recorder_polyfill.encoder = mpeg_encoder;
audio_recorder_polyfill.prototype.mimeType = 'audio/mpeg';

class application_Core {
  constructor(vm, p) {
    Object(defineProperty["a" /* default */])(this, "hideOptimization", function (v) {
      //this.hideOptimization = v
      this.store.commit('hideOptimization', v);
    });

    Object(defineProperty["a" /* default */])(this, "hideInParent", function (v) {
      this.hiddenInParent = v;
      this.store.commit('hiddenInParent', v);
      /*if(!v)
          this.store.commit('wasunhidden', true)*/
    });

    Object(defineProperty["a" /* default */])(this, "canback", function () {
      return this.store.state.gallery ? false : true;
    });

    Object(defineProperty["a" /* default */])(this, "update", function (_ref) {
      let {
        block
      } = _ref;
      this.pcrypto.set.block(block);
    });

    Object(defineProperty["a" /* default */])(this, "logerror", function (type, data) {
      if (window.POCKETNETINSTANCE) {
        window.POCKETNETINSTANCE.Logger.error({
          err: type,
          payload: data,
          code: 402
        });
      }
    });

    Object(defineProperty["a" /* default */])(this, "destroy", function () {
      this.store.commit('clearall');
      this.removeEvents();
      if (!this.vm.$route.name != 'chats') this.vm.$router.push('/chats').catch(e => {});
      this.user.destroy();
      this.mtrx.destroy();
      this.pcrypto.destroy();

      if (window.POCKETNETINSTANCE) {
        window.POCKETNETINSTANCE.platform.matrixchat.unlink(this);
      }

      this.vm.$destroy();
    });

    Object(defineProperty["a" /* default */])(this, "init", function () {
      this.focusListener.init();
      this.onlineListener.init();
      this.initEvents();

      if (window.POCKETNETINSTANCE) {
        window.POCKETNETINSTANCE.platform.matrixchat.link(this);
      }
    });

    Object(defineProperty["a" /* default */])(this, "setUnauthorized", function (v) {
      this.unauthorized = v;
      this.store.commit('SET_UNAUTHORIZED', v);
    });

    Object(defineProperty["a" /* default */])(this, "initWithUserBase", function () {
      this.loading = true;
      return this.user.checkCredentials().then(state => {
        return this.user.userInfo();
      }).then(r => {
        if (!r) {
          return Promise.reject('unknown');
        }

        if (r.deleted) {
          return Promise.reject('deleted');
        }

        return this.pcrypto.prepare();
      }).then(r => {
        return this.mtrx.init();
      }).then(r => {
        this.loading = false;
        this.setUnauthorized(null);
        this.pcrypto.helpers.checkuser();
        if (functions["a" /* default */].deep(this.user, 'userinfo.name')) this.mtrx.client.setDisplayName(functions["a" /* default */].deep(this.user, 'userinfo.name'));
        return Promise.resolve();
      }).catch(e => {
        console.log("E", e);
        this.loading = false;

        if (e == 'unauthorized' || e == 'unknown' || e == 'deleted') {
          this.setUnauthorized(e);
        }

        return Promise.resolve();
      });
    });

    Object(defineProperty["a" /* default */])(this, "initWithUser", function (credentials) {
      this.user.setCredentials(credentials);
      return this.initWithUserBase().then(() => {
        return this.user.initKeysProcess();
      }).catch(e => {
        return Promise.resolve();
      });
    });

    Object(defineProperty["a" /* default */])(this, "waitonline", function () {
      if (this.online) return Promise.resolve();
      return new Promise((resolve, reject) => {
        functions["a" /* default */].retry(() => {
          return this.online;
        }, function () {
          resolve();
        }, 5);
      });
    });

    Object(defineProperty["a" /* default */])(this, "removeEvents", function () {
      delete this.focusListener.clbks.resume.core;
      delete this.focusListener.clbks.pause.core;
      delete this.onlineListener.clbks.online.core;
      delete this.onlineListener.clbks.offline.core;
    });

    Object(defineProperty["a" /* default */])(this, "initEvents", function () {
      this.focusListener.clbks.resume.core = time => {
        this.focus = this.focusListener.focus;

        if (time > 60) {}
      };

      this.focusListener.clbks.pause.core = () => {
        this.focus = this.focusListener.focus;
      };

      this.onlineListener.clbks.online.core = time => {
        this.online = this.onlineListener.online;
      };

      this.onlineListener.clbks.offline.core = () => {
        this.online = this.onlineListener.online;
      };
    });

    Object(defineProperty["a" /* default */])(this, "externalLink", function (pobj) {
      this.external = pobj;
    });

    Object(defineProperty["a" /* default */])(this, "destroyExternalLink", function () {
      this.external = {};
    });

    Object(defineProperty["a" /* default */])(this, "currentTime", function () {
      var created = Math.floor(new Date().getTime() / 1000);

      if (this.timeDifference) {
        created += this.timeDifference;
      }

      return created;
    });

    Object(defineProperty["a" /* default */])(this, "wait", function () {
      return functions["a" /* default */].pretry(() => {
        return !this.loading;
      }).then(() => {
        return Promise.resolve();
      });
    });

    if (!p) p = {};
    this.options = {
      listofproxies: p.listofproxies
    };
    if (!p.mtrx) p.mtrx = {};
    p.mtrx.baseUrl = 'https://' + p.domain;

    if (p.mtrx.baseUrl == 'https://test.matrix.pocketnet.app') {
      this.options.burn = {
        v: 'minutes',
        w: 120,
        m: 30,
        b: 15
      };
    } else {
      this.options.burn = {
        v: 'days',
        w: 7,
        m: 2,
        b: 1
      };
    }

    this.apiHandlers = {
      error: function () {},
      success: function () {}
    };
    this.domain = p.domain;
    this.vm = vm;
    this.mtrx = new mtrx(this, p.mtrx);
    this.user = new pnuser["a" /* default */](this, p.user || {});
    this.notifier = new notifier(this, p.notifier || {});
    this.pcrypto = new pcrypto["a" /* default */](this, p.pcrypto || {});
    this.api = new application_api(this, p.servers);
    this.onlineListener = new listeners["a" /* default */].online(this);
    this.focusListener = new listeners["a" /* default */].focus(this);
    this.online = true;
    this.focus = true;
    this.store = vm.$store;
    this.loading = true;
    this.external = {};
    this.hiddenInParent = false;
    this.customRecorderConnected = false;
    this.pcrypto.init(this.user);
    this.media = new media();
    this.audioContext = null;
  }

  joinRoom(roomid) {
    return this.wait().then(() => {
      return this.mtrx.wait();
    }).then(() => {
      if (this.unauthorized) {
        this.store.commit('JOINROOM', roomid);
        return Promise.reject(this.unauthorized);
      }

      return Promise.resolve();
    }).then(info => {
      if (this.store.state.chatsMap[roomid]) {
        /// old chat
        this.vm.$router.push('/chat?id=' + roomid).catch(e => {});
      } else {
        this.store.commit('JOINROOM', roomid);
        this.vm.$router.push('/publicPreview?id=' + roomid).catch(e => {});
      }

      return Promise.resolve();
    });
  }

  connect(address) {
    return this.wait().then(() => {
      return this.mtrx.wait();
    }).then(() => {
      if (this.unauthorized) {
        this.store.commit('CONNECT', functions["a" /* default */].hexEncode(address));
        return Promise.reject(this.unauthorized);
      } else {
        return this.user.usersInfo([address], true);
      }
    }).then(info => {
      var roomId = this.mtrx.kit.tetatetid(info[0], this.user.userinfo);
      if (!roomId) return Promise.reject('roomId');

      if (this.store.state.chatsMap[roomId]) {
        /// old chat
        this.gotoRoute('/chat?id=' + roomId);
        /*this.vm.$router.push('/chat?id=' + roomId).catch(e => {
            console.error('e', e)
        })*/
      } else {
        this.gotoRoute('/contact?id=' + functions["a" /* default */].hexEncode(address)); //this.store.commit('CONTACT', roomId)
        //this.gotoRoute('/chat?id=' + roomId + '&u=' + f.hexEncode(address))
      }

      return Promise.resolve();
    });
  }

  cancelshare() {
    this.store.commit('SHARE', null);
    return Promise.resolve();
  }

  share(share) {
    this.store.commit('SHARE', share);
    this.vm.$router.push('/chats').catch(e => {});
    return Promise.resolve();
  }

  goto(roomId) {
    this.cancelDefaultRoute = true;
    this.mtrx.wait().then(() => {
      this.vm.$router.push('/chat?id=' + roomId).catch(e => {});
    });
  }

  gotoRoute(route) {
    this.cancelDefaultRoute = true;
    this.mtrx.wait().then(() => {
      this.vm.$router.push(route).catch(e => {});
    });
  }

  updateUser() {
    return this.user.userInfo(true).then(r => {
      /*if (this.unauthorized){
          return this.initWithUserBase()
      }*/
    });
  }

  isactive() {
    return this.vm.$store.state.minimized && this.vm.$store.state.active && this.vm.$store.state.pocketnet;
  }

  sitemessage(title) {
    var position = "bottom-right";

    if (this.vm.$store.state.mobile) {
      position = 'top-left';
    }

    this.vm.$message({
      title: title,
      zIndex: 999,
      supportHTML: true,
      wrapperClassName: "notificationWrapper",
      position: position,
      type: 'info',
      duration: 2000
    });
  }

  menu(v) {
    this.store.commit('SET_MENU', v ? {
      items: v.items,
      item: v.item,
      handler: v.handler
    } : null);
  }

  invitepnt() {
    var ui = functions["a" /* default */].deep(this, 'user.userinfo.source');

    if (ui) {
      if (window.POCKETNETINSTANCE && window.POCKETNETINSTANCE.platform) {
        if (this.backtoapp) this.backtoapp();
        window.POCKETNETINSTANCE.platform.ui.socialshare('welcome?connect=' + ui.address, {
          sharing: {
            image: '',
            images: [ui.i],
            title: this.vm.$i18n.t("caption.joinApp"),
            html: {
              body: this.vm.$i18n.t("caption.joinApp") + ' ' + this.vm.$i18n.t("caption.hasInvitedToJoin"),
              preview: this.vm.$i18n.t("caption.joinApp") + ' ' + this.vm.$i18n.t("caption.hasInvitedToJoin")
            },
            text: {
              body: this.vm.$i18n.t("caption.joinApp") + ' ' + this.vm.$i18n.t("caption.hasInvitedToJoin"),
              preview: this.vm.$i18n.t("caption.joinApp") + ' ' + this.vm.$i18n.t("caption.hasInvitedToJoin")
            }
          },
          embedding: {
            type: 'connect',
            id: ui.address
          }
        });
      } else {
        var l = 'https://bastyon.com/welcome?connect=' + ui.address;
        functions["a" /* default */].copytext(l);
        this.sitemessage('The link was copied successfully');
      }
    } else {
      this.sitemessage('The error was occuried');
    }
  }

  convertAudioToBase64(blob) {
    return Object(asyncToGenerator["a" /* default */])(function* () {
      const reader = new FileReader();
      reader.readAsDataURL(blob);
      return new Promise(resolve => {
        reader.onloadend = () => {
          resolve(reader.result);
        };
      });
    })();
  }
  /*async connectCustomRecorder() {
        if (this.customRecorderConnected) return
          this.customRecorderConnected = true
          await register(await connect());
      
  }*/

  /*mp3ToWav(base64Audio){
        var mp3ArrayBuffer = f._base64ToArrayBuffer(base64Audio.split(',')[1])
        var decoder = Mp3.newDecoder(mp3ArrayBuffer);
      var pcmArrayBuffer = decoder.decode();
        var dataURI = new pcm({channels: 1, rate: 8000, depth: 8}).toWav(pcmArrayBuffer).encode();
        return dataURI
    }*/


  initMediaRecorder() {
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      return this.media.get({
        audio: true
      }).then(stream => {
        let mediaRecorder = new audio_recorder_polyfill(stream, {
          audioBitsPerSecond: 32000
        });
        return mediaRecorder;
      }).catch(function (err) {
        return Promise.reject(err);
      });
    } else {
      return Promise.reject();
    }
  }

  getAudioContext() {
    if (this.audioContext && this.audioContext.state != 'closed') {
      if (this.audioContext.state === "suspended") this.audioContext.resume();
      return this.audioContext;
    } else {}

    this.audioContext = new (window.AudioContext || window.webkitAudioContext)() || null;

    if (functions["a" /* default */].isios() && window.unmute) {
      unmute(this.audioContext, false, false);
    }

    return this.audioContext;
  }

}

/* harmony default export */ var application = (application_Core);
// EXTERNAL MODULE: ./node_modules/vue-virtual-scroller/dist/vue-virtual-scroller.esm.js
var vue_virtual_scroller_esm = __webpack_require__("e508");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/preloader/index.vue?vue&type=template&id=3e6353d6&scoped=true&
var preloadervue_type_template_id_3e6353d6_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active},attrs:{"id":"preloader","platform":_vm.platform}},[_vm._m(0)])}
var preloadervue_type_template_id_3e6353d6_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"variant "},[_c('div',{staticClass:"iospreloadercenter"},[_c('div',{staticClass:"spinner-eff spinner-eff-3"},[_c('div',{staticClass:"circle circle-1"}),_c('div',{staticClass:"circle circle-2"}),_c('div',{staticClass:"circle circle-3"})])])])}]


// CONCATENATED MODULE: ./src/components/assets/preloader/index.vue?vue&type=template&id=3e6353d6&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/preloader?vue&type=script&lang=js&


/* harmony default export */ var preloader_vue_type_script_lang_js_ = ({
  name: 'preloader',
  props: {},
  computed: Object(vuex_esm["c" /* mapState */])({
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active,
    platform: function () {
      return functions["a" /* default */].deep(window, 'device.platform') || 'browser';
    }
  })
});
// CONCATENATED MODULE: ./src/components/assets/preloader?vue&type=script&lang=js&
 /* harmony default export */ var assets_preloader_vue_type_script_lang_js_ = (preloader_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/preloader/index.vue



function preloader_injectStyles (context) {
  
  var style0 = __webpack_require__("4578")
if (style0.__inject__) style0.__inject__(context)
var style1 = __webpack_require__("3f02")
if (style1.__inject__) style1.__inject__(context)

}

/* normalize component */

var preloader_component = Object(componentNormalizer["a" /* default */])(
  assets_preloader_vue_type_script_lang_js_,
  preloadervue_type_template_id_3e6353d6_scoped_true_render,
  preloadervue_type_template_id_3e6353d6_scoped_true_staticRenderFns,
  false,
  preloader_injectStyles,
  "3e6353d6",
  null
  ,true
)

/* harmony default export */ var preloader = (preloader_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/fixedmessageicon/index.vue?vue&type=template&id=1cf419f0&scoped=true&
var fixedmessageiconvue_type_template_id_1cf419f0_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active},attrs:{"id":"wai-fixedmessageicon"}},[_c('div',{staticClass:"wrapper"},[_c('div',{staticClass:"table"},[_c('div',{staticClass:"cell"},[(_vm.icon)?_c('div',{staticClass:"iconWrapper"},[_c('sweetalert',{attrs:{"icon":_vm.icon}})],1):_vm._e(),(_vm.message)?_c('div',{staticClass:"message"},[_c('div',[_vm._v(_vm._s(_vm.message))])]):_vm._e()])])])])}
var fixedmessageiconvue_type_template_id_1cf419f0_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/fixedmessageicon/index.vue?vue&type=template&id=1cf419f0&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-sweetalert-icons/src/components/icon.vue?vue&type=template&id=0635047f&scoped=true&
var iconvue_type_template_id_0635047f_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"sa",style:(_vm.cssVars)},[(_vm.isIcon('error'))?_c('div',{staticClass:"sa-error"},[_vm._m(0),_c('div',{staticClass:"sa-error-placeholder"}),_c('div',{staticClass:"sa-error-fix"})]):(_vm.isIcon('warning'))?_c('div',{staticClass:"sa-warning"},[_c('div',{staticClass:"sa-warning-body"}),_c('div',{staticClass:"sa-warning-dot"})]):(_vm.isIcon('info'))?_c('div',{staticClass:"sa-info"},[_c('div',{staticClass:"sa-info-body"}),_c('div',{staticClass:"sa-info-dot"})]):(_vm.isIcon('loading'))?_c('div',{staticClass:"sa-loading"},[_c('div',{staticClass:"sa-loading-body"})]):_c('div',{staticClass:"sa-success"},[_c('div',{staticClass:"sa-success-tip"}),_c('div',{staticClass:"sa-success-long"}),_c('div',{staticClass:"sa-success-placeholder"}),_c('div',{staticClass:"sa-success-fix"})])])}
var iconvue_type_template_id_0635047f_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"sa-error-x"},[_c('div',{staticClass:"sa-error-left"}),_c('div',{staticClass:"sa-error-right"})])}]


// CONCATENATED MODULE: ./src/editedplugins/vue-sweetalert-icons/src/components/icon.vue?vue&type=template&id=0635047f&scoped=true&

// EXTERNAL MODULE: ./node_modules/validate-color/lib/index.js
var validate_color_lib = __webpack_require__("5b1b");
var validate_color_lib_default = /*#__PURE__*/__webpack_require__.n(validate_color_lib);

// EXTERNAL MODULE: ./node_modules/color/index.js
var color = __webpack_require__("6929");
var color_default = /*#__PURE__*/__webpack_require__.n(color);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/editedplugins/vue-sweetalert-icons/src/components/icon.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


const availableIcons = ['success', 'warning', 'error', 'info', 'loading'];
const iconColors = {
  success: "#007d09",
  warning: "#ff7800",
  error: "#ff007e",
  info: "#0600ff",
  loading: "#0600ff"
};
/* harmony default export */ var iconvue_type_script_lang_js_ = ({
  name: 'sweetalert-icon',
  props: {
    icon: {
      type: String,
      default: 'success',
      validator: value => {
        return availableIcons.indexOf(value) !== -1;
      }
    },
    color: {
      type: String,
      validator: validate_color_lib_default.a
    }
  },
  computed: {
    cssVars() {
      const outputColor = validate_color_lib_default()(this.color) ? this.color : iconColors[this.icon];
      return {
        "--icon-color": outputColor,
        "--icon-color-alpha": color_default()(outputColor).alpha(0.25)
      };
    }

  },
  methods: {
    isIcon(icon) {
      return icon === this.icon;
    }

  }
});
// CONCATENATED MODULE: ./src/editedplugins/vue-sweetalert-icons/src/components/icon.vue?vue&type=script&lang=js&
 /* harmony default export */ var components_iconvue_type_script_lang_js_ = (iconvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/editedplugins/vue-sweetalert-icons/src/components/icon.vue



function icon_injectStyles (context) {
  
  var style0 = __webpack_require__("826f")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var icon_component = Object(componentNormalizer["a" /* default */])(
  components_iconvue_type_script_lang_js_,
  iconvue_type_template_id_0635047f_scoped_true_render,
  iconvue_type_template_id_0635047f_scoped_true_staticRenderFns,
  false,
  icon_injectStyles,
  "0635047f",
  null
  ,true
)

/* harmony default export */ var components_icon = (icon_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/fixedmessageicon?vue&type=script&lang=js&


/* harmony default export */ var fixedmessageicon_vue_type_script_lang_js_ = ({
  name: 'fixedmessageicon',
  props: {},
  components: {
    sweetalert: components_icon
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {
    icon: {
      immediate: true,

      handler() {
        this.init();
      }

    }
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    icon: function () {
      return this.$store.state.icon ? this.$store.state.icon.icon : null;
    },
    message: function () {
      return this.$store.state.icon ? this.$store.state.icon.message : null;
    },
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active
  }),
  methods: {
    init: function () {
      var _this$$store$state$ic;

      var t = this;
      const timeout = (_this$$store$state$ic = this.$store.state.icon) === null || _this$$store$state$ic === void 0 ? void 0 : _this$$store$state$ic.timeout;
      if (this.$store.state.icon.manual) return;
      setTimeout(function () {
        t.$store.commit('icon', null);
      }, timeout || 2000);
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/fixedmessageicon?vue&type=script&lang=js&
 /* harmony default export */ var assets_fixedmessageicon_vue_type_script_lang_js_ = (fixedmessageicon_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/fixedmessageicon/index.vue



function fixedmessageicon_injectStyles (context) {
  
  var style0 = __webpack_require__("17e1")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var fixedmessageicon_component = Object(componentNormalizer["a" /* default */])(
  assets_fixedmessageicon_vue_type_script_lang_js_,
  fixedmessageiconvue_type_template_id_1cf419f0_scoped_true_render,
  fixedmessageiconvue_type_template_id_1cf419f0_scoped_true_staticRenderFns,
  false,
  fixedmessageicon_injectStyles,
  "1cf419f0",
  null
  ,true
)

/* harmony default export */ var fixedmessageicon = (fixedmessageicon_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/date/index.vue?vue&type=template&id=eb4df516&scoped=true&
var datevue_type_template_id_eb4df516_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{attrs:{"id":"wai-date"}},[_vm._v(_vm._s(_vm.label))])}
var datevue_type_template_id_eb4df516_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/date/index.vue?vue&type=template&id=eb4df516&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/date?vue&type=script&lang=js&

/* harmony default export */ var date_vue_type_script_lang_js_ = ({
  name: 'date',
  props: ['date'],
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    label: function () {
      moment.locale(this.$i18n.locale);
      return moment(moment.utc(this.date).toDate()).local().fromNow();
    }
  })
});
// CONCATENATED MODULE: ./src/components/assets/date?vue&type=script&lang=js&
 /* harmony default export */ var assets_date_vue_type_script_lang_js_ = (date_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/date/index.vue



function date_injectStyles (context) {
  
  var style0 = __webpack_require__("4382")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var date_component = Object(componentNormalizer["a" /* default */])(
  assets_date_vue_type_script_lang_js_,
  datevue_type_template_id_eb4df516_scoped_true_render,
  datevue_type_template_id_eb4df516_scoped_true_staticRenderFns,
  false,
  date_injectStyles,
  "eb4df516",
  null
  ,true
)

/* harmony default export */ var assets_date = (date_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/userpic/index.vue?vue&type=template&id=5034d1e2&scoped=true&functional=true&
var userpicvue_type_template_id_5034d1e2_scoped_true_functional_true_render = function (_h,_vm) {var _c=_vm._c;return _c('div',{staticClass:"userpic"},[_c('div',{staticClass:"userpicSquareWrapper"},[_c('div',{staticClass:"userpicSquareInnerWrapper"},[_c('div',{staticClass:"userpicSquareInnerWrapper",class:_vm.props.status},[(_vm.props.userinfo.image)?_c('bgimage',{attrs:{"src":_vm.props.userinfo.image}}):_vm._e(),(!_vm.props.userinfo.image && _vm.props.userinfo.name && (_vm.props.status != 'blocked' && _vm.props.status != 'invite' && _vm.props.status != 'ban'))?_c('div',{staticClass:"charAvatar"},[_c('span',[_vm._v(_vm._s(_vm.props.userinfo.name.charAt(0)))])]):_vm._e(),_c('div',{staticClass:"statusIcon"},[(_vm.props.status == 'blocked' || _vm.props.status == 'ban')?_c('i',{staticClass:"fas fa-ban"}):_vm._e(),(_vm.props.status == 'invite')?_c('i',{staticClass:"fas fa-user-plus"}):_vm._e()])],1)])])])}
var userpicvue_type_template_id_5034d1e2_scoped_true_functional_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/userpic/index.vue?vue&type=template&id=5034d1e2&scoped=true&functional=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/userpic?vue&type=script&lang=js&
/* harmony default export */ var userpic_vue_type_script_lang_js_ = ({
  name: 'userpic',
  props: {
    userinfo: {
      type: Object,
      default: {}
    },
    status: ''
  }
});
// CONCATENATED MODULE: ./src/components/assets/userpic?vue&type=script&lang=js&
 /* harmony default export */ var assets_userpic_vue_type_script_lang_js_ = (userpic_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/userpic/index.vue



function userpic_injectStyles (context) {
  
  var style0 = __webpack_require__("b93b")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var userpic_component = Object(componentNormalizer["a" /* default */])(
  assets_userpic_vue_type_script_lang_js_,
  userpicvue_type_template_id_5034d1e2_scoped_true_functional_true_render,
  userpicvue_type_template_id_5034d1e2_scoped_true_functional_true_staticRenderFns,
  true,
  userpic_injectStyles,
  "5034d1e2",
  null
  ,true
)

/* harmony default export */ var userpic = (userpic_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/userspic/index.vue?vue&type=template&id=792279b0&scoped=true&
var userspicvue_type_template_id_792279b0_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.users)?_c('div',{staticClass:"userspic",class:{oneuser : _vm.users && _vm.users.length === 1}},[(_vm.users.length === 0)?_c('userpic',{attrs:{"userinfo":_vm.single,"status":_vm.single.status}}):_vm._e(),(_vm.users.length === 1)?_c('userpic',{attrs:{"status":_vm.status[_vm.users[0].id],"userinfo":_vm.users[0],"unseen":_vm.unseen}}):_vm._e(),(_vm.users.length > 1)?_c('many',{attrs:{"slidesPerView":_vm.slidesPerView,"status":_vm.status,"userinfo":_vm.users,"unseen":_vm.unseen}}):_vm._e(),(_vm.unseen)?_c('div',{staticClass:"unseen"},[_vm._v(" "+_vm._s(_vm.unseen > 99 ? '99' : _vm.unseen)+" ")]):_vm._e()],1):_vm._e()}
var userspicvue_type_template_id_792279b0_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/userspic/index.vue?vue&type=template&id=792279b0&scoped=true&

// EXTERNAL MODULE: ./src/components/assets/userspic/many.vue + 4 modules
var many = __webpack_require__("ecec");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/userspic?vue&type=script&lang=js&

/* harmony default export */ var userspic_vue_type_script_lang_js_ = ({
  name: 'userspic',
  props: {
    users: Array,
    single: {},
    unseen: Number,
    slidesPerView: Number,
    status: {
      type: Object,
      default: {}
    }
  },
  data: function () {
    return {};
  },
  components: {
    many: many["a" /* default */]
  }
});
// CONCATENATED MODULE: ./src/components/assets/userspic?vue&type=script&lang=js&
 /* harmony default export */ var assets_userspic_vue_type_script_lang_js_ = (userspic_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/userspic/index.vue



function userspic_injectStyles (context) {
  
  var style0 = __webpack_require__("4606")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var userspic_component = Object(componentNormalizer["a" /* default */])(
  assets_userspic_vue_type_script_lang_js_,
  userspicvue_type_template_id_792279b0_scoped_true_render,
  userspicvue_type_template_id_792279b0_scoped_true_staticRenderFns,
  false,
  userspic_injectStyles,
  "792279b0",
  null
  ,true
)

/* harmony default export */ var userspic = (userspic_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/bgimage.vue?vue&type=template&id=5d20f73c&scoped=true&
var bgimagevue_type_template_id_5d20f73c_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"bgimage",class:{loaded: _vm.loaded, hasimage : _vm.src},style:('background-image:url('+_vm.imageSrc+'); background-size: cover; background-position: center center; background-repeat: no-repeat')},[_vm._t("cnt")],2)}
var bgimagevue_type_template_id_5d20f73c_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/bgimage.vue?vue&type=template&id=5d20f73c&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/bgimage.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var bgimagevue_type_script_lang_js_ = ({
  name: 'bgimage',
  directives: {},
  props: {
    src: String
  },
  watch: {
    src: {
      immediate: true,
      handler: function () {
        this.load();
      }
    }
  },
  data: function () {
    return {
      loaded: false,
      imageSrc: ''
    };
  },
  methods: {
    load: function () {
      if (this.src) {
        this.imageSrc = this.src;
        var image = new Image();
        image.src = this.src;

        image.onload = () => {
          this.loaded = true;
        };
      } else this.loaded = true;
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/bgimage.vue?vue&type=script&lang=js&
 /* harmony default export */ var assets_bgimagevue_type_script_lang_js_ = (bgimagevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/bgimage.vue



function bgimage_injectStyles (context) {
  
  var style0 = __webpack_require__("f0bc")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var bgimage_component = Object(componentNormalizer["a" /* default */])(
  assets_bgimagevue_type_script_lang_js_,
  bgimagevue_type_template_id_5d20f73c_scoped_true_render,
  bgimagevue_type_template_id_5d20f73c_scoped_true_staticRenderFns,
  false,
  bgimage_injectStyles,
  "5d20f73c",
  null
  ,true
)

/* harmony default export */ var bgimage = (bgimage_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/logotype/index.vue?vue&type=template&id=e33cd7cc&scoped=true&
var logotypevue_type_template_id_e33cd7cc_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"wai-logotype"}},[_c('div',{staticClass:"items"},[_c('div',{staticClass:"item"},[_c('div',{staticClass:"logo"},[_c('img',{attrs:{"src":'img/ldpiwide-' + _vm.themeL + '.png'}})])])])])}
var logotypevue_type_template_id_e33cd7cc_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/logotype/index.vue?vue&type=template&id=e33cd7cc&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/logotype?vue&type=script&lang=js&

var bwl = {
  black: 'black',
  white: 'white',
  classic: 'white'
};
/* harmony default export */ var logotype_vue_type_script_lang_js_ = ({
  name: 'wai-logotype',
  props: {},
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    themeL: function (state) {
      return bwl[state.theme] || 'white';
    }
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/assets/logotype?vue&type=script&lang=js&
 /* harmony default export */ var assets_logotype_vue_type_script_lang_js_ = (logotype_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/logotype/index.vue



function logotype_injectStyles (context) {
  
  var style0 = __webpack_require__("d6cc")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var logotype_component = Object(componentNormalizer["a" /* default */])(
  assets_logotype_vue_type_script_lang_js_,
  logotypevue_type_template_id_e33cd7cc_scoped_true_render,
  logotypevue_type_template_id_e33cd7cc_scoped_true_staticRenderFns,
  false,
  logotype_injectStyles,
  "e33cd7cc",
  null
  ,true
)

/* harmony default export */ var logotype = (logotype_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/dropdownMenu/index.vue?vue&type=template&id=e4f39dca&scoped=true&
var dropdownMenuvue_type_template_id_e4f39dca_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"outer-div",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, active: _vm.active, mobile: _vm.mobile},on:{"click":function($event){$event.stopPropagation();}}},[(_vm.menuIsVisible && !_vm.hiddenInParent)?_c('div',{staticClass:"dropdown",class:{visible: _vm.menuIsVisible}},[_c('div',{staticClass:"backgr",on:{"click":function($event){return _vm.hidePopup()}}}),_c('div',{directives:[{name:"click-outside",rawName:"v-click-outside",value:(_vm.hidePopup),expression:"hidePopup"}],staticClass:"menuwrapper"},[_c('simpleMenu',{attrs:{"items":_vm.menuItems},scopedSlots:_vm._u([{key:"default",fn:function(slotProps){return [_vm._t("default",function(){return [_c('div',{staticClass:"menu-item",on:{"click":function($event){return _vm.menuItemClick(slotProps.item)}}},[_c('div',{staticClass:"iconWrapper"},[(slotProps.item.icon)?_c('i',{class:slotProps.item.icon}):_vm._e()]),_c('div',{staticClass:"title"},[_vm._v(" "+_vm._s(slotProps.item.title)+" ")])])]},{"item":slotProps.item})]}}],null,true)}),_c('div',{staticClass:"cancelWrapper"},[_c('div',{staticClass:"menu-item",on:{"click":function($event){return _vm.hidePopup()}}},[_c('div',{staticClass:"iconWrapper"}),_c('div',{staticClass:"title"},[_vm._v(_vm._s(_vm.$t("cancel")))])])])],1)]):_vm._e(),_c('div',{staticClass:"dropDownIcon",on:{"click":_vm.onClickHandler}},[_c('i',{class:'icon ' + (_vm.icon || 'fas fa-ellipsis-h')})])])}
var dropdownMenuvue_type_template_id_e4f39dca_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/dropdownMenu/index.vue?vue&type=template&id=e4f39dca&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/dropdownMenu?vue&type=script&lang=js&


/* harmony default export */ var dropdownMenu_vue_type_script_lang_js_ = ({
  name: 'dropdownMenu',
  props: {
    menuItems: {
      type: Array,
      required: true
    },
    rowObject: {
      type: Object
    },
    icon: String
  },
  components: {
    simpleMenu: simpleMenu
  },
  data: function () {
    return {
      loading: false,
      menuIsVisible: false
    };
  },
  watch: {
    menuIsVisible: function (newValue) {
      this.$emit('menuIsVisible', newValue);
    }
  },
  computed: {
    dropdownWidthInner() {
      return this.dropdownWidth;
    },

    ...Object(vuex_esm["c" /* mapState */])({
      pocketnet: state => state.pocketnet,
      minimized: state => state.minimized,
      mobile: state => state.mobile,
      active: state => state.active,
      hiddenInParent: state => state.hiddenInParent
    })
  },
  methods: {
    menuItemClick(item) {
      this.$emit('itemClicked', item, this.rowObject, {
        hidePopup: this.hidePopup,
        showPopup: this.showPopup
      });
    },

    onClickHandler() {
      this.menuIsVisible = !this.menuIsVisible;
    },

    hidePopup() {
      this.menuIsVisible = false;
    },

    showPopup() {
      this.menuIsVisible = true;
    }

  }
});
// CONCATENATED MODULE: ./src/components/assets/dropdownMenu?vue&type=script&lang=js&
 /* harmony default export */ var assets_dropdownMenu_vue_type_script_lang_js_ = (dropdownMenu_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/dropdownMenu/index.vue



function dropdownMenu_injectStyles (context) {
  
  var style0 = __webpack_require__("5722")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var dropdownMenu_component = Object(componentNormalizer["a" /* default */])(
  assets_dropdownMenu_vue_type_script_lang_js_,
  dropdownMenuvue_type_template_id_e4f39dca_scoped_true_render,
  dropdownMenuvue_type_template_id_e4f39dca_scoped_true_staticRenderFns,
  false,
  dropdownMenu_injectStyles,
  "e4f39dca",
  null
  ,true
)

/* harmony default export */ var dropdownMenu = (dropdownMenu_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/backButton/index.vue?vue&type=template&id=7e97eec1&scoped=true&
var backButtonvue_type_template_id_7e97eec1_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"back",on:{"click":_vm.click}},[_c('div',{staticClass:"iconbutton"},[_c('i',{class:(_vm.icon || 'fas fa-angle-left')})])])}
var backButtonvue_type_template_id_7e97eec1_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/backButton/index.vue?vue&type=template&id=7e97eec1&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/backButton/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
/* harmony default export */ var backButtonvue_type_script_lang_js_ = ({
  name: 'backButton',
  props: {
    icon: String,
    action: {
      type: String,
      default: '/'
    },
    caption: {
      type: String,
      default: ""
    }
  },
  methods: {
    click: function () {
      if (this.action == 'back') this.$router.go(-1);else this.$router.push(this.action).catch(e => {});
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/backButton/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var assets_backButtonvue_type_script_lang_js_ = (backButtonvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/backButton/index.vue



function backButton_injectStyles (context) {
  
  var style0 = __webpack_require__("b215")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var backButton_component = Object(componentNormalizer["a" /* default */])(
  assets_backButtonvue_type_script_lang_js_,
  backButtonvue_type_template_id_7e97eec1_scoped_true_render,
  backButtonvue_type_template_id_7e97eec1_scoped_true_staticRenderFns,
  false,
  backButton_injectStyles,
  "7e97eec1",
  null
  ,true
)

/* harmony default export */ var backButton = (backButton_component.exports);
// EXTERNAL MODULE: ./src/components/assets/topheader/index.vue + 4 modules
var topheader = __webpack_require__("08da");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/maincontent/index.vue?vue&type=template&id=a8a70f9c&scoped=true&
var maincontentvue_type_template_id_a8a70f9c_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"fixedOnPageTop",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active, unauthorized: _vm.unauthorized, modalShowed : _vm.modalShowed ? true : false, mobile: _vm.mobile},attrs:{"id":"maincontent"},on:{"mouseenter":_vm.mouseenter,"mouseleave":_vm.mouseleave}},[_c('div',{staticClass:"headerSpacerWrapper"},[_c('div',{staticClass:"headerSpacerWrapperOvf"},[_c('div',{ref:"scrollable",staticClass:"headerSpacer"},[_vm._t("content",function(){return [_vm._v("   ")]})],2)]),_c('pmenu'),(_vm.modalShowed && _vm.modalShowed.data && !_vm.hiddenInParent)?_c('modal',{on:{"close":_vm.closeModal},scopedSlots:_vm._u([{key:"header",fn:function(){return [_vm._v(_vm._s(_vm.modalShowed.caption))]},proxy:true},{key:"body",fn:function(){return [_c('div',{staticClass:"modalcommoncontent"},[(_vm.modalShowed.type == 'complain')?_c('complain',{attrs:{"p":_vm.modalShowed.data}}):_vm._e(),(_vm.modalShowed.type == 'contact')?_c('contact',{attrs:{"contact":_vm.modalShowed.data.contact}}):_vm._e(),(_vm.modalShowed.type == 'showuserselect')?_c('contacts',{attrs:{"users":_vm.modalShowed.data.users,"mode":"Select"},on:{"close":_vm.closeModal,"select":function (contact) {_vm.modalShowed.data.userselected(contact); _vm.closeModal()}}}):_vm._e()],1)]},proxy:true},{key:"footer",fn:function(){return undefined},proxy:true}],null,false,3972288297)}):_vm._e(),(!_vm.unauthorized && _vm.rbackexp)?_c('div',{staticClass:"expandp",on:{"click":_vm.setactive,"mousemove":_vm.effect}},[_vm._m(0)]):_vm._e()],1),(_vm.iconshow)?_c('transition',{attrs:{"name":"fade"}},[_c('fixedmessageicon')],1):_vm._e()],1)}
var maincontentvue_type_template_id_a8a70f9c_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"etablew"},[_c('div',{staticClass:"etable table"},[_c('div',[_c('i',{staticClass:"fas fa-expand-arrows-alt"})])])])}]


// CONCATENATED MODULE: ./src/components/assets/maincontent/index.vue?vue&type=template&id=a8a70f9c&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/maincontent?vue&type=script&lang=js&

/* harmony default export */ var maincontent_vue_type_script_lang_js_ = ({
  name: 'maincontent',
  props: {
    rbackexp: Boolean
  },
  components: {
    'contact': () => Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "d3ff")),
    'contacts': () => Promise.resolve(/* import() */).then(__webpack_require__.bind(null, "f978")),
    'complain': () => __webpack_require__.e(/* import() */ 14).then(__webpack_require__.bind(null, "c27d"))
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    iconshow: function () {
      return this.$store.state.icon ? true : false;
    },
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active,
    modalShowed: state => state.modalShowed,
    hiddenInParent: state => state.hiddenInParent,
    mobile: state => state.mobile,
    unauthorized: state => state.unauthorized
  }),
  methods: {
    setactive: function () {
      this.$store.commit('active', true);
      this.$store.commit('blockactive', {
        value: true,
        item: 'main'
      });
      this.$store.commit('setiteraction', true);
    },
    mouseenter: function () {
      /*this.$store.commit('active', true)
      this.$store.commit('blockactive', {value : true, item : 'main'})*/
    },
    mouseleave: function () {
      if (this.$store.state.autohide) {
        this.$store.commit('active', false);
      }

      this.$store.commit('blockactive', {
        value: false,
        item: 'main'
      });
    },
    effect: function (e) {
      /*const x = e.pageX - e.target.offsetLeft
      const y = e.pageY - e.target.offsetTop
        e.target.style.setProperty('--x', `${ x }px`)
      e.target.style.setProperty('--y', `${ y }px`)*/
    },
    closeModal: function () {
      this.$store.commit('setmodal', null);
    },
    scroll: function (v) {
      this.$refs['scrollable'].scrollTop = v || 0;
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/maincontent?vue&type=script&lang=js&
 /* harmony default export */ var assets_maincontent_vue_type_script_lang_js_ = (maincontent_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/maincontent/index.vue



function maincontent_injectStyles (context) {
  
  var style0 = __webpack_require__("52ce")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var maincontent_component = Object(componentNormalizer["a" /* default */])(
  assets_maincontent_vue_type_script_lang_js_,
  maincontentvue_type_template_id_a8a70f9c_scoped_true_render,
  maincontentvue_type_template_id_a8a70f9c_scoped_true_staticRenderFns,
  false,
  maincontent_injectStyles,
  "a8a70f9c",
  null
  ,true
)

/* harmony default export */ var maincontent = (maincontent_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/search/index.vue?vue&type=template&id=1774f2a8&scoped=true&
var searchvue_type_template_id_1774f2a8_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active},attrs:{"id":"search"}},[_c('div',{staticClass:"searchWrapper"},[_c('div',{staticClass:"inputWrapper"},[_c('input',{ref:"input",attrs:{"placeholder":_vm.placeholder || this.$i18n.t('caption.search'),"type":"text"},domProps:{"value":_vm.searchTxt},on:{"keyup":_vm.change,"input":_vm.change,"focus":_vm.focused,"blur":_vm.blured}})]),(!_vm.searchTxt)?_c('div',{staticClass:"iconWrapper"},[_c('i',{staticClass:"fas fa-search"})]):_vm._e(),(_vm.searchTxt)?_c('div',{staticClass:"iconWrapper",on:{"click":_vm.clear}},[_c('i',{staticClass:"fas fa-times"})]):_vm._e()])])}
var searchvue_type_template_id_1774f2a8_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/search/index.vue?vue&type=template&id=1774f2a8&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/search?vue&type=script&lang=js&
 // TODO IGOR' SEARCH ALL COMPONENTS

/* harmony default export */ var search_vue_type_script_lang_js_ = ({
  name: 'search',
  props: {
    placeholder: String,
    minimize: {
      type: Boolean,
      default: false
    }
  },
  data: function () {
    return {
      loading: false,
      isTyping: false,
      searchTxt: ''
    };
  },
  created: () => {},
  watch: {
    searchTxt: {
      handler: _.debounce(function () {
        var text = this.searchTxt.toLowerCase();
        this.$emit('search', text);
      }, 500)
    }
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: function (state) {
      return state.active || !this.minimize;
    }
  }),
  methods: {
    change: function (event) {
      this.searchTxt = event.target.value;
    },
    clear: function (event) {
      this.searchTxt = '';
    },
    clickicon: function () {
      this.$refs['input'].focus();
    },
    blured: function () {
      this.$store.commit('blockactive', {
        value: false,
        item: 'input'
      });
    },
    focused: function () {
      this.$store.commit('blockactive', {
        value: true,
        item: 'input'
      });
    }
  }
});
// CONCATENATED MODULE: ./src/components/assets/search?vue&type=script&lang=js&
 /* harmony default export */ var assets_search_vue_type_script_lang_js_ = (search_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/search/index.vue



function search_injectStyles (context) {
  
  var style0 = __webpack_require__("6bfd")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var search_component = Object(componentNormalizer["a" /* default */])(
  assets_search_vue_type_script_lang_js_,
  searchvue_type_template_id_1774f2a8_scoped_true_render,
  searchvue_type_template_id_1774f2a8_scoped_true_staticRenderFns,
  false,
  search_injectStyles,
  "1774f2a8",
  null
  ,true
)

/* harmony default export */ var search = (search_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/linepreloader/index.vue?vue&type=template&id=bcf20e38&scoped=true&
var linepreloadervue_type_template_id_bcf20e38_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
var linepreloadervue_type_template_id_bcf20e38_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"linepreloader"}},[_c('span'),_c('span'),_c('span')])}]


// CONCATENATED MODULE: ./src/components/assets/linepreloader/index.vue?vue&type=template&id=bcf20e38&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/assets/linepreloader?vue&type=script&lang=js&
/* harmony default export */ var linepreloader_vue_type_script_lang_js_ = ({
  name: 'linepreloader',
  props: {}
});
// CONCATENATED MODULE: ./src/components/assets/linepreloader?vue&type=script&lang=js&
 /* harmony default export */ var assets_linepreloader_vue_type_script_lang_js_ = (linepreloader_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/assets/linepreloader/index.vue



function linepreloader_injectStyles (context) {
  
  var style0 = __webpack_require__("0095")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var linepreloader_component = Object(componentNormalizer["a" /* default */])(
  assets_linepreloader_vue_type_script_lang_js_,
  linepreloadervue_type_template_id_bcf20e38_scoped_true_render,
  linepreloadervue_type_template_id_bcf20e38_scoped_true_staticRenderFns,
  false,
  linepreloader_injectStyles,
  "bcf20e38",
  null
  ,true
)

/* harmony default export */ var linepreloader = (linepreloader_component.exports);
// EXTERNAL MODULE: ./src/views/chats.vue + 24 modules
var views_chats = __webpack_require__("9a41");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/App.vue?vue&type=script&lang=js&shadow
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//













vue_esm["default"].use(vuejs_dialog_min_default.a);


vue_esm["default"].component('eventsEvent', events_event["default"]); ////////

vue_esm["default"].use(vue_m_message_src);
vue_esm["default"].use(vue_textarea_autosize_esm);
vue_esm["default"].use(vue_page_transition_src["a" /* default */]);
vue_esm["default"].use(vue_i18n_esm);
vue_esm["default"].use(vue2_touch_events_default.a);
vue_esm["default"].use(vue_js_toggle_button_dist_default.a); ////////

 /// app



 ////////

vue_esm["default"].config.productionTip = false;
vue_esm["default"].prototype.$f = functions["a" /* default */];














 ////////

vue_esm["default"].component('pmenu', pmenu);
vue_esm["default"].component('modal', modal);
vue_esm["default"].component('preloader', preloader);
vue_esm["default"].component('date', assets_date);
vue_esm["default"].component('userpic', userpic);
vue_esm["default"].component('userspic', userspic);
vue_esm["default"].component('fixedmessageicon', fixedmessageicon);
vue_esm["default"].component('bgimage', bgimage);
vue_esm["default"].component('logotype', logotype);
vue_esm["default"].component('dropdownMenu', dropdownMenu);
vue_esm["default"].component('backButton', backButton);
vue_esm["default"].component('topheader', topheader["a" /* default */]);
vue_esm["default"].component('maincontent', maincontent);
vue_esm["default"].component('search', search);
vue_esm["default"].component('linepreloader', linepreloader);
vue_esm["default"].use(vue_virtual_scroller_esm["a" /* default */]);
vue_esm["default"].directive('click-outside', {
  bind: function (el, binding, vnode) {
    el.clickOutsideEvent = function (event) {
      if (!(el == event.target || el.contains(event.target))) {
        vnode.context[binding.expression](event);
      }
    };

    document.body.addEventListener('click', el.clickOutsideEvent);
  },
  unbind: function (el) {
    document.body.removeEventListener('click', el.clickOutsideEvent);
  }
}); /// localization

function loadMessages() {
  const context = __webpack_require__("2db5");

  const messages = context.keys().map(key => ({
    key,
    locale: key.match(/[a-z0-9-_]+/i)[0]
  })).reduce((messages, _ref) => {
    let {
      key,
      locale
    } = _ref;
    return { ...messages,
      [locale]: context(key)
    };
  }, {});
  return {
    context,
    messages
  };
}

const {
  context: Appvue_type_script_lang_js_shadow_context,
  messages
} = loadMessages();
const i18n = new vue_i18n_esm({
  locale: 'en',
  messages: messages,
  silentTranslationWarn: true
}); ///

var Appvue_type_script_lang_js_shadow_core = null;
var g = {
  install: function (Vue) {
    Object.defineProperty(Vue.prototype, 'core', {
      get() {
        return Appvue_type_script_lang_js_shadow_core;
      }

    });
  }
};
vue_esm["default"].use(g);
var availableLocales = {
  de: true,
  ru: true,
  en: true,
  fr: true,
  cmn: true,
  it: true,
  es: true,
  kr: true
};
var scriptsadded = false;
/* harmony default export */ var Appvue_type_script_lang_js_shadow = ({
  i18n,
  store: vuex_store,
  router: router_router,
  name: 'App',
  components: {
    MainWrapper: main,
    chats: views_chats["default"],
    userUnauthorized: unauthorized
  },
  props: {
    address: {
      type: String,
      default: ''
    },
    privatekey: {
      type: String,
      defautt: ''
    },
    pocketnet: {
      type: String,
      default: ''
    },
    mobile: {
      type: String,
      default: ''
    },
    recording: {
      type: String,
      default: ''
    },
    pkoindisabled: {
      type: String,
      default: ''
    },
    ctheme: String,
    fcmtoken: String,
    localization: String,
    pip: {
      type: Boolean,
      default: false
    }
  },
  watch: {
    fcmtoken: function () {
      this.setPusher(this.fcmtoken);
    },
    localization: {
      immediate: true,
      handler: function () {
        if (availableLocales[this.localization]) {
          i18n.locale = this.localization;
        } else {
          i18n.locale = 'en';
        } // Update the teamroom messages


        this.generateTeamroomMessages();
      }
    },
    mobile: function () {
      this.$store.commit('setMobile', this.mobile);
      this.$store.commit('minimize');
    },
    pocketnet: function () {
      this.$store.commit('setPocketnet', this.pocketnet);
      this.$store.commit('minimize');
    }
  },
  computed: {
    statetheme: function () {
      return this.$store.state.theme;
    },
    theme: function () {
      return this.ctheme || this.statetheme;
    },
    unauthorized: function () {
      return this.$store.state.unauthorized;
    },
    online: function () {
      return this.$store.state.online;
    },
    loading: function () {
      return this.$store.state.loading;
    },
    minimized: function () {
      if (this.mobile) return false;
      return this.$store.state.minimized;
    },
    active: function () {
      if (this.mobile) return false;
      return this.$store.state.active;
    },
    globalpreloader: function () {
      return this.$store.state.globalpreloader;
    },
    share: function () {
      if (!this.unauthorized) return this.$store.state.share;
    },
    closebybg: function () {
      return !this.$store.state.pinchat;
    },
    unselect: function () {
      return this.$store.state.voicerecording;
    }
  },
  methods: {
    hide: function () {
      this.$store.commit('minimize', true);
      setTimeout(() => {
        if (this.$route.name !== 'chats' &&
        /*this.$route.name !== 'chat' &&*/
        this.$route.name !== 'contact' &&
        /*this.$route.name !== 'chatInfo' &&*/
        this.$route.name !== 'publicPreview' && this.$route.name !== 'chatSettings' && Appvue_type_script_lang_js_shadow_core.cancelDefaultRoute !== true) {
          this.$router.push('/chats').catch(e => {});
        }
      }, 500);
    },
    iteraction: function () {
      this.$store.commit('setiteraction', true);
    },

    importInitialScripts() {
      /*if (scriptsadded) return
        scriptsadded = true
        let src = document.createElement('script')
      src.setAttribute('src', './js/vendor/emojionearea.js')
      document.head.appendChild(src);
        let link = document.createElement('link')
      link.setAttribute('src', './js/vendor/emojionearea.css')
      link.setAttribute('rel', 'stylesheet')
      document.head.appendChild(link);*/
    },

    // Set a new pusher (if possible) using the token passed as parameter
    setPusher(fcmtoken) {
      // Try to get a saved token
      var savedToken;
      if (localStorage) savedToken = localStorage.getItem('fcmtoken5'); // If we need to set a new pusher, or delete one

      if (savedToken != fcmtoken) {
        // Wait for Matrix client
        this.core.mtrx.wait().then(r => {
          this.core.mtrx.deletePusher();
          var data = {
            url: this.core.mtrx.baseUrl + '/_matrix/push/v1/notify'
          };
          var appName = 'pocketnet';
          var pusherData = {
            app_display_name: appName,
            app_id: appName + window.cordova.platformId,
            data: data,
            user_id: this.core.mtrx.client.credentials.userId,
            device_display_name: window.device.manufacturer + " " + window.device.model,
            kind: 'http',
            lang: localStorage.getItem('loc') || 'en',
            pushkey: fcmtoken
          };
          this.core.mtrx.client.setPusher(pusherData).then(() => {
            localStorage.setItem('fcmtoken5', fcmtoken);
          }, err => {
            console.log(err);
          });
        });
      }
    },

    // Generate the teamrooms messages
    generateTeamroomMessages() {
      this.$store.commit('SET_POCKETTEAMMESSAGES', [{
        id: 1,
        text: `
							<h4>${this.$i18n.t('teamMessages.1-title')}</h4>
							<ul>
								<li>${this.$i18n.t('teamMessages.1-list1')}</li>
								<li class="mt">${this.$i18n.t('teamMessages.1-list2')}</li>
								<li class="mt">${this.$i18n.t('teamMessages.1-list3')}</li>
							</ul>
						`,
        previewText: this.$i18n.t('teamMessages.1-title')
      } //<li class="mt">${this.$i18n.t('teamMessages.1-list4')}</li>

      /*,
      {
        id: 2,
        text: `
          <h4>${this.$i18n.t('teamMessages.2-title')}</h4>
          <span>${this.$i18n.t('teamMessages.2-message1')}</span>
          <ul>
            <li>${this.$i18n.t('teamMessages.2-list1')}</li>
            <li class="mt">${this.$i18n.t('teamMessages.2-list2')}</li>
            <li class="mt">${this.$i18n.t('teamMessages.2-list3')}</li>
          </ul>
          <span>${this.$i18n.t('teamMessages.2-message2')}</span>
        `,
        previewText: this.$i18n.t('teamMessages.2-title')
      }*/
      ]);
    }

  },

  beforeCreate() {
    this.$store.commit('init');
  },

  created() {
    /*this.pocketnet = false
    this.mobile = !this.pocketnet
    this.recording = TransformStreamDefaultController*/
    this.$store.commit('setPocketnet', this.pocketnet);
    this.$store.commit('setMobile', this.mobile);
    this.$store.commit('setVoiceMessagesEnabled', this.recording);
    this.$store.commit('pkoindisabled', this.pkoindisabled);
    this.$store.commit('clearall');
    this.$store.commit('ls');
    this.importInitialScripts();
    this.generateTeamroomMessages();
    setTimeout(() => {
      if (this.fcmtoken && window.cordova) this.setPusher(this.fcmtoken);
    }, 5000);
    var testUsers = {
      matrixMan: {
        address: functions["a" /* default */].hexEncode('PToMRMsMVh9dj4Cpa7yu1pB5iq65g4jrVC'),
        privateKey: '510aa931cdee36b9ac467ad04a2619f46be88815812b46e976e36bc8dbcdc41b'
      },
      ltme: {
        address: functions["a" /* default */].hexEncode('PKszvjHwMWubQpeEKnQhRonGBVFWcJDbNJ'),
        privateKey: '513bc6a5014e7dd203537227fb0a78f7b974853478fcf95103125f6d793a5f8b'
      },
      travisnoscot1: {
        address: functions["a" /* default */].hexEncode('PDjvHUQjcDX8Vq6rtpKveUDPtwPVUZEW7m'),
        privateKey: '63d91d001f7b5167a707dd4ee7e2638fc13e1fa3ff7171b040b432bcd1054e28'
      },
      mobRoocky: {
        address: functions["a" /* default */].hexEncode('PCMnk8T3Edu81iGcTEpVCFq8FQd6UBXi2y'),
        privateKey: '0bbf6fb0dbf78a26f00345f6f96d4f76f52e0093417c51a1b7bccb7ca92e55df'
      },
      user1: {
        address: functions["a" /* default */].hexEncode('PKxqtUuK3B6qwAxs6HLhvxrQVExuMwKWd5'),
        privateKey: '28f0fdc30094d517bc08abca3f219d77fc32230e313bbf0b699ecd42f80de82a0'
      },
      user2: {
        address: functions["a" /* default */].hexEncode('PGe4xVAJRJtbD8swPipE2ug9Zk1rhSTa1y'),
        privateKey: '0b4562275da7e60a57e10432bdc7e3318dd9699b8b928224ba360b9fb951c77b'
      },
      FakeBadash: {
        address: functions["a" /* default */].hexEncode('PDWPDFikMhLJHtiKLLXZGzfgphRcd19eHe'),
        privateKey: '99d8ce99383ccc5d6404535b98f2b43ce5ab939a28bfc52a442565b2351039fa'
      },
      Faketravis: {
        address: functions["a" /* default */].hexEncode('PGURYzvoXuSvuwCuDty2wW37omjiKgzV5a'),
        privateKey: '93641f20095aa15b89b78d395ebe0a5a9b149ea2b54c57d896091c0ea9b86dfd'
      },
      fakeRocky: {
        address: functions["a" /* default */].hexEncode('PRDKVP4yvF2wW8p5FUVkzrCvXYE8SMGkQK'),
        privateKey: '80d213d272405d4ff51752f91e79c639919f5f9f302583bdaa1c767b044ce2c0'
      },
      fakeFuture2: {
        address: 'PBHvKTH5TGQYDbRHgQHTTvaBf7tuww6ho7',
        privateKey: '71cacb25f90b18e356e33bc12c428c2e8b6b7c6e2950ab6344412f226aab0b2c'
      },
      fakeFuture: {
        address: functions["a" /* default */].hexEncode('PBHvKTH5TGQYDbRHgQHTTvaBf7tuww6ho7'),
        privateKey: '71cacb25f90b18e356e33bc12c428c2e8b6b7c6e2950ab6344412f226aab0b2c'
      },
      encMan: {
        address: functions["a" /* default */].hexEncode('PEkKrb7WJgfU3rCkkU9JYT8jbGiQsw8Qy8'),
        privateKey: '616fd57f7610288978f4c01797a90d56b0c30392e598a2504b98c7a7246569a5'
      },
      harisCalvin: {
        address: functions["a" /* default */].hexEncode('PXEWRce8siwbQWArQWyjnooogAEieHwhVd'),
        privateKey: '218bcb76df20438c1431c0394a42947f78f279bea987d7b238bfbd1cb1533b62'
      },
      oneSomeoneNigga: {
        address: functions["a" /* default */].hexEncode('PGyjEoqmmK2tm6xmg69hGoSNM6hUrc4VfE'),
        privateKey: '254f5b9394f0490e78b41c6bf615bfd8e290fde3fb6d862f166b181b35764b06'
      },
      gomer: {
        address: functions["a" /* default */].hexEncode('PVSdoFQqAg86p6tbAW8Y6CGGGjhiXkr4qh'),
        privateKey: '105de1935fa665bdc23b1b02bcdb3f62e01a3ad48823d5348edb5b94ec1b4526'
      },
      bart: {
        address: functions["a" /* default */].hexEncode('PWioUw52q4iNpMQUauNYaWg9JpsPE1u9Ut'),
        privateKey: 'a74bc4ee63290dd051d659fe46962176d2b9193e04104dea63116d25703bad72'
      },
      edSheeran: {
        address: functions["a" /* default */].hexEncode('PVeqjqJk2GthxBK6QdhCCfQVEX1SAK92As'),
        privateKey: 'd89952018721e6762de13fa2f1891b0dc2d1f1e75402ba483251086b2ba181ac'
      },
      duftPunkMan: {
        address: functions["a" /* default */].hexEncode('PFnN8SExxLsUjMKzs2avdvBdcA3ZKXPPkF'),
        privateKey: '7d1a31cc49a05692cfd992359cd27e8b3783cd186d98053ea0b9307b00a19018'
      },
      jcole: {
        address: functions["a" /* default */].hexEncode('P93cWU7X31wqn3R9GcUZ7c3fD11asXum5y'),
        privateKey: '900099127ad048d64523c4701d72d67b5b7f2afb18debbfdc53587f04a29c808'
      },
      flowMan: {
        address: functions["a" /* default */].hexEncode('PM4gVCcWnTmysUXhMukoQA2mT7GpfWQvck'),
        privateKey: '12d28e4c950193665dcaaa32129c061b2213e736ffe20918f0f13b6a2857cc32'
      },
      JokeMan: {
        address: functions["a" /* default */].hexEncode('PMSULgjrsCsEnWgNigCga5jSjhCvYBFSA8'),
        privateKey: 'f7a2518393db3779a4394f4084473847bc4260a5aad20859eff9d32ab03c310e'
      },
      omgMan: {
        address: functions["a" /* default */].hexEncode('P9R3aNvyjRbqTWfy5q1h5qvXFYaDtqaRi2'),
        privateKey: '80b4350df8c033a63fd7c6b71516ae05ab3a23a604a39afba5874b87b4effbf8'
      },
      nineBot: {
        address: functions["a" /* default */].hexEncode('PNcvYsMXzf4RVmS9AjRYEqeeGjk1PiDjvF'),
        privateKey: '447554f94a3512a420ef6d089411dff3bc6d170f65e246cc52fc30aa9ed2216c'
      },
      tenBot: {
        address: functions["a" /* default */].hexEncode('PS9F8hzGSxeL1Lc2VGvPoqXHotZvpoVkkX'),
        privateKey: '659bd118d33e541bb042015723cab1e6b644a9d330a988b10e6d593f9abe3542'
      },
      bikeBot: {
        address: functions["a" /* default */].hexEncode('PBK1GDpiLNVFrKsPVAaNLU92byFY5P5KBr'),
        privateKey: '4c1ee4ae821a1ca885d77db84518b4dcbcd4efbed69603c8706b9557618529f9'
      },
      angryBot: {
        address: functions["a" /* default */].hexEncode('PBMcLRBQNWtNQZYUbRZZAd5FuZ8yb7HMX2'),
        privateKey: '87bec25e930671a06e032dca484083d4b79e23aa985781995882d5d4594f8d8d'
      },
      test099090: {
        address: functions["a" /* default */].hexEncode('PP582V47P8vCvXjdV3inwYNgxScZCuTWsq'),
        privateKey: '14ede296d13f8111c77a1da82519939329ee1b81ab23203da48df3f5e52fee3d'
      },
      tony: {
        address: functions["a" /* default */].hexEncode('TLENU8HFyz8PqzpKBDWeN6Xix6rM8wjYKd'),
        privateKey: '8cf816c1c7a51cbc114db9aac8896b8654260f9b3a985232f27cf32823c7f45f'
      },
      invoker: {
        address: functions["a" /* default */].hexEncode('TPjN8Dy4BpGDezMNw2ePuEdHiHetTvR3Mb'),
        privateKey: 'a7ded16bd9d3350d6c3d233e6905b51e61bd879ba152ae24d0f8def76c4581c7'
      },
      drowRanger: {
        address: functions["a" /* default */].hexEncode('TU8fAf96kSfQzmxmpjRDSSqvCiPWzWt67J'),
        privateKey: '38484a2047b5c8170847a97fc5cddf3d485c934c6532a51a73f64ec7e4659891'
      },
      nevermore: {
        address: functions["a" /* default */].hexEncode('TKJ7xAC18XC4zQBvkNAWhkr3i7cARu11Uv'),
        privateKey: '8ec7f71d16b07d29bb49b3bc3054b5a4d2e65fb559e0ae695503568227584f53'
      },
      stormSpirit: {
        address: functions["a" /* default */].hexEncode('TZBHmnZwLedPtHcJfJnFsbxobGuDKGf9uA'),
        privateKey: '642aaa706fe94ea77239468cb9aad6b463472793a2c4e1f60acf22078770c45f'
      },
      morph: {
        address: functions["a" /* default */].hexEncode('TXyieuLsCntT1p4ougtiKURtYTxcdvWN1L'),
        privateKey: '8f59a6a6b7b8c1f63be47a6f571a11d726e9d7cde2baff52a51dc72326b6abb4'
      },
      alchemist: {
        address: functions["a" /* default */].hexEncode('TT2CeQuHiM8E8hG4rkJcaMKQ8gWqhZmNUH'),
        privateKey: '957ad5e2a009e4c0f06f0ae2737ea4c36c48fa8312555fcd104ca9cff7db6848'
      },
      public_user_test: {
        address: functions["a" /* default */].hexEncode('TLMXdC2UYSfMVbLzKtmJJTi4oK9LNHNVju'),
        privateKey: '509b219c5cead9545039ae38d428813af6671dbee3e37cadd2cd22f152013f2a'
      },
      cleanUser: {
        address: functions["a" /* default */].hexEncode('THCRHFtVAoeDGLg548C4bQxXeDg9bwrs5K'),
        privateKey: '666919a742eb63bededea3fddc44b526148d8b0eb1126b0aaff480a2af888d92'
      },
      userwithoutavatar: {
        address: functions["a" /* default */].hexEncode('TVcPMgVQ9TxgpzNrQyEAei5cnnR9jzXtzE'),
        privateKey: '2a3e96562c23a40e3d439b823453fb8fe6f8fb2c0267e8d2411734b3bdff90dd'
      },
      unnamed: {
        address: functions["a" /* default */].hexEncode('THsA8rwdeAkq5bePA71Nw5CGtFg2duyDSq'),
        privateKey: '27b42dfba3d20ae7a945e09dd0688137fa7963fd48b94f7b4027dc4eed874a96'
      }
    };
    var actualUser = {
      address: this.address ? functions["a" /* default */].hexEncode(this.address) : '',
      privateKey: this.privatekey
    };
    var username = 'nevermore';
    var user = this.address && this.privatekey ? actualUser : testUsers[`${username}`];
    var listofproxies = functions["a" /* default */].deep(window, 'window.POCKETNETINSTANCE.options.listofproxies') || [{
      host: 'test.pocketnet.app',
      port: 8899,
      wss: 8099
    }
    /*{
        host : 'pocketnet.app',
        port : 8899,
        wss : 8099
    },
    {
        host : '1.pocketnet.app',
        port : 8899,
        wss : 8099
    }*/
    ];
    /*
      ////////// new server
        var sarr = ['vamily.ru', 'pnt.com','bst.app', 'sd.ci']
        */

    var domain = functions["a" /* default */].deep(window, 'window.POCKETNETINSTANCE.options.matrix') || 'test.matrix.pocketnet.app';
    Appvue_type_script_lang_js_shadow_core = new application(this, {
      domain: domain,
      mtrx: {
        logger: function () {}
      },
      listofproxies: listofproxies,
      servers: {
        pocketnet: 'https://pocketnet.app:8888'
      }
    });
    Appvue_type_script_lang_js_shadow_core.init();
    /*
      this.$dialog.confirm(
            'question', {
               okText: 'ok',
                cancelText : 'cancel'
            })
              .then((dialog) => {
            })
      */

    /*this.$store.commit('icon', {
          icon : 'success',
          message : "Downloaded"
        })*/

    Appvue_type_script_lang_js_shadow_core.initWithUser(user).then(r => {
      return Appvue_type_script_lang_js_shadow_core.mtrx.wait().then(() => {
        Appvue_type_script_lang_js_shadow_core.user.getContacts();
        setTimeout(() => {
          if (this.$route.name !== 'chats' &&
          /*this.$route.name !== 'chat' &&*/

          /*this.$route.name !== 'chatInfo' &&*/
          this.$route.name !== 'publicPreview' && this.$route.name !== 'chatSettings' && this.$route.name !== 'contact' && Appvue_type_script_lang_js_shadow_core.cancelDefaultRoute !== true) {
            this.$router.push('/chats').catch(e => {});
          }
        }, 100); //this.connectCustomRecorder();
      });
    }).catch(g => {});
    setInterval(() => {
      if (this.$store.state.autohide || !this.$store.state.iteraction) this.$store.commit('active', false);
    }, 3000);
    window.matrixchat = Appvue_type_script_lang_js_shadow_core;
  }

});

if (false) {}
// CONCATENATED MODULE: ./src/App.vue?vue&type=script&lang=js&shadow
 /* harmony default export */ var src_Appvue_type_script_lang_js_shadow = (Appvue_type_script_lang_js_shadow); 
// CONCATENATED MODULE: ./src/App.vue?shadow



function Appshadow_injectStyles (context) {
  
  var style0 = __webpack_require__("c934")
if (style0.__inject__) style0.__inject__(context)
var style1 = __webpack_require__("fca4")
if (style1.__inject__) style1.__inject__(context)
var style2 = __webpack_require__("7cd7")
if (style2.__inject__) style2.__inject__(context)

}

/* normalize component */

var Appshadow_component = Object(componentNormalizer["a" /* default */])(
  src_Appvue_type_script_lang_js_shadow,
  render,
  staticRenderFns,
  false,
  Appshadow_injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var Appshadow = (Appshadow_component.exports);
// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-wc.js




// runtime shared by every component chunk





window.customElements.define('matrix-element', vue_wc_wrapper(vue_esm["default"], Appshadow))

/***/ }),

/***/ "5a76":
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__("f576")

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}


/***/ }),

/***/ "5b1b":
/***/ (function(module, exports) {

module.exports=function(e){var r={};function n(t){if(r[t])return r[t].exports;var a=r[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var a in e)n.d(t,a,function(r){return e[r]}.bind(null,a));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=0)}([function(e,r,n){"use strict";n.r(r),n.d(r,"validateHTMLColorName",(function(){return l})),n.d(r,"validateHTMLColorSpecialName",(function(){return i})),n.d(r,"validateHTMLColorHex",(function(){return u})),n.d(r,"validateHTMLColorRgb",(function(){return d})),n.d(r,"validateHTMLColorHsl",(function(){return f})),n.d(r,"validateHTMLColorHwb",(function(){return h})),n.d(r,"validateHTMLColorLab",(function(){return g})),n.d(r,"validateHTMLColor",(function(){return m}));const t=e=>e&&"string"==typeof e,a=["AliceBlue","AntiqueWhite","Aqua","Aquamarine","Azure","Beige","Bisque","Black","BlanchedAlmond","Blue","BlueViolet","Brown","BurlyWood","CadetBlue","Chartreuse","Chocolate","Coral","CornflowerBlue","Cornsilk","Crimson","Cyan","DarkBlue","DarkCyan","DarkGoldenrod","DarkGray","DarkGreen","DarkKhaki","DarkMagenta","DarkOliveGreen","DarkOrange","DarkOrchid","DarkRed","DarkSalmon","DarkSeaGreen","DarkSlateBlue","DarkSlateGray","DarkTurquoise","DarkViolet","DeepPink","DeepSkyBlue","DimGray","DodgerBlue","FireBrick","FloralWhite","ForestGreen","Fuchsia","Gainsboro","GhostWhite","Gold","Goldenrod","Gray","Green","GreenYellow","HoneyDew","HotPink","IndianRed","Indigo","Ivory","Khaki","Lavender","LavenderBlush","LawnGreen","LemonChiffon","LightBlue","LightCoral","LightCyan","LightGoldenrodYellow","LightGray","LightGreen","LightPink","LightSalmon","LightSalmon","LightSeaGreen","LightSkyBlue","LightSlateGray","LightSteelBlue","LightYellow","Lime","LimeGreen","Linen","Magenta","Maroon","MediumAquamarine","MediumBlue","MediumOrchid","MediumPurple","MediumSeaGreen","MediumSlateBlue","MediumSlateBlue","MediumSpringGreen","MediumTurquoise","MediumVioletRed","MidnightBlue","MintCream","MistyRose","Moccasin","NavajoWhite","Navy","OldLace","Olive","OliveDrab","Orange","OrangeRed","Orchid","PaleGoldenrod","PaleGreen","PaleTurquoise","PaleVioletRed","PapayaWhip","PeachPuff","Peru","Pink","Plum","PowderBlue","Purple","RebeccaPurple","Red","RosyBrown","RoyalBlue","SaddleBrown","Salmon","SandyBrown","SeaGreen","SeaShell","Sienna","Silver","SkyBlue","SlateBlue","SlateGray","Snow","SpringGreen","SteelBlue","Tan","Teal","Thistle","Tomato","Turquoise","Violet","Wheat","White","WhiteSmoke","Yellow","YellowGreen"],o=["currentColor","inherit","transparent"],l=e=>{let r=!1;return t(e)&&a.map(n=>(e.toLowerCase()===n.toLowerCase()&&(r=!0),null)),r},i=e=>{let r=!1;return t(e)&&o.map(n=>(e.toLowerCase()===n.toLowerCase()&&(r=!0),null)),r},u=e=>{if(t(e)){const r=/^#([\da-f]{3}){1,2}$|^#([\da-f]{4}){1,2}$/i;return e&&r.test(e)}},d=e=>{if(t(e)){const r=/(rgb)a?\((\s*\d+%?\s*?,?\s*){2}(\s*\d+%?\s*?,?\s*\)?)(\s*,?\s*\/?\s*(0?\.?\d+%?\s*)?|1|0)?\)$/i;return e&&r.test(e)}},s="(([0-9]|[1-9][0-9]|100)%)",c=`\\s*?\\)?)(\\s*?(\\/?)\\s+${`(((${s}))|(0?(\\.\\d+)?)|1))?`}\\s*?\\)$`,f=e=>{if(t(e)){const r=new RegExp(`(hsl)a?\\((\\s*?(${"(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)"}|${"(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9][0-9]|400)gra)"}|${"((([0-5])?\\.\\d+|6\\.([0-9]|1[0-9]|2[0-8])|[0-6])rad)"}|${"((0?(\\.\\d+)?|1)turn)"})((\\s*,\\s*)|(\\s+)))(\\s*?(0|${s})((\\s*,\\s*)|(\\s+)))(\\s*?(0|${s})\\s*?\\)?)(\\s*?(\\/?|,?)\\s*?(((${s}))|(0?(\\.\\d+)?)|1))?\\)$`);return e&&r.test(e)}},h=e=>{if(t(e)){const r=new RegExp(`(hwb\\(\\s*?${"(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)"}\\s+)((0|${s})\\s+)((0|${s})${c}`);return e&&r.test(e)}},g=e=>{if(t(e)){const r="(-?(([0-9]|[1-9][0-9]|1[0-5][0-9])(\\.\\d+)??|160))",n=new RegExp(`(lab\\(\\s*?((\\d*(\\.\\d+)?)%)\\s+${r}\\s+${r}${c}`);return e&&n.test(e)}},m=e=>!!(e&&u(e)||d(e)||f(e)||h(e)||g(e));r.default=e=>!!(e&&u(e)||l(e)||i(e)||d(e)||f(e)||h(e)||g(e))}]);

/***/ }),

/***/ "5b2d":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#teamroom.mobile[data-v-9b340a7a]{margin-bottom:10px}#teamroom[data-v-9b340a7a]:hover{cursor:pointer}#teamroom .teamChatWrapper[data-v-9b340a7a]{padding:.5em .25em;display:flex;align-items:center;transition:.3s}#teamroom .teamChatWrapper .iconWrapper[data-v-9b340a7a]{width:44px;display:flex;align-items:center;min-width:44px;height:44px;position:relative}#teamroom .teamChatWrapper .iconWrapper .logo[data-v-9b340a7a]{background-size:cover;background-position:50%;background-repeat:no-repeat;height:44px;width:44px;margin-left:0;margin-top:0;position:absolute;background:rgb(var(--text-on-bg-ac-color));border-radius:50%;padding-top:8px;text-align:center}#teamroom .teamChatWrapper .iconWrapper .logo img[data-v-9b340a7a]{width:28px;height:28px;margin:0 auto}#teamroom .teamChatWrapper .iconWrapper .unseen[data-v-9b340a7a]{background:rgba(var(--color-bg-ac),.9);color:rgb(var(--text-on-bg-ac-color));position:absolute;width:22px;height:22px;right:-10%;top:-10%;line-height:22px;text-align:center;font-weight:500;border-radius:50%;z-index:2;font-size:.6em}#teamroom .teamChatWrapper .infoWrapper[data-v-9b340a7a]{padding-left:.5em}#teamroom .teamChatWrapper .infoWrapper>div[data-v-9b340a7a]{display:flex;align-content:center}#teamroom .teamChatWrapper .infoWrapper .infoName span[data-v-9b340a7a]{font-size:.9em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:700;display:inline-block;max-width:190px;color:rgb(var(--text-color))}#teamroom .teamChatWrapper .infoWrapper .previewMessage[data-v-9b340a7a]{display:flex;justify-content:flex-start;align-items:center;width:100%}#teamroom .teamChatWrapper .infoWrapper .previewMessage span[data-v-9b340a7a]{display:block;color:rgb(var(--color-txt-gray));font-size:.9em;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:left;max-width:210px}#teamroom.minimized:not(.active) .teamChatWrapper[data-v-9b340a7a]{padding:.5em 0}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "5c6c":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "5c7d":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;

      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (typeof name === "symbol") {
        storageKey = undefined;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType || !storageKey) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey) return;

          // Use localStorage if available
          try {
              window.localStorage.removeItem(storageKey);
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {}
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.resetLevel = function () {
          self.setLevel(defaultLevel, false);
          clearPersistedLevel();
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    // ES6 default export, for compatibility
    defaultLogger['default'] = defaultLogger;

    return defaultLogger;
}));


/***/ }),

/***/ "5d1c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__("c9b8").codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__("903c");
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),

/***/ "5e55":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("eb93");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("052ddcf1", content, shadowRoot)
};

/***/ }),

/***/ "5e77":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var hasOwn = __webpack_require__("1a2d");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "5f02":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "5f05":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomList = void 0;

var _indexeddbCryptoStore = __webpack_require__("b503");
/*
Copyright 2018, 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module crypto/RoomList
 *
 * Manages the list of encrypted rooms
 */

/**
 * @alias module:crypto/RoomList
 */


class RoomList {
  constructor(cryptoStore) {
    this._cryptoStore = cryptoStore; // Object of roomId -> room e2e info object (body of the m.room.encryption event)

    this._roomEncryption = {};
  }

  init() {
    var _this = this;

    return _asyncToGenerator(function* () {
      yield _this._cryptoStore.doTxn('readwrite', [_indexeddbCryptoStore.IndexedDBCryptoStore.STORE_ROOMS], txn => {
        _this._cryptoStore.getEndToEndRooms(txn, result => {
          _this._roomEncryption = result;
        });
      });
    })();
  }

  getRoomEncryption(roomId) {
    return this._roomEncryption[roomId] || null;
  }

  isRoomEncrypted(roomId) {
    return Boolean(this.getRoomEncryption(roomId));
  }

  setRoomEncryption(roomId, roomInfo) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      // important that this happens before calling into the store
      // as it prevents the Crypto::setRoomEncryption from calling
      // this twice for consecutive m.room.encryption events
      _this2._roomEncryption[roomId] = roomInfo;
      yield _this2._cryptoStore.doTxn('readwrite', [_indexeddbCryptoStore.IndexedDBCryptoStore.STORE_ROOMS], txn => {
        _this2._cryptoStore.storeEndToEndRoom(roomId, roomInfo, txn);
      });
    })();
  }

}

exports.RoomList = RoomList;

/***/ }),

/***/ "5faa":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("4b1c");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("7b306284", content, shadowRoot)
};

/***/ }),

/***/ "6129":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("1da1");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("d9e2");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_1__);



const ChatStorage = function (storageName, version, time) {
  /** Set this flag to TRUE if debug logs needed */
  const DebugFlag = false;
  const DebugForceLocalStorage = false;

  let debugLog = () => {};

  if (DebugFlag) {
    debugLog = console.log;
  }
  /** Time constants */


  const SecondsInHour = 60 * 60;
  const SecondsInDay = SecondsInHour * 24;
  const SecondsInMonth = SecondsInDay * 30;
  var cacheTime = time || SecondsInMonth;
  var memorystorage = {};
  /**
   * Function generates UNIX timestamp
   * floored to current hour.
   *
   * @return {number}
   */

  function getHourUnixtime() {
    const dateNow = Math.floor(Date.now() / 1000);
    const hourUnix = dateNow - dateNow % SecondsInHour;
    return hourUnix;
  }
  /**
   * Using IndexedDB initializer
   * if it is supported.
   */


  function initIndexedDb() {
    let db;
    let openRequest = indexedDB.open(storageName, version);

    openRequest.onupgradeneeded = function (e) {
      let db = openRequest.result;
      const isVersionChanged = e.oldVersion !== e.newVersion;
      const didExistBefore = e.oldVersion === 0;
      /**
       * If PCryptoStorage version is changed,
       * then ObjectStore could be removed.
       */

      if (isVersionChanged && !didExistBefore) {
        if (!db.objectStoreNames.contains('items')) {
          db.deleteObjectStore('items');
        }
      }
      /**
       * Here PCryptoStorage creates ObjectStore
       * needed to function correctly.
       */


      if (!db.objectStoreNames.contains('items')) {
        db.createObjectStore('items', {
          keyPath: 'id'
        });
      }
    };
    /**
     * Function get all items to memory cache
     */


    function getall() {
      const transaction = openTransaction('items');
      const items = transaction.objectStore('items');
      const req = items.getAll();
      return new Promise((resolve, reject) => {
        req.onsuccess = data => {
          const cursor = data.target.result;

          if (cursor) {
            _.each(cursor, item => {
              memorystorage[item.id] = item.message;
            });
          }

          resolve();
        };

        req.onerror = data => {
          debugLog('PCryptoStorage CLEAR OUTDATED error', data);
          resolve();
        };
      });
    }
    /**
     * Function removes items cached
     * in IndexedDB 30 days ago
     */


    function clearOldItems() {
      const timeFromCurrent = getHourUnixtime() - cacheTime;
      const transaction = db.transaction('items', 'readwrite');
      const items = transaction.objectStore('items');
      const req = items.openCursor();
      return new Promise((resolve, reject) => {
        req.onsuccess = data => {
          const cursor = data.target.result;

          if (cursor) {
            if (timeFromCurrent >= cursor.value.cachedAt) {
              debugLog('PCryptoStorage CLEAR OUTDATED log', data);
              cursor.delete();
            }

            cursor.continue();
          }

          resolve();
        };

        req.onerror = data => {
          debugLog('PCryptoStorage CLEAR OUTDATED error', data);
          resolve();
        };
      });
    }
    /**
     * Function opens IDBDatabase transaction.
     *
     * @param {string} name - Name of IDBDatabase store
     * @param {boolean} writeMode - Enable write mode
     *
     * @return {IDBTransaction}
     */


    function openTransaction(name) {
      let writeMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const transaction = db.transaction('items', 'readwrite');

      transaction.onsuccess = function (data) {
        debugLog('PCryptoStorage TRANSACTION finished', data);
      };

      transaction.onabort = function (data) {
        debugLog('PCryptoStorage TRANSACTION abort', data.target.error);
      };

      transaction.onerror = function (data) {
        debugLog('PCryptoStorage TRANSACTION error', data.target.error);
      };

      return transaction;
    }

    const instanceFunctions = {
      clear: itemId => {
        debugLog('PCryptoStorage clearing', itemId);

        function executor(resolve, reject) {
          const transaction = openTransaction('items', true);
          const items = transaction.objectStore('items');
          const req = items.delete(itemId);
          delete memorystorage[itemId];

          req.onsuccess = data => {
            debugLog('PCryptoStorage CLEAR log', data);
            resolve(true);
          };

          req.onerror = data => {
            debugLog('PCryptoStorage CLEAR error', data.target.error);
            reject(data.target.error);
          };
        }

        return new Promise(executor);
      },
      set: (itemId, message) => {
        debugLog('PCryptoStorage writing', itemId);

        function executor(resolve, reject) {
          const transaction = openTransaction('items', true);
          const items = transaction.objectStore('items');
          const unixtime = getHourUnixtime();
          const item = {
            id: itemId,
            message,
            cachedAt: unixtime
          };
          memorystorage[itemId] = message;
          /**
           * FIXME: It is not the best practice to use
           *        here put() instead of add(), but it
           *        solves vue.js repeating decryption
           *        requests as it doesn't throw Error
           *        on data update...
           */

          const req = items.put(item);

          req.onsuccess = function (data) {
            debugLog('PCryptoStorage SET log', data);
            resolve(true);
          };

          req.onerror = function (data) {
            debugLog('PCryptoStorage SET error', data.target.error);
            reject(data.target.error);
          };
        }

        return new Promise(executor);
      },
      get: itemId => {
        debugLog('PCryptoStorage reading', itemId);

        function executor(resolve, reject) {
          if (memorystorage[itemId]) {
            return resolve(memorystorage[itemId]);
          }

          const transaction = openTransaction('items');
          const items = transaction.objectStore('items');
          const req = items.get(itemId);

          req.onsuccess = data => {
            debugLog('PCryptoStorage GET log', data, req.result);

            if (!req.result) {
              reject('Data does not exist');
              return;
            }

            const foundMessage = ('message' in req.result);

            if (!foundMessage) {
              reject('Message property does not exist');
              return;
            }

            memorystorage[itemId] = req.result.message;
            resolve(req.result.message);
          };

          req.onerror = data => {
            reject(data.target.error);
          };
        }

        return new Promise(executor);
      }
    };

    function executor(resolve, reject) {
      openRequest.onerror = function (err) {
        debugLog('PCryptoStorage error occurred:', err);
        reject('PCryptoStorage error initiating IndexedDB');
      };

      openRequest.onsuccess = function () {
        db = openRequest.result;
        clearOldItems().then(r => {
          return getall();
        }).then(r => {
          resolve(instanceFunctions);
        });
      };
    }

    return new Promise(executor);
  }
  /**
   * Using LocalStorage initializer
   * if IndexedDB is not supported.
   */


  function initLocalStorage() {
    /**
     * Function removes items cached
     * in LocalStorage 7 days ago
     */
    function clearOldItems() {
      const timeFromCurrent = getHourUnixtime() - SecondsInDay * 7;
      let k = Object.keys(localStorage);
      let msgItems = k.filter(item => item.includes(storageName));
      msgItems.forEach(msgItem => {
        const msg = JSON.parse(localStorage[msgItem]);

        if (timeFromCurrent >= msg.cachedAt) {
          delete localStorage[msgItem];
        }
      });
    }

    const instanceFunctions = {
      clear: function () {
        var _ref = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (itemId) {
          debugLog('PCryptoStorage clearing localstorage', itemId);
          const itemName = `${storageName}_${itemId}`;
          const isItemSet = (itemName in localStorage);

          if (!isItemSet) {
            throw Error('Data does not exist');
          }

          const foundMessage = ('message' in localStorage[itemName]);

          if (!foundMessage) {
            throw Error('Message property does not exist');
          }

          delete localStorage[itemName];
          return new Promise(executor);
        });

        return function clear(_x) {
          return _ref.apply(this, arguments);
        };
      }(),
      set: function () {
        var _ref2 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (itemId, message) {
          debugLog('PCryptoStorage writing localstorage', itemId);
          const itemName = `${storageName}_${itemId}`;
          const unixtime = getHourUnixtime();
          const item = {
            message,
            cachedAt: unixtime
          };
          localStorage[itemName] = JSON.stringify(item);
        });

        return function set(_x2, _x3) {
          return _ref2.apply(this, arguments);
        };
      }(),
      get: function () {
        var _ref3 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (itemId) {
          debugLog('PCryptoStorage reading', itemId);
          const itemName = `${storageName}_${itemId}`;
          const isItemSet = (itemName in localStorage);

          if (!isItemSet) {
            throw Error('Data does not exist');
          }

          return localStorage[itemName];
        });

        return function get(_x4) {
          return _ref3.apply(this, arguments);
        };
      }()
    };
    /** Clearing old items on init */

    clearOldItems();
    return instanceFunctions;
  }
  /**
   * Is IndexedDB supported?
   */


  if (!window.indexedDB || DebugForceLocalStorage) {
    debugLog('PCryptoStorage LOCALSTORAGE_FALLBACK');
    return initLocalStorage();
  }

  return initIndexedDb();
};

/* harmony default export */ __webpack_exports__["a"] = (ChatStorage);

/***/ }),

/***/ "6146":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exists = exists;
/*
Copyright 2019 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Check if an IndexedDB database exists. The only way to do so is to try opening it, so
 * we do that and then delete it did not exist before.
 *
 * @param {Object} indexedDB The `indexedDB` interface
 * @param {string} dbName The database name to test for
 * @returns {boolean} Whether the database exists
 */

function exists(indexedDB, dbName) {
  return new Promise((resolve, reject) => {
    let exists = true;
    const req = indexedDB.open(dbName);

    req.onupgradeneeded = () => {
      // Since we did not provide an explicit version when opening, this event
      // should only fire if the DB did not exist before at any version.
      exists = false;
    };

    req.onblocked = () => reject();

    req.onsuccess = () => {
      const db = req.result;
      db.close();

      if (!exists) {
        // The DB did not exist before, but has been created as part of this
        // existence check. Delete it now to restore previous state. Delete can
        // actually take a while to complete in some browsers, so don't wait for
        // it. This won't block future open calls that a store might issue next to
        // properly set up the DB.
        indexedDB.deleteDatabase(dbName);
      }

      resolve(exists);
    };

    req.onerror = ev => reject(ev.target.error);
  });
}

/***/ }),

/***/ "6167":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/index.vue?vue&type=template&id=659136c0&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (!_vm.event.localRedactionEvent() && !_vm.event.getRedactionEvent() && !_vm.removed)?_c('div',{ref:"msgElement",staticClass:"event",class:{readyToRender: _vm.readyToRender, my: _vm.my}},[(_vm.type === 'member' && !_vm.preview)?_c('member',{attrs:{"chat":_vm.chat,"event":_vm.event,"userinfo":_vm.userinfo,"readed":_vm.readed,"preview":_vm.preview || false},on:{"readyToRender":_vm.setReadyToRender}}):_vm._e(),(_vm.type === 'message' || _vm.preview)?_c('message',{attrs:{"chat":_vm.chat,"event":_vm.event,"prevevent":_vm.prevevent,"origin":_vm.event,"decryptEvent":_vm.decryptEvent,"decryptedInfo":_vm.decryptedInfo,"encryptedData":_vm.encryptedData,"imgEvent":_vm.galleryData,"userinfo":_vm.userinfo,"readed":_vm.readed,"preview":_vm.preview || false,"withImage":_vm.withImage || false,"clientWidth":_vm.clientWidth,"encrypted":_vm.encrypted,"subtype":_vm.subtype,"error":_vm.error,"reference":_vm.reference,"downloaded":_vm.downloaded,"last":_vm.last,"showmyicontrue":_vm.showmyicontrue,"fromreference":_vm.fromreference,"multiSelect":_vm.multiSelect,"selectedMessages":_vm.selectedMessages,"audioBuffer":_vm.audioBuffer,"isRemoveSelectedMessages":_vm.isRemoveSelectedMessages},on:{"openGalleryImg":_vm.openImage,"readyToRender":_vm.setReadyToRender,"remove":_vm.removeEvent,"download":_vm.downloadFile,"decryptagain":_vm.decryptAgain,"showMultiSelect":function($event){return _vm.$emit('showMultiSelect')},"selectMessage":_vm.selectMessage,"removeMessage":_vm.removeMessage,"messagesIsDeleted":_vm.messagesIsDeleted,"editing":_vm.editing,"reply":_vm.reply,"share":_vm.share,"menuIsVisible":_vm.menuIsVisibleHandler}}):_vm._e(),(_vm.type === 'common')?_c('common',{attrs:{"event":_vm.event,"userinfo":_vm.userinfo,"readed":_vm.readed,"preview":_vm.preview || false}}):_vm._e(),(_vm.downloading)?_c('div',{staticClass:"loading"},[_c('linepreloader')],1):_vm._e()],1):_c('div',{staticClass:"deletedMessage"},[_c('i',{staticClass:"fas fa-eraser"}),_vm._v(" "+_vm._s(_vm.$t("caption.messageDeleted"))+" ")])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/index.vue?vue&type=template&id=659136c0&scoped=true&

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
var asyncToGenerator = __webpack_require__("1da1");

// EXTERNAL MODULE: ./src/components/chats/dummypreviews/index.vue + 4 modules
var dummypreviews = __webpack_require__("a54c");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/common/index.vue?vue&type=template&id=52fddf5e&scoped=true&
var commonvue_type_template_id_52fddf5e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"eventsCommon"})}
var commonvue_type_template_id_52fddf5e_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/common/index.vue?vue&type=template&id=52fddf5e&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/events/event/common?vue&type=script&lang=js&

/* harmony default export */ var common_vue_type_script_lang_js_ = ({
  name: 'eventsCommon',
  props: {
    event: Object,
    preview: Boolean,
    userinfo: Object
  },
  data: function () {
    return {
      loading: false
    };
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/events/event/common?vue&type=script&lang=js&
 /* harmony default export */ var event_common_vue_type_script_lang_js_ = (common_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/events/event/common/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("78ad")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  event_common_vue_type_script_lang_js_,
  commonvue_type_template_id_52fddf5e_scoped_true_render,
  commonvue_type_template_id_52fddf5e_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "52fddf5e",
  null
  ,true
)

/* harmony default export */ var common = (component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/member/index.vue?vue&type=template&id=54a240c2&scoped=true&
var membervue_type_template_id_54a240c2_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"eventMember"},[(!_vm.preview)?_c('div',{staticClass:"iconWrapper",on:{"click":function($event){return _vm.core.mtrx.opencontact(_vm.userinfo)}}},[_c('userpic',{attrs:{"userinfo":_vm.userinfo}})],1):_vm._e(),_c('div',{staticClass:"labelwrapper"},[_c('span',{staticClass:"label"},[_c('b',[_vm._v(_vm._s(_vm.userinfo.name || "Somebody"))]),_vm._v(" "+_vm._s(_vm.keyword))])])])}
var membervue_type_template_id_54a240c2_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/member/index.vue?vue&type=template&id=54a240c2&scoped=true&

// EXTERNAL MODULE: ./src/application/functions.js
var functions = __webpack_require__("3139");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/events/event/member?vue&type=script&lang=js&


/* harmony default export */ var member_vue_type_script_lang_js_ = ({
  name: 'eventsMember',
  props: {
    event: Object,
    preview: Boolean,
    userinfo: Object
  },
  data: function () {
    return {
      loading: false,
      pName: Object,
      membership: '',
      moder: false
    };
  },
  mounted: function () {
    this.$emit('readyToRender');
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    keyword: function () {
      var _this$event$event;

      var pStateUsers = this.$store.state.users;
      var membership = (_this$event$event = this.event.event) === null || _this$event$event === void 0 ? void 0 : _this$event$event.content.membership;
      var invitedUserID = functions["a" /* default */].getmatrixid(functions["a" /* default */].deep(this.event, 'event.state_key') || this.event.getSender());
      var invitedName = '';
      if (membership === 'join') return this.$i18n.t("caption.joinedInTheChat");

      if (membership === 'invite') {
        _.find(pStateUsers, (key, value) => {
          if (key.id === invitedUserID) {
            return invitedName = key.name;
          }
        });

        return this.$i18n.t("caption.hasInvited") + `${invitedName}` + this.$i18n.t("caption.inTheChat");
      }

      if (membership === 'ban') {
        _.find(pStateUsers, (key, value) => {
          if (key.id === invitedUserID) {
            return invitedName = key.name;
          }
        });

        return this.$i18n.t("caption.banned") + ` ${invitedName} ` + this.$i18n.t("caption.andRoom");
      }

      if (membership === 'leave') {
        let user = this.$store.state.users[functions["a" /* default */].getmatrixid(this.event.target.userId)];

        if (user) {
          return `${user.name} ` + this.$i18n.t("caption.left") + this.$i18n.t("caption.theChat");
        }
      }

      if (this.event.event.type === 'm.room.power_levels' && this.event.event.unsigned.prev_content) {
        let newModer = Object.keys(functions["a" /* default */].ObjDiff(this.event.event.content.users, this.event.event.unsigned.prev_content.users));
        let pocketUser = this.$store.state.users[`${functions["a" /* default */].getmatrixid(newModer[0])}`];
        let userLevel = this.event.event.content.users[`${newModer[0]}`];

        if (!_.isEmpty(pocketUser) && newModer[0]) {
          if (userLevel === 0) {
            return this.$i18n.t("caption.unmarked") + ` ${pocketUser.name} ` + this.$i18n.t("caption.asModerator");
          }

          if (userLevel === 50) {
            return this.$i18n.t("caption.marked") + ` ${pocketUser.name} ` + this.$i18n.t("caption.asModerator");
          }
        }
      }

      if (this.event.event.type === 'm.room.topic') {} // }


      if (this.event.event.type === 'm.room.name') {
        return this.$i18n.t("caption.editedChatNameTo") + `"${this.event.event.content.name}"`;
      }
    }
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/events/event/member?vue&type=script&lang=js&
 /* harmony default export */ var event_member_vue_type_script_lang_js_ = (member_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/member/index.vue



function member_injectStyles (context) {
  
  var style0 = __webpack_require__("00e4")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var member_component = Object(componentNormalizer["a" /* default */])(
  event_member_vue_type_script_lang_js_,
  membervue_type_template_id_54a240c2_scoped_true_render,
  membervue_type_template_id_54a240c2_scoped_true_staticRenderFns,
  false,
  member_injectStyles,
  "54a240c2",
  null
  ,true
)

/* harmony default export */ var member = (member_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/message/index.vue?vue&type=template&id=c8f458dc&scoped=true&
var messagevue_type_template_id_c8f458dc_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"eventsMessage"},[(_vm.referenceshowed && _vm.reference && !_vm.preview && !_vm.fromreference)?_c('div',{staticClass:"reference referenceTop",class:{my: _vm.my}},[_c('eventsEvent',{attrs:{"event":_vm.reference,"chat":_vm.chat,"preview":false,"fromreference":true}})],1):_vm._e(),(!_vm.preview && _vm.content.msgtype !== 'm.notice')?_c('div',{directives:[{name:"touch",rawName:"v-touch:touchhold",value:(_vm.dropDownMenuShow),expression:"dropDownMenuShow",arg:"touchhold"}],class:{referenceshowed: _vm.referenceshowed, showmeta : _vm.showmeta, my: _vm.my,'messageRow': 'messageRow', urlpreview : _vm.urlpreview, allscreen : _vm.urlpreview || _vm.content.msgtype === 'm.image'|| _vm.file, aligncenter : _vm.content.msgtype === 'm.audio'},attrs:{"my":_vm.my}},[((_vm.urlpreview || _vm.imageUrl || _vm.content.msgtype === 'm.image') || (_vm.showmeta && (_vm.my)) || _vm.file)?_c('div',{staticClass:"timeWrapper"},[(_vm.showburn)?_c('i',{class:'fas fa-fire burn ' + _vm.showburn,on:{"click":_vm.showwhenburn}}):_vm._e(),_c('span',[_vm._v(" "+_vm._s(_vm.format_date(_vm.origin._localTimestamp) || "Now")+" ")])]):_vm._e(),(_vm.content.msgtype !== 'm.file')?_c('div',{staticClass:"actionsWrapper"},[(_vm.multiSelect)?_c('div',{staticClass:"multiSelect",on:{"click":function($event){return _vm.eventMessage(_vm.selectedMessage)}}},[(_vm.selectedMessage)?_c('i',{staticClass:"far fa-check-circle"}):_c('i',{staticClass:"far fa-circle"})]):_c('div',{staticClass:"mnwrapper"},[_c('i',{staticClass:"fas fa-ellipsis-h",on:{"click":_vm.setmenu}})])]):_vm._e(),(!_vm.my || _vm.showmyicon)?_c('div',{staticClass:"iconWrapper",on:{"click":function($event){return _vm.core.mtrx.opencontact(_vm.userinfo)}}},[_c('userpic',{attrs:{"userinfo":_vm.userinfo}})],1):_vm._e(),((_vm.content.from || _vm.imageFrom) && (_vm.file || (_vm.content.msgtype === 'm.image' && _vm.imageUrl) || ( _vm.content.msgtype === 'm.audio' && _vm.audioUrl)))?_c('div',{staticClass:"fromimagesfiles"},[_c('div',{staticClass:"fromCaption"},[_c('i',{staticClass:"fas fa-share-alt"}),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.$t("caption.messagefrom")))])])]):_vm._e(),(_vm.content.msgtype === 'm.image')?_c('div',{staticClass:"messageImg"},[(_vm.imageUrl)?_c('div',{},[(_vm.encryptedData)?_c('div',{staticClass:"encryptedDataIcon"},[_c('i',{staticClass:"fas fa-lock"})]):_vm._e(),_c('div',{staticClass:"imgMsg"},[_c('div',{staticClass:"showImage",style:(_vm.imagePaddingStyle(_vm.content)),on:{"click":function($event){return _vm.openImageGallery(_vm.origin)}}},[_c('div',{staticClass:"abswrapper"},[_c('img',{directives:[{name:"images-loaded",rawName:"v-images-loaded:on.loaded",value:(_vm.imagesLoaded),expression:"imagesLoaded",arg:"on",modifiers:{"loaded":true}}],attrs:{"src":_vm.imageUrl,"alt":""}})])])])]):_c('div',{staticClass:"preloaderImage",style:(_vm.imagePaddingStyle(_vm.content))},[_c('div',{staticClass:"abswrapper"},[_c('linepreloader')],1)])]):_vm._e(),(_vm.content.msgtype === 'm.audio')?_c('div',{staticClass:"messageAudio"},[(_vm.audioUrl)?_c('VoiceMessage',{attrs:{"audioBuffer":_vm.audioUrl,"decryptedInfo":_vm.decryptedInfo,"id":_vm.event._localTimestamp || Date.now()}}):_vm._e()],1):_vm._e(),(_vm.content.msgtype === 'm.encrypted' && !_vm.textWithoutLinks && _vm.badenctypted)?_c('div',{staticClass:"maxcontent",class:{'my' : _vm.my }},[_c('div',{staticClass:"badenctyptedText"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.unabletoDecrypt")))]),_vm._v(" "),_c('i',{staticClass:"fas fa-undo decryptagain",on:{"click":_vm.decryptagain}})])]):_vm._e(),((_vm.content.msgtype === 'm.text' || _vm.content.msgtype === 'm.encrypted') && _vm.textWithoutLinks)?_c('div',{staticClass:"maxcontent",class:{'my' : _vm.my }},[_c('div',{staticClass:"messageText"},[(_vm.edited)?_c('div',{staticClass:"edited"},[_c('i',{staticClass:"fas fa-pen"}),_vm._v(" "+_vm._s(_vm.$t("caption.edited"))+" ")]):_vm._e(),_c('div',{staticClass:"msgtext"},[_c('IncomingMessage',{attrs:{"message":_vm.textWithoutLinks}})],1),((!_vm.content.from && !_vm.my && _vm.showmeta) || (_vm.showmyicon && !_vm.my))?_c('div',{staticClass:"sendername"},[_c('span',[_c('b',[_vm._v(_vm._s(_vm.userinfo.name))])]),_vm._v(" · "),_c('span',[_vm._v(" "+_vm._s(_vm.format_date(_vm.origin._localTimestamp) || "Now")+" ")])]):_vm._e(),(_vm.reference && !_vm.preview && !_vm.fromreference)?_c('div',{staticClass:"reference showreference",on:{"click":_vm.showreference}},[(!_vm.referenceshowed)?_c('eventsEvent',{attrs:{"event":_vm.reference,"chat":_vm.chat,"preview":true}}):_vm._e(),_c('div',{staticClass:"referenceCaption"},[(!_vm.referenceshowed)?_c('span',[_c('i',{staticClass:"fas fa-share"})]):_c('button',{staticClass:"button ghost small"},[_vm._v("Hide")])])],1):_vm._e(),(_vm.content.from)?_c('div',{staticClass:"from"},[_c('div',{staticClass:"fromCaption"},[_c('i',{staticClass:"fas fa-share-alt"}),_c('span',[_vm._v(_vm._s(_vm.$t("caption.messagefrom"))+" "+_vm._s(this.userinfo.name))])])]):_vm._e()])]):_vm._e(),(_vm.file)?_c('div',{staticClass:"filePreview"},[_c('fileMessage',{attrs:{"encryptedData":_vm.encryptedData,"file":_vm.file,"downloaded":_vm.downloaded},on:{"download":_vm.download}}),(_vm.encryptedData)?_c('div',{staticClass:"encryptedDataIcon"},[_c('i',{staticClass:"fas fa-lock"})]):_vm._e(),(_vm.error)?_c('div',{staticClass:"badencrypted"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.unabletoDecrypt")))])]):_vm._e()],1):_vm._e(),(_vm.urlpreview)?_c('div',{staticClass:"linkPreview"},[(!_vm.sending)?_c('div',{staticClass:"pr"},[(!_vm.origin.localRedactionEvent() && !_vm.origin.getRedactionEvent())?_c('url',{attrs:{"url":_vm.urlpreview,"urllink":_vm.urlpreview,"preview":true},on:{"updatedSize":_vm.updatedSize}}):_vm._e()],1):_c('div',[_c('linepreloader')],1)]):_vm._e()]):_vm._e(),(_vm.preview)?_c('div',{staticClass:"messagePreview"},[_c('listPreview',{attrs:{"my":_vm.my,"event":_vm.origin,"decryptEvent":_vm.decryptEvent,"userinfo":_vm.userinfo,"chat":_vm.chat,"readed":_vm.readed}})],1):_vm._e(),(_vm.my && _vm.readed && !_vm.preview && !_vm.fromreference)?_c('div',{staticClass:"statusWrapper"},[_c('div',{staticClass:"my"},[_c('i',{staticClass:"fas fa-check-double"}),_vm._v(" "),_c('span',[_vm._v(_vm._s(_vm.$t("caption.messageRead")))])])]):_vm._e()])}
var messagevue_type_template_id_c8f458dc_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/message/index.vue?vue&type=template&id=c8f458dc&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/actions/index.vue?vue&type=template&id=9d2b1700&scoped=true&
var actionsvue_type_template_id_9d2b1700_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"msgAction"},[_c('div',{staticClass:"contentAction",style:({'margin': _vm.position})},[_c('ul',[_c('li',[_c('a',{attrs:{"href":"google.com"}},[_vm._v(_vm._s(_vm.$t("button.reply"))+" "),_c('i',{staticClass:"fas fa-reply"})])]),_c('li',[_vm._v(_vm._s(_vm.$t("button.copy"))+" "),_c('i',{staticClass:"far fa-copy"})]),_c('li',[_vm._v(_vm._s(_vm.$t("button.select"))+" "),_c('i',{staticClass:"far fa-check-circle"})]),_c('li',[_vm._v(_vm._s(_vm.$t("button.forward"))+" "),_c('i',{staticClass:"fas fa-share"})]),_c('li',[_vm._v(_vm._s(_vm.$t("button.delete"))+" "),_c('i',{staticClass:"far fa-trash-alt"})])])])])}
var actionsvue_type_template_id_9d2b1700_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/actions/index.vue?vue&type=template&id=9d2b1700&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/events/event/actions?vue&type=script&lang=js&

/* harmony default export */ var actions_vue_type_script_lang_js_ = ({
  name: 'msgActions',
  props: {
    position: String
  },
  data: function () {
    return {
      loading: false,
      actionMessage: false
    };
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/events/event/actions?vue&type=script&lang=js&
 /* harmony default export */ var event_actions_vue_type_script_lang_js_ = (actions_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/actions/index.vue



function actions_injectStyles (context) {
  
  var style0 = __webpack_require__("7acf")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var actions_component = Object(componentNormalizer["a" /* default */])(
  event_actions_vue_type_script_lang_js_,
  actionsvue_type_template_id_9d2b1700_scoped_true_render,
  actionsvue_type_template_id_9d2b1700_scoped_true_staticRenderFns,
  false,
  actions_injectStyles,
  "9d2b1700",
  null
  ,true
)

/* harmony default export */ var actions = (actions_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/previews/filePreview/index.vue?vue&type=template&id=3d50eb11&
var filePreviewvue_type_template_id_3d50eb11_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',[_c('clip-loader',{staticClass:"clipLoader",attrs:{"size":'25px',"color":'#0035a8',"loading":true}}),_c('p',[_vm._v(_vm._s(_vm.preview.name))]),_c('p',[_vm._v(_vm._s(_vm.preview.size))])],1)}
var filePreviewvue_type_template_id_3d50eb11_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/previews/filePreview/index.vue?vue&type=template&id=3d50eb11&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/vue-spinner/src/ClipLoader.vue?vue&type=template&id=7edc50d8&
var ClipLoadervue_type_template_id_7edc50d8_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{directives:[{name:"show",rawName:"v-show",value:(_vm.loading),expression:"loading"}],staticClass:"v-spinner"},[_c('div',{staticClass:"v-clip",style:(_vm.spinnerStyle)})])}
var ClipLoadervue_type_template_id_7edc50d8_staticRenderFns = []


// CONCATENATED MODULE: ./node_modules/vue-spinner/src/ClipLoader.vue?vue&type=template&id=7edc50d8&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/vue-spinner/src/ClipLoader.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
/* harmony default export */ var ClipLoadervue_type_script_lang_js_ = ({
  name: 'ClipLoader',
  props: {
    loading: {
      type: Boolean,
      default: true
    },
    color: {
      type: String,
      default: '#5dc596'
    },
    size: {
      type: String,
      default: '35px'
    },
    radius: {
      type: String,
      default: '100%'
    }
  },
  computed: {
    spinnerStyle() {
      return {
        height: this.size,
        width: this.size,
        borderWidth: '2px',
        borderStyle: 'solid',
        borderColor: this.color + ' ' + this.color + ' transparent',
        borderRadius: this.radius,
        background: 'transparent'
      };
    }

  }
});
// CONCATENATED MODULE: ./node_modules/vue-spinner/src/ClipLoader.vue?vue&type=script&lang=js&
 /* harmony default export */ var src_ClipLoadervue_type_script_lang_js_ = (ClipLoadervue_type_script_lang_js_); 
// CONCATENATED MODULE: ./node_modules/vue-spinner/src/ClipLoader.vue



function ClipLoader_injectStyles (context) {
  
  var style0 = __webpack_require__("c337")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var ClipLoader_component = Object(componentNormalizer["a" /* default */])(
  src_ClipLoadervue_type_script_lang_js_,
  ClipLoadervue_type_template_id_7edc50d8_render,
  ClipLoadervue_type_template_id_7edc50d8_staticRenderFns,
  false,
  ClipLoader_injectStyles,
  null,
  null
  ,true
)

/* harmony default export */ var ClipLoader = (ClipLoader_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/previews/filePreview/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//

/* harmony default export */ var filePreviewvue_type_script_lang_js_ = ({
  props: {
    preview: Object
  },
  components: {
    clipLoader: ClipLoader
  }
});
// CONCATENATED MODULE: ./src/components/events/previews/filePreview/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var previews_filePreviewvue_type_script_lang_js_ = (filePreviewvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/previews/filePreview/index.vue





/* normalize component */

var filePreview_component = Object(componentNormalizer["a" /* default */])(
  previews_filePreviewvue_type_script_lang_js_,
  filePreviewvue_type_template_id_3d50eb11_render,
  filePreviewvue_type_template_id_3d50eb11_staticRenderFns,
  false,
  null,
  null,
  null
  ,true
)

/* harmony default export */ var filePreview = (filePreview_component.exports);
// EXTERNAL MODULE: ./src/components/events/event/fileMessage/index.vue + 4 modules
var fileMessage = __webpack_require__("696c2");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/message/listPreview/index.vue?vue&type=template&id=ba5ac396&scoped=true&
var listPreviewvue_type_template_id_ba5ac396_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"listPreview"},[(_vm.urlpreview && _vm.metaPreviewLink)?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"sname txt"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"linkTitle txt"},[_vm._v("sent link: "+_vm._s(_vm.meta['og:title'])+" ")]),(_vm.meta['og:site_name'] === 'Pocketnet')?_c('span',{staticClass:"pocketnetLink"},[_vm._v(" "+_vm._s(_vm.meta['og:site_name'])+" ")]):_c('span',[_vm._v(" "+_vm._s(_vm.meta['og:site_name'])+" ")])]):_vm._e(),(_vm.content.msgtype === 'm.file')?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"sname txt"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"txt"},[_vm._v(" sent file: "+_vm._s(JSON.parse(_vm.content.body).name)+" ")])]):_vm._e(),(_vm.content.msgtype === 'm.bad.encrypted')?_c('div',{staticClass:"previewMessage"},[_c('span',[_vm._v(" "+_vm._s(_vm.$t("caption.unabletoDecrypt"))+" ")])]):_vm._e(),(_vm.event.event.type === 'm.room.redaction')?_c('div',{staticClass:"previewMessage"},[_c('span',{staticClass:"txt"},[_c('i',{staticClass:"fas fa-eraser"}),_vm._v(" "+_vm._s(_vm.$t("caption.messageDeleted"))+" ")])]):_vm._e(),(_vm.event.event.type === 'm.room.power_levels')?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"txt"},[_vm._v(" "+_vm._s(_vm.powerLevels)+" ")])]):_vm._e(),(_vm.content.msgtype === 'm.image')?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.sentImage")))])]):_vm._e(),(_vm.content.msgtype === 'm.audio')?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.sentVoiceMessage")))])]):_vm._e(),((_vm.content.msgtype === 'm.text') && !_vm.urlpreview)?_c('div',{staticClass:"previewMessage"},[(_vm.senderName && _vm.senderName!= 'You')?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+": ")]):_vm._e(),_c('span',{staticClass:"txt"},[_c('IncomingMessage',{attrs:{"message":_vm.content.body}})],1)]):_vm._e(),(_vm.content.msgtype === 'm.encrypted' && !_vm.urlpreview)?_c('div',{staticClass:"previewMessage"},[(_vm.senderName && _vm.senderName!= 'You')?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+": ")]):_vm._e(),_c('span',{staticClass:"txt"},[_c('IncomingMessage',{attrs:{"message":_vm.decryptEvent.body}})],1)]):_vm._e(),(_vm.content.membership === 'invite')?_c('div',{staticClass:"invitedEvent"},[(_vm.tetatetchat)?_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.invitationToChat")))]):_vm._e(),(!_vm.tetatetchat)?_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.invitationToRoom")))]):_vm._e()]):_vm._e(),(_vm.content.membership === 'leave')?_c('div',{staticClass:"previewMessage"},[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+": ")]):_vm._e(),_c('span',{staticClass:"txt sname"},[_vm._v(" "+_vm._s(_vm.name)+" ")]),_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.leftChat")))])]):_vm._e(),(_vm.content.membership === 'ban')?_c('div',[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_vm._v(" "),_c('span',{staticClass:"txt"},[_vm._v("banned "+_vm._s(_vm.content.displayname))])]):_vm._e(),(_vm.content.membership === 'join' && _vm.event.getSender() !== _vm.userId)?_c('div',{staticClass:"invitedEvent"},[(_vm.senderName)?_c('span',{staticClass:"txt sname"},[_vm._v(_vm._s(_vm.senderName)+" ")]):_vm._e(),_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.joined")))])]):_vm._e(),(_vm.content.name)?_c('div',[_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.chatRenamed"))+" "),_c('b',[_vm._v(_vm._s(_vm.content.name))])])]):_vm._e(),(_vm.content.topic)?_c('div',[_c('span',{staticClass:"txt"},[_vm._v(_vm._s(_vm.$t("caption.chatTopic"))+" "),_c('b',[_vm._v(_vm._s(_vm.content.topic.replace(/_/g, ' ')))])])]):_vm._e(),(_vm.readed)?_c('div',{staticClass:"statusWrapper"},[(_vm.my)?_c('div',{staticClass:"my"},[_c('i',{staticClass:"fas fa-check-double"})]):_vm._e()]):_vm._e()])}
var listPreviewvue_type_template_id_ba5ac396_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/message/listPreview/index.vue?vue&type=template&id=ba5ac396&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/message/incomingMessage/incomingMessage.vue?vue&type=template&id=6b3704ba&scoped=true&
var incomingMessagevue_type_template_id_6b3704ba_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('label',_vm._l((_vm.chunks),function(chunk,index){return _c('label',{key:index,attrs:{"chunks":_vm.chunks}},[(chunk.id)?_c('label',{staticClass:"likelink",on:{"click":function($event){return _vm.show(chunk)}}},[_vm._v("@"+_vm._s(chunk.name))]):_c('label',[_vm._v(_vm._s(chunk))])])}),0)}
var incomingMessagevue_type_template_id_6b3704ba_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/message/incomingMessage/incomingMessage.vue?vue&type=template&id=6b3704ba&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/message/incomingMessage/incomingMessage.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
/* harmony default export */ var incomingMessagevue_type_script_lang_js_ = ({
  name: 'IncomingMessage',
  props: {
    message: {
      type: String,
      default: ''
    }
  },

  data() {
    return {
      user_id: /\w{68}:/,
      userCalled: /@\w{68}:\w{1,50}/g
    };
  },

  computed: {
    chunks: function () {
      if (this.message.indexOf('@') == -1) return [this.message];
      var c = this.message.split(this.userCalled);
      var us = Array.from(this.message.matchAll(this.userCalled), m => m[0]);
      var r = [];

      _.each(c, function (v, i) {
        r.push(v);

        if (us[i]) {
          var ch = us[i].replace('@', '').split(':');
          ch.length == 2 ? r.push({
            id: ch[0],
            name: ch[1]
          }) : r.push(us[i]);
        }
      });

      return r;
    }
  },
  methods: {
    show: function (chunk) {
      this.core.mtrx.kit.usersInfoById(chunk.id).then(r => {
        core.mtrx.opencontact(r);
      });
    }
  }
});
// CONCATENATED MODULE: ./src/components/events/event/message/incomingMessage/incomingMessage.vue?vue&type=script&lang=js&
 /* harmony default export */ var incomingMessage_incomingMessagevue_type_script_lang_js_ = (incomingMessagevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/message/incomingMessage/incomingMessage.vue



function incomingMessage_injectStyles (context) {
  
  var style0 = __webpack_require__("de56")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var incomingMessage_component = Object(componentNormalizer["a" /* default */])(
  incomingMessage_incomingMessagevue_type_script_lang_js_,
  incomingMessagevue_type_template_id_6b3704ba_scoped_true_render,
  incomingMessagevue_type_template_id_6b3704ba_scoped_true_staticRenderFns,
  false,
  incomingMessage_injectStyles,
  "6b3704ba",
  null
  ,true
)

/* harmony default export */ var incomingMessage = (incomingMessage_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/message/listPreview/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var listPreviewvue_type_script_lang_js_ = ({
  props: {
    event: {},
    chat: {},
    decryptEvent: {},
    notificationPreview: false,
    userinfo: Object,
    readed: Object,
    my: Boolean
  },
  components: {
    IncomingMessage: incomingMessage
  },
  data: function () {
    return {
      meta: {}
    };
  },
  computed: {
    userId: function () {
      var _this$core$user$useri;

      return (_this$core$user$useri = this.core.user.userinfo) === null || _this$core$user$useri === void 0 ? void 0 : _this$core$user$useri.id;
    },
    countMembers: function () {
      var _this$chat;

      return _.size((_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.currentState.members);
    },
    urlpreview: function () {
      if (this.content.msgtype !== 'm.file') {
        return '';
        if (this.content.body) return functions["a" /* default */].getUrl(this.content.body) || "";
      }
    },
    tetatetchat: function () {
      return this.core.mtrx.kit.tetatetchat(this.chat);
    },
    unknowngroupusers: function () {
      return this.core.mtrx.kit.unknowngroupusers(this.m_chat);
    },
    senderName: function () {
      if (this.userinfo.id == this.userId) return 'You';
      return this.userinfo.name || "";
    },
    metaPreviewLink: function () {
      this.core.mtrx.client.getUrlPreview(this.urlpreview, 0).then(r => {
        return this.meta = r;
      });
      return this.meta;
    },
    ev: function () {
      return this.event._clearEvent || this.event;
    },
    content: function () {
      return this.event.event.content;
    },
    name: function () {
      var n = this.$store.state.users[`${functions["a" /* default */].getmatrixid(this.event.event.state_key)}`].name;
      if (n == this.senderName) return '';
      return n;
    },
    powerLevels: function () {
      if (this.event.event.type === 'm.room.power_levels' && this.event.event.unsigned.prev_content) {
        let newModer = Object.keys(functions["a" /* default */].ObjDiff(this.event.event.content.users, this.event.event.unsigned.prev_content.users));
        let pocketUser = this.$store.state.users[`${functions["a" /* default */].getmatrixid(newModer[0])}`];
        let userLevel = this.event.event.content.users[`${newModer[0]}`];

        if (!_.isEmpty(pocketUser) && newModer[0]) {
          if (userLevel === 0 && pocketUser.name) {
            return 'unmarked ' + `${pocketUser.name}` + ' as moderator';
          }

          if (userLevel === 50 && pocketUser.name) {
            return 'marked ' + `${pocketUser.name}` + ' as moderator';
          }
        }
      }
    }
  }
});
// CONCATENATED MODULE: ./src/components/events/event/message/listPreview/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var message_listPreviewvue_type_script_lang_js_ = (listPreviewvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/message/listPreview/index.vue



function listPreview_injectStyles (context) {
  
  var style0 = __webpack_require__("9801")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var listPreview_component = Object(componentNormalizer["a" /* default */])(
  message_listPreviewvue_type_script_lang_js_,
  listPreviewvue_type_template_id_ba5ac396_scoped_true_render,
  listPreviewvue_type_template_id_ba5ac396_scoped_true_staticRenderFns,
  false,
  listPreview_injectStyles,
  "ba5ac396",
  null
  ,true
)

/* harmony default export */ var listPreview = (listPreview_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/url/index.vue?vue&type=template&id=791cf1f7&scoped=true&
var urlvue_type_template_id_791cf1f7_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"urlMessage",attrs:{"id":"url"}},[(_vm.urltype!= 'impty' && !_vm.error)?_c('div',{staticClass:"urlwrapper"},[(!_vm.loading)?_c('metaMessage',{ref:"metamessage",attrs:{"type":_vm.urltype,"name":_vm.meta['og:site_name'],"title":_vm.meta['og:title'],"description":_vm.meta['og:description'],"image":_vm.previewImageUrl,"url":_vm.url,"h":_vm.meta['og:image:height'],"w":_vm.meta['og:image:width']},on:{"updatedSize":_vm.updatedSize}}):_c('div',[_c('div',{staticClass:"preloaderWrapperLocal"},[_c('linepreloader')],1)])],1):_vm._e()])}
var urlvue_type_template_id_791cf1f7_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/url/index.vue?vue&type=template&id=791cf1f7&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/url/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var urlvue_type_script_lang_js_ = ({
  name: 'eventsurl',
  props: {
    url: String,
    preview: Boolean,
    data: Object
  },
  components: {
    'metaMessage': () => __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, "dacd"))
  },
  data: function () {
    return {
      meta: {},
      loading: true,
      error: false,
      groups: {
        p: ['pocketnet.app', 'bastyon.com'],
        pt: ['test.pocketnet.app', 'test.bastyon.com']
      }
    };
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    clearurl: function () {
      var u = this.url || "";
      u = u.replace('http://', 'https://');

      if (u.indexOf('https://') == -1) {
        u = 'https://' + u;
      }

      return u;
    },

    previewImageUrl() {
      if (this.meta['og:image']) return this.core.mtrx.client.mxcUrlToHttp(this.meta['og:image']);
    },

    urltype: function () {
      if (!this.url) return 'empty';

      if (this.url.indexOf('embedVideo.php') > -1) {
        return 'video';
      }

      var url = {};

      try {
        url = new URL(this.url);
      } catch (e) {
        this.error = e;
      }

      if (!url.pathname || url.pathname == '/') return 'custom';
      var domain = window.pocketnetdomain || 'pocketnet.app';
      if (this.url.indexOf('publicroom=') > -1) return 'matrix';
      if (this.url.indexOf('connect=') > -1) return 'matrix';
      if (this.url.indexOf('bastyon://') > -1) return 'pocketnet';
      if (this.url.indexOf('pocketnet://') > -1) return 'pocketnet';

      var m = _.find(this.groups, function (g) {
        return _.indexOf(g, url.host) > -1 && _.indexOf(g, domain) > -1;
      });

      if (m && this.url.indexOf('embedVideo.php') == -1) {
        return 'pocketnet';
      }

      return 'custom';
    }
  }),
  mounted: function () {
    if (this.urltype == 'custom') {
      this.geturl();
    } else {
      this.loading = false;
    }
  },
  methods: {
    updatedSize: function (before) {
      this.$emit('updatedSize', before);
    },
    geturl: function () {
      this.loading = true;
      this.core.mtrx.client.getUrlPreview(this.clearurl, 0).then(response => {
        this.loading = false;
        this.meta = response;
      }).catch(error => {
        this.meta = {};
        this.loading = false;
      });
    }
  }
});
// CONCATENATED MODULE: ./src/components/events/event/url/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var event_urlvue_type_script_lang_js_ = (urlvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/url/index.vue



function url_injectStyles (context) {
  
  var style0 = __webpack_require__("fdca")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var url_component = Object(componentNormalizer["a" /* default */])(
  event_urlvue_type_script_lang_js_,
  urlvue_type_template_id_791cf1f7_scoped_true_render,
  urlvue_type_template_id_791cf1f7_scoped_true_staticRenderFns,
  false,
  url_injectStyles,
  "791cf1f7",
  null
  ,true
)

/* harmony default export */ var event_url = (url_component.exports);
// EXTERNAL MODULE: ./node_modules/vue-images-loaded/dist/vueimagesloaded.js
var vueimagesloaded = __webpack_require__("8ff0");
var vueimagesloaded_default = /*#__PURE__*/__webpack_require__.n(vueimagesloaded);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/VoiceMessage/index.vue?vue&type=template&id=0438bc11&scoped=true&
var VoiceMessagevue_type_template_id_0438bc11_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"voiceMessage",class:{playing:_vm.isPlaying}},[_c('div',{staticClass:"voiceMessage_wrapper"},[_c('button',{staticClass:"voiceMessage_toggle",class:{encrypted: _vm.encrypted},on:{"touchend":_vm.audioToggle,"click":_vm.audioToggleClick}},[_c('i',{class:_vm.isPlaying ? 'fas fa-pause': 'fas fa-play'})]),_c('div',{staticClass:"voiceMessage_graph"},[_c('canvas',{ref:"canvas",attrs:{"width":"100","height":"50"},on:{"mousedown":_vm.goTo}})]),_c('div',{staticClass:"voiceMessage_options"},[(!_vm.error)?_c('span',[_vm._v(_vm._s(_vm.getDurationString))]):_vm._e(),(_vm.error)?_c('i',{staticClass:"fas fa-exclamation-circle"}):_vm._e()]),(_vm.encrypted && !_vm.error)?_c('div',{staticClass:"encsign"},[_c('i',{staticClass:"fas fa-lock"})]):_vm._e()])])}
var VoiceMessagevue_type_template_id_0438bc11_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/VoiceMessage/index.vue?vue&type=template&id=0438bc11&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/VoiceMessage/index.vue?vue&type=script&lang=js&

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var VoiceMessagevue_type_script_lang_js_ = ({
  name: "VoiceMessage",
  props: {
    decryptedInfo: Object,
    audioBuffer: {
      type: String | null,
      required: true
    },
    id: {
      type: Number
    }
  },

  data() {
    return {
      voiceMessage: null,
      isPlaying: false,
      interval: null,
      audioContext: null,
      audio: null,
      duration: null,
      currentTime: null,
      signal: null,
      audiobuffer: null,
      error: null
    };
  },

  inject: ['addToQueue', 'playNext'],

  mounted() {
    this.initVoiceMessage();
  },

  beforeDestroy() {
    if (this.isPlaying) {
      this.pause();
    }

    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    } //if(this.audioContext) this.audioContext.close()

  },

  watch: {
    isPlaying: function (v) {
      if (!this.isPlaying) {} else {}
    }
  },
  computed: {
    encrypted() {
      return this.decryptedInfo ? true : false;
    },

    ...Object(vuex_esm["c" /* mapState */])({
      mobile: state => state.mobile
    }),

    getDurationString() {
      if (this.duration) {
        let sec, min;

        if (this.currentTime) {
          sec = Math.floor(this.currentTime);
          min = Math.floor(this.currentTime / 60);
          return `${min}:${sec < 10 ? '0' + sec : sec}`;
        }

        sec = Math.floor(this.duration);
        min = Math.floor(this.duration / 60);
        return `${min}:${sec < 10 ? '0' + sec : sec}`;
      }

      return '0:00';
    },

    percentPlayed() {
      return this.currentTime / this.duration;
    },

    localBuffer() {
      return functions["a" /* default */].copyArrayBuffer(this.audioBuffer);
    }

  },
  methods: {
    goTo(e) {
      if (!this.$refs.canvas) return;
      var dr = e.offsetX / this.$refs.canvas.width * this.duration;

      if (!this.isPlaying) {
        this.setTime(dr);
        this.play();
      } else {
        this.pause();
        setTimeout(() => {
          this.setTime(dr);
          this.play();
        }, 20);
      }
    },

    audioToggleClick() {
      if (this.mobile) return;
      this.audioToggle();
    },

    audioToggle() {
      if (this.isPlaying) {
        this.pause();
      } else {
        this.play();
      }
    },

    pause() {
      if (this.audio) {
        this.audio.stop();
        this.audio.disconnect();
      }

      this.isPlaying = false;
      this.draw();
      let currentPlaying = this.$store.state.currentPlayingVoiceMessage;

      if (currentPlaying && currentPlaying.id == this.id) {
        this.$store.commit('SET_CURRENT_PLAYING_VOICE_MESSAGE', null);
      }

      if (this.interval) {
        clearInterval(this.interval);
        this.interval = null;
      }
    },

    play() {
      if (!this.audiobuffer) return;

      if (this.error) {
        this.playNext(this.id);
        return;
      }

      this.audioContext = this.core.getAudioContext();
      this.isPlaying = true;
      this.audio = this.initAudioNode();

      if (this.currentTime >= this.duration) {
        this.setTime(0);
      }

      if (this.audio.start) {
        this.audio.start(0, this.currentTime);
      } else if (this.audio.play) {
        this.audio.play(0, this.currentTime);
      } else if (this.audio.noteOn) {
        this.audio.noteOn(0, this.currentTime);
      }

      let currentPlaying = this.$store.state.currentPlayingVoiceMessage;

      if (currentPlaying && currentPlaying.id !== this.id) {
        currentPlaying.pause();
      }

      this.$store.commit('SET_CURRENT_PLAYING_VOICE_MESSAGE', this);

      if (this.interval) {
        clearInterval(this.interval);
      }

      var t = 50;
      this.interval = setInterval(() => {
        var time = this.currentTime + t / 1000;
        if (this.duration - t / 1000 < time) time = this.duration;

        if (this.currentTime > this.duration) {
          this.pause();
        }

        this.draw();
        this.setTime(time);
      }, t);
    },

    draw() {
      const canvas = this.$refs.canvas;
      if (!this.signal) return;
      if (!canvas) return;
      const data = this.signal;
      var w = canvas.width;
      var h = canvas.height;
      var l = data.length;
      var perc = this.percentPlayed;
      const ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, w, h);
      var r = 0;
      var c = Math.floor(l / 20);

      for (let i = 0; i < l; i = i + c) {
        let x = Math.floor(i / l * w);
        let L = Math.abs(data[i] * h) + 1;

        if (i / l <= perc) {
          ctx.fillStyle = '#00a4ff';
        } else {
          ctx.fillStyle = '#8bddfb';
        }

        ctx.fillRect(x, h / 2 - L / 2, 2, L);
        r++;
      }
    },

    initAudioNode() {
      let audioNode = null;
      audioNode = this.audioContext.createBufferSource();
      audioNode.buffer = this.audiobuffer;
      audioNode.connect(this.audioContext.destination); ///let unmuteHandle = unmute(context, allowBackgroundPlayback, forceIOSBehavior);

      audioNode.onended = () => {
        this.audio = null;

        if (this.isPlaying) {
          setTimeout(() => {
            this.playNext(this.id);
          }, 300);
        } else {}

        if (this.duration - 100 < this.currentTime) this.setTime(0);
        this.pause();
      };

      return audioNode;
    },

    setTime() {
      let time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.currentTime = time;
    },

    initVoiceMessage() {
      var _this = this;

      return Object(asyncToGenerator["a" /* default */])(function* () {
        try {
          _this.audioContext = _this.core.getAudioContext(); //new (window.AudioContext || window.webkitAudioContext)() || null;
        } catch (e) {
          _this.error = e;
        }

        if (_this.error) return;

        _this.addToQueue(_this, _this.id);

        _this.duration = 0;

        _this.setTime(0); //const data = f._base64ToArrayBuffer(this.base64Audio.split(',')[1])


        try {
          yield _this.audioContext.decodeAudioData(_this.localBuffer, buffer => {
            _this.audiobuffer = buffer;
            _this.duration = buffer.duration;

            _this.setTime(0);

            _this.signal = buffer.getChannelData(0);

            _this.draw();
          });
        } catch (e) {
          _this.error = e; //console.error(e)
        }
      })();
    }

  }
});
// CONCATENATED MODULE: ./src/components/events/event/VoiceMessage/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var event_VoiceMessagevue_type_script_lang_js_ = (VoiceMessagevue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/VoiceMessage/index.vue



function VoiceMessage_injectStyles (context) {
  
  var style0 = __webpack_require__("e86a")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var VoiceMessage_component = Object(componentNormalizer["a" /* default */])(
  event_VoiceMessagevue_type_script_lang_js_,
  VoiceMessagevue_type_template_id_0438bc11_scoped_true_render,
  VoiceMessagevue_type_template_id_0438bc11_scoped_true_staticRenderFns,
  false,
  VoiceMessage_injectStyles,
  "0438bc11",
  null
  ,true
)

/* harmony default export */ var VoiceMessage = (VoiceMessage_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/events/event/message?vue&type=script&lang=js&










/* harmony default export */ var message_vue_type_script_lang_js_ = ({
  name: 'eventsMessage',
  props: {
    decryptEvent: {},
    origin: Object,
    prevevent: Object,
    event: Object,
    preview: Boolean,
    userinfo: Object,
    readed: Object,
    downloaded: Boolean,
    baseImg: {
      type: String,
      default: 'empty'
    },
    filePreview: Object,
    imgEvent: {},
    add_image: Function,
    goToGallery: Function,
    chat: Object,
    encrypted: false,
    encryptedData: Boolean,
    decryptedInfo: null,
    error: String,
    withImage: Boolean,
    reference: Object,
    last: Boolean,
    showmyicontrue: false,
    fromreference: Boolean,
    multiSelect: {
      default: false,
      type: Boolean
    },
    selectedMessages: {
      default: [],
      type: Array
    },
    isRemoveSelectedMessages: false,
    audioBuffer: null
  },
  directives: {
    imagesLoaded: vueimagesloaded_default.a
  },
  data: function () {
    return {
      referenceshowed: false
    };
  },
  components: {
    actions: actions,
    filePreview: filePreview,
    fileMessage: fileMessage["a" /* default */],
    listPreview: listPreview,
    url: event_url,
    dummypreviews: dummypreviews["a" /* default */],
    IncomingMessage: incomingMessage,
    VoiceMessage: VoiceMessage
  },
  watch: {
    isRemoveSelectedMessages: {
      immediate: true,
      handler: function () {
        if (this.isRemoveSelectedMessages) {
          for (let i = 0; i < this.selectedMessages.length; i++) {
            if (this.selectedMessages[i].message_id === this.origin.event.event_id) {
              this.$emit('remove');
              return this.core.mtrx.client.redactEvent(this.chat.roomId, this.origin.event.event_id, null, {
                reason: 'messagedeleting'
              });
            }
          }

          this.$emit('messagesIsDeleted', true);
        }
      }
    },
    readyToRender: {
      immediate: true,
      handler: function () {
        if (this.readyToRender) this.$emit('readyToRender');
      }
    }
  },
  computed: {
    showburn: function () {
      if (new Date() < new Date(2021, 11, 28)) {
        return '';
      }

      if (-moment().diff(this.willburn, this.core.options.burn.v) < this.core.options.burn.b) return 'big';
      if (-moment().diff(this.willburn, this.core.options.burn.v) < this.core.options.burn.m) return 'medium';
      return '';
    },
    willburn: function () {
      var d = moment(this.origin._localTimestamp).add(this.core.options.burn.w, this.core.options.burn.v);
      return d;
    },
    readyToRender: function () {
      var r = this.content.msgtype === 'm.encrypted' && !this.textWithoutLinks && this.badenctypted || this.content.membership || (this.content.msgtype === 'm.text' || this.content.msgtype === 'm.encrypted') && this.textWithoutLinks || this.file || this.error || this.content.msgtype === 'm.image' && this.imageUrl || this.content.msgtype === 'm.audio' && this.audioUrl || this.urlpreview || this.preview;
      return r;
    },
    my: function () {
      var _this$core$user$useri;

      return this.userinfo.id === ((_this$core$user$useri = this.core.user.userinfo) === null || _this$core$user$useri === void 0 ? void 0 : _this$core$user$useri.id);
    },
    stateChat: function () {
      var id = this.$route.query.id;
      return this.$store.state.chatsMap[id];
    },
    sending: function () {
      return this.origin.status == 'sending';
    },
    showmeta: function () {
      if (!this.prevevent) return true;
      var prevuser = this.$f.getmatrixid(this.prevevent.getSender());
      var t = 10 * 60000;

      if (moment().diff(this.origin._localTimestamp, 'days') != 0) {
        t = 60 * 1000 * 60 * 24;
      }

      if (prevuser != this.userinfo.id || this.prevevent._localTimestamp + t < this.origin._localTimestamp) {
        return true;
      }
    },
    imageFrom: function () {
      if (this.content && this.content.info) return this.content.info.from;
    },
    showmyicon: function () {
      return this.showmyicontrue || this.content.msgtype === 'm.image' ||
      /*this.content.msgtype === 'm.audio' ||*/
      this.content.msgtype === 'm.file' || this.urlpreview || !this.$store.state.active && this.$store.state.minimized;
    },
    file: function () {
      if (this.content.msgtype === 'm.file') {
        return this.body;
      }
    },
    replacedmintionsbody: function () {
      return this.body.replace(/@\w{68}:(\w{1,50})/g, function (str, l) {
        return '@' + l;
      });
    },
    body: function () {
      var bc = this.origin.event.content;

      if (this.origin.event.content.msgtype == 'm.encrypted') {
        bc = this.decryptEvent;
      }

      return bc.pbody || bc.body || '';
    },
    content: function () {
      return this.origin.event.content;
    },
    badenctypted: function () {
      return this.decryptEvent.msgtype == 'm.bad.encrypted';
    },
    textWithoutLinks: function () {
      var trimmed = this.$f.trim(this.body);

      if (!this.urlpreview || this.urlpreview.length < 10 || trimmed.indexOf(this.urlpreview) > 0 && trimmed.indexOf(this.urlpreview) + this.urlpreview.length < trimmed.length) {
        return trimmed;
      }

      return this.$f.trim(trimmed.replace(this.urlpreview, ''));
    },
    imageUrl: function () {
      if (this.content.msgtype === 'm.image') {
        if (this.encryptedData) {
          return this.decryptedInfo;
        } else {
          return this.content && this.content.url;
        }
      }
    },
    audioUrl: function () {
      if (this.content.msgtype === 'm.audio') {
        if (this.encryptedData && this.decryptedInfo) return this.decryptedInfo;
        return this.audioBuffer; //return this.content && this.content.audioData
      }
    },
    canediting: function () {
      var type = functions["a" /* default */].deep(this.origin, 'event.type');

      if (type == 'm.room.message') {
        if (this.origin.event.content.msgtype == 'm.encrypted' || this.origin.event.content.msgtype == 'm.text') {
          return true;
        }
      }
    },
    cancopy: function () {
      var type = functions["a" /* default */].deep(this.origin, 'event.type');

      if (type == 'm.room.message') {
        if (this.origin.event.content.msgtype == 'm.encrypted' || this.origin.event.content.msgtype == 'm.text') {
          return true;
        }
      }
    },
    menuItems: function () {
      var menu = [{
        click: "reply",
        title: this.$i18n.t("button.reply"),
        icon: "fas fa-reply"
      }, {
        click: "showMultiSelect",
        title: this.$i18n.t("button.select"),
        icon: "fas fa-check-circle"
      }];

      if (!this.file) {
        menu.push({
          click: "share",
          title: this.$i18n.t("button.share"),
          icon: "fas fa-share-alt"
        });
      }

      if (this.my) {
        menu.push({
          click: "delete",
          title: this.$i18n.t("button.delete"),
          icon: "far fa-trash-alt"
        });
      }

      var type = functions["a" /* default */].deep(this.origin, 'event.type');

      if (type == 'm.room.message') {
        menu.unshift({
          click: "copy",
          title: this.$i18n.t("button.copy"),
          icon: "far fa-copy"
        });
        if (this.my && this.canediting) menu.unshift({
          click: "edit",
          title: this.$i18n.t("button.edit"),
          icon: "far fa-edit"
        });
      }

      return menu;
    },
    urlpreview: function () {
      if (!this.preview && this.content.msgtype !== 'm.file') {
        var url = functions["a" /* default */].getUrl(this.body);

        if (url) {
          var _u = new URL(url);

          if (_u.pathname == '/') {
            if (functions["a" /* default */].knsite(url)) return '';
          }

          return url;
        }

        return url || '';
      }
    },
    edited: function () {
      if (this.content.edited) return true;
      if (this.origin.event.content['m.relates_to'] && this.origin.event.content['m.relates_to']['rel_type'] == 'm.replace') return true;
    },
    selectedMessage: function () {
      var _elem$;

      const elem = this.selectedMessages.filter(item => item.message_id === this.origin.event.event_id);
      return ((_elem$ = elem[0]) === null || _elem$ === void 0 ? void 0 : _elem$.message_id) === this.origin.event.event_id ? true : false;
    }
  },

  mounted() {},

  methods: {
    gotoreference: function () {
      var id = this.reference.getId();
      this.$emit('gotoreference', id);
    },
    showwhenburn: function () {
      var text = ''; //console.log(this.willburn.toDate(), new Date(), this.willburn.toDate() > new Date())

      if (this.willburn.toDate() < new Date()) {
        text = this.$i18n.t("messagewasburn");
      } else {
        text = this.$i18n.t("messagewillburn"); //this.willburn.locale(this.$i18n.locale).format('DD MMMM YYYY')
      }

      this.$store.commit('icon', {
        icon: 'info',
        message: text
      });
    },
    imagesLoaded: function () {
      this.updatedSize();
    },
    updatedSize: function (before) {
      this.$emit('updatedSize', before);
    },
    dropDownMenuShow: function () {
      if (this.urlpreview) return;
      setTimeout(() => {
        this.setmenu();
      }, 200);
    },
    setmenu: function () {
      this.core.menu({
        items: this.menuItems,
        handler: this.menuItemClickHandler,
        item: {}
      });
    },
    menushare: function () {
      var sharing = {};
      var trimmed = this.$f.trim(this.body);
      if (this.content.msgtype === 'm.image' && this.imageUrl) sharing.images = [this.imageUrl];
      if (this.content.msgtype === 'm.audio' && this.audioUrl) sharing.audio = [this.audioUrl];
      if ((this.content.msgtype === 'm.text' || this.content.msgtype === 'm.encrypted') && trimmed) sharing.messages = [trimmed]; //if(this.urlpreview) sharing.urls = [urlpreview]

      if (this.file) {
        sharing.download = true;
      } //sharing.route = 'chat?id=' + this.chat.roomId


      sharing.from = this.userinfo.id;
      this.$emit('share', sharing);
      return Promise.resolve();
    },
    menuedit: function () {
      this.$emit('editing', this.body);
      return Promise.resolve();
    },
    menushowMultiSelect: function () {
      this.$emit('showMultiSelect');
      this.selectMessage();
      return Promise.resolve();
    },
    menureply: function () {
      this.$emit('reply');
      return Promise.resolve();
    },
    menucopy: function () {
      this.$f.copytext(this.replacedmintionsbody);
      return Promise.resolve();
    },
    menudelete: function () {
      return this.$dialog.confirm('Do you really want to delete message?', {
        okText: this.$i18n.t("yes"),
        cancelText: this.$i18n.t("cancel")
      }).then(dialog => {
        this.$emit('remove');
        return this.core.mtrx.client.redactEvent(this.chat.roomId, this.origin.event.event_id, null, {
          reason: "messagedeleting"
        });
      }).catch(e => {
        return Promise.resolve();
      });
    },
    menuItemClickHandler: function (item, d, p) {
      p.hidePopup();
      this['menu' + item.click]().then(r => {}).catch(e => {
        p.showPopup();
      });
    },
    imagePaddingStyle: function (c) {
      if (c.info && c.info.h && c.info.w) {
        var cc = c.info.h / c.info.w;
        if (cc > 1.7) cc = 1.7;
        var h = 'padding-bottom:' + cc * 100 + '%';
        return h;
      }

      return '';
    },

    parser(event) {
      return JSON.parse(event)['og:title'];
    },

    openImage(img) {
      this.$emit('openImg', img);
    },

    format_date(value) {
      if (value) {
        if (moment().diff(value, 'days') === 0) {
          return new Date(value).toLocaleTimeString([], {
            hour: '2-digit',
            minute: "2-digit",
            hour12: false
          });
        } else {
          if (moment().year() === moment(value).year()) {
            return moment(value).locale(this.$i18n.locale).format('D MMMM');
          } else {
            return moment(value).locale(this.$i18n.locale).format('D MMMM YYYY');
          }
        }
      }
    },

    download: function () {
      this.$emit('download');
    },
    decryptagain: function () {
      this.$emit('decryptagain');
    },

    openImageGallery(msgEvent) {
      this.$emit('openGalleryImg', msgEvent);
    },

    reshareKeys() {
      let roomId = this.chat.roomId;
    },

    textDonation: function () {
      let withTx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var from = this.$i18n.t("caption.somebody"),
          msg = '';

      try {
        from = this.$f.deep(this, '$store.state.users.' + this.content.from).name;
      } catch (err) {}

      var to = this.$i18n.t("caption.somebody");

      try {
        to = this.$f.deep(this, '$store.state.users.' + this.content.to).name;
      } catch (err) {}

      msg += from + this.$i18n.t("caption.sent") + this.content.amount + this.$i18n.t("caption.sent") + to;
      return msg;
    },

    menuIsVisibleHandler(isVisible) {
      this.$emit('menuIsVisible', isVisible);
    },

    showreference: function () {
      this.referenceshowed = !this.referenceshowed;
    },
    selectMessage: function () {
      var sharing = {};
      var trimmed = this.$f.trim(this.body);
      if (this.content.msgtype === 'm.image' && this.imageUrl) sharing.images = [this.imageUrl];
      if (this.content.msgtype === 'm.audio' && this.decryptedInfo) sharing.audio = [this.decryptedInfo];
      if ((this.content.msgtype === 'm.text' || this.content.msgtype === 'm.encrypted') && trimmed) sharing.messages = [trimmed]; //if(this.urlpreview) sharing.urls = [urlpreview]

      if (this.file) {
        sharing.download = true;
      } //sharing.route = 'chat?id=' + this.chat.roomId


      sharing.from = this.userinfo.id;
      this.$emit('selectMessage', {
        message_id: this.origin.event.event_id,
        ...sharing
      });
    },
    removeMessage: function () {
      this.$emit('removeMessage', {
        message_id: this.origin.event.event_id
      });
    },
    eventMessage: function (state) {
      state ? this.removeMessage() : this.selectMessage();
    }
  }
});
// CONCATENATED MODULE: ./src/components/events/event/message?vue&type=script&lang=js&
 /* harmony default export */ var event_message_vue_type_script_lang_js_ = (message_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/message/index.vue



function message_injectStyles (context) {
  
  var style0 = __webpack_require__("dd47")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var message_component = Object(componentNormalizer["a" /* default */])(
  event_message_vue_type_script_lang_js_,
  messagevue_type_template_id_c8f458dc_scoped_true_render,
  messagevue_type_template_id_c8f458dc_scoped_true_staticRenderFns,
  false,
  message_injectStyles,
  "c8f458dc",
  null
  ,true
)

/* harmony default export */ var message = (message_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/index.vue?vue&type=script&lang=js&

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var eventvue_type_script_lang_js_ = ({
  name: 'eventsEvent',
  components: {
    common: common,
    member: member,
    message: message,
    dummypreviews: dummypreviews["a" /* default */]
  },
  data: function () {
    return {
      readed: null,
      decryptEvent: {},
      decryptedInfo: null,
      decryptReady: '',
      readyEvent: false,
      downloading: false,
      error: null,
      reference: null,
      removed: false,
      downloaded: false,
      readedInterval: null,
      audioBuffer: null,
      readyToRender: false
    };
  },
  props: {
    event: Object,
    prevevent: Object,
    preview: Boolean,
    withImage: Boolean,
    timeline: Object,
    last: Boolean,
    chat: Object,
    showmyicontrue: Boolean,
    metaUrl: String,
    galleryData: {},
    goToGallery: Function,
    clientWidth: Number,
    fromreference: Boolean,
    multiSelect: {
      default: false,
      type: Boolean
    },
    selectedMessages: {
      type: Array,
      default: () => {
        return [];
      }
    },
    isRemoveSelectedMessages: false
  },
  computed: {
    /*readyToRender : function(){
      if(this.$refs["cmessage"]) {
            if(this.$refs["cmessage"].readyToRender){
          return true
        }
        }
        return true
    },*/
    type: function () {
      var t = functions["a" /* default */].deep(this, 'event.event.type');
      if (['m.room.member'].indexOf(t) > -1) return 'member';
      if (['m.room.message'].indexOf(t) > -1) return 'message';
      if (['m.room.name'].indexOf(t) > -1) return 'member';
      if (['m.room.power_levels'].indexOf(t) > -1) return 'member';
      if (['m.room.redaction'].indexOf(t) > -1) return 'message';

      if (['m.room.topic'].indexOf(t) > -1) {
        return 'member';
      }

      return '';
    },
    subtype: function () {
      return functions["a" /* default */].deep(this, 'event.event.content.msgtype');
    },
    encryptedData: function () {
      return functions["a" /* default */].deep(this, 'event.event.content.info.secrets') || functions["a" /* default */].deep(this, 'event.event.content.pbody.secrets') ? true : false;
    },
    userinfo: function () {
      return this.$f.deep(this, '$store.state.users.' + this.$f.getmatrixid(this.event.getSender())) || {};
    },
    encrypted: function () {
      if (this.chat && this.chat.roomId) {
        return this.core.mtrx.client.isRoomEncrypted(this.chat.roomId);
      }

      return false;
    },
    my: function () {
      var _this$core$user$useri;

      return this.userinfo.id === ((_this$core$user$useri = this.core.user.userinfo) === null || _this$core$user$useri === void 0 ? void 0 : _this$core$user$useri.id);
    }
  },
  beforeDestroy: function () {
    if (this.readedInterval) {
      clearInterval(this.readedInterval);
      this.readedInterval = null;
    }
  },
  mounted: function () {
    this.$emit('mounted');
  },
  watch: {
    readed: {
      immediate: true,
      handler: function () {
        this.manageReadedInterval();
      }
    },
    last: {
      handler: function () {
        this.manageReadedInterval();
      }
    },
    event: {
      immediate: true,
      handler: function () {
        this.decryptEvent = {};
        this.checkReaded();
        this.relations();

        if (this.encryptedData || this.subtype == 'm.encrypted') {
          functions["a" /* default */].pretry(() => {
            return this.chat.pcrypto;
          }, 20, 10000).then(() => {
            if (this.encryptedData && this.subtype == 'm.image') {
              this.decryptImage();
            }

            if (this.encryptedData && this.subtype == 'm.audio') {
              this.decryptAudio();
            }

            if (this.subtype == 'm.encrypted') {
              this.decrypt();
            }
          });
        } else {
          if (this.subtype == 'm.audio') {
            this.getAudioUnencrypt();
          }
        }
      }
    }
  },
  methods: {
    setReadyToRender() {
      setTimeout(() => {
        this.readyToRender = true;
      }, 20);
    },

    manageReadedInterval() {
      if (this.preview || !this.my) return;

      if (this.last || this.readed) {
        if (!this.readedInterval) {
          this.readedInterval = setInterval(() => {
            this.checkReaded();
          }, 500);
        }
      } else {
        if (this.readedInterval) {
          clearInterval(this.readedInterval);
          this.readedInterval = null;
        }
      }
    },

    relations() {
      if (this.timeline) {
        var ts = this.timeline._timelineSet;
        var e = this.event;

        if (!this.reference && e.event.content['m.relates_to'] && e.event.content['m.relates_to'] && e.event.content['m.relates_to']['rel_type'] == "m.reference") {
          var id = e.event.content['m.relates_to']['event_id'];

          if (id) {
            this.core.mtrx.client.getEventTimeline(ts, id).then(r => {
              var ev = _.find(r.getEvents(), e => {
                if (e.getId() == id) {
                  return true;
                }
              });

              if (ev) {
                this.reference = e.event.content.reference = ev;
                var rt = ts.getRelationsForEvent(this.core.mtrx.clearEventId(ev), 'm.replace', 'm.room.message');

                if (rt) {
                  var last = rt.getLastReplacement();

                  if (last) {
                    ev.event.content.body = last.event.content.body;
                    ev.event.content.edited = last.event.event_id;
                  }
                }
              }
            });
          }
        }
      }
    },

    editing(text) {
      this.$emit('editing', text);
    },

    reply() {
      this.$emit('reply');
    },

    share(_sharing) {
      var pr = Promise.resolve();

      if (_sharing.download) {
        pr = this.core.mtrx.getFile(this.chat, this.event).then(r => {
          return functions["a" /* default */].Base64.fromFile(r.file);
        }).then(r => {
          _sharing.files = [r];
          return Promise.resolve();
        });
      }

      return pr.then(() => {
        return this.core.share(_sharing);
      });
    },

    downloadFile() {
      this.downloading = true;
      this.core.mtrx.downloadFile(this.chat, this.event).catch(e => {
        this.error = e.toString();
        return Promise.resolve(e);
      }).then(r => {
        this.downloading = false;
        this.downloaded = true;
        this.$store.commit('icon', {
          icon: 'success',
          message: "Downloaded"
        });
      }).catch(e => {
        this.$store.commit('icon', {
          icon: 'error',
          message: "Downloading Failed"
        });
      });
    },

    getAudioUnencrypt() {
      this.core.mtrx.getAudioUnencrypt(this.chat, this.event).then(url => {
        this.audioBuffer = url; //this.$set(this.event.event.content, 'audioData', url)
      }).catch(e => {//console.error(e)
      });
    },

    decryptAudio() {
      var _this = this;

      return Object(asyncToGenerator["a" /* default */])(function* () {
        console.log("decryptAudiodecryptAudiodecryptAudiodecryptAudio");

        _this.core.mtrx.getAudio(_this.chat, _this.event).then(url => {
          console.log("HE");
          _this.decryptedInfo = url;
        }).catch(e => {
          _this.event.event.decryptKey = _this.decryptKey = {
            msgtype: 'm.bad.encrypted'
          };
        });
      })();
    },

    decryptImage() {
      var _this2 = this;

      return Object(asyncToGenerator["a" /* default */])(function* () {
        _this2.core.mtrx.getImage(_this2.chat, _this2.event).then(url => {
          _this2.decryptedInfo = url;
        }).catch(e => {
          _this2.event.event.decryptKey = _this2.decryptKey = {
            msgtype: 'm.bad.encrypted'
          };
        });
      })();
    },

    decryptAgain() {
      var _this3 = this;

      return Object(asyncToGenerator["a" /* default */])(function* () {
        _this3.event.event.decrypted = null;
        return _this3.decrypt();
      })();
    },

    decrypt() {
      var _this4 = this;

      return Object(asyncToGenerator["a" /* default */])(function* () {
        console.log('this.event', _this4.event);

        if (_this4.event.event.decrypted) {
          _this4.decryptEvent = _this4.event.event.decrypted;
          return Promise.resolve();
        }

        try {
          var de = yield _this4.chat.pcrypto.decryptEvent(_this4.event.event);
          _this4.decryptEvent = de;
          _this4.event.event.decrypted = _this4.decryptEvent;
        } catch (e) {
          console.error(e);
          _this4.event.event.decrypted = _this4.decryptEvent = {
            msgtype: 'm.bad.encrypted'
          };
        }
      })();
    },

    checkReaded: function () {
      if (this.event) {
        this.core.mtrx.isReaded(this.event).then(readed => {
          this.readed = readed || null;
        });
      }
    },
    openImage: function () {
      this.$emit('openImageEvent', this.event);
    },
    removeEvent: function (event) {
      this.$emit('removeEvent', event);
      this.removed = true;
    },
    menuIsVisibleHandler: function (isVisible) {
      this.$emit('menuIsVisible', isVisible);
    },
    selectMessage: function (message) {
      this.$emit('selectMessage', message);
    },
    removeMessage: function (message) {
      this.$emit('removeMessage', message);
    },
    shareManyMessages: function (isShare) {
      this.$emit('shareManyMessages', isShare);
    },
    messagesIsDeleted: function (state) {
      this.$emit('messagesIsDeleted', state);
    }
  }
});
// CONCATENATED MODULE: ./src/components/events/event/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var events_eventvue_type_script_lang_js_ = (eventvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/events/event/index.vue



function event_injectStyles (context) {
  
  var style0 = __webpack_require__("72a7")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var event_component = Object(componentNormalizer["a" /* default */])(
  events_eventvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  event_injectStyles,
  "659136c0",
  null
  ,true
)

/* harmony default export */ var events_event = __webpack_exports__["default"] = (event_component.exports);

/***/ }),

/***/ "62c8":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("b639")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "62d6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_79bb4e47_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("96c4");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_79bb4e47_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_79bb4e47_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_79bb4e47_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_79bb4e47_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "62e4":
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "6374":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "6386":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventTimelineSet = EventTimelineSet;

var _events = __webpack_require__("faa1");

var _eventTimeline = __webpack_require__("e685");

var _event = __webpack_require__("a120");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");

var _relations = __webpack_require__("3ed0");
/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/event-timeline-set
 */
// var DEBUG = false;


const DEBUG = true;
let debuglog;

if (DEBUG) {
  // using bind means that we get to keep useful line numbers in the console
  debuglog = _logger.logger.log.bind(_logger.logger);
} else {
  debuglog = function () {};
}
/**
 * Construct a set of EventTimeline objects, typically on behalf of a given
 * room.  A room may have multiple EventTimelineSets for different levels
 * of filtering.  The global notification list is also an EventTimelineSet, but
 * lacks a room.
 *
 * <p>This is an ordered sequence of timelines, which may or may not
 * be continuous. Each timeline lists a series of events, as well as tracking
 * the room state at the start and the end of the timeline (if appropriate).
 * It also tracks forward and backward pagination tokens, as well as containing
 * links to the next timeline in the sequence.
 *
 * <p>There is one special timeline - the 'live' timeline, which represents the
 * timeline to which events are being added in real-time as they are received
 * from the /sync API. Note that you should not retain references to this
 * timeline - even if it is the current timeline right now, it may not remain
 * so if the server gives us a timeline gap in /sync.
 *
 * <p>In order that we can find events from their ids later, we also maintain a
 * map from event_id to timeline and index.
 *
 * @constructor
 * @param {?Room} room
 * Room for this timelineSet. May be null for non-room cases, such as the
 * notification timeline.
 * @param {Object} opts Options inherited from Room.
 *
 * @param {boolean} [opts.timelineSupport = false]
 * Set to true to enable improved timeline support.
 * @param {Object} [opts.filter = null]
 * The filter object, if any, for this timelineSet.
 * @param {boolean} [opts.unstableClientRelationAggregation = false]
 * Optional. Set to true to enable client-side aggregation of event relations
 * via `getRelationsForEvent`.
 * This feature is currently unstable and the API may change without notice.
 */


function EventTimelineSet(room, opts) {
  this.room = room;
  this._timelineSupport = Boolean(opts.timelineSupport);
  this._liveTimeline = new _eventTimeline.EventTimeline(this);
  this._unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation; // just a list - *not* ordered.

  this._timelines = [this._liveTimeline];
  this._eventIdToTimeline = {};
  this._filter = opts.filter || null;

  if (this._unstableClientRelationAggregation) {
    // A tree of objects to access a set of relations for an event, as in:
    // this._relations[relatesToEventId][relationType][relationEventType]
    this._relations = {};
  }
}

utils.inherits(EventTimelineSet, _events.EventEmitter);
/**
 * Get all the timelines in this set
 * @return {module:models/event-timeline~EventTimeline[]} the timelines in this set
 */

EventTimelineSet.prototype.getTimelines = function () {
  return this._timelines;
};
/**
 * Get the filter object this timeline set is filtered on, if any
 * @return {?Filter} the optional filter for this timelineSet
 */


EventTimelineSet.prototype.getFilter = function () {
  return this._filter;
};
/**
 * Set the filter object this timeline set is filtered on
 * (passed to the server when paginating via /messages).
 * @param {Filter} filter the filter for this timelineSet
 */


EventTimelineSet.prototype.setFilter = function (filter) {
  this._filter = filter;
};
/**
 * Get the list of pending sent events for this timelineSet's room, filtered
 * by the timelineSet's filter if appropriate.
 *
 * @return {module:models/event.MatrixEvent[]} A list of the sent events
 * waiting for remote echo.
 *
 * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'
 */


EventTimelineSet.prototype.getPendingEvents = function () {
  if (!this.room) {
    return [];
  }

  if (this._filter) {
    return this._filter.filterRoomTimeline(this.room.getPendingEvents());
  } else {
    return this.room.getPendingEvents();
  }
};
/**
 * Get the live timeline for this room.
 *
 * @return {module:models/event-timeline~EventTimeline} live timeline
 */


EventTimelineSet.prototype.getLiveTimeline = function () {
  return this._liveTimeline;
};
/**
 * Return the timeline (if any) this event is in.
 * @param {String} eventId the eventId being sought
 * @return {module:models/event-timeline~EventTimeline} timeline
 */


EventTimelineSet.prototype.eventIdToTimeline = function (eventId) {
  return this._eventIdToTimeline[eventId];
};
/**
 * Track a new event as if it were in the same timeline as an old event,
 * replacing it.
 * @param {String} oldEventId  event ID of the original event
 * @param {String} newEventId  event ID of the replacement event
 */


EventTimelineSet.prototype.replaceEventId = function (oldEventId, newEventId) {
  const existingTimeline = this._eventIdToTimeline[oldEventId];

  if (existingTimeline) {
    delete this._eventIdToTimeline[oldEventId];
    this._eventIdToTimeline[newEventId] = existingTimeline;
  }
};
/**
 * Reset the live timeline, and start a new one.
 *
 * <p>This is used when /sync returns a 'limited' timeline.
 *
 * @param {string=} backPaginationToken   token for back-paginating the new timeline
 * @param {string=} forwardPaginationToken token for forward-paginating the old live timeline,
 * if absent or null, all timelines are reset.
 *
 * @fires module:client~MatrixClient#event:"Room.timelineReset"
 */


EventTimelineSet.prototype.resetLiveTimeline = function (backPaginationToken, forwardPaginationToken) {
  // Each EventTimeline has RoomState objects tracking the state at the start
  // and end of that timeline. The copies at the end of the live timeline are
  // special because they will have listeners attached to monitor changes to
  // the current room state, so we move this RoomState from the end of the
  // current live timeline to the end of the new one and, if necessary,
  // replace it with a newly created one. We also make a copy for the start
  // of the new timeline.
  // if timeline support is disabled, forget about the old timelines
  const resetAllTimelines = !this._timelineSupport || !forwardPaginationToken;
  const oldTimeline = this._liveTimeline;
  const newTimeline = resetAllTimelines ? oldTimeline.forkLive(_eventTimeline.EventTimeline.FORWARDS) : oldTimeline.fork(_eventTimeline.EventTimeline.FORWARDS);

  if (resetAllTimelines) {
    this._timelines = [newTimeline];
    this._eventIdToTimeline = {};
  } else {
    this._timelines.push(newTimeline);
  }

  if (forwardPaginationToken) {
    // Now set the forward pagination token on the old live timeline
    // so it can be forward-paginated.
    oldTimeline.setPaginationToken(forwardPaginationToken, _eventTimeline.EventTimeline.FORWARDS);
  } // make sure we set the pagination token before firing timelineReset,
  // otherwise clients which start back-paginating will fail, and then get
  // stuck without realising that they *can* back-paginate.


  newTimeline.setPaginationToken(backPaginationToken, _eventTimeline.EventTimeline.BACKWARDS); // Now we can swap the live timeline to the new one.

  this._liveTimeline = newTimeline;
  this.emit("Room.timelineReset", this.room, this, resetAllTimelines);
};
/**
 * Get the timeline which contains the given event, if any
 *
 * @param {string} eventId  event ID to look for
 * @return {?module:models/event-timeline~EventTimeline} timeline containing
 * the given event, or null if unknown
 */


EventTimelineSet.prototype.getTimelineForEvent = function (eventId) {
  const res = this._eventIdToTimeline[eventId];
  return res === undefined ? null : res;
};
/**
 * Get an event which is stored in our timelines
 *
 * @param {string} eventId  event ID to look for
 * @return {?module:models/event~MatrixEvent} the given event, or undefined if unknown
 */


EventTimelineSet.prototype.findEventById = function (eventId) {
  const tl = this.getTimelineForEvent(eventId);

  if (!tl) {
    return undefined;
  }

  return utils.findElement(tl.getEvents(), function (ev) {
    return ev.getId() == eventId;
  });
};
/**
 * Add a new timeline to this timeline list
 *
 * @return {module:models/event-timeline~EventTimeline} newly-created timeline
 */


EventTimelineSet.prototype.addTimeline = function () {
  if (!this._timelineSupport) {
    throw new Error("timeline support is disabled. Set the 'timelineSupport'" + " parameter to true when creating MatrixClient to enable" + " it.");
  }

  const timeline = new _eventTimeline.EventTimeline(this);

  this._timelines.push(timeline);

  return timeline;
};
/**
 * Add events to a timeline
 *
 * <p>Will fire "Room.timeline" for each event added.
 *
 * @param {MatrixEvent[]} events A list of events to add.
 *
 * @param {boolean} toStartOfTimeline   True to add these events to the start
 * (oldest) instead of the end (newest) of the timeline. If true, the oldest
 * event will be the <b>last</b> element of 'events'.
 *
 * @param {module:models/event-timeline~EventTimeline} timeline   timeline to
 *    add events to.
 *
 * @param {string=} paginationToken   token for the next batch of events
 *
 * @fires module:client~MatrixClient#event:"Room.timeline"
 *
 */


EventTimelineSet.prototype.addEventsToTimeline = function (events, toStartOfTimeline, timeline, paginationToken) {
  if (!timeline) {
    throw new Error("'timeline' not specified for EventTimelineSet.addEventsToTimeline");
  }

  if (!toStartOfTimeline && timeline == this._liveTimeline) {
    throw new Error("EventTimelineSet.addEventsToTimeline cannot be used for adding events to " + "the live timeline - use Room.addLiveEvents instead");
  }

  if (this._filter) {
    events = this._filter.filterRoomTimeline(events);

    if (!events.length) {
      return;
    }
  }

  const direction = toStartOfTimeline ? _eventTimeline.EventTimeline.BACKWARDS : _eventTimeline.EventTimeline.FORWARDS;
  const inverseDirection = toStartOfTimeline ? _eventTimeline.EventTimeline.FORWARDS : _eventTimeline.EventTimeline.BACKWARDS; // Adding events to timelines can be quite complicated. The following
  // illustrates some of the corner-cases.
  //
  // Let's say we start by knowing about four timelines. timeline3 and
  // timeline4 are neighbours:
  //
  //    timeline1    timeline2    timeline3    timeline4
  //      [M]          [P]          [S] <------> [T]
  //
  // Now we paginate timeline1, and get the following events from the server:
  // [M, N, P, R, S, T, U].
  //
  // 1. First, we ignore event M, since we already know about it.
  //
  // 2. Next, we append N to timeline 1.
  //
  // 3. Next, we don't add event P, since we already know about it,
  //    but we do link together the timelines. We now have:
  //
  //    timeline1    timeline2    timeline3    timeline4
  //      [M, N] <---> [P]          [S] <------> [T]
  //
  // 4. Now we add event R to timeline2:
  //
  //    timeline1    timeline2    timeline3    timeline4
  //      [M, N] <---> [P, R]       [S] <------> [T]
  //
  //    Note that we have switched the timeline we are working on from
  //    timeline1 to timeline2.
  //
  // 5. We ignore event S, but again join the timelines:
  //
  //    timeline1    timeline2    timeline3    timeline4
  //      [M, N] <---> [P, R] <---> [S] <------> [T]
  //
  // 6. We ignore event T, and the timelines are already joined, so there
  //    is nothing to do.
  //
  // 7. Finally, we add event U to timeline4:
  //
  //    timeline1    timeline2    timeline3    timeline4
  //      [M, N] <---> [P, R] <---> [S] <------> [T, U]
  //
  // The important thing to note in the above is what happened when we
  // already knew about a given event:
  //
  //   - if it was appropriate, we joined up the timelines (steps 3, 5).
  //   - in any case, we started adding further events to the timeline which
  //       contained the event we knew about (steps 3, 5, 6).
  //
  //
  // So much for adding events to the timeline. But what do we want to do
  // with the pagination token?
  //
  // In the case above, we will be given a pagination token which tells us how to
  // get events beyond 'U' - in this case, it makes sense to store this
  // against timeline4. But what if timeline4 already had 'U' and beyond? in
  // that case, our best bet is to throw away the pagination token we were
  // given and stick with whatever token timeline4 had previously. In short,
  // we want to only store the pagination token if the last event we receive
  // is one we didn't previously know about.
  //
  // We make an exception for this if it turns out that we already knew about
  // *all* of the events, and we weren't able to join up any timelines. When
  // that happens, it means our existing pagination token is faulty, since it
  // is only telling us what we already know. Rather than repeatedly
  // paginating with the same token, we might as well use the new pagination
  // token in the hope that we eventually work our way out of the mess.

  let didUpdate = false;
  let lastEventWasNew = false;

  for (let i = 0; i < events.length; i++) {
    const event = events[i];
    const eventId = event.getId();
    const existingTimeline = this._eventIdToTimeline[eventId];

    if (!existingTimeline) {
      // we don't know about this event yet. Just add it to the timeline.
      this.addEventToTimeline(event, timeline, toStartOfTimeline);
      lastEventWasNew = true;
      didUpdate = true;
      continue;
    }

    lastEventWasNew = false;

    if (existingTimeline == timeline) {
      debuglog("Event " + eventId + " already in timeline " + timeline);
      continue;
    }

    const neighbour = timeline.getNeighbouringTimeline(direction);

    if (neighbour) {
      // this timeline already has a neighbour in the relevant direction;
      // let's assume the timelines are already correctly linked up, and
      // skip over to it.
      //
      // there's probably some edge-case here where we end up with an
      // event which is in a timeline a way down the chain, and there is
      // a break in the chain somewhere. But I can't really imagine how
      // that would happen, so I'm going to ignore it for now.
      //
      if (existingTimeline == neighbour) {
        debuglog("Event " + eventId + " in neighbouring timeline - " + "switching to " + existingTimeline);
      } else {
        debuglog("Event " + eventId + " already in a different " + "timeline " + existingTimeline);
      }

      timeline = existingTimeline;
      continue;
    } // time to join the timelines.


    _logger.logger.info("Already have timeline for " + eventId + " - joining timeline " + timeline + " to " + existingTimeline); // Variables to keep the line length limited below.


    const existingIsLive = existingTimeline === this._liveTimeline;
    const timelineIsLive = timeline === this._liveTimeline;
    const backwardsIsLive = direction === _eventTimeline.EventTimeline.BACKWARDS && existingIsLive;
    const forwardsIsLive = direction === _eventTimeline.EventTimeline.FORWARDS && timelineIsLive;

    if (backwardsIsLive || forwardsIsLive) {
      // The live timeline should never be spliced into a non-live position.
      // We use independent logging to better discover the problem at a glance.
      if (backwardsIsLive) {
        _logger.logger.warn("Refusing to set a preceding existingTimeLine on our " + "timeline as the existingTimeLine is live (" + existingTimeline + ")");
      }

      if (forwardsIsLive) {
        _logger.logger.warn("Refusing to set our preceding timeline on a existingTimeLine " + "as our timeline is live (" + timeline + ")");
      }

      continue; // abort splicing - try next event
    }

    timeline.setNeighbouringTimeline(existingTimeline, direction);
    existingTimeline.setNeighbouringTimeline(timeline, inverseDirection);
    timeline = existingTimeline;
    didUpdate = true;
  } // see above - if the last event was new to us, or if we didn't find any
  // new information, we update the pagination token for whatever
  // timeline we ended up on.


  if (lastEventWasNew || !didUpdate) {
    if (direction === _eventTimeline.EventTimeline.FORWARDS && timeline === this._liveTimeline) {
      _logger.logger.warn({
        lastEventWasNew,
        didUpdate
      }); // for debugging


      _logger.logger.warn(`Refusing to set forwards pagination token of live timeline ` + `${timeline} to ${paginationToken}`);

      return;
    }

    timeline.setPaginationToken(paginationToken, direction);
  }
};
/**
 * Add an event to the end of this live timeline.
 *
 * @param {MatrixEvent} event Event to be added
 * @param {string?} duplicateStrategy 'ignore' or 'replace'
 * @param {boolean} fromCache whether the sync response came from cache
 */


EventTimelineSet.prototype.addLiveEvent = function (event, duplicateStrategy, fromCache) {
  if (this._filter) {
    const events = this._filter.filterRoomTimeline([event]);

    if (!events.length) {
      return;
    }
  }

  const timeline = this._eventIdToTimeline[event.getId()];

  if (timeline) {
    if (duplicateStrategy === "replace") {
      debuglog("EventTimelineSet.addLiveEvent: replacing duplicate event " + event.getId());
      const tlEvents = timeline.getEvents();

      for (let j = 0; j < tlEvents.length; j++) {
        if (tlEvents[j].getId() === event.getId()) {
          // still need to set the right metadata on this event
          _eventTimeline.EventTimeline.setEventMetadata(event, timeline.getState(_eventTimeline.EventTimeline.FORWARDS), false);

          if (!tlEvents[j].encryptedType) {
            tlEvents[j] = event;
          } // XXX: we need to fire an event when this happens.


          break;
        }
      }
    } else {
      debuglog("EventTimelineSet.addLiveEvent: ignoring duplicate event " + event.getId());
    }

    return;
  }

  this.addEventToTimeline(event, this._liveTimeline, false, fromCache);
};
/**
 * Add event to the given timeline, and emit Room.timeline. Assumes
 * we have already checked we don't know about this event.
 *
 * Will fire "Room.timeline" for each event added.
 *
 * @param {MatrixEvent} event
 * @param {EventTimeline} timeline
 * @param {boolean} toStartOfTimeline
 * @param {boolean} fromCache whether the sync response came from cache
 *
 * @fires module:client~MatrixClient#event:"Room.timeline"
 */


EventTimelineSet.prototype.addEventToTimeline = function (event, timeline, toStartOfTimeline, fromCache) {
  const eventId = event.getId();
  timeline.addEvent(event, toStartOfTimeline);
  this._eventIdToTimeline[eventId] = timeline;
  this.setRelationsTarget(event);
  this.aggregateRelations(event);
  const data = {
    timeline: timeline,
    liveEvent: !toStartOfTimeline && timeline == this._liveTimeline && !fromCache
  };
  this.emit("Room.timeline", event, this.room, Boolean(toStartOfTimeline), false, data);
};
/**
 * Replaces event with ID oldEventId with one with newEventId, if oldEventId is
 * recognised.  Otherwise, add to the live timeline.  Used to handle remote echos.
 *
 * @param {MatrixEvent} localEvent     the new event to be added to the timeline
 * @param {String} oldEventId          the ID of the original event
 * @param {boolean} newEventId         the ID of the replacement event
 *
 * @fires module:client~MatrixClient#event:"Room.timeline"
 */


EventTimelineSet.prototype.handleRemoteEcho = function (localEvent, oldEventId, newEventId) {
  // XXX: why don't we infer newEventId from localEvent?
  const existingTimeline = this._eventIdToTimeline[oldEventId];

  if (existingTimeline) {
    delete this._eventIdToTimeline[oldEventId];
    this._eventIdToTimeline[newEventId] = existingTimeline;
  } else {
    if (this._filter) {
      if (this._filter.filterRoomTimeline([localEvent]).length) {
        this.addEventToTimeline(localEvent, this._liveTimeline, false);
      }
    } else {
      this.addEventToTimeline(localEvent, this._liveTimeline, false);
    }
  }
};
/**
 * Removes a single event from this room.
 *
 * @param {String} eventId  The id of the event to remove
 *
 * @return {?MatrixEvent} the removed event, or null if the event was not found
 * in this room.
 */


EventTimelineSet.prototype.removeEvent = function (eventId) {
  const timeline = this._eventIdToTimeline[eventId];

  if (!timeline) {
    return null;
  }

  const removed = timeline.removeEvent(eventId);

  if (removed) {
    delete this._eventIdToTimeline[eventId];
    const data = {
      timeline: timeline
    };
    this.emit("Room.timeline", removed, this.room, undefined, true, data);
  }

  return removed;
};
/**
 * Determine where two events appear in the timeline relative to one another
 *
 * @param {string} eventId1   The id of the first event
 * @param {string} eventId2   The id of the second event

 * @return {?number} a number less than zero if eventId1 precedes eventId2, and
 *    greater than zero if eventId1 succeeds eventId2. zero if they are the
 *    same event; null if we can't tell (either because we don't know about one
 *    of the events, or because they are in separate timelines which don't join
 *    up).
 */


EventTimelineSet.prototype.compareEventOrdering = function (eventId1, eventId2) {
  if (eventId1 == eventId2) {
    // optimise this case
    return 0;
  }

  const timeline1 = this._eventIdToTimeline[eventId1];
  const timeline2 = this._eventIdToTimeline[eventId2];

  if (timeline1 === undefined) {
    return null;
  }

  if (timeline2 === undefined) {
    return null;
  }

  if (timeline1 === timeline2) {
    // both events are in the same timeline - figure out their
    // relative indices
    let idx1;
    let idx2;
    const events = timeline1.getEvents();

    for (let idx = 0; idx < events.length && (idx1 === undefined || idx2 === undefined); idx++) {
      const evId = events[idx].getId();

      if (evId == eventId1) {
        idx1 = idx;
      }

      if (evId == eventId2) {
        idx2 = idx;
      }
    }

    return idx1 - idx2;
  } // the events are in different timelines. Iterate through the
  // linkedlist to see which comes first.
  // first work forwards from timeline1


  let tl = timeline1;

  while (tl) {
    if (tl === timeline2) {
      // timeline1 is before timeline2
      return -1;
    }

    tl = tl.getNeighbouringTimeline(_eventTimeline.EventTimeline.FORWARDS);
  } // now try backwards from timeline1


  tl = timeline1;

  while (tl) {
    if (tl === timeline2) {
      // timeline2 is before timeline1
      return 1;
    }

    tl = tl.getNeighbouringTimeline(_eventTimeline.EventTimeline.BACKWARDS);
  } // the timelines are not contiguous.


  return null;
};
/**
 * Get a collection of relations to a given event in this timeline set.
 *
 * @param {String} eventId
 * The ID of the event that you'd like to access relation events for.
 * For example, with annotations, this would be the ID of the event being annotated.
 * @param {String} relationType
 * The type of relation involved, such as "m.annotation", "m.reference", "m.replace", etc.
 * @param {String} eventType
 * The relation event's type, such as "m.reaction", etc.
 * @throws If <code>eventId</code>, <code>relationType</code> or <code>eventType</code>
 * are not valid.
 *
 * @returns {?Relations}
 * A container for relation events or undefined if there are no relation events for
 * the relationType.
 */


EventTimelineSet.prototype.getRelationsForEvent = function (eventId, relationType, eventType) {
  if (!this._unstableClientRelationAggregation) {
    throw new Error("Client-side relation aggregation is disabled");
  }

  if (!eventId || !relationType || !eventType) {
    throw new Error("Invalid arguments for `getRelationsForEvent`");
  } // debuglog("Getting relations for: ", eventId, relationType, eventType);


  const relationsForEvent = this._relations[eventId] || {};
  const relationsWithRelType = relationsForEvent[relationType] || {};
  return relationsWithRelType[eventType];
};
/**
 * Set an event as the target event if any Relations exist for it already
 *
 * @param {MatrixEvent} event
 * The event to check as relation target.
 */


EventTimelineSet.prototype.setRelationsTarget = function (event) {
  if (!this._unstableClientRelationAggregation) {
    return;
  }

  const relationsForEvent = this._relations[event.getId()];

  if (!relationsForEvent) {
    return;
  } // don't need it for non m.replace relations for now


  const relationsWithRelType = relationsForEvent["m.replace"];

  if (!relationsWithRelType) {
    return;
  } // only doing replacements for messages for now (e.g. edits)


  const relationsWithEventType = relationsWithRelType["m.room.message"];

  if (relationsWithEventType) {
    relationsWithEventType.setTargetEvent(event);
  }
};
/**
 * Add relation events to the relevant relation collection.
 *
 * @param {MatrixEvent} event
 * The new relation event to be aggregated.
 */


EventTimelineSet.prototype.aggregateRelations = function (event) {
  if (!this._unstableClientRelationAggregation) {
    return;
  }

  if (event.isRedacted() || event.status === _event.EventStatus.CANCELLED) {
    return;
  } // If the event is currently encrypted, wait until it has been decrypted.


  if (event.isBeingDecrypted()) {
    event.once("Event.decrypted", () => {
      this.aggregateRelations(event);
    });
    return;
  }

  const relation = event.getRelation();

  if (!relation) {
    return;
  }

  const relatesToEventId = relation.event_id;
  const relationType = relation.rel_type;
  const eventType = event.getType(); // debuglog("Aggregating relation: ", event.getId(), eventType, relation);

  let relationsForEvent = this._relations[relatesToEventId];

  if (!relationsForEvent) {
    relationsForEvent = this._relations[relatesToEventId] = {};
  }

  let relationsWithRelType = relationsForEvent[relationType];

  if (!relationsWithRelType) {
    relationsWithRelType = relationsForEvent[relationType] = {};
  }

  let relationsWithEventType = relationsWithRelType[eventType];
  let isNewRelations = false;
  let relatesToEvent;

  if (!relationsWithEventType) {
    relationsWithEventType = relationsWithRelType[eventType] = new _relations.Relations(relationType, eventType, this.room);
    isNewRelations = true;
    relatesToEvent = this.findEventById(relatesToEventId) || this.room.getPendingEvent(relatesToEventId);

    if (relatesToEvent) {
      relationsWithEventType.setTargetEvent(relatesToEvent);
    }
  }

  relationsWithEventType.addEvent(event); // only emit once event has been added to relations

  if (isNewRelations && relatesToEvent) {
    relatesToEvent.emit("Event.relationsCreated", relationType, eventType);
  }
};
/**
 * Fires whenever the timeline in a room is updated.
 * @event module:client~MatrixClient#"Room.timeline"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {?Room} room The room, if any, whose timeline was updated.
 * @param {boolean} toStartOfTimeline True if this event was added to the start
 * @param {boolean} removed True if this event has just been removed from the timeline
 * (beginning; oldest) of the timeline e.g. due to pagination.
 *
 * @param {object} data  more data about the event
 *
 * @param {module:models/event-timeline.EventTimeline} data.timeline the timeline the
 * event was added to/removed from
 *
 * @param {boolean} data.liveEvent true if the event was a real-time event
 * added to the end of the live timeline
 *
 * @example
 * matrixClient.on("Room.timeline",
 *                 function(event, room, toStartOfTimeline, removed, data) {
 *   if (!toStartOfTimeline && data.liveEvent) {
 *     var messageToAppend = room.timeline.[room.timeline.length - 1];
 *   }
 * });
 */

/**
 * Fires whenever the live timeline in a room is reset.
 *
 * When we get a 'limited' sync (for example, after a network outage), we reset
 * the live timeline to be empty before adding the recent events to the new
 * timeline. This event is fired after the timeline is reset, and before the
 * new events are added.
 *
 * @event module:client~MatrixClient#"Room.timelineReset"
 * @param {Room} room The room whose live timeline was reset, if any
 * @param {EventTimelineSet} timelineSet timelineSet room whose live timeline was reset
 * @param {boolean} resetAllTimelines True if all timelines were reset.
 */

/***/ }),

/***/ "63c7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = void 0;

var _loglevel = _interopRequireDefault(__webpack_require__("5c7d"));
/*
Copyright 2018 André Jaenisch
Copyright 2019, 2021 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module logger
 */
// This is to demonstrate, that you can use any namespace you want.
// Namespaces allow you to turn on/off the logging for specific parts of the
// application.
// An idea would be to control this via an environment variable (on Node.js).
// See https://www.npmjs.com/package/debug to see how this could be implemented
// Part of #332 is introducing a logging library in the first place.


const DEFAULT_NAMESPACE = "matrix"; // because rageshakes in react-sdk hijack the console log, also at module load time,
// initializing the logger here races with the initialization of rageshakes.
// to avoid the issue, we override the methodFactory of loglevel that binds to the
// console methods at initialization time by a factory that looks up the console methods
// when logging so we always get the current value of console methods.

_loglevel.default.methodFactory = function (methodName, logLevel, loggerName) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /* eslint-disable @babel/no-invalid-this */
    if (this.prefix) {
      args.unshift(this.prefix);
    }
    /* eslint-enable @babel/no-invalid-this */


    const supportedByConsole = methodName === "error" || methodName === "warn" || methodName === "trace" || methodName === "info";
    /* eslint-disable no-console */

    return;

    if (supportedByConsole) {
      return console[methodName](...args);
    } else {
      return console.log(...args);
    }
    /* eslint-enable no-console */

  };
};
/**
 * Drop-in replacement for <code>console</code> using {@link https://www.npmjs.com/package/loglevel|loglevel}.
 * Can be tailored down to specific use cases if needed.
 */


const logger = _loglevel.default.getLogger(DEFAULT_NAMESPACE);

exports.logger = logger;
logger.setLevel(_loglevel.default.levels.DEBUG);

function extendLogger(logger) {
  logger.withPrefix = function (prefix) {
    const existingPrefix = this.prefix || "";
    return getPrefixedLogger(existingPrefix + prefix);
  };
}

extendLogger(logger);

function getPrefixedLogger(prefix) {
  const prefixLogger = _loglevel.default.getLogger(`${DEFAULT_NAMESPACE}-${prefix}`);

  if (prefixLogger.prefix !== prefix) {
    // Only do this setup work the first time through, as loggers are saved by name.
    extendLogger(prefixLogger);
    prefixLogger.prefix = prefix;
    prefixLogger.setLevel(_loglevel.default.levels.DEBUG);
  }

  return prefixLogger;
}

/***/ }),

/***/ "6430":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("8707").Buffer
var Transform = __webpack_require__("d485").Transform
var StringDecoder = __webpack_require__("7d72").StringDecoder
var inherits = __webpack_require__("3fb5")

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase


/***/ }),

/***/ "646c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _asyncToGenerator = __webpack_require__("c973").default;

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncApi = SyncApi;

var _user = __webpack_require__("87d6");

var _room = __webpack_require__("0594");

var _group = __webpack_require__("d15f");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _filter = __webpack_require__("c976");

var _eventTimeline = __webpack_require__("e685");

var _pushprocessor = __webpack_require__("ef06");

var _logger = __webpack_require__("63c7");

var _errors = __webpack_require__("0023");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/*
 * TODO:
 * This class mainly serves to take all the syncing logic out of client.js and
 * into a separate file. It's all very fluid, and this class gut wrenches a lot
 * of MatrixClient props (e.g. _http). Given we want to support WebSockets as
 * an alternative syncing API, we may want to have a proper syncing interface
 * for HTTP and WS at some point.
 */


const DEBUG = true; // /sync requests allow you to set a timeout= but the request may continue
// beyond that and wedge forever, so we need to track how long we are willing
// to keep open the connection. This constant is *ADDED* to the timeout= value
// to determine the max time we're willing to wait.

const BUFFER_PERIOD_MS = 80 * 1000; // Number of consecutive failed syncs that will lead to a syncState of ERROR as opposed
// to RECONNECTING. This is needed to inform the client of server issues when the
// keepAlive is successful but the server /sync fails.

const FAILED_SYNC_ERROR_THRESHOLD = 3;

function getFilterName(userId, suffix) {
  // scope this on the user ID because people may login on many accounts
  // and they all need to be stored!
  return "FILTER_SYNC_" + userId + (suffix ? "_" + suffix : "");
}

function debuglog() {
  if (!DEBUG) {
    return;
  }

  _logger.logger.log(...arguments);
}
/**
 * <b>Internal class - unstable.</b>
 * Construct an entity which is able to sync with a homeserver.
 * @constructor
 * @param {MatrixClient} client The matrix client instance to use.
 * @param {Object} opts Config options
 * @param {module:crypto=} opts.crypto Crypto manager
 * @param {Function=} opts.canResetEntireTimeline A function which is called
 * with a room ID and returns a boolean. It should return 'true' if the SDK can
 * SAFELY remove events from this room. It may not be safe to remove events if
 * there are other references to the timelines for this room.
 * Default: returns false.
 * @param {Boolean=} opts.disablePresence True to perform syncing without automatically
 * updating presence.
 */


function SyncApi(client, opts) {
  this.client = client;
  opts = opts || {};
  opts.initialSyncLimit = opts.initialSyncLimit === undefined ? 8 : opts.initialSyncLimit;
  opts.resolveInvitesToProfiles = opts.resolveInvitesToProfiles || false;
  opts.pollTimeout = opts.pollTimeout || 30 * 1000;
  opts.pendingEventOrdering = opts.pendingEventOrdering || "chronological";

  if (!opts.canResetEntireTimeline) {
    opts.canResetEntireTimeline = function (roomId) {
      return false;
    };
  }

  this.opts = opts;
  this._peekRoom = null;
  this._currentSyncRequest = null;
  this._syncState = null;
  this._syncStateData = null; // additional data (eg. error object for failed sync)

  this._catchingUp = false;
  this._running = false;
  this._keepAliveTimer = null;
  this._connectionReturnedDefer = null;
  this._notifEvents = []; // accumulator of sync events in the current sync response

  this._failedSyncCount = 0; // Number of consecutive failed /sync requests

  this._storeIsInvalid = false; // flag set if the store needs to be cleared before we can start

  if (client.getNotifTimelineSet()) {
    client.reEmitter.reEmit(client.getNotifTimelineSet(), ["Room.timeline", "Room.timelineReset"]);
  }
}
/**
 * @param {string} roomId
 * @return {Room}
 */


SyncApi.prototype.createRoom = function (roomId) {
  const client = this.client;
  const {
    timelineSupport,
    unstableClientRelationAggregation
  } = client;
  const room = new _room.Room(roomId, client, client.getUserId(), {
    lazyLoadMembers: this.opts.lazyLoadMembers,
    pendingEventOrdering: this.opts.pendingEventOrdering,
    timelineSupport,
    unstableClientRelationAggregation
  });
  client.reEmitter.reEmit(room, ["Room.name", "Room.avatar", "Room.timeline", "Room.redaction", "Room.redactionCancelled", "Room.receipt", "Room.tags", "Room.timelineReset", "Room.localEchoUpdated", "Room.accountData", "Room.myMembership", "Room.replaceEvent"]);

  this._registerStateListeners(room);

  return room;
};
/**
 * @param {string} groupId
 * @return {Group}
 */


SyncApi.prototype.createGroup = function (groupId) {
  const client = this.client;
  const group = new _group.Group(groupId);
  client.reEmitter.reEmit(group, ["Group.profile", "Group.myMembership"]);
  client.store.storeGroup(group);
  return group;
};
/**
 * @param {Room} room
 * @private
 */


SyncApi.prototype._registerStateListeners = function (room) {
  const client = this.client; // we need to also re-emit room state and room member events, so hook it up
  // to the client now. We need to add a listener for RoomState.members in
  // order to hook them correctly. (TODO: find a better way?)

  client.reEmitter.reEmit(room.currentState, ["RoomState.events", "RoomState.members", "RoomState.newMember"]);
  room.currentState.on("RoomState.newMember", function (event, state, member) {
    member.user = client.getUser(member.userId);
    client.reEmitter.reEmit(member, ["RoomMember.name", "RoomMember.typing", "RoomMember.powerLevel", "RoomMember.membership"]);
  });
};
/**
 * @param {Room} room
 * @private
 */


SyncApi.prototype._deregisterStateListeners = function (room) {
  // could do with a better way of achieving this.
  room.currentState.removeAllListeners("RoomState.events");
  room.currentState.removeAllListeners("RoomState.members");
  room.currentState.removeAllListeners("RoomState.newMember");
};
/**
 * Sync rooms the user has left.
 * @return {Promise} Resolved when they've been added to the store.
 */


SyncApi.prototype.syncLeftRooms = function () {
  const client = this.client;
  const self = this; // grab a filter with limit=1 and include_leave=true

  const filter = new _filter.Filter(this.client.credentials.userId);
  filter.setTimelineLimit(1);
  filter.setIncludeLeaveRooms(true);
  const localTimeoutMs = this.opts.pollTimeout + BUFFER_PERIOD_MS;
  const qps = {
    timeout: 0 // don't want to block since this is a single isolated req

  };
  return client.getOrCreateFilter(getFilterName(client.credentials.userId, "LEFT_ROOMS"), filter).then(function (filterId) {
    qps.filter = filterId;
    return client._http.authedRequest(undefined, "GET", "/sync", qps, undefined, localTimeoutMs);
  }).then(function (data) {
    let leaveRooms = [];

    if (data.rooms && data.rooms.leave) {
      leaveRooms = self._mapSyncResponseToRoomArray(data.rooms.leave);
    }

    const rooms = [];
    leaveRooms.forEach(function (leaveObj) {
      const room = leaveObj.room;
      rooms.push(room);

      if (!leaveObj.isBrandNewRoom) {
        // the intention behind syncLeftRooms is to add in rooms which were
        // *omitted* from the initial /sync. Rooms the user were joined to
        // but then left whilst the app is running will appear in this list
        // and we do not want to bother with them since they will have the
        // current state already (and may get dupe messages if we add
        // yet more timeline events!), so skip them.
        // NB: When we persist rooms to localStorage this will be more
        //     complicated...
        return;
      }

      leaveObj.timeline = leaveObj.timeline || {};

      const timelineEvents = self._mapSyncEventsFormat(leaveObj.timeline, room);

      const stateEvents = self._mapSyncEventsFormat(leaveObj.state, room); // set the back-pagination token. Do this *before* adding any
      // events so that clients can start back-paginating.


      room.getLiveTimeline().setPaginationToken(leaveObj.timeline.prev_batch, _eventTimeline.EventTimeline.BACKWARDS);

      self._processRoomEvents(room, stateEvents, timelineEvents);

      room.recalculate();
      client.store.storeRoom(room);
      client.emit("Room", room);

      self._processEventsForNotifs(room, timelineEvents);
    });
    return rooms;
  });
};
/**
 * Peek into a room. This will result in the room in question being synced so it
 * is accessible via getRooms(). Live updates for the room will be provided.
 * @param {string} roomId The room ID to peek into.
 * @return {Promise} A promise which resolves once the room has been added to the
 * store.
 */


SyncApi.prototype.peek = function (roomId) {
  if (this._peekRoom && this._peekRoom.roomId === roomId) {
    return Promise.resolve(this._peekRoom);
  }

  const client = this.client;
  this._peekRoom = this.createRoom(roomId);
  return this.client.roomInitialSync(roomId, 20).then(response => {
    // make sure things are init'd
    response.messages = response.messages || {};
    response.messages.chunk = response.messages.chunk || [];
    response.state = response.state || []; // FIXME: Mostly duplicated from _processRoomEvents but not entirely
    // because "state" in this API is at the BEGINNING of the chunk

    const oldStateEvents = utils.map(utils.deepCopy(response.state), client.getEventMapper());
    const stateEvents = utils.map(response.state, client.getEventMapper());
    const messages = utils.map(response.messages.chunk, client.getEventMapper()); // XXX: copypasted from /sync until we kill off this
    // minging v1 API stuff)
    // handle presence events (User objects)

    if (response.presence && utils.isArray(response.presence)) {
      response.presence.map(client.getEventMapper()).forEach(function (presenceEvent) {
        let user = client.store.getUser(presenceEvent.getContent().user_id);

        if (user) {
          user.setPresenceEvent(presenceEvent);
        } else {
          user = createNewUser(client, presenceEvent.getContent().user_id);
          user.setPresenceEvent(presenceEvent);
          client.store.storeUser(user);
        }

        client.emit("event", presenceEvent);
      });
    } // set the pagination token before adding the events in case people
    // fire off pagination requests in response to the Room.timeline
    // events.


    if (response.messages.start) {
      this._peekRoom.oldState.paginationToken = response.messages.start;
    } // set the state of the room to as it was after the timeline executes


    this._peekRoom.oldState.setStateEvents(oldStateEvents);

    this._peekRoom.currentState.setStateEvents(stateEvents);

    this._resolveInvites(this._peekRoom);

    this._peekRoom.recalculate(); // roll backwards to diverge old state. addEventsToTimeline
    // will overwrite the pagination token, so make sure it overwrites
    // it with the right thing.


    this._peekRoom.addEventsToTimeline(messages.reverse(), true, this._peekRoom.getLiveTimeline(), response.messages.start);

    client.store.storeRoom(this._peekRoom);
    client.emit("Room", this._peekRoom);

    this._peekPoll(this._peekRoom);

    return this._peekRoom;
  });
};
/**
 * Stop polling for updates in the peeked room. NOPs if there is no room being
 * peeked.
 */


SyncApi.prototype.stopPeeking = function () {
  this._peekRoom = null;
};
/**
 * Do a peek room poll.
 * @param {Room} peekRoom
 * @param {string?} token from= token
 */


SyncApi.prototype._peekPoll = function (peekRoom, token) {
  if (this._peekRoom !== peekRoom) {
    debuglog("Stopped peeking in room %s", peekRoom.roomId);
    return;
  }

  const self = this; // FIXME: gut wrenching; hard-coded timeout values

  this.client._http.authedRequest(undefined, "GET", "/events", {
    room_id: peekRoom.roomId,
    timeout: 30 * 1000,
    from: token
  }, undefined, 50 * 1000).then(function (res) {
    if (self._peekRoom !== peekRoom) {
      debuglog("Stopped peeking in room %s", peekRoom.roomId);
      return;
    } // We have a problem that we get presence both from /events and /sync
    // however, /sync only returns presence for users in rooms
    // you're actually joined to.
    // in order to be sure to get presence for all of the users in the
    // peeked room, we handle presence explicitly here. This may result
    // in duplicate presence events firing for some users, which is a
    // performance drain, but such is life.
    // XXX: copypasted from /sync until we can kill this minging v1 stuff.


    res.chunk.filter(function (e) {
      return e.type === "m.presence";
    }).map(self.client.getEventMapper()).forEach(function (presenceEvent) {
      let user = self.client.store.getUser(presenceEvent.getContent().user_id);

      if (user) {
        user.setPresenceEvent(presenceEvent);
      } else {
        user = createNewUser(self.client, presenceEvent.getContent().user_id);
        user.setPresenceEvent(presenceEvent);
        self.client.store.storeUser(user);
      }

      self.client.emit("event", presenceEvent);
    }); // strip out events which aren't for the given room_id (e.g presence)
    // and also ephemeral events (which we're assuming is anything without
    // and event ID because the /events API doesn't separate them).

    const events = res.chunk.filter(function (e) {
      return e.room_id === peekRoom.roomId && e.event_id;
    }).map(self.client.getEventMapper());
    peekRoom.addLiveEvents(events);

    self._peekPoll(peekRoom, res.end);
  }, function (err) {
    _logger.logger.error("[%s] Peek poll failed: %s", peekRoom.roomId, err);

    setTimeout(function () {
      self._peekPoll(peekRoom, token);
    }, 30 * 1000);
  });
};
/**
 * Returns the current state of this sync object
 * @see module:client~MatrixClient#event:"sync"
 * @return {?String}
 */


SyncApi.prototype.getSyncState = function () {
  return this._syncState;
};
/**
 * Returns the additional data object associated with
 * the current sync state, or null if there is no
 * such data.
 * Sync errors, if available, are put in the 'error' key of
 * this object.
 * @return {?Object}
 */


SyncApi.prototype.getSyncStateData = function () {
  return this._syncStateData;
};

SyncApi.prototype.recoverFromSyncStartupError = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (savedSyncPromise, err) {
    // Wait for the saved sync to complete - we send the pushrules and filter requests
    // before the saved sync has finished so they can run in parallel, but only process
    // the results after the saved sync is done. Equivalently, we wait for it to finish
    // before reporting failures from these functions.
    yield savedSyncPromise;

    const keepaliveProm = this._startKeepAlives();

    this._updateSyncState("ERROR", {
      error: err
    });

    yield keepaliveProm;
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Is the lazy loading option different than in previous session?
 * @param {bool} lazyLoadMembers current options for lazy loading
 * @return {bool} whether or not the option has changed compared to the previous session */


SyncApi.prototype._wasLazyLoadingToggled = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (lazyLoadMembers) {
    lazyLoadMembers = !!lazyLoadMembers; // assume it was turned off before
    // if we don't know any better

    let lazyLoadMembersBefore = false;
    const isStoreNewlyCreated = yield this.client.store.isNewlyCreated();

    if (!isStoreNewlyCreated) {
      const prevClientOptions = yield this.client.store.getClientOptions();

      if (prevClientOptions) {
        lazyLoadMembersBefore = !!prevClientOptions.lazyLoadMembers;
      }

      return lazyLoadMembersBefore !== lazyLoadMembers;
    }

    return false;
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

SyncApi.prototype._shouldAbortSync = function (error) {
  if (error.errcode === "M_UNKNOWN_TOKEN") {
    // The logout already happened, we just need to stop.
    _logger.logger.warn("Token no longer valid - assuming logout");

    this.stop();
    return true;
  }

  return false;
};
/**
 * Main entry point
 */


SyncApi.prototype.sync = function () {
  var _this = this;

  const client = this.client;
  const self = this;
  this._running = true;

  if (global.window && global.window.addEventListener) {
    this._onOnlineBound = this._onOnline.bind(this);
    global.window.addEventListener("online", this._onOnlineBound, false);
  }

  let savedSyncPromise = Promise.resolve();
  let savedSyncToken = null; // We need to do one-off checks before we can begin the /sync loop.
  // These are:
  //   1) We need to get push rules so we can check if events should bing as we get
  //      them from /sync.
  //   2) We need to get/create a filter which we can use for /sync.
  //   3) We need to check the lazy loading option matches what was used in the
  //       stored sync. If it doesn't, we can't use the stored sync.

  function getPushRules() {
    return _getPushRules.apply(this, arguments);
  }

  function _getPushRules() {
    _getPushRules = _asyncToGenerator(function* () {
      try {
        debuglog("Getting push rules...");
        const result = yield client.getPushRules();
        debuglog("Got push rules");
        client.pushRules = result;
      } catch (err) {
        _logger.logger.error("Getting push rules failed", err);

        if (self._shouldAbortSync(err)) return; // wait for saved sync to complete before doing anything else,
        // otherwise the sync state will end up being incorrect

        debuglog("Waiting for saved sync before retrying push rules...");
        yield self.recoverFromSyncStartupError(savedSyncPromise, err);
        getPushRules();
        return;
      }

      checkLazyLoadStatus(); // advance to the next stage
    });
    return _getPushRules.apply(this, arguments);
  }

  function buildDefaultFilter() {
    const filter = new _filter.Filter(client.credentials.userId);
    filter.setTimelineLimit(self.opts.initialSyncLimit);
    return filter;
  }

  const checkLazyLoadStatus = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* () {
      debuglog("Checking lazy load status...");

      if (_this.opts.lazyLoadMembers && client.isGuest()) {
        _this.opts.lazyLoadMembers = false;
      }

      if (_this.opts.lazyLoadMembers) {
        debuglog("Checking server lazy load support...");
        const supported = yield client.doesServerSupportLazyLoading();

        if (supported) {
          debuglog("Enabling lazy load on sync filter...");

          if (!_this.opts.filter) {
            _this.opts.filter = buildDefaultFilter();
          }

          _this.opts.filter.setLazyLoadMembers(true);
        } else {
          debuglog("LL: lazy loading requested but not supported " + "by server, so disabling");
          _this.opts.lazyLoadMembers = false;
        }
      } // need to vape the store when enabling LL and wasn't enabled before


      debuglog("Checking whether lazy loading has changed in store...");
      const shouldClear = yield _this._wasLazyLoadingToggled(_this.opts.lazyLoadMembers);

      if (shouldClear) {
        _this._storeIsInvalid = true;
        const reason = _errors.InvalidStoreError.TOGGLED_LAZY_LOADING;
        const error = new _errors.InvalidStoreError(reason, !!_this.opts.lazyLoadMembers);

        _this._updateSyncState("ERROR", {
          error
        }); // bail out of the sync loop now: the app needs to respond to this error.
        // we leave the state as 'ERROR' which isn't great since this normally means
        // we're retrying. The client must be stopped before clearing the stores anyway
        // so the app should stop the client, clear the store and start it again.


        _logger.logger.warn("InvalidStoreError: store is not usable: stopping sync.");

        return;
      }

      if (_this.opts.lazyLoadMembers && _this.opts.crypto) {
        _this.opts.crypto.enableLazyLoading();
      }

      try {
        debuglog("Storing client options...");
        yield _this.client._storeClientOptions();
        debuglog("Stored client options");
      } catch (err) {
        _logger.logger.error("Storing client options failed", err);

        throw err;
      }

      getFilter(); // Now get the filter and start syncing
    });

    return function checkLazyLoadStatus() {
      return _ref3.apply(this, arguments);
    };
  }();

  function getFilter() {
    return _getFilter.apply(this, arguments);
  }

  function _getFilter() {
    _getFilter = _asyncToGenerator(function* () {
      debuglog("Getting filter...");
      let filter;

      if (self.opts.filter) {
        filter = self.opts.filter;
      } else {
        filter = buildDefaultFilter();
      }

      let filterId;

      try {
        filterId = yield client.getOrCreateFilter(getFilterName(client.credentials.userId), filter);
      } catch (err) {
        _logger.logger.error("Getting filter failed", err);

        if (self._shouldAbortSync(err)) return; // wait for saved sync to complete before doing anything else,
        // otherwise the sync state will end up being incorrect

        debuglog("Waiting for saved sync before retrying filter...");
        yield self.recoverFromSyncStartupError(savedSyncPromise, err);
        getFilter();
        return;
      } // reset the notifications timeline to prepare it to paginate from
      // the current point in time.
      // The right solution would be to tie /sync pagination tokens into
      // /notifications API somehow.


      client.resetNotifTimelineSet();

      if (self._currentSyncRequest === null) {
        // Send this first sync request here so we can then wait for the saved
        // sync data to finish processing before we process the results of this one.
        debuglog("Sending first sync request...");
        self._currentSyncRequest = self._doSyncRequest({
          filterId
        }, savedSyncToken);
      } // Now wait for the saved sync to finish...


      debuglog("Waiting for saved sync before starting sync processing...");
      yield savedSyncPromise;

      self._sync({
        filterId
      });
    });
    return _getFilter.apply(this, arguments);
  }

  if (client.isGuest()) {
    // no push rules for guests, no access to POST filter for guests.
    self._sync({});
  } else {
    // Pull the saved sync token out first, before the worker starts sending
    // all the sync data which could take a while. This will let us send our
    // first incremental sync request before we've processed our saved data.
    debuglog("Getting saved sync token...");
    savedSyncPromise = client.store.getSavedSyncToken().then(tok => {
      debuglog("Got saved sync token");
      savedSyncToken = tok;
      debuglog("Getting saved sync...");
      return client.store.getSavedSync();
    }).then(savedSync => {
      debuglog(`Got reply from saved sync, exists? ${!!savedSync}`);

      if (savedSync) {
        return self._syncFromCache(savedSync);
      }
    }).catch(err => {
      _logger.logger.error("Getting saved sync failed", err);
    }); // Now start the first incremental sync request: this can also
    // take a while so if we set it going now, we can wait for it
    // to finish while we process our saved sync data.

    getPushRules();
  }
};
/**
 * Stops the sync object from syncing.
 */


SyncApi.prototype.stop = function () {
  debuglog("SyncApi.stop");

  if (global.window) {
    global.window.removeEventListener("online", this._onOnlineBound, false);
    this._onOnlineBound = undefined;
  }

  this._running = false;

  if (this._currentSyncRequest) {
    this._currentSyncRequest.abort();
  }

  if (this._keepAliveTimer) {
    clearTimeout(this._keepAliveTimer);
    this._keepAliveTimer = null;
  }
};
/**
 * Retry a backed off syncing request immediately. This should only be used when
 * the user <b>explicitly</b> attempts to retry their lost connection.
 * @return {boolean} True if this resulted in a request being retried.
 */


SyncApi.prototype.retryImmediately = function () {
  if (!this._connectionReturnedDefer) {
    return false;
  }

  this._startKeepAlives(0);

  return true;
};
/**
 * Process a single set of cached sync data.
 * @param {Object} savedSync a saved sync that was persisted by a store. This
 * should have been acquired via client.store.getSavedSync().
 */


SyncApi.prototype._syncFromCache = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* (savedSync) {
    debuglog("sync(): not doing HTTP hit, instead returning stored /sync data");
    const nextSyncToken = savedSync.nextBatch; // Set sync token for future incremental syncing

    this.client.store.setSyncToken(nextSyncToken); // No previous sync, set old token to null

    const syncEventData = {
      oldSyncToken: null,
      nextSyncToken,
      catchingUp: false,
      fromCache: true
    };
    const data = {
      next_batch: nextSyncToken,
      rooms: savedSync.roomsData,
      groups: savedSync.groupsData,
      account_data: {
        events: savedSync.accountData
      }
    };

    try {
      yield this._processSyncResponse(syncEventData, data);
    } catch (e) {
      _logger.logger.error("Error processing cached sync", e.stack || e);
    } // Don't emit a prepared if we've bailed because the store is invalid:
    // in this case the client will not be usable until stopped & restarted
    // so this would be useless and misleading.


    if (!this._storeIsInvalid) {
      this._updateSyncState("PREPARED", syncEventData);
    }
  });

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Invoke me to do /sync calls
 * @param {Object} syncOptions
 * @param {string} syncOptions.filterId
 * @param {boolean} syncOptions.hasSyncedBefore
 */


SyncApi.prototype._sync = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* (syncOptions) {
    const client = this.client;

    if (!this._running) {
      debuglog("Sync no longer running: exiting.");

      if (this._connectionReturnedDefer) {
        this._connectionReturnedDefer.reject();

        this._connectionReturnedDefer = null;
      }

      this._updateSyncState("STOPPED");

      return;
    }

    const syncToken = client.store.getSyncToken();
    let data;

    try {
      //debuglog('Starting sync since=' + syncToken);
      if (this._currentSyncRequest === null) {
        this._currentSyncRequest = this._doSyncRequest(syncOptions, syncToken);
      }

      data = yield this._currentSyncRequest;
    } catch (e) {
      this._onSyncError(e, syncOptions);

      return;
    } finally {
      this._currentSyncRequest = null;
    } //debuglog('Completed sync, next_batch=' + data.next_batch);
    // set the sync token NOW *before* processing the events. We do this so
    // if something barfs on an event we can skip it rather than constantly
    // polling with the same token.


    client.store.setSyncToken(data.next_batch); // Reset after a successful sync

    this._failedSyncCount = 0;
    yield client.store.setSyncData(data);
    const syncEventData = {
      oldSyncToken: syncToken,
      nextSyncToken: data.next_batch,
      catchingUp: this._catchingUp
    };

    if (this.opts.crypto) {
      // tell the crypto module we're about to process a sync
      // response
      yield this.opts.crypto.onSyncWillProcess(syncEventData);
    }

    try {
      yield this._processSyncResponse(syncEventData, data);
    } catch (e) {
      // log the exception with stack if we have it, else fall back
      // to the plain description
      _logger.logger.error("Caught /sync error", e.stack || e); // Emit the exception for client handling


      this.client.emit("sync.unexpectedError", e);
    } // update this as it may have changed


    syncEventData.catchingUp = this._catchingUp; // emit synced events

    if (!syncOptions.hasSyncedBefore) {
      this._updateSyncState("PREPARED", syncEventData);

      syncOptions.hasSyncedBefore = true;
    } // tell the crypto module to do its processing. It may block (to do a
    // /keys/changes request).


    if (this.opts.crypto) {
      yield this.opts.crypto.onSyncCompleted(syncEventData);
    } // keep emitting SYNCING -> SYNCING for clients who want to do bulk updates


    this._updateSyncState("SYNCING", syncEventData);

    if (client.store.wantsSave()) {
      // We always save the device list (if it's dirty) before saving the sync data:
      // this means we know the saved device list data is at least as fresh as the
      // stored sync data which means we don't have to worry that we may have missed
      // device changes. We can also skip the delay since we're not calling this very
      // frequently (and we don't really want to delay the sync for it).
      if (this.opts.crypto) {
        yield this.opts.crypto.saveDeviceList(0);
      } // tell databases that everything is now in a consistent state and can be saved.


      client.store.save();
    } // Begin next sync


    this._sync(syncOptions);
  });

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}();

SyncApi.prototype._doSyncRequest = function (syncOptions, syncToken) {
  const qps = this._getSyncParams(syncOptions, syncToken);

  return this.client._http.authedRequest(undefined, "GET", "/sync", qps, undefined, qps.timeout + BUFFER_PERIOD_MS);
};

SyncApi.prototype._getSyncParams = function (syncOptions, syncToken) {
  let pollTimeout = this.opts.pollTimeout;

  if (this.getSyncState() !== 'SYNCING' || this._catchingUp) {
    // unless we are happily syncing already, we want the server to return
    // as quickly as possible, even if there are no events queued. This
    // serves two purposes:
    //
    // * When the connection dies, we want to know asap when it comes back,
    //   so that we can hide the error from the user. (We don't want to
    //   have to wait for an event or a timeout).
    //
    // * We want to know if the server has any to_device messages queued up
    //   for us. We do that by calling it with a zero timeout until it
    //   doesn't give us any more to_device messages.
    this._catchingUp = true;
    pollTimeout = 0;
  }

  let filterId = syncOptions.filterId;

  if (this.client.isGuest() && !filterId) {
    filterId = this._getGuestFilter();
  }

  const qps = {
    filter: filterId,
    timeout: pollTimeout
  };

  if (this.opts.disablePresence) {
    qps.set_presence = "offline";
  }

  if (syncToken) {
    qps.since = syncToken;
  } else {
    // use a cachebuster for initialsyncs, to make sure that
    // we don't get a stale sync
    // (https://github.com/vector-im/vector-web/issues/1354)
    qps._cacheBuster = Date.now();
  }

  if (this.getSyncState() == 'ERROR' || this.getSyncState() == 'RECONNECTING') {
    // we think the connection is dead. If it comes back up, we won't know
    // about it till /sync returns. If the timeout= is high, this could
    // be a long time. Set it to 0 when doing retries so we don't have to wait
    // for an event or a timeout before emiting the SYNCING event.
    qps.timeout = 0;
  }

  return qps;
};

SyncApi.prototype._onSyncError = function (err, syncOptions) {
  if (!this._running) {
    debuglog("Sync no longer running: exiting");

    if (this._connectionReturnedDefer) {
      this._connectionReturnedDefer.reject();

      this._connectionReturnedDefer = null;
    }

    this._updateSyncState("STOPPED");

    return;
  }

  _logger.logger.error("/sync error %s", err);

  _logger.logger.error(err);

  if (this._shouldAbortSync(err)) {
    return;
  }

  this._failedSyncCount++;

  _logger.logger.log('Number of consecutive failed sync requests:', this._failedSyncCount);

  debuglog("Starting keep-alive"); // Note that we do *not* mark the sync connection as
  // lost yet: we only do this if a keepalive poke
  // fails, since long lived HTTP connections will
  // go away sometimes and we shouldn't treat this as
  // erroneous. We set the state to 'reconnecting'
  // instead, so that clients can observe this state
  // if they wish.

  this._startKeepAlives().then(connDidFail => {
    // Only emit CATCHUP if we detected a connectivity error: if we didn't,
    // it's quite likely the sync will fail again for the same reason and we
    // want to stay in ERROR rather than keep flip-flopping between ERROR
    // and CATCHUP.
    if (connDidFail && this.getSyncState() === 'ERROR') {
      this._updateSyncState("CATCHUP", {
        oldSyncToken: null,
        nextSyncToken: null,
        catchingUp: true
      });
    }

    this._sync(syncOptions);
  });

  this._currentSyncRequest = null; // Transition from RECONNECTING to ERROR after a given number of failed syncs

  this._updateSyncState(this._failedSyncCount >= FAILED_SYNC_ERROR_THRESHOLD ? "ERROR" : "RECONNECTING", {
    error: err
  });
};
/**
 * Process data returned from a sync response and propagate it
 * into the model objects
 *
 * @param {Object} syncEventData Object containing sync tokens associated with this sync
 * @param {Object} data The response from /sync
 */


SyncApi.prototype._processSyncResponse = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* (syncEventData, data) {
    const client = this.client;
    const self = this; // data looks like:
    // {
    //    next_batch: $token,
    //    presence: { events: [] },
    //    account_data: { events: [] },
    //    device_lists: { changed: ["@user:server", ... ]},
    //    to_device: { events: [] },
    //    device_one_time_keys_count: { signed_curve25519: 42 },
    //    rooms: {
    //      invite: {
    //        $roomid: {
    //          invite_state: { events: [] }
    //        }
    //      },
    //      join: {
    //        $roomid: {
    //          state: { events: [] },
    //          timeline: { events: [], prev_batch: $token, limited: true },
    //          ephemeral: { events: [] },
    //          summary: {
    //             m.heroes: [ $user_id ],
    //             m.joined_member_count: $count,
    //             m.invited_member_count: $count
    //          },
    //          account_data: { events: [] },
    //          unread_notifications: {
    //              highlight_count: 0,
    //              notification_count: 0,
    //          }
    //        }
    //      },
    //      leave: {
    //        $roomid: {
    //          state: { events: [] },
    //          timeline: { events: [], prev_batch: $token }
    //        }
    //      }
    //    },
    //    groups: {
    //        invite: {
    //            $groupId: {
    //                inviter: $inviter,
    //                profile: {
    //                    avatar_url: $avatarUrl,
    //                    name: $groupName,
    //                },
    //            },
    //        },
    //        join: {},
    //        leave: {},
    //    },
    // }
    // TODO-arch:
    // - Each event we pass through needs to be emitted via 'event', can we
    //   do this in one place?
    // - The isBrandNewRoom boilerplate is boilerplatey.
    // handle presence events (User objects)

    if (data.presence && utils.isArray(data.presence.events)) {
      data.presence.events.map(client.getEventMapper()).forEach(function (presenceEvent) {
        let user = client.store.getUser(presenceEvent.getSender());

        if (user) {
          user.setPresenceEvent(presenceEvent);
        } else {
          user = createNewUser(client, presenceEvent.getSender());
          user.setPresenceEvent(presenceEvent);
          client.store.storeUser(user);
        }

        client.emit("event", presenceEvent);
      });
    } // handle non-room account_data


    if (data.account_data && utils.isArray(data.account_data.events)) {
      const events = data.account_data.events.map(client.getEventMapper());
      const prevEventsMap = events.reduce((m, c) => {
        m[c.getId()] = client.store.getAccountData(c.getType());
        return m;
      }, {});
      client.store.storeAccountDataEvents(events);
      events.forEach(function (accountDataEvent) {
        // Honour push rules that come down the sync stream but also
        // honour push rules that were previously cached. Base rules
        // will be updated when we receive push rules via getPushRules
        // (see SyncApi.prototype.sync) before syncing over the network.
        if (accountDataEvent.getType() === 'm.push_rules') {
          const rules = accountDataEvent.getContent();
          client.pushRules = _pushprocessor.PushProcessor.rewriteDefaultRules(rules);
        }

        const prevEvent = prevEventsMap[accountDataEvent.getId()];
        client.emit("accountData", accountDataEvent, prevEvent);
        return accountDataEvent;
      });
    } // handle to-device events


    if (data.to_device && utils.isArray(data.to_device.events) && data.to_device.events.length > 0) {
      const cancelledKeyVerificationTxns = [];
      data.to_device.events.map(client.getEventMapper()).map(toDeviceEvent => {
        // map is a cheap inline forEach
        // We want to flag m.key.verification.start events as cancelled
        // if there's an accompanying m.key.verification.cancel event, so
        // we pull out the transaction IDs from the cancellation events
        // so we can flag the verification events as cancelled in the loop
        // below.
        if (toDeviceEvent.getType() === "m.key.verification.cancel") {
          const txnId = toDeviceEvent.getContent()['transaction_id'];

          if (txnId) {
            cancelledKeyVerificationTxns.push(txnId);
          }
        } // as mentioned above, .map is a cheap inline forEach, so return
        // the unmodified event.


        return toDeviceEvent;
      }).forEach(function (toDeviceEvent) {
        const content = toDeviceEvent.getContent();

        if (toDeviceEvent.getType() == "m.room.message" && content.msgtype == "m.bad.encrypted") {
          // the mapper already logged a warning.
          _logger.logger.log('Ignoring undecryptable to-device event from ' + toDeviceEvent.getSender());

          return;
        }

        if (toDeviceEvent.getType() === "m.key.verification.start" || toDeviceEvent.getType() === "m.key.verification.request") {
          const txnId = content['transaction_id'];

          if (cancelledKeyVerificationTxns.includes(txnId)) {
            toDeviceEvent.flagCancelled();
          }
        }

        client.emit("toDeviceEvent", toDeviceEvent);
      });
    } else {
      // no more to-device events: we can stop polling with a short timeout.
      this._catchingUp = false;
    }

    if (data.groups) {
      if (data.groups.invite) {
        this._processGroupSyncEntry(data.groups.invite, 'invite');
      }

      if (data.groups.join) {
        this._processGroupSyncEntry(data.groups.join, 'join');
      }

      if (data.groups.leave) {
        this._processGroupSyncEntry(data.groups.leave, 'leave');
      }
    } // the returned json structure is a bit crap, so make it into a
    // nicer form (array) after applying sanity to make sure we don't fail
    // on missing keys (on the off chance)


    let inviteRooms = [];
    let joinRooms = [];
    let leaveRooms = [];

    if (data.rooms) {
      if (data.rooms.invite) {
        inviteRooms = this._mapSyncResponseToRoomArray(data.rooms.invite);
      }

      if (data.rooms.join) {
        joinRooms = this._mapSyncResponseToRoomArray(data.rooms.join);
      }

      if (data.rooms.leave) {
        leaveRooms = this._mapSyncResponseToRoomArray(data.rooms.leave);
      }
    }

    this._notifEvents = []; // Handle invites

    inviteRooms.forEach(function (inviteObj) {
      const room = inviteObj.room;

      const stateEvents = self._mapSyncEventsFormat(inviteObj.invite_state, room);

      self._processRoomEvents(room, stateEvents);

      if (inviteObj.isBrandNewRoom) {
        room.recalculate();
        client.store.storeRoom(room);
        client.emit("Room", room);
      }

      stateEvents.forEach(function (e) {
        client.emit("event", e);
      });
      room.updateMyMembership("invite");
    }); // Handle joins

    yield utils.promiseMapSeries(joinRooms, /*#__PURE__*/function () {
      var _ref7 = _asyncToGenerator(function* (joinObj) {
        const room = joinObj.room;

        const stateEvents = self._mapSyncEventsFormat(joinObj.state, room);

        const timelineEvents = self._mapSyncEventsFormat(joinObj.timeline, room);

        const ephemeralEvents = self._mapSyncEventsFormat(joinObj.ephemeral);

        const accountDataEvents = self._mapSyncEventsFormat(joinObj.account_data); // we do this first so it's correct when any of the events fire


        if (joinObj.unread_notifications) {
          room.setUnreadNotificationCount('total', joinObj.unread_notifications.notification_count); // We track unread notifications ourselves in encrypted rooms, so don't
          // bother setting it here. We trust our calculations better than the
          // server's for this case, and therefore will assume that our non-zero
          // count is accurate.

          const encrypted = client.isRoomEncrypted(room.roomId);

          if (!encrypted || encrypted && room.getUnreadNotificationCount('highlight') <= 0) {
            room.setUnreadNotificationCount('highlight', joinObj.unread_notifications.highlight_count);
          }
        }

        joinObj.timeline = joinObj.timeline || {};

        if (joinObj.isBrandNewRoom) {
          // set the back-pagination token. Do this *before* adding any
          // events so that clients can start back-paginating.
          room.getLiveTimeline().setPaginationToken(joinObj.timeline.prev_batch, _eventTimeline.EventTimeline.BACKWARDS);
        } else if (joinObj.timeline.limited) {
          let limited = true; // we've got a limited sync, so we *probably* have a gap in the
          // timeline, so should reset. But we might have been peeking or
          // paginating and already have some of the events, in which
          // case we just want to append any subsequent events to the end
          // of the existing timeline.
          //
          // This is particularly important in the case that we already have
          // *all* of the events in the timeline - in that case, if we reset
          // the timeline, we'll end up with an entirely empty timeline,
          // which we'll try to paginate but not get any new events (which
          // will stop us linking the empty timeline into the chain).
          //

          for (let i = timelineEvents.length - 1; i >= 0; i--) {
            const eventId = timelineEvents[i].getId();

            if (room.getTimelineForEvent(eventId)) {
              debuglog("Already have event " + eventId + " in limited " + "sync - not resetting");
              limited = false; // we might still be missing some of the events before i;
              // we don't want to be adding them to the end of the
              // timeline because that would put them out of order.

              timelineEvents.splice(0, i); // XXX: there's a problem here if the skipped part of the
              // timeline modifies the state set in stateEvents, because
              // we'll end up using the state from stateEvents rather
              // than the later state from timelineEvents. We probably
              // need to wind stateEvents forward over the events we're
              // skipping.

              break;
            }
          }

          if (limited) {
            self._deregisterStateListeners(room);

            room.resetLiveTimeline(joinObj.timeline.prev_batch, self.opts.canResetEntireTimeline(room.roomId) ? null : syncEventData.oldSyncToken); // We have to assume any gap in any timeline is
            // reason to stop incrementally tracking notifications and
            // reset the timeline.

            client.resetNotifTimelineSet();

            self._registerStateListeners(room);
          }
        }

        self._processRoomEvents(room, stateEvents, timelineEvents, syncEventData.fromCache); // set summary after processing events,
        // because it will trigger a name calculation
        // which needs the room state to be up to date


        if (joinObj.summary) {
          room.setSummary(joinObj.summary);
        } // we deliberately don't add ephemeral events to the timeline


        room.addEphemeralEvents(ephemeralEvents); // we deliberately don't add accountData to the timeline

        room.addAccountData(accountDataEvents);
        room.recalculate();

        if (joinObj.isBrandNewRoom) {
          client.store.storeRoom(room);
          client.emit("Room", room);
        }

        self._processEventsForNotifs(room, timelineEvents);

        function processRoomEvent(_x9) {
          return _processRoomEvent.apply(this, arguments);
        }

        function _processRoomEvent() {
          _processRoomEvent = _asyncToGenerator(function* (e) {
            client.emit("event", e);

            if (e.isState() && e.getType() == "m.room.encryption" && self.opts.crypto) {
              yield self.opts.crypto.onCryptoEvent(e);
            }

            if (e.isState() && e.getType() === "im.vector.user_status") {
              let user = client.store.getUser(e.getStateKey());

              if (user) {
                user._unstable_updateStatusMessage(e);
              } else {
                user = createNewUser(client, e.getStateKey());

                user._unstable_updateStatusMessage(e);

                client.store.storeUser(user);
              }
            }
          });
          return _processRoomEvent.apply(this, arguments);
        }

        yield utils.promiseMapSeries(stateEvents, processRoomEvent);
        yield utils.promiseMapSeries(timelineEvents, processRoomEvent);
        ephemeralEvents.forEach(function (e) {
          client.emit("event", e);
        });
        accountDataEvents.forEach(function (e) {
          client.emit("event", e);
        });
        room.updateMyMembership("join");
      });

      return function (_x8) {
        return _ref7.apply(this, arguments);
      };
    }()); // Handle leaves (e.g. kicked rooms)

    leaveRooms.forEach(function (leaveObj) {
      const room = leaveObj.room;

      const stateEvents = self._mapSyncEventsFormat(leaveObj.state, room);

      const timelineEvents = self._mapSyncEventsFormat(leaveObj.timeline, room);

      const accountDataEvents = self._mapSyncEventsFormat(leaveObj.account_data);

      self._processRoomEvents(room, stateEvents, timelineEvents);

      room.addAccountData(accountDataEvents);
      room.recalculate();

      if (leaveObj.isBrandNewRoom) {
        client.store.storeRoom(room);
        client.emit("Room", room);
      }

      self._processEventsForNotifs(room, timelineEvents);

      stateEvents.forEach(function (e) {
        client.emit("event", e);
      });
      timelineEvents.forEach(function (e) {
        client.emit("event", e);
      });
      accountDataEvents.forEach(function (e) {
        client.emit("event", e);
      });
      room.updateMyMembership("leave");
    }); // update the notification timeline, if appropriate.
    // we only do this for live events, as otherwise we can't order them sanely
    // in the timeline relative to ones paginated in by /notifications.
    // XXX: we could fix this by making EventTimeline support chronological
    // ordering... but it doesn't, right now.

    if (syncEventData.oldSyncToken && this._notifEvents.length) {
      this._notifEvents.sort(function (a, b) {
        return a.getTs() - b.getTs();
      });

      this._notifEvents.forEach(function (event) {
        client.getNotifTimelineSet().addLiveEvent(event);
      });
    } // Handle device list updates


    if (data.device_lists) {
      if (this.opts.crypto) {
        yield this.opts.crypto.handleDeviceListChanges(syncEventData, data.device_lists);
      } else {// FIXME if we *don't* have a crypto module, we still need to
        // invalidate the device lists. But that would require a
        // substantial bit of rework :/.
      }
    } // Handle one_time_keys_count


    if (this.opts.crypto && data.device_one_time_keys_count) {
      const currentCount = data.device_one_time_keys_count.signed_curve25519 || 0;
      this.opts.crypto.updateOneTimeKeyCount(currentCount);
    }

    if (this.opts.crypto && data["org.matrix.msc2732.device_unused_fallback_key_types"]) {
      // The presence of device_unused_fallback_key_types indicates that the
      // server supports fallback keys. If there's no unused
      // signed_curve25519 fallback key we need a new one.
      const unusedFallbackKeys = data["org.matrix.msc2732.device_unused_fallback_key_types"];
      this.opts.crypto.setNeedsNewFallback(unusedFallbackKeys instanceof Array && !unusedFallbackKeys.includes("signed_curve25519"));
    }
  });

  return function (_x6, _x7) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Starts polling the connectivity check endpoint
 * @param {number} delay How long to delay until the first poll.
 *        defaults to a short, randomised interval (to prevent
 *        tightlooping if /versions succeeds but /sync etc. fail).
 * @return {promise} which resolves once the connection returns
 */


SyncApi.prototype._startKeepAlives = function (delay) {
  if (delay === undefined) {
    delay = 2000 + Math.floor(Math.random() * 5000);
  }

  if (this._keepAliveTimer !== null) {
    clearTimeout(this._keepAliveTimer);
  }

  const self = this;

  if (delay > 0) {
    self._keepAliveTimer = setTimeout(self._pokeKeepAlive.bind(self), delay);
  } else {
    self._pokeKeepAlive();
  }

  if (!this._connectionReturnedDefer) {
    this._connectionReturnedDefer = utils.defer();
  }

  return this._connectionReturnedDefer.promise;
};
/**
 * Make a dummy call to /_matrix/client/versions, to see if the HS is
 * reachable.
 *
 * On failure, schedules a call back to itself. On success, resolves
 * this._connectionReturnedDefer.
 *
 * @param {bool} connDidFail True if a connectivity failure has been detected. Optional.
 */


SyncApi.prototype._pokeKeepAlive = function (connDidFail) {
  if (connDidFail === undefined) connDidFail = false;
  const self = this;

  function success() {
    clearTimeout(self._keepAliveTimer);

    if (self._connectionReturnedDefer) {
      self._connectionReturnedDefer.resolve(connDidFail);

      self._connectionReturnedDefer = null;
    }
  }

  this.client._http.request(undefined, // callback
  "GET", "/_matrix/client/versions", undefined, // queryParams
  undefined, // data
  {
    prefix: '',
    localTimeoutMs: 15 * 1000
  }).then(function () {
    success();
  }, function (err) {
    if (err.httpStatus == 400 || err.httpStatus == 404) {
      // treat this as a success because the server probably just doesn't
      // support /versions: point is, we're getting a response.
      // We wait a short time though, just in case somehow the server
      // is in a mode where it 400s /versions responses and sync etc.
      // responses fail, this will mean we don't hammer in a loop.
      self._keepAliveTimer = setTimeout(success, 2000);
    } else {
      connDidFail = true;
      self._keepAliveTimer = setTimeout(self._pokeKeepAlive.bind(self, connDidFail), 5000 + Math.floor(Math.random() * 5000)); // A keepalive has failed, so we emit the
      // error state (whether or not this is the
      // first failure).
      // Note we do this after setting the timer:
      // this lets the unit tests advance the mock
      // clock when they get the error.

      self._updateSyncState("ERROR", {
        error: err
      });
    }
  });
};
/**
 * @param {Object} groupsSection Groups section object, eg. response.groups.invite
 * @param {string} sectionName Which section this is ('invite', 'join' or 'leave')
 */


SyncApi.prototype._processGroupSyncEntry = function (groupsSection, sectionName) {
  // Processes entries from 'groups' section of the sync stream
  for (const groupId of Object.keys(groupsSection)) {
    const groupInfo = groupsSection[groupId];
    let group = this.client.store.getGroup(groupId);
    const isBrandNew = group === null;

    if (group === null) {
      group = this.createGroup(groupId);
    }

    if (groupInfo.profile) {
      group.setProfile(groupInfo.profile.name, groupInfo.profile.avatar_url);
    }

    if (groupInfo.inviter) {
      group.setInviter({
        userId: groupInfo.inviter
      });
    }

    group.setMyMembership(sectionName);

    if (isBrandNew) {
      // Now we've filled in all the fields, emit the Group event
      this.client.emit("Group", group);
    }
  }
};
/**
 * @param {Object} obj
 * @return {Object[]}
 */


SyncApi.prototype._mapSyncResponseToRoomArray = function (obj) {
  // Maps { roomid: {stuff}, roomid: {stuff} }
  // to
  // [{stuff+Room+isBrandNewRoom}, {stuff+Room+isBrandNewRoom}]
  const client = this.client;
  const self = this;
  return utils.keys(obj).map(function (roomId) {
    const arrObj = obj[roomId];
    let room = client.store.getRoom(roomId);
    let isBrandNewRoom = false;

    if (!room) {
      room = self.createRoom(roomId);
      isBrandNewRoom = true;
    }

    arrObj.room = room;
    arrObj.isBrandNewRoom = isBrandNewRoom;
    return arrObj;
  });
};
/**
 * @param {Object} obj
 * @param {Room} room
 * @return {MatrixEvent[]}
 */


SyncApi.prototype._mapSyncEventsFormat = function (obj, room) {
  if (!obj || !utils.isArray(obj.events)) {
    return [];
  }

  const mapper = this.client.getEventMapper();
  return obj.events.map(function (e) {
    if (room) {
      e.room_id = room.roomId;
    }

    return mapper(e);
  });
};
/**
 * @param {Room} room
 */


SyncApi.prototype._resolveInvites = function (room) {
  if (!room || !this.opts.resolveInvitesToProfiles) {
    return;
  }

  const client = this.client; // For each invited room member we want to give them a displayname/avatar url
  // if they have one (the m.room.member invites don't contain this).

  room.getMembersWithMembership("invite").forEach(function (member) {
    if (member._requestedProfileInfo) {
      return;
    }

    member._requestedProfileInfo = true; // try to get a cached copy first.

    const user = client.getUser(member.userId);
    let promise;

    if (user) {
      promise = Promise.resolve({
        avatar_url: user.avatarUrl,
        displayname: user.displayName
      });
    } else {
      promise = client.getProfileInfo(member.userId);
    }

    promise.then(function (info) {
      // slightly naughty by doctoring the invite event but this means all
      // the code paths remain the same between invite/join display name stuff
      // which is a worthy trade-off for some minor pollution.
      const inviteEvent = member.events.member;

      if (inviteEvent.getContent().membership !== "invite") {
        // between resolving and now they have since joined, so don't clobber
        return;
      }

      inviteEvent.getContent().avatar_url = info.avatar_url;
      inviteEvent.getContent().displayname = info.displayname; // fire listeners

      member.setMembershipEvent(inviteEvent, room.currentState);
    }, function (err) {// OH WELL.
    });
  });
};
/**
 * @param {Room} room
 * @param {MatrixEvent[]} stateEventList A list of state events. This is the state
 * at the *START* of the timeline list if it is supplied.
 * @param {MatrixEvent[]} [timelineEventList] A list of timeline events. Lower index
 * @param {boolean} fromCache whether the sync response came from cache
 * is earlier in time. Higher index is later.
 */


SyncApi.prototype._processRoomEvents = function (room, stateEventList, timelineEventList, fromCache) {
  // If there are no events in the timeline yet, initialise it with
  // the given state events
  const liveTimeline = room.getLiveTimeline();
  const timelineWasEmpty = liveTimeline.getEvents().length == 0;

  if (timelineWasEmpty) {
    // Passing these events into initialiseState will freeze them, so we need
    // to compute and cache the push actions for them now, otherwise sync dies
    // with an attempt to assign to read only property.
    // XXX: This is pretty horrible and is assuming all sorts of behaviour from
    // these functions that it shouldn't be. We should probably either store the
    // push actions cache elsewhere so we can freeze MatrixEvents, or otherwise
    // find some solution where MatrixEvents are immutable but allow for a cache
    // field.
    for (const ev of stateEventList) {
      this.client.getPushActionsForEvent(ev);
    }

    liveTimeline.initialiseState(stateEventList);
  }

  this._resolveInvites(room); // recalculate the room name at this point as adding events to the timeline
  // may make notifications appear which should have the right name.
  // XXX: This looks suspect: we'll end up recalculating the room once here
  // and then again after adding events (_processSyncResponse calls it after
  // calling us) even if no state events were added. It also means that if
  // one of the room events in timelineEventList is something that needs
  // a recalculation (like m.room.name) we won't recalculate until we've
  // finished adding all the events, which will cause the notification to have
  // the old room name rather than the new one.


  room.recalculate(); // If the timeline wasn't empty, we process the state events here: they're
  // defined as updates to the state before the start of the timeline, so this
  // starts to roll the state forward.
  // XXX: That's what we *should* do, but this can happen if we were previously
  // peeking in a room, in which case we obviously do *not* want to add the
  // state events here onto the end of the timeline. Historically, the js-sdk
  // has just set these new state events on the old and new state. This seems
  // very wrong because there could be events in the timeline that diverge the
  // state, in which case this is going to leave things out of sync. However,
  // for now I think it;s best to behave the same as the code has done previously.

  if (!timelineWasEmpty) {
    // XXX: As above, don't do this...
    //room.addLiveEvents(stateEventList || []);
    // Do this instead...
    room.oldState.setStateEvents(stateEventList || []);
    room.currentState.setStateEvents(stateEventList || []);
  } // execute the timeline events. This will continue to diverge the current state
  // if the timeline has any state events in it.
  // This also needs to be done before running push rules on the events as they need
  // to be decorated with sender etc.


  room.addLiveEvents(timelineEventList || [], null, fromCache);
};
/**
 * Takes a list of timelineEvents and adds and adds to _notifEvents
 * as appropriate.
 * This must be called after the room the events belong to has been stored.
 *
 * @param {Room} room
 * @param {MatrixEvent[]} [timelineEventList] A list of timeline events. Lower index
 * is earlier in time. Higher index is later.
 */


SyncApi.prototype._processEventsForNotifs = function (room, timelineEventList) {
  // gather our notifications into this._notifEvents
  if (this.client.getNotifTimelineSet()) {
    for (let i = 0; i < timelineEventList.length; i++) {
      const pushActions = this.client.getPushActionsForEvent(timelineEventList[i]);

      if (pushActions && pushActions.notify && pushActions.tweaks && pushActions.tweaks.highlight) {
        this._notifEvents.push(timelineEventList[i]);
      }
    }
  }
};
/**
 * @return {string}
 */


SyncApi.prototype._getGuestFilter = function () {
  const guestRooms = this.client._guestRooms; // FIXME: horrible gut-wrenching

  if (!guestRooms) {
    return "{}";
  } // we just need to specify the filter inline if we're a guest because guests
  // can't create filters.


  return JSON.stringify({
    room: {
      timeline: {
        limit: 20
      }
    }
  });
};
/**
 * Sets the sync state and emits an event to say so
 * @param {String} newState The new state string
 * @param {Object} data Object of additional data to emit in the event
 */


SyncApi.prototype._updateSyncState = function (newState, data) {
  const old = this._syncState;
  this._syncState = newState;
  this._syncStateData = data;
  this.client.emit("sync", this._syncState, old, data);
};
/**
 * Event handler for the 'online' event
 * This event is generally unreliable and precise behaviour
 * varies between browsers, so we poll for connectivity too,
 * but this might help us reconnect a little faster.
 */


SyncApi.prototype._onOnline = function () {
  debuglog("Browser thinks we are back online");

  this._startKeepAlives(0);
};

function createNewUser(client, userId) {
  const user = new _user.User(userId);
  client.reEmitter.reEmit(user, ["User.avatarUrl", "User.displayName", "User.presence", "User.currentlyActive", "User.lastPresenceTs"]);
  return user;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "64a6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_name_vue_vue_type_style_index_0_id_72a9c575_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b1e0");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_name_vue_vue_type_style_index_0_id_72a9c575_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_name_vue_vue_type_style_index_0_id_72a9c575_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_name_vue_vue_type_style_index_0_id_72a9c575_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_name_vue_vue_type_style_index_0_id_72a9c575_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "651d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "654a":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".topheader[data-v-62a1ab6a]{top:0;z-index:999}.newChat[data-v-62a1ab6a] #maincontent .headerSpacer,.newChat[data-v-62a1ab6a] #maincontent .headerSpacerWrapper,.newChat[data-v-62a1ab6a] #maincontent .headerSpacerWrapperOvf{overflow:visible!important}.newChat.minimized.active[data-v-62a1ab6a] #maincontent .desktopList{display:none}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "6668":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "br[data-v-ba5ac396]{content:\"\"}.sname[data-v-ba5ac396]{font-weight:700}.listPreview[data-v-ba5ac396]{display:flex;align-items:center}.statusWrapper[data-v-ba5ac396]{padding-left:.5em}.statusWrapper .my[data-v-ba5ac396]{font-size:.6em;opacity:.5}.previewMessage[data-v-ba5ac396]{min-height:25px}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "688e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "6929":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var colorString = __webpack_require__("1ab9");
var convert = __webpack_require__("bb15");

var _slice = [].slice;

var skippedModels = [
	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// gray conflicts with some method names, and has its own method defined.
	'gray',

	// shouldn't really be in color-convert either...
	'hex'
];

var hashedModelKeys = {};
Object.keys(convert).forEach(function (model) {
	hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});

var limiters = {};

function Color(obj, model) {
	if (!(this instanceof Color)) {
		return new Color(obj, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	var i;
	var channels;

	if (obj == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (obj instanceof Color) {
		this.model = obj.model;
		this.color = obj.color.slice();
		this.valpha = obj.valpha;
	} else if (typeof obj === 'string') {
		var result = colorString.get(obj);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + obj);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (obj.length) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		var newArr = _slice.call(obj, 0, channels);
		this.color = zeroArray(newArr, channels);
		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
	} else if (typeof obj === 'number') {
		// this is always RGB - can be converted later on.
		obj &= 0xFFFFFF;
		this.model = 'rgb';
		this.color = [
			(obj >> 16) & 0xFF,
			(obj >> 8) & 0xFF,
			obj & 0xFF
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		var keys = Object.keys(obj);
		if ('alpha' in obj) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
		}

		var hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
		}

		this.model = hashedModelKeys[hashedKeys];

		var labels = convert[this.model].labels;
		var color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(obj[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			var limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString: function () {
		return this.string();
	},

	toJSON: function () {
		return this[this.model]();
	},

	string: function (places) {
		var self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to[self.model](args);
	},

	percentString: function (places) {
		var self = this.rgb().round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to.rgb.percent(args);
	},

	array: function () {
		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
	},

	object: function () {
		var result = {};
		var channels = convert[this.model].channels;
		var labels = convert[this.model].labels;

		for (var i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray: function () {
		var rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject: function () {
		var rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round: function (places) {
		places = Math.max(places || 0, 0);
		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
	},

	alpha: function (val) {
		if (arguments.length) {
			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
		}

		return this.valpha;
	},

	// rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(100)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(100)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return convert[this.model].keyword(this.color);
	},

	hex: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	rgbNumber: function () {
		var rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.rgb().color;

		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.rgb().color;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	isLight: function () {
		return !this.isDark();
	},

	negate: function () {
		var rgb = this.rgb();
		for (var i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}
		return rgb;
	},

	lighten: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten: function (ratio) {
		var hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken: function (ratio) {
		var hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale: function () {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var rgb = this.rgb().color;
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(val, val, val);
	},

	fade: function (ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer: function (ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate: function (degrees) {
		var hsl = this.hsl();
		var hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix: function (mixinColor, weight) {
		// ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}
		var color1 = mixinColor.rgb();
		var color2 = this.rgb();
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return Color.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue(),
				color1.alpha() * p + color2.alpha() * (1 - p));
	}
};

// model conversion methods and static constructors
Object.keys(convert).forEach(function (model) {
	if (skippedModels.indexOf(model) !== -1) {
		return;
	}

	var channels = convert[model].channels;

	// conversion methods
	Color.prototype[model] = function () {
		if (this.model === model) {
			return new Color(this);
		}

		if (arguments.length) {
			return new Color(arguments, model);
		}

		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
		return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
	};

	// 'static' construction methods
	Color[model] = function (color) {
		if (typeof color === 'number') {
			color = zeroArray(_slice.call(arguments), channels);
		}
		return new Color(color, model);
	};
});

function roundTo(num, places) {
	return Number(num.toFixed(places));
}

function roundToPlace(places) {
	return function (num) {
		return roundTo(num, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	model.forEach(function (m) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	});

	model = model[0];

	return function (val) {
		var result;

		if (arguments.length) {
			if (modifier) {
				val = modifier(val);
			}

			result = this[model]();
			result.color[channel] = val;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(val) {
	return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
	for (var i = 0; i < length; i++) {
		if (typeof arr[i] !== 'number') {
			arr[i] = 0;
		}
	}

	return arr;
}

module.exports = Color;


/***/ }),

/***/ "6967":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(__webpack_require__("c566"));
var CancelToken = axios_1.default.CancelToken;
/**
 * Axios request with timeout throw
 */
function axiosRequest(config) {
    return __awaiter(this, void 0, void 0, function () {
        var timeout, cancel;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeout = config.timeout;
                    if (timeout) {
                        config.cancelToken = new CancelToken(function (c) { return cancel = c; });
                        setTimeout(function () {
                            cancel('timeout cancel', { timeout: timeout });
                        }, timeout);
                    }
                    return [4 /*yield*/, axios_1.default(config)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.default = axiosRequest;


/***/ }),

/***/ "696c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemoryStore = MemoryStore;

var _user = __webpack_require__("87d6");

var utils = _interopRequireWildcard(__webpack_require__("3987"));
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. See {@link MemoryStore} for the public class.
 * @module store/memory
 */


function isValidFilterId(filterId) {
  const isValidStr = typeof filterId === "string" && !!filterId && filterId !== "undefined" && // exclude these as we've serialized undefined in localStorage before
  filterId !== "null";
  return isValidStr || typeof filterId === "number";
}
/**
 * Construct a new in-memory data store for the Matrix Client.
 * @constructor
 * @param {Object=} opts Config options
 * @param {LocalStorage} opts.localStorage The local storage instance to persist
 * some forms of data such as tokens. Rooms will NOT be stored.
 */


function MemoryStore(opts) {
  opts = opts || {};
  this.rooms = {// roomId: Room
  };
  this.groups = {// groupId: Group
  };
  this.users = {// userId: User
  };
  this.syncToken = null;
  this.filters = {// userId: {
    //    filterId: Filter
    // }
  };
  this.accountData = {// type : content
  };
  this.localStorage = opts.localStorage;
  this._oobMembers = {// roomId: [member events]
  };
  this._clientOptions = {};
}

MemoryStore.prototype = {
  /**
   * Retrieve the token to stream from.
   * @return {string} The token or null.
   */
  getSyncToken: function () {
    return this.syncToken;
  },

  /** @return {Promise<bool>} whether or not the database was newly created in this session. */
  isNewlyCreated: function () {
    return Promise.resolve(true);
  },

  /**
   * Set the token to stream from.
   * @param {string} token The token to stream from.
   */
  setSyncToken: function (token) {
    this.syncToken = token;
  },

  /**
   * Store the given room.
   * @param {Group} group The group to be stored
   */
  storeGroup: function (group) {
    this.groups[group.groupId] = group;
  },

  /**
   * Retrieve a group by its group ID.
   * @param {string} groupId The group ID.
   * @return {Group} The group or null.
   */
  getGroup: function (groupId) {
    return this.groups[groupId] || null;
  },

  /**
   * Retrieve all known groups.
   * @return {Group[]} A list of groups, which may be empty.
   */
  getGroups: function () {
    return utils.values(this.groups);
  },

  /**
   * Store the given room.
   * @param {Room} room The room to be stored. All properties must be stored.
   */
  storeRoom: function (room) {
    this.rooms[room.roomId] = room; // add listeners for room member changes so we can keep the room member
    // map up-to-date.

    room.currentState.on("RoomState.members", this._onRoomMember.bind(this)); // add existing members

    const self = this;
    room.currentState.getMembers().forEach(function (m) {
      self._onRoomMember(null, room.currentState, m);
    });
  },

  /**
   * Called when a room member in a room being tracked by this store has been
   * updated.
   * @param {MatrixEvent} event
   * @param {RoomState} state
   * @param {RoomMember} member
   */
  _onRoomMember: function (event, state, member) {
    if (member.membership === "invite") {
      // We do NOT add invited members because people love to typo user IDs
      // which would then show up in these lists (!)
      return;
    }

    const user = this.users[member.userId] || new _user.User(member.userId);

    if (member.name) {
      user.setDisplayName(member.name);

      if (member.events.member) {
        user.setRawDisplayName(member.events.member.getDirectionalContent().displayname);
      }
    }

    if (member.events.member && member.events.member.getContent().avatar_url) {
      user.setAvatarUrl(member.events.member.getContent().avatar_url);
    }

    this.users[user.userId] = user;
  },

  /**
   * Retrieve a room by its' room ID.
   * @param {string} roomId The room ID.
   * @return {Room} The room or null.
   */
  getRoom: function (roomId) {
    return this.rooms[roomId] || null;
  },

  /**
   * Retrieve all known rooms.
   * @return {Room[]} A list of rooms, which may be empty.
   */
  getRooms: function () {
    return utils.values(this.rooms);
  },

  /**
   * Permanently delete a room.
   * @param {string} roomId
   */
  removeRoom: function (roomId) {
    if (this.rooms[roomId]) {
      this.rooms[roomId].removeListener("RoomState.members", this._onRoomMember);
    }

    delete this.rooms[roomId];
  },

  /**
   * Retrieve a summary of all the rooms.
   * @return {RoomSummary[]} A summary of each room.
   */
  getRoomSummaries: function () {
    return utils.map(utils.values(this.rooms), function (room) {
      return room.summary;
    });
  },

  /**
   * Store a User.
   * @param {User} user The user to store.
   */
  storeUser: function (user) {
    this.users[user.userId] = user;
  },

  /**
   * Retrieve a User by its' user ID.
   * @param {string} userId The user ID.
   * @return {User} The user or null.
   */
  getUser: function (userId) {
    return this.users[userId] || null;
  },

  /**
   * Retrieve all known users.
   * @return {User[]} A list of users, which may be empty.
   */
  getUsers: function () {
    return utils.values(this.users);
  },

  /**
   * Retrieve scrollback for this room.
   * @param {Room} room The matrix room
   * @param {integer} limit The max number of old events to retrieve.
   * @return {Array<Object>} An array of objects which will be at most 'limit'
   * length and at least 0. The objects are the raw event JSON.
   */
  scrollback: function (room, limit) {
    return [];
  },

  /**
   * Store events for a room. The events have already been added to the timeline
   * @param {Room} room The room to store events for.
   * @param {Array<MatrixEvent>} events The events to store.
   * @param {string} token The token associated with these events.
   * @param {boolean} toStart True if these are paginated results.
   */
  storeEvents: function (room, events, token, toStart) {// no-op because they've already been added to the room instance.
  },

  /**
   * Store a filter.
   * @param {Filter} filter
   */
  storeFilter: function (filter) {
    if (!filter) {
      return;
    }

    if (!this.filters[filter.userId]) {
      this.filters[filter.userId] = {};
    }

    this.filters[filter.userId][filter.filterId] = filter;
  },

  /**
   * Retrieve a filter.
   * @param {string} userId
   * @param {string} filterId
   * @return {?Filter} A filter or null.
   */
  getFilter: function (userId, filterId) {
    if (!this.filters[userId] || !this.filters[userId][filterId]) {
      return null;
    }

    return this.filters[userId][filterId];
  },

  /**
   * Retrieve a filter ID with the given name.
   * @param {string} filterName The filter name.
   * @return {?string} The filter ID or null.
   */
  getFilterIdByName: function (filterName) {
    if (!this.localStorage) {
      return null;
    }

    const key = "mxjssdk_memory_filter_" + filterName; // XXX Storage.getItem doesn't throw ...
    // or are we using something different
    // than window.localStorage in some cases
    // that does throw?
    // that would be very naughty

    try {
      const value = this.localStorage.getItem(key);

      if (isValidFilterId(value)) {
        return value;
      }
    } catch (e) {}

    return null;
  },

  /**
   * Set a filter name to ID mapping.
   * @param {string} filterName
   * @param {string} filterId
   */
  setFilterIdByName: function (filterName, filterId) {
    if (!this.localStorage) {
      return;
    }

    const key = "mxjssdk_memory_filter_" + filterName;

    try {
      if (isValidFilterId(filterId)) {
        this.localStorage.setItem(key, filterId);
      } else {
        this.localStorage.removeItem(key);
      }
    } catch (e) {}
  },

  /**
   * Store user-scoped account data events.
   * N.B. that account data only allows a single event per type, so multiple
   * events with the same type will replace each other.
   * @param {Array<MatrixEvent>} events The events to store.
   */
  storeAccountDataEvents: function (events) {
    const self = this;
    events.forEach(function (event) {
      self.accountData[event.getType()] = event;
    });
  },

  /**
   * Get account data event by event type
   * @param {string} eventType The event type being queried
   * @return {?MatrixEvent} the user account_data event of given type, if any
   */
  getAccountData: function (eventType) {
    return this.accountData[eventType];
  },

  /**
   * setSyncData does nothing as there is no backing data store.
   *
   * @param {Object} syncData The sync data
   * @return {Promise} An immediately resolved promise.
   */
  setSyncData: function (syncData) {
    return Promise.resolve();
  },

  /**
   * We never want to save becase we have nothing to save to.
   *
   * @return {boolean} If the store wants to save
   */
  wantsSave: function () {
    return false;
  },

  /**
   * Save does nothing as there is no backing data store.
   * @param {bool} force True to force a save (but the memory
   *     store still can't save anything)
   */
  save: function (force) {},

  /**
   * Startup does nothing as this store doesn't require starting up.
   * @return {Promise} An immediately resolved promise.
   */
  startup: function () {
    return Promise.resolve();
  },

  /**
   * @return {Promise} Resolves with a sync response to restore the
   * client state to where it was at the last save, or null if there
   * is no saved sync data.
   */
  getSavedSync: function () {
    return Promise.resolve(null);
  },

  /**
   * @return {Promise} If there is a saved sync, the nextBatch token
   * for this sync, otherwise null.
   */
  getSavedSyncToken: function () {
    return Promise.resolve(null);
  },

  /**
   * Delete all data from this store.
   * @return {Promise} An immediately resolved promise.
   */
  deleteAllData: function () {
    this.rooms = {// roomId: Room
    };
    this.users = {// userId: User
    };
    this.syncToken = null;
    this.filters = {// userId: {
      //    filterId: Filter
      // }
    };
    this.accountData = {// type : content
    };
    return Promise.resolve();
  },

  /**
   * Returns the out-of-band membership events for this room that
   * were previously loaded.
   * @param {string} roomId
   * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members
   * @returns {null} in case the members for this room haven't been stored yet
   */
  getOutOfBandMembers: function (roomId) {
    return Promise.resolve(this._oobMembers[roomId] || null);
  },

  /**
   * Stores the out-of-band membership events for this room. Note that
   * it still makes sense to store an empty array as the OOB status for the room is
   * marked as fetched, and getOutOfBandMembers will return an empty array instead of null
   * @param {string} roomId
   * @param {event[]} membershipEvents the membership events to store
   * @returns {Promise} when all members have been stored
   */
  setOutOfBandMembers: function (roomId, membershipEvents) {
    this._oobMembers[roomId] = membershipEvents;
    return Promise.resolve();
  },
  clearOutOfBandMembers: function () {
    this._oobMembers = {};
    return Promise.resolve();
  },
  getClientOptions: function () {
    return Promise.resolve(this._clientOptions);
  },
  storeClientOptions: function (options) {
    this._clientOptions = Object.assign({}, options);
    return Promise.resolve();
  }
};

/***/ }),

/***/ "696c2":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/fileMessage/index.vue?vue&type=template&id=0f8b05de&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"wrapper table"},[_c('div',{staticClass:"filecontent"},[_c('div',{staticClass:"name"},[_c('span',[_vm._v(_vm._s(_vm.file.name))])]),_c('div',{staticClass:"size"},[_c('span',[_vm._v(_vm._s(_vm.humanReadableSize(_vm.file.size)))])]),(!_vm.encryptedData)?_c('div',{staticClass:"download"},[_c('a',{staticClass:"fileMessage",attrs:{"href":_vm.file.url,"download":_vm.download,"target":"_external"}},[_c('button',{staticClass:"button small rounded"},[(!_vm.downloaded)?_c('span',[_vm._v(_vm._s(_vm.$t("button.download")))]):_c('span',[_vm._v(_vm._s(_vm.$t("button.downloaded")))])])])]):_c('div',{staticClass:"download"},[_c('button',{staticClass:"button small rounded",on:{"click":_vm.download}},[(!_vm.downloaded)?_c('span',[_vm._v(_vm._s(_vm.$t("button.download")))]):_c('span',[_vm._v(_vm._s(_vm.$t("button.downloaded")))])])])]),_c('div',{staticClass:"icon"},[_c('a',{staticClass:"fileMessage",attrs:{"href":_vm.file.url,"download":_vm.download,"target":"_external"}},[_c('i',{staticClass:"fas fa-file-download"})])])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/events/event/fileMessage/index.vue?vue&type=template&id=0f8b05de&scoped=true&

// EXTERNAL MODULE: ./src/application/functions.js
var functions = __webpack_require__("3139");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/events/event/fileMessage/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ var fileMessagevue_type_script_lang_js_ = ({
  props: {
    preview: Object,
    file: Object,
    encryptedData: Boolean,
    downloaded: Boolean
  },
  computed: {
    getExtension: function (file) {
      var name = file.name.split('.');
      var ext = name[name.length - 1].toLowerCase();
      return ext;
    }
  },
  methods: {
    humanReadableSize(data) {
      return functions["a" /* default */].formatBytes(data);
    },

    download() {
      this.$emit('download');
    }

  }
});
// CONCATENATED MODULE: ./src/components/events/event/fileMessage/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var event_fileMessagevue_type_script_lang_js_ = (fileMessagevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/events/event/fileMessage/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("8cd8")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  event_fileMessagevue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "0f8b05de",
  null
  ,true
)

/* harmony default export */ var fileMessage = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "69d0":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".m-message-container{position:fixed;z-index:1010;pointer-events:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-sizing:border-box;box-sizing:border-box;padding:15px}.m-message-container.is-top-center,.m-message-container.is-top-left,.m-message-container.is-top-right{width:100%;top:0;left:0}.m-message-container.is-top-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-top-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-top-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.is-center{width:100%;height:100%;left:0;top:0;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.m-message-container.is-bottom-center,.m-message-container.is-bottom-left,.m-message-container.is-bottom-right{bottom:0;left:0;width:100%;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}.m-message-container.is-bottom-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-bottom-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-bottom-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.has-mask{background-color:hsla(0,0%,100%,.5);width:100%;height:100%;pointer-events:all}.m-message-wrapper{display:inline-block;max-width:500px}.m-message-wrapper+.m-message-wrapper{margin-top:15px}.m-message-wrapper:after,.m-message-wrapper:before{content:\"\";clear:both;display:table}.m-message{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:10px 16px;font-size:14px;overflow:hidden;border-radius:4px;-webkit-box-shadow:0 1px 8px rgba(0,0,0,.15);box-shadow:0 1px 8px rgba(0,0,0,.15);color:rgba(0,0,0,.65);background:hsla(0,0%,100%,.95);pointer-events:all;position:relative}.m-message,.m-message-icons{-webkit-box-sizing:border-box;box-sizing:border-box}.m-message-icons{float:left;margin-right:10px}.m-message--title{font-size:14px;font-weight:600;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.m-message-content{-webkit-box-sizing:border-box;box-sizing:border-box;overflow:auto;width:100%}.m-message--description{line-height:1.6;color:#777}.m-message--title+.m-message--description{margin-top:5px}.m-message--icon{width:25px;height:25px;vertical-align:middle;display:inline-block;border-radius:50%}.m-message--control{position:relative;height:100%;-ms-flex-item-align:start;align-self:flex-start;white-space:nowrap;margin-right:-5px;margin-left:10px}.m-message--button{border:none;outline:none;background:none;cursor:pointer;font-size:15px;color:#646464;font-weight:600;padding:0;width:20px;height:20px;line-height:20px;text-align:center;vertical-align:middle}.m-message--button:hover{color:#f56c6c}.m-message--arrow-down.is-collapsed{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.m-message-fade-enter-active{-webkit-animation:m-message-fade-in-down .3s;animation:m-message-fade-in-down .3s}.m-message-fade-leave-active{-webkit-animation:m-message-fade-out .3s;animation:m-message-fade-out .3s}@-webkit-keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}@keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "69f2":
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__("087f")
exports.sha1 = __webpack_require__("7e78")
exports.sha224 = __webpack_require__("72aa")
exports.sha256 = __webpack_require__("a255")
exports.sha384 = __webpack_require__("b837")
exports.sha512 = __webpack_require__("4fd1")


/***/ }),

/***/ "69f3":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
var global = __webpack_require__("da84");
var uncurryThis = __webpack_require__("e330");
var isObject = __webpack_require__("861d");
var createNonEnumerableProperty = __webpack_require__("9112");
var hasOwn = __webpack_require__("1a2d");
var shared = __webpack_require__("c6cd");
var sharedKey = __webpack_require__("f772");
var hiddenKeys = __webpack_require__("d012");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "69f5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2017 Tony Arcieri
// MIT License. See LICENSE file for details.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = __webpack_require__("69fc");
/**
 * WebCrypto-based implementation of the AES block cipher.
 *
 * This implementation (ab)uses AES-CBC mode to implement AES-ECB. This is
 * likely to be rather slow, as it requires an async call per block, and
 * discards half the buffer.
 *
 * In theory it should be constant time due to the use of WebCrypto (provided
 * the browser's implementation is constant time), but it could probably benefit
 * from some clever optimization work, or improvements to the WebCrypto API.
 *
 * Some WebCrypto implementations (e.g. node-webcrypto-ossl) support ECB mode
 * natively, so we could take advantage of that to potentially encrypt multiple
 * blocks in a single invocation.
 *
 * Key size: 16 or 32 bytes, block size: 16 bytes.
 */
class WebCryptoAes {
    constructor(_crypto, _key) {
        this._crypto = _crypto;
        this._key = _key;
        // An initialization vector of all zeros, exposing the raw AES function
        this._iv = new block_1.default();
        this._emptyPromise = Promise.resolve(this);
    }
    /**
     * Create a new WebCryptoAes instance
     *
     * @param {Crypto} crypto - the Web Cryptography provider
     * @param {Uint8Array} keyData - the AES secret key
     * @returns {Promise<WebCryptoAes}
     */
    static importKey(crypto, keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only AES-128 and AES-256 supported. AES-192 is not.
            if (keyData.length !== 16 && keyData.length !== 32) {
                throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);
            }
            const key = yield crypto.subtle.importKey("raw", keyData, "AES-CBC", false, ["encrypt"]);
            return new WebCryptoAes(crypto, key);
        });
    }
    /**
     * Cleans expanded keys from memory, setting them to zeros.
     */
    clear() {
        // TODO: perhaps we should clear something, but what, and how?
        return this;
    }
    /**
     * Encrypt a single AES block. While ordinarily this might let us see penguins, we're using it safely
     *
     * @param {Block} block - block to be encrypted in-place
     * @returns {Promise<this>}
     */
    encryptBlock(block) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = { name: "AES-CBC", iv: this._iv.data };
            const ctBlock = yield this._crypto.subtle.encrypt(params, this._key, block.data);
            // TODO: a more efficient way to do in-place encryption?
            block.data.set(new Uint8Array(ctBlock, 0, block_1.default.SIZE));
            return this._emptyPromise;
        });
    }
}
exports.default = WebCryptoAes;


/***/ }),

/***/ "69fc":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** Type which represents AES blocks */
Object.defineProperty(exports, "__esModule", { value: true });
const constant_time_1 = __webpack_require__("b8d8");
const wipe_1 = __webpack_require__("ffd9");
/** An AES block (128-bits) */
class Block {
    constructor() {
        this.data = new Uint8Array(Block.SIZE);
    }
    /**
     * Clear the given array by setting its values to zero.
     *
     * WARNING: The fact that it sets bytes to zero can be relied on.
     *
     * There is no guarantee that this function makes data disappear from memory,
     * as runtime implementation can, for example, have copying garbage collector
     * that will make copies of sensitive data before we wipe it. Or that an
     * operating system will write our data to swap or sleep image. Another thing
     * is that an optimizing compiler can remove calls to this function or make it
     * no-op. There's nothing we can do with it, so we just do our best and hope
     * that everything will be okay and good will triumph over evil.
     */
    clear() {
        wipe_1.wipe(this.data);
    }
    /**
     * Make a copy of this block, returning a new block
     */
    clone() {
        const ret = new Block();
        ret.copy(this);
        return ret;
    }
    /** Copy the contents of another block into this one */
    copy(other) {
        this.data.set(other.data);
    }
    /**
     * Double a value over GF(2^128):
     *
     *     a<<1 if firstbit(a)=0
     *     (a<<1) ⊕ 0¹²⁰10000111 if firstbit(a)=1
     */
    dbl() {
        let carry = 0;
        for (let i = Block.SIZE - 1; i >= 0; i--) {
            const b = (this.data[i] >>> 7) & 0xff;
            this.data[i] = (this.data[i] << 1) | carry;
            carry = b;
        }
        this.data[Block.SIZE - 1] ^= constant_time_1.select(carry, Block.R, 0);
        carry = 0;
    }
}
/** Size of a block as used by the AES cipher */
Block.SIZE = 16;
/** Minimal irreducible polynomial for a 128-bit block size */
Block.R = 0x87;
exports.default = Block;


/***/ }),

/***/ "6a45":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("76a3");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("0017b470", content, shadowRoot)
};

/***/ }),

/***/ "6b38":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".main-wrapper.minimized[data-v-c44504aa]:not(.active) .topheader{opacity:0}.main-wrapper.minimized[data-v-c44504aa]:not(.active) .encrypted{display:none}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "6beb":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".preloaderWrapperLocal[data-v-791cf1f7]{padding:.5em 0;text-align:center}.urlwrapper[data-v-791cf1f7]{margin-top:.25em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "6bfd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1774f2a8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("94bc");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1774f2a8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1774f2a8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1774f2a8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_1774f2a8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "6ce2":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addPublicChatName\":\"Add Public Chat Name\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"createPublicChat\":\"Create public chat\",\"chatTopic\":\"Topic renamed\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"Herunterladen von Dateien\",\"header\":\"Header\",\"dragAndDropAFile\":\"Drag & Drop-Datei\",\"chatInvite\":\"Sie wurden eingeladen mit Benutzer zu chatten:\",\"cantJoion\":\"Sie können den Chat mit dem Benutzer nicht beitreten:\",\"chatInviteDecline\":\"Sie können im Chat teilnehmen oder Einladung ablehnen\",\"creatorLeft\":\"Weil der Schöpfer den Raum verlassen hat\",\"encrypted\":\"Verschlüssel\",\"noImages\":\"Es gibt noch keine Bilder in diesem Chat\",\"noFiles\":\"There are no files in this chat yet\",\"inviteUser\":\"Benutzer einladen\",\"invite\":\"Einladen\",\"add\":\"Hinzufügen\",\"mute\":\"Stumm\",\"unmute\":\"Ton aktivieren\",\"leave\":\"Verlassen\",\"Info\":\"Info\",\"new\":\"Neue\",\"typing\":\"Tippt\",\"accNotFound\":\"Ihr Konto wurde nicht in der Blockchain gefunden. Vielleicht müssen Sie warten\",\"emptyList\":\"liste ist leer ( gefiltert oder nur leer )\",\"welcome\":\"Willkommen bei Pocketnet Chat\",\"startNewChat\":\"Fangen Sie einen neuen chat an\",\"chats\":\"Chats\",\"shareWith\":\"Teilen mit\",\"newChat\":\"Neuer Chat\",\"moveToChat\":\"Zum Chat wechseln\",\"queryNoResults\":\"Abfrage meldet keine Ergebnisse\",\"needMoreCharacters\":\"Benötigen Sie mehr Zeichen für das Ergebnis\",\"createGroup\":\"Gruppe erstellen\",\"unabletoDecrypt\":\"* Kann nicht entschlüsselnt\",\"messageDeleted\":\"Nachricht gelöscht\",\"sentImage\":\"gesendetes Bild\",\"sentVoiceMessage\":\"eine Sprachnachricht gesendet\",\"invitationToChat\":\"Einladung zum Chat\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"Hat den chat verlasst\",\"joined\":\"beitretet\",\"chatRenamed\":\"Chat umbenannt in\",\"recentComment\":\"Letzter Kommentar:\",\"share\":\"AKTIE\",\"followers\":\"Anhänger:\",\"reputation\":\"Reputation:\",\"following\":\"Folgen:\",\"theme\":\"Thema:\",\"contacts\":\"Kontakte\",\"phoneContacts\":\"Telefonische Kontakte\",\"chooseInviteMedia\":\"Bitte wählen Sie, wie Sie einladen möchten\",\"admin\":\"Admin\",\"moderator\":\"Moderator\",\"videocall\":\"Videoanrufe\",\"call\":\"Anruf\",\"leaveAndDelete\":\"Verlassen und Löschen\",\"donate\":\"Donate\",\"makeModerator\":\"Als Moderator ernennen\",\"ban\":\"Ban\",\"kick\":\"Kick\",\"members\":\"Mitglieds\",\"media\":\"Media\",\"files\":\"Datei\",\"contactsList\":\"Kontaktliste\",\"send\":\"Senden\",\"pageCaption\":\"Seite Beschriftung\",\"caption\":\"Beschriftung\",\"text\":\"Text\",\"placeholder\":\"Platzhalter\",\"sendTransactionTo\":\"Transaktion senden an\",\"toBePaidByReceiver\":\"Zahlung durch den Empfänger\",\"toBePaidBySender\":\"Zahlung durch Absender\",\"source\":\"Quelle\",\"amount\":\"Anzahl\",\"receiver\":\"Empfänger\",\"message\":\"Nachricht\",\"includeFeesInAmount\":\"Gebühren in den Betrag einbeziehen\",\"transactionFees\":\"Gebühren pro Transaktion\",\"totalAmount\":\"Insgesamt\",\"balanceTooLow\":\"Bilanz zu niedrig\",\"transactionError\":\"Fehler: Transaktion kann nicht ausgeführt werden\",\"calculateFees\":\"Gebühren berechnen\",\"startChatWith\":\"Chat anfangen mit\",\"searchResult\":\"Ergebnis der Suche\",\"joinedInTheChat\":\"in den Chat eingeloggt\",\"invited\":\"eingeladet \",\"hasInvited\":\"eingeladen \",\"inTheChat\":\" in den chat\",\"banned\":\"banned\",\"andRoom\":\"und Zimmer\",\"left\":\"verließt\",\"theChat\":\" Chat \",\"made\":\"Gemacht \",\"aModerator\":\" Moderator\",\"editedChatNameTo \":\"änderte den Chat-Namen in \",\"somebody\":\"Jemand\",\"sent\":\"gesendet\",\"PKOINto\":\" PKOIN für \",\"response\":\"Antwort\",\"edited\":\"Bearbeitet\",\"settings\":\"Einstellungen\",\"unauthorized\":\"Nicht autorisiert\",\"search\":\"Suche\",\"replyOnMessage\":\"Antwort auf Nachricht\",\"editMessage\":\"Nachricht bearbeiten\",\"inviteFriend\":\"Пригласите друзей\",\"emptyContactList\":\"Список контактов пуст\",\"joinApp\":\"Pocketnet beitreten\",\"hasInvitedToJoin\":\"hat Sie eingeladen, Pocketnet beizutreten\",\"messagefrom\":\"Forwarded message from\",\"usernotgen\":\"User did not generate their encryption keys yet. You will be able to chat them when their keys are generated.\",\"younotgen\":\"Please wait a minute, Your encryption keys are being generated...\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"Email\",\"refillNamePlaceholder\":\"Den Namen Nachfüllen\"},\"message\":{},\"button\":{\"starChatButton\":\"Chat anfangen\",\"decline\":\"Ablehnen\",\"join\":\"Beitreten\",\"ok\":\"Ok\",\"copy\":\"Kopieren\",\"forward\":\"Weiterleiten\",\"delete\":\"Löschen\",\"save\":\"Speichern\",\"reply\":\"Antworten\",\"share\":\"Share\",\"download\":\"Herunterladen\",\"downloaded\":\"Herunterladen\",\"goToPocketnetProfile\":\"Zum Pocketnet Profil\",\"sendFile\":\"Datai senden\",\"takePhotoOrVideo\":\"Foto machen\",\"sendCoins\":\"Münzen senden\",\"edit\":\"Bearbeiten\",\"select\":\"Auswählen\",\"block\":\"Sperren\",\"unblock\":\"Entsperren\",\"blockUser\":\"Benutzer sperren\"},\"yes\":\"Ja\",\"cancel\":\"Abbrechen\",\"teamMessages\":{\"1-title\":\"Willkommen beim privaten Bastyon-Chat!\",\"1-list1\":\"Privater Messenger, der NICHT mit Ihrer Telefonnummer verbunden ist.\",\"1-list2\":\"Standardmäßig Ende-zu-Ende-Verschlüsselung jedes 1-zu-1-Gesprächs\",\"1-list3\":\"Alle per Chat gesendeten oder empfangenen Bilder werden verschlüsselt gespeichert\",\"1-list4\":\"Der Nachrichtenverlauf wird nur 7 Tage lang gespeichert\",\"2-title\":\"Eine riesige Ankündigung! Die Pocketnet-Anwendung heißt jetzt Bastyon!\",\"2-message1\":\"Die Domain wird auf Bastyon.com verschoben. Wir haben kürzlich die folgenden wichtigen Updates veröffentlicht:\",\"2-list1\":\"Privater verschlüsselter Messenger, der nicht mit Ihrer Telefonnummer verbunden ist\",\"2-list2\":\"Möglichkeit, PKOIN an Blogger zu spenden\",\"2-list3\":\"Video- und Live-Streaming\",\"2-message2\":\"Laden Sie jetzt Ihre Freunde ein und werden Sie Teil der großen Zukunft des dezentralen Internets!\",\"2-button\":\"Freunde einladen\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "6de4":
/***/ (function(module) {

module.exports = JSON.parse("{\"0\":\"O\",\"1\":\"l\",\"֭\":\"֖\",\"֮\":\"֘\",\"֨\":\"֙\",\"֤\":\"֚\",\"᪴\":\"ۛ\",\"⃛\":\"ۛ\",\"ؙ\":\"̓\",\"ࣳ\":\"̓\",\"̓\":\"̓\",\"̕\":\"̓\",\"ُ\":\"̓\",\"ٝ\":\"̔\",\"֜\":\"́\",\"֝\":\"́\",\"ؘ\":\"́\",\"݇\":\"́\",\"́\":\"́\",\"॔\":\"́\",\"َ\":\"́\",\"̀\":\"̀\",\"॓\":\"̀\",\"̌\":\"̆\",\"꙼\":\"̆\",\"٘\":\"̆\",\"ٚ\":\"̆\",\"ͮ\":\"̆\",\"ۨ\":\"̆̇\",\"̐\":\"̆̇\",\"ँ\":\"̆̇\",\"ঁ\":\"̆̇\",\"ઁ\":\"̆̇\",\"ଁ\":\"̆̇\",\"ఀ\":\"̆̇\",\"ಁ\":\"̆̇\",\"ഁ\":\"̆̇\",\"𑒿\":\"̆̇\",\"᳐\":\"̂\",\"̑\":\"̂\",\"ٛ\":\"̂\",\"߮\":\"̂\",\"꛰\":\"̂\",\"֯\":\"̊\",\"۟\":\"̊\",\"៓\":\"̊\",\"゚\":\"̊\",\"ْ\":\"̊\",\"ஂ\":\"̊\",\"ံ\":\"̊\",\"ំ\":\"̊\",\"𑌀\":\"̊\",\"ํ\":\"̊\",\"ໍ\":\"̊\",\"ͦ\":\"̊\",\"ⷪ\":\"̊\",\"࣫\":\"̈\",\"߳\":\"̈\",\"ً\":\"̋\",\"ࣰ\":\"̋\",\"͂\":\"̃\",\"ٓ\":\"̃\",\"ׄ\":\"̇\",\"۬\":\"̇\",\"݀\":\"̇\",\"࣪\":\"̇\",\"݁\":\"̇\",\"͘\":\"̇\",\"ֹ\":\"̇\",\"ֺ\":\"̇\",\"ׂ\":\"̇\",\"ׁ\":\"̇\",\"߭\":\"̇\",\"ं\":\"̇\",\"ਂ\":\"̇\",\"ં\":\"̇\",\"்\":\"̇\",\"̷\":\"̸\",\"᪷\":\"̨\",\"̢\":\"̨\",\"ͅ\":\"̨\",\"᳒\":\"̄\",\"̅\":\"̄\",\"ٙ\":\"̄\",\"߫\":\"̄\",\"꛱\":\"̄\",\"᳚\":\"̎\",\"ٗ\":\"̒\",\"͗\":\"͐\",\"ࣿ\":\"͐\",\"ࣸ\":\"͐\",\"ऀ\":\"͒\",\"᳭\":\"̖\",\"᳜\":\"̩\",\"ٖ\":\"̩\",\"᳕\":\"̫\",\"͇\":\"̳\",\"ࣹ\":\"͔\",\"ࣺ\":\"͕\",\"゛\":\"ﾞ\",\"゜\":\"ﾟ\",\"̶\":\"̵\",\"〬\":\"̉\",\"ׅ\":\"̣\",\"࣭\":\"̣\",\"᳝\":\"̣\",\"ִ\":\"̣\",\"ٜ\":\"̣\",\"़\":\"̣\",\"়\":\"̣\",\"਼\":\"̣\",\"઼\":\"̣\",\"଼\":\"̣\",\"𑇊\":\"̣\",\"𑓃\":\"̣\",\"𐨺\":\"̣\",\"࣮\":\"̤\",\"᳞\":\"̤\",\"༷\":\"̥\",\"〭\":\"̥\",\"̧\":\"̦\",\"̡\":\"̦\",\"̹\":\"̦\",\"᳙\":\"̭\",\"᳘\":\"̮\",\"॒\":\"̱\",\"̠\":\"̱\",\"ࣱ\":\"ٌ\",\"ࣨ\":\"ٌ\",\"ࣥ\":\"ٌ\",\"ﱞ\":\"ﹲّ\",\"ࣲ\":\"ٍ\",\"ﱟ\":\"ﹴّ\",\"ﳲ\":\"ﹷّ\",\"ﱠ\":\"ﹶّ\",\"ﳳ\":\"ﹹّ\",\"ﱡ\":\"ﹸّ\",\"ؚ\":\"ِ\",\"̗\":\"ِ\",\"ﳴ\":\"ﹻّ\",\"ﱢ\":\"ﹺّ\",\"ﱣ\":\"ﹼٰ\",\"ٟ\":\"ٕ\",\"̍\":\"ٰ\",\"݂\":\"ܼ\",\"ਃ\":\"ঃ\",\"ః\":\"ঃ\",\"ಃ\":\"ঃ\",\"ഃ\":\"ঃ\",\"ඃ\":\"ঃ\",\"း\":\"ঃ\",\"𑓁\":\"ঃ\",\"់\":\"่\",\"່\":\"่\",\"້\":\"้\",\"໊\":\"๊\",\"໋\":\"๋\",\"꙯\":\"⃩\",\"\\u2028\":\" \",\"\\u2029\":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\" \":\" \",\"ߺ\":\"_\",\"﹍\":\"_\",\"﹎\":\"_\",\"﹏\":\"_\",\"‐\":\"-\",\"‑\":\"-\",\"‒\":\"-\",\"–\":\"-\",\"﹘\":\"-\",\"۔\":\"-\",\"⁃\":\"-\",\"˗\":\"-\",\"−\":\"-\",\"➖\":\"-\",\"Ⲻ\":\"-\",\"⨩\":\"-̓\",\"⸚\":\"-̈\",\"﬩\":\"-̇\",\"∸\":\"-̇\",\"⨪\":\"-̣\",\"꓾\":\"-.\",\"～\":\"〜\",\"؍\":\",\",\"٫\":\",\",\"‚\":\",\",\"¸\":\",\",\"ꓹ\":\",\",\"⸲\":\"،\",\"٬\":\"،\",\";\":\";\",\"⸵\":\"؛\",\"ः\":\":\",\"ઃ\":\":\",\"：\":\":\",\"։\":\":\",\"܃\":\":\",\"܄\":\":\",\"᛬\":\":\",\"︰\":\":\",\"᠃\":\":\",\"᠉\":\":\",\"⁚\":\":\",\"׃\":\":\",\"˸\":\":\",\"꞉\":\":\",\"∶\":\":\",\"ː\":\":\",\"ꓽ\":\":\",\"⩴\":\"::=\",\"⧴\":\":→\",\"！\":\"!\",\"ǃ\":\"!\",\"ⵑ\":\"!\",\"‼\":\"!!\",\"⁉\":\"!?\",\"ʔ\":\"?\",\"Ɂ\":\"?\",\"ॽ\":\"?\",\"Ꭾ\":\"?\",\"ꛫ\":\"?\",\"⁈\":\"?!\",\"⁇\":\"??\",\"⸮\":\"؟\",\"𝅭\":\".\",\"․\":\".\",\"܁\":\".\",\"܂\":\".\",\"꘎\":\".\",\"𐩐\":\".\",\"٠\":\".\",\"۰\":\".\",\"ꓸ\":\".\",\"ꓻ\":\".,\",\"‥\":\"..\",\"ꓺ\":\"..\",\"…\":\"...\",\"꛴\":\"꛳꛳\",\"・\":\"·\",\"･\":\"·\",\"᛫\":\"·\",\"·\":\"·\",\"⸱\":\"·\",\"𐄁\":\"·\",\"•\":\"·\",\"‧\":\"·\",\"∙\":\"·\",\"⋅\":\"·\",\"ꞏ\":\"·\",\"ᐧ\":\"·\",\"⋯\":\"···\",\"ⵈ\":\"···\",\"ᑄ\":\"·<\",\"⋗\":\"·>\",\"ᐷ\":\"·>\",\"ᑀ\":\"·>\",\"ᔯ\":\"·4\",\"ᑾ\":\"·b\",\"ᒀ\":\"·ḃ\",\"ᑺ\":\"·d\",\"ᒘ\":\"·J\",\"ᒶ\":\"·L\",\"ᑶ\":\"·P\",\"ᑗ\":\"·U\",\"ᐺ\":\"·V\",\"ᐼ\":\"·Ʌ\",\"ᒮ\":\"·Γ\",\"ᐎ\":\"·Δ\",\"ᑙ\":\"·Ո\",\"ᐌ\":\"·ᐁ\",\"ᐐ\":\"·ᐄ\",\"ᐒ\":\"·ᐅ\",\"ᐔ\":\"·ᐆ\",\"ᐗ\":\"·ᐊ\",\"ᐙ\":\"·ᐋ\",\"ᐾ\":\"·ᐲ\",\"ᑂ\":\"·ᐴ\",\"ᑆ\":\"·ᐹ\",\"ᑛ\":\"·ᑏ\",\"ᑔ\":\"·ᑐ\",\"ᑝ\":\"·ᑐ\",\"ᑟ\":\"·ᑑ\",\"ᑡ\":\"·ᑕ\",\"ᑣ\":\"·ᑖ\",\"ᑴ\":\"·ᑫ\",\"ᑸ\":\"·ᑮ\",\"ᑼ\":\"·ᑰ\",\"ᒒ\":\"·ᒉ\",\"ᒔ\":\"·ᒋ\",\"ᒖ\":\"·ᒌ\",\"ᒚ\":\"·ᒎ\",\"ᒜ\":\"·ᒐ\",\"ᒞ\":\"·ᒑ\",\"ᒬ\":\"·ᒣ\",\"ᒰ\":\"·ᒦ\",\"ᒲ\":\"·ᒧ\",\"ᒴ\":\"·ᒨ\",\"ᒸ\":\"·ᒫ\",\"ᓉ\":\"·ᓀ\",\"ᣆ\":\"·ᓂ\",\"ᣈ\":\"·ᓃ\",\"ᣊ\":\"·ᓄ\",\"ᣌ\":\"·ᓅ\",\"ᓋ\":\"·ᓇ\",\"ᓍ\":\"·ᓈ\",\"ᓜ\":\"·ᓓ\",\"ᓞ\":\"·ᓕ\",\"ᓠ\":\"·ᓖ\",\"ᓢ\":\"·ᓗ\",\"ᓤ\":\"·ᓘ\",\"ᓦ\":\"·ᓚ\",\"ᓨ\":\"·ᓛ\",\"ᓶ\":\"·ᓭ\",\"ᓸ\":\"·ᓯ\",\"ᓺ\":\"·ᓰ\",\"ᓼ\":\"·ᓱ\",\"ᓾ\":\"·ᓲ\",\"ᔀ\":\"·ᓴ\",\"ᔂ\":\"·ᓵ\",\"ᔗ\":\"·ᔐ\",\"ᔙ\":\"·ᔑ\",\"ᔛ\":\"·ᔒ\",\"ᔝ\":\"·ᔓ\",\"ᔟ\":\"·ᔔ\",\"ᔡ\":\"·ᔕ\",\"ᔣ\":\"·ᔖ\",\"ᔱ\":\"·ᔨ\",\"ᔳ\":\"·ᔩ\",\"ᔵ\":\"·ᔪ\",\"ᔷ\":\"·ᔫ\",\"ᔹ\":\"·ᔭ\",\"ᔻ\":\"·ᔮ\",\"ᣎ\":\"·ᕃ\",\"ᣏ\":\"·ᕆ\",\"ᣐ\":\"·ᕇ\",\"ᣑ\":\"·ᕈ\",\"ᣒ\":\"·ᕉ\",\"ᣓ\":\"·ᕋ\",\"ᕎ\":\"·ᕌ\",\"ᕛ\":\"·ᕚ\",\"ᕨ\":\"·ᕧ\",\"ᢳ\":\"·ᢱ\",\"ᢶ\":\"·ᢴ\",\"ᢹ\":\"·ᢸ\",\"ᣂ\":\"·ᣀ\",\"꠰\":\"।\",\"॥\":\"।।\",\"᰼\":\"᰻᰻\",\"။\":\"၊၊\",\"᪩\":\"᪨᪨\",\"᪫\":\"᪪᪨\",\"᭟\":\"᭞᭞\",\"𐩗\":\"𐩖𐩖\",\"𑑌\":\"𑑋𑑋\",\"𑙂\":\"𑙁𑙁\",\"𑱂\":\"𑱁𑱁\",\"᱿\":\"᱾᱾\",\"՝\":\"'\",\"＇\":\"'\",\"‘\":\"'\",\"’\":\"'\",\"‛\":\"'\",\"′\":\"'\",\"‵\":\"'\",\"՚\":\"'\",\"׳\":\"'\",\"`\":\"'\",\"`\":\"'\",\"｀\":\"'\",\"´\":\"'\",\"΄\":\"'\",\"´\":\"'\",\"᾽\":\"'\",\"᾿\":\"'\",\"῾\":\"'\",\"ʹ\":\"'\",\"ʹ\":\"'\",\"ˈ\":\"'\",\"ˊ\":\"'\",\"ˋ\":\"'\",\"˴\":\"'\",\"ʻ\":\"'\",\"ʽ\":\"'\",\"ʼ\":\"'\",\"ʾ\":\"'\",\"ꞌ\":\"'\",\"י\":\"'\",\"ߴ\":\"'\",\"ߵ\":\"'\",\"ᑊ\":\"'\",\"ᛌ\":\"'\",\"𖽑\":\"'\",\"𖽒\":\"'\",\"᳓\":\"''\",\"\\\"\":\"''\",\"＂\":\"''\",\"“\":\"''\",\"”\":\"''\",\"‟\":\"''\",\"″\":\"''\",\"‶\":\"''\",\"〃\":\"''\",\"״\":\"''\",\"˝\":\"''\",\"ʺ\":\"''\",\"˶\":\"''\",\"ˮ\":\"''\",\"ײ\":\"''\",\"‴\":\"'''\",\"‷\":\"'''\",\"⁗\":\"''''\",\"Ɓ\":\"'B\",\"Ɗ\":\"'D\",\"ŉ\":\"'n\",\"Ƥ\":\"'P\",\"Ƭ\":\"'T\",\"Ƴ\":\"'Y\",\"［\":\"(\",\"❨\":\"(\",\"❲\":\"(\",\"〔\":\"(\",\"﴾\":\"(\",\"⸨\":\"((\",\"㈠\":\"(ー)\",\"⑵\":\"(2)\",\"⒇\":\"(2O)\",\"⑶\":\"(3)\",\"⑷\":\"(4)\",\"⑸\":\"(5)\",\"⑹\":\"(6)\",\"⑺\":\"(7)\",\"⑻\":\"(8)\",\"⑼\":\"(9)\",\"⒜\":\"(a)\",\"🄐\":\"(A)\",\"⒝\":\"(b)\",\"🄑\":\"(B)\",\"⒞\":\"(c)\",\"🄒\":\"(C)\",\"⒟\":\"(d)\",\"🄓\":\"(D)\",\"⒠\":\"(e)\",\"🄔\":\"(E)\",\"⒡\":\"(f)\",\"🄕\":\"(F)\",\"⒢\":\"(g)\",\"🄖\":\"(G)\",\"⒣\":\"(h)\",\"🄗\":\"(H)\",\"⒤\":\"(i)\",\"⒥\":\"(j)\",\"🄙\":\"(J)\",\"⒦\":\"(k)\",\"🄚\":\"(K)\",\"⑴\":\"(l)\",\"🄘\":\"(l)\",\"⒧\":\"(l)\",\"🄛\":\"(L)\",\"⑿\":\"(l2)\",\"⒀\":\"(l3)\",\"⒁\":\"(l4)\",\"⒂\":\"(l5)\",\"⒃\":\"(l6)\",\"⒄\":\"(l7)\",\"⒅\":\"(l8)\",\"⒆\":\"(l9)\",\"⑾\":\"(ll)\",\"⑽\":\"(lO)\",\"🄜\":\"(M)\",\"⒩\":\"(n)\",\"🄝\":\"(N)\",\"⒪\":\"(o)\",\"🄞\":\"(O)\",\"⒫\":\"(p)\",\"🄟\":\"(P)\",\"⒬\":\"(q)\",\"🄠\":\"(Q)\",\"⒭\":\"(r)\",\"🄡\":\"(R)\",\"⒨\":\"(rn)\",\"⒮\":\"(s)\",\"🄢\":\"(S)\",\"🄪\":\"(S)\",\"⒯\":\"(t)\",\"🄣\":\"(T)\",\"⒰\":\"(u)\",\"🄤\":\"(U)\",\"⒱\":\"(v)\",\"🄥\":\"(V)\",\"⒲\":\"(w)\",\"🄦\":\"(W)\",\"⒳\":\"(x)\",\"🄧\":\"(X)\",\"⒴\":\"(y)\",\"🄨\":\"(Y)\",\"⒵\":\"(z)\",\"🄩\":\"(Z)\",\"㈀\":\"(ᄀ)\",\"㈎\":\"(가)\",\"㈁\":\"(ᄂ)\",\"㈏\":\"(나)\",\"㈂\":\"(ᄃ)\",\"㈐\":\"(다)\",\"㈃\":\"(ᄅ)\",\"㈑\":\"(라)\",\"㈄\":\"(ᄆ)\",\"㈒\":\"(마)\",\"㈅\":\"(ᄇ)\",\"㈓\":\"(바)\",\"㈆\":\"(ᄉ)\",\"㈔\":\"(사)\",\"㈇\":\"(ᄋ)\",\"㈕\":\"(아)\",\"㈝\":\"(오전)\",\"㈞\":\"(오후)\",\"㈈\":\"(ᄌ)\",\"㈖\":\"(자)\",\"㈜\":\"(주)\",\"㈉\":\"(ᄎ)\",\"㈗\":\"(차)\",\"㈊\":\"(ᄏ)\",\"㈘\":\"(카)\",\"㈋\":\"(ᄐ)\",\"㈙\":\"(타)\",\"㈌\":\"(ᄑ)\",\"㈚\":\"(파)\",\"㈍\":\"(ᄒ)\",\"㈛\":\"(하)\",\"㈦\":\"(七)\",\"㈢\":\"(三)\",\"🉁\":\"(三)\",\"㈨\":\"(九)\",\"㈡\":\"(二)\",\"🉂\":\"(二)\",\"㈤\":\"(五)\",\"㈹\":\"(代)\",\"㈽\":\"(企)\",\"㉁\":\"(休)\",\"㈧\":\"(八)\",\"㈥\":\"(六)\",\"㈸\":\"(労)\",\"🉇\":\"(勝)\",\"㈩\":\"(十)\",\"㈿\":\"(協)\",\"㈴\":\"(名)\",\"㈺\":\"(呼)\",\"㈣\":\"(四)\",\"㈯\":\"(土)\",\"㈻\":\"(学)\",\"🉃\":\"(安)\",\"🉅\":\"(打)\",\"🉈\":\"(敗)\",\"㈰\":\"(日)\",\"㈪\":\"(月)\",\"㈲\":\"(有)\",\"㈭\":\"(木)\",\"🉀\":\"(本)\",\"㈱\":\"(株)\",\"㈬\":\"(水)\",\"㈫\":\"(火)\",\"🉄\":\"(点)\",\"㈵\":\"(特)\",\"🉆\":\"(盗)\",\"㈼\":\"(監)\",\"㈳\":\"(社)\",\"㈷\":\"(祝)\",\"㉀\":\"(祭)\",\"㉂\":\"(自)\",\"㉃\":\"(至)\",\"㈶\":\"(財)\",\"㈾\":\"(資)\",\"㈮\":\"(金)\",\"］\":\")\",\"❩\":\")\",\"❳\":\")\",\"〕\":\")\",\"﴿\":\")\",\"⸩\":\"))\",\"❴\":\"{\",\"𝄔\":\"{\",\"❵\":\"}\",\"〚\":\"⟦\",\"〛\":\"⟧\",\"⟨\":\"❬\",\"〈\":\"❬\",\"〈\":\"❬\",\"㇛\":\"❬\",\"く\":\"❬\",\"𡿨\":\"❬\",\"⟩\":\"❭\",\"〉\":\"❭\",\"〉\":\"❭\",\"＾\":\"︿\",\"⸿\":\"¶\",\"⁎\":\"*\",\"٭\":\"*\",\"∗\":\"*\",\"𐌟\":\"*\",\"᜵\":\"/\",\"⁁\":\"/\",\"∕\":\"/\",\"⁄\":\"/\",\"╱\":\"/\",\"⟋\":\"/\",\"⧸\":\"/\",\"𝈺\":\"/\",\"㇓\":\"/\",\"〳\":\"/\",\"Ⳇ\":\"/\",\"ノ\":\"/\",\"丿\":\"/\",\"⼃\":\"/\",\"⧶\":\"/̄\",\"⫽\":\"//\",\"⫻\":\"///\",\"＼\":\"\\\\\",\"﹨\":\"\\\\\",\"∖\":\"\\\\\",\"⟍\":\"\\\\\",\"⧵\":\"\\\\\",\"⧹\":\"\\\\\",\"𝈏\":\"\\\\\",\"𝈻\":\"\\\\\",\"㇔\":\"\\\\\",\"丶\":\"\\\\\",\"⼂\":\"\\\\\",\"⳹\":\"\\\\\\\\\",\"⑊\":\"\\\\\\\\\",\"⟈\":\"\\\\ᑕ\",\"ꝸ\":\"&\",\"૰\":\"॰\",\"𑂻\":\"॰\",\"𑇇\":\"॰\",\"⚬\":\"॰\",\"𑇛\":\"꣼\",\"៙\":\"๏\",\"៕\":\"๚\",\"៚\":\"๛\",\"༌\":\"་\",\"༎\":\"།།\",\"˄\":\"^\",\"ˆ\":\"^\",\"꙾\":\"ˇ\",\"˘\":\"ˇ\",\"‾\":\"ˉ\",\"﹉\":\"ˉ\",\"﹊\":\"ˉ\",\"﹋\":\"ˉ\",\"﹌\":\"ˉ\",\"¯\":\"ˉ\",\"￣\":\"ˉ\",\"▔\":\"ˉ\",\"ъ\":\"ˉb\",\"ꙑ\":\"ˉbi\",\"͵\":\"ˏ\",\"˻\":\"˪\",\"꜖\":\"˪\",\"꜔\":\"˫\",\"。\":\"˳\",\"⸰\":\"°\",\"˚\":\"°\",\"∘\":\"°\",\"○\":\"°\",\"◦\":\"°\",\"⍜\":\"°̲\",\"⍤\":\"°̈\",\"℃\":\"°C\",\"℉\":\"°F\",\"௵\":\"௳\",\"༛\":\"༚༚\",\"༟\":\"༚༝\",\"࿎\":\"༝༚\",\"༞\":\"༝༝\",\"Ⓒ\":\"©\",\"Ⓡ\":\"®\",\"Ⓟ\":\"℗\",\"𝈛\":\"⅄\",\"⯬\":\"↞\",\"⯭\":\"↟\",\"⯮\":\"↠\",\"⯯\":\"↡\",\"↵\":\"↲\",\"⥥\":\"⇃⇂\",\"⥯\":\"⇃ᛚ\",\"𝛛\":\"∂\",\"𝜕\":\"∂\",\"𝝏\":\"∂\",\"𝞉\":\"∂\",\"𝟃\":\"∂\",\"𞣌\":\"∂\",\"𞣍\":\"∂̵\",\"ð\":\"∂̵\",\"⌀\":\"∅\",\"𝛁\":\"∇\",\"𝛻\":\"∇\",\"𝜵\":\"∇\",\"𝝯\":\"∇\",\"𝞩\":\"∇\",\"𑢨\":\"∇\",\"⍢\":\"∇̈\",\"⍫\":\"∇̴\",\"█\":\"∎\",\"■\":\"∎\",\"⨿\":\"∐\",\"᛭\":\"+\",\"➕\":\"+\",\"𐊛\":\"+\",\"⨣\":\"+̂\",\"⨢\":\"+̊\",\"⨤\":\"+̃\",\"∔\":\"+̇\",\"⨥\":\"+̣\",\"⨦\":\"+̰\",\"⨧\":\"+₂\",\"➗\":\"÷\",\"‹\":\"<\",\"❮\":\"<\",\"˂\":\"<\",\"𝈶\":\"<\",\"ᐸ\":\"<\",\"ᚲ\":\"<\",\"⋖\":\"<·\",\"Ⲵ\":\"<·\",\"ᑅ\":\"<·\",\"≪\":\"<<\",\"⋘\":\"<<<\",\"᐀\":\"=\",\"⹀\":\"=\",\"゠\":\"=\",\"꓿\":\"=\",\"≚\":\"=̆\",\"≙\":\"=̂\",\"≗\":\"=̊\",\"≐\":\"=̇\",\"≑\":\"=̣̇\",\"⩮\":\"=⃰\",\"⩵\":\"==\",\"⩶\":\"===\",\"≞\":\"=ͫ\",\"›\":\">\",\"❯\":\">\",\"˃\":\">\",\"𝈷\":\">\",\"ᐳ\":\">\",\"𖼿\":\">\",\"ᑁ\":\">·\",\"⪥\":\"><\",\"≫\":\">>\",\"⨠\":\">>\",\"⋙\":\">>>\",\"⁓\":\"~\",\"˜\":\"~\",\"῀\":\"~\",\"∼\":\"~\",\"⍨\":\"~̈\",\"⸞\":\"~̇\",\"⩪\":\"~̇\",\"⸟\":\"~̣\",\"𞣈\":\"∠\",\"⋀\":\"∧\",\"∯\":\"∮∮\",\"∰\":\"∮∮∮\",\"⸫\":\"∴\",\"⸪\":\"∵\",\"⸬\":\"∷\",\"𑇞\":\"≈\",\"♎\":\"≏\",\"🝞\":\"≏\",\"≣\":\"≡\",\"⨃\":\"⊍\",\"⨄\":\"⊎\",\"𝈸\":\"⊏\",\"𝈹\":\"⊐\",\"⨅\":\"⊓\",\"⨆\":\"⊔\",\"⨂\":\"⊗\",\"⍟\":\"⊛\",\"🝱\":\"⊠\",\"🝕\":\"⊡\",\"◁\":\"⊲\",\"▷\":\"⊳\",\"⍣\":\"⋆̈\",\"︴\":\"⌇\",\"◠\":\"⌒\",\"⨽\":\"⌙\",\"⌥\":\"⌤\",\"⧇\":\"⌻\",\"◎\":\"⌾\",\"⦾\":\"⌾\",\"⧅\":\"⍂\",\"⦰\":\"⍉\",\"⏃\":\"⍋\",\"⏂\":\"⍎\",\"⏁\":\"⍕\",\"⏆\":\"⍭\",\"☸\":\"⎈\",\"︵\":\"⏜\",\"︶\":\"⏝\",\"︷\":\"⏞\",\"︸\":\"⏟\",\"︹\":\"⏠\",\"︺\":\"⏡\",\"▱\":\"⏥\",\"⏼\":\"⏻\",\"︱\":\"│\",\"｜\":\"│\",\"┃\":\"│\",\"┏\":\"┌\",\"┣\":\"├\",\"▐\":\"▌\",\"▗\":\"▖\",\"▝\":\"▘\",\"☐\":\"□\",\"￭\":\"▪\",\"▸\":\"▶\",\"►\":\"▶\",\"⳩\":\"☧\",\"🜊\":\"☩\",\"🌒\":\"☽\",\"🌙\":\"☽\",\"⏾\":\"☾\",\"🌘\":\"☾\",\"⧙\":\"⦚\",\"🜺\":\"⧟\",\"⨾\":\"⨟\",\"𐆠\":\"⳨\",\"♩\":\"𝅘𝅥\",\"♪\":\"𝅘𝅥𝅮\",\"⓪\":\"🄍\",\"↺\":\"🄎\",\"˙\":\"ॱ\",\"ൎ\":\"ॱ\",\"－\":\"ー\",\"—\":\"ー\",\"―\":\"ー\",\"─\":\"ー\",\"━\":\"ー\",\"㇐\":\"ー\",\"ꟷ\":\"ー\",\"ᅳ\":\"ー\",\"ㅡ\":\"ー\",\"一\":\"ー\",\"⼀\":\"ー\",\"ᆖ\":\"ーー\",\"ힹ\":\"ーᅡ\",\"ힺ\":\"ーᅥ\",\"ힻ\":\"ーᅥ丨\",\"ힼ\":\"ーᅩ\",\"ᆕ\":\"ーᅮ\",\"ᅴ\":\"ー丨\",\"ㅢ\":\"ー丨\",\"ᆗ\":\"ー丨ᅮ\",\"🄏\":\"$⃠\",\"₤\":\"£\",\"〒\":\"₸\",\"〶\":\"₸\",\"᭜\":\"᭐\",\"꧆\":\"꧐\",\"𑓑\":\"১\",\"೧\":\"౧\",\"ၥ\":\"၁\",\"①\":\"➀\",\"⑩\":\"➉\",\"⏨\":\"₁₀\",\"𝟐\":\"2\",\"𝟚\":\"2\",\"𝟤\":\"2\",\"𝟮\":\"2\",\"𝟸\":\"2\",\"🯲\":\"2\",\"Ꝛ\":\"2\",\"Ƨ\":\"2\",\"Ϩ\":\"2\",\"Ꙅ\":\"2\",\"ᒿ\":\"2\",\"ꛯ\":\"2\",\"ꧏ\":\"٢\",\"۲\":\"٢\",\"૨\":\"२\",\"𑓒\":\"২\",\"೨\":\"౨\",\"②\":\"➁\",\"ƻ\":\"2̵\",\"🄃\":\"2,\",\"⒉\":\"2.\",\"㏵\":\"22日\",\"㍮\":\"22点\",\"㏶\":\"23日\",\"㍯\":\"23点\",\"㏷\":\"24日\",\"㍰\":\"24点\",\"㏸\":\"25日\",\"㏹\":\"26日\",\"㏺\":\"27日\",\"㏻\":\"28日\",\"㏼\":\"29日\",\"㏴\":\"2l日\",\"㍭\":\"2l点\",\"⒛\":\"2O.\",\"㏳\":\"2O日\",\"㍬\":\"2O点\",\"෩\":\"෨ා\",\"෯\":\"෨ී\",\"㏡\":\"2日\",\"㋁\":\"2月\",\"㍚\":\"2点\",\"𝈆\":\"3\",\"𝟑\":\"3\",\"𝟛\":\"3\",\"𝟥\":\"3\",\"𝟯\":\"3\",\"𝟹\":\"3\",\"🯳\":\"3\",\"Ɜ\":\"3\",\"Ȝ\":\"3\",\"Ʒ\":\"3\",\"Ꝫ\":\"3\",\"Ⳍ\":\"3\",\"З\":\"3\",\"Ӡ\":\"3\",\"𖼻\":\"3\",\"𑣊\":\"3\",\"۳\":\"٣\",\"𞣉\":\"٣\",\"૩\":\"३\",\"③\":\"➂\",\"Ҙ\":\"3̦\",\"🄄\":\"3,\",\"⒊\":\"3.\",\"㏾\":\"3l日\",\"㏽\":\"3O日\",\"㏢\":\"3日\",\"㋂\":\"3月\",\"㍛\":\"3点\",\"𝟒\":\"4\",\"𝟜\":\"4\",\"𝟦\":\"4\",\"𝟰\":\"4\",\"𝟺\":\"4\",\"🯴\":\"4\",\"Ꮞ\":\"4\",\"𑢯\":\"4\",\"۴\":\"٤\",\"૪\":\"४\",\"④\":\"➃\",\"🄅\":\"4,\",\"⒋\":\"4.\",\"ᔰ\":\"4·\",\"㏣\":\"4日\",\"㋃\":\"4月\",\"㍜\":\"4点\",\"𝟓\":\"5\",\"𝟝\":\"5\",\"𝟧\":\"5\",\"𝟱\":\"5\",\"𝟻\":\"5\",\"🯵\":\"5\",\"Ƽ\":\"5\",\"𑢻\":\"5\",\"⑤\":\"➄\",\"🄆\":\"5,\",\"⒌\":\"5.\",\"㏤\":\"5日\",\"㋄\":\"5月\",\"㍝\":\"5点\",\"𝟔\":\"6\",\"𝟞\":\"6\",\"𝟨\":\"6\",\"𝟲\":\"6\",\"𝟼\":\"6\",\"🯶\":\"6\",\"Ⳓ\":\"6\",\"б\":\"6\",\"Ꮾ\":\"6\",\"𑣕\":\"6\",\"۶\":\"٦\",\"𑓖\":\"৬\",\"⑥\":\"➅\",\"🄇\":\"6,\",\"⒍\":\"6.\",\"㏥\":\"6日\",\"㋅\":\"6月\",\"㍞\":\"6点\",\"𝈒\":\"7\",\"𝟕\":\"7\",\"𝟟\":\"7\",\"𝟩\":\"7\",\"𝟳\":\"7\",\"𝟽\":\"7\",\"🯷\":\"7\",\"𐓒\":\"7\",\"𑣆\":\"7\",\"⑦\":\"➆\",\"🄈\":\"7,\",\"⒎\":\"7.\",\"㏦\":\"7日\",\"㋆\":\"7月\",\"㍟\":\"7点\",\"ଃ\":\"8\",\"৪\":\"8\",\"੪\":\"8\",\"𞣋\":\"8\",\"𝟖\":\"8\",\"𝟠\":\"8\",\"𝟪\":\"8\",\"𝟴\":\"8\",\"𝟾\":\"8\",\"🯸\":\"8\",\"ȣ\":\"8\",\"Ȣ\":\"8\",\"𐌚\":\"8\",\"૮\":\"८\",\"⑧\":\"➇\",\"🄉\":\"8,\",\"⒏\":\"8.\",\"㏧\":\"8日\",\"㋇\":\"8月\",\"㍠\":\"8点\",\"੧\":\"9\",\"୨\":\"9\",\"৭\":\"9\",\"൭\":\"9\",\"𝟗\":\"9\",\"𝟡\":\"9\",\"𝟫\":\"9\",\"𝟵\":\"9\",\"𝟿\":\"9\",\"🯹\":\"9\",\"Ꝯ\":\"9\",\"Ⳋ\":\"9\",\"𑣌\":\"9\",\"𑢬\":\"9\",\"𑣖\":\"9\",\"१\":\"٩\",\"𑣤\":\"٩\",\"۹\":\"٩\",\"೯\":\"౯\",\"⑨\":\"➈\",\"🄊\":\"9,\",\"⒐\":\"9.\",\"㏨\":\"9日\",\"㋈\":\"9月\",\"㍡\":\"9点\",\"⍺\":\"a\",\"ａ\":\"a\",\"𝐚\":\"a\",\"𝑎\":\"a\",\"𝒂\":\"a\",\"𝒶\":\"a\",\"𝓪\":\"a\",\"𝔞\":\"a\",\"𝕒\":\"a\",\"𝖆\":\"a\",\"𝖺\":\"a\",\"𝗮\":\"a\",\"𝘢\":\"a\",\"𝙖\":\"a\",\"𝚊\":\"a\",\"ɑ\":\"a\",\"α\":\"a\",\"𝛂\":\"a\",\"𝛼\":\"a\",\"𝜶\":\"a\",\"𝝰\":\"a\",\"𝞪\":\"a\",\"а\":\"a\",\"ⷶ\":\"ͣ\",\"Ａ\":\"A\",\"𝐀\":\"A\",\"𝐴\":\"A\",\"𝑨\":\"A\",\"𝒜\":\"A\",\"𝓐\":\"A\",\"𝔄\":\"A\",\"𝔸\":\"A\",\"𝕬\":\"A\",\"𝖠\":\"A\",\"𝗔\":\"A\",\"𝘈\":\"A\",\"𝘼\":\"A\",\"𝙰\":\"A\",\"Α\":\"A\",\"𝚨\":\"A\",\"𝛢\":\"A\",\"𝜜\":\"A\",\"𝝖\":\"A\",\"𝞐\":\"A\",\"А\":\"A\",\"Ꭺ\":\"A\",\"ᗅ\":\"A\",\"ꓮ\":\"A\",\"𖽀\":\"A\",\"𐊠\":\"A\",\"⍶\":\"a̲\",\"ǎ\":\"ă\",\"Ǎ\":\"Ă\",\"ȧ\":\"å\",\"Ȧ\":\"Å\",\"ẚ\":\"ả\",\"℀\":\"a/c\",\"℁\":\"a/s\",\"ꜳ\":\"aa\",\"Ꜳ\":\"AA\",\"æ\":\"ae\",\"ӕ\":\"ae\",\"Æ\":\"AE\",\"Ӕ\":\"AE\",\"ꜵ\":\"ao\",\"Ꜵ\":\"AO\",\"🜇\":\"AR\",\"ꜷ\":\"au\",\"Ꜷ\":\"AU\",\"ꜹ\":\"av\",\"ꜻ\":\"av\",\"Ꜹ\":\"AV\",\"Ꜻ\":\"AV\",\"ꜽ\":\"ay\",\"Ꜽ\":\"AY\",\"ꭺ\":\"ᴀ\",\"∀\":\"Ɐ\",\"𝈗\":\"Ɐ\",\"ᗄ\":\"Ɐ\",\"ꓯ\":\"Ɐ\",\"𐐟\":\"Ɒ\",\"𝐛\":\"b\",\"𝑏\":\"b\",\"𝒃\":\"b\",\"𝒷\":\"b\",\"𝓫\":\"b\",\"𝔟\":\"b\",\"𝕓\":\"b\",\"𝖇\":\"b\",\"𝖻\":\"b\",\"𝗯\":\"b\",\"𝘣\":\"b\",\"𝙗\":\"b\",\"𝚋\":\"b\",\"Ƅ\":\"b\",\"Ь\":\"b\",\"Ꮟ\":\"b\",\"ᑲ\":\"b\",\"ᖯ\":\"b\",\"Ｂ\":\"B\",\"ℬ\":\"B\",\"𝐁\":\"B\",\"𝐵\":\"B\",\"𝑩\":\"B\",\"𝓑\":\"B\",\"𝔅\":\"B\",\"𝔹\":\"B\",\"𝕭\":\"B\",\"𝖡\":\"B\",\"𝗕\":\"B\",\"𝘉\":\"B\",\"𝘽\":\"B\",\"𝙱\":\"B\",\"Ꞵ\":\"B\",\"Β\":\"B\",\"𝚩\":\"B\",\"𝛣\":\"B\",\"𝜝\":\"B\",\"𝝗\":\"B\",\"𝞑\":\"B\",\"В\":\"B\",\"Ᏼ\":\"B\",\"ᗷ\":\"B\",\"ꓐ\":\"B\",\"𐊂\":\"B\",\"𐊡\":\"B\",\"𐌁\":\"B\",\"ɓ\":\"b̔\",\"ᑳ\":\"ḃ\",\"ƃ\":\"b̄\",\"Ƃ\":\"b̄\",\"Б\":\"b̄\",\"ƀ\":\"b̵\",\"ҍ\":\"b̵\",\"Ҍ\":\"b̵\",\"ѣ\":\"b̵\",\"Ѣ\":\"b̵\",\"ᑿ\":\"b·\",\"ᒁ\":\"ḃ·\",\"ᒈ\":\"b'\",\"Ы\":\"bl\",\"в\":\"ʙ\",\"ᏼ\":\"ʙ\",\"ｃ\":\"c\",\"ⅽ\":\"c\",\"𝐜\":\"c\",\"𝑐\":\"c\",\"𝒄\":\"c\",\"𝒸\":\"c\",\"𝓬\":\"c\",\"𝔠\":\"c\",\"𝕔\":\"c\",\"𝖈\":\"c\",\"𝖼\":\"c\",\"𝗰\":\"c\",\"𝘤\":\"c\",\"𝙘\":\"c\",\"𝚌\":\"c\",\"ᴄ\":\"c\",\"ϲ\":\"c\",\"ⲥ\":\"c\",\"с\":\"c\",\"ꮯ\":\"c\",\"𐐽\":\"c\",\"ⷭ\":\"ͨ\",\"🝌\":\"C\",\"𑣲\":\"C\",\"𑣩\":\"C\",\"Ｃ\":\"C\",\"Ⅽ\":\"C\",\"ℂ\":\"C\",\"ℭ\":\"C\",\"𝐂\":\"C\",\"𝐶\":\"C\",\"𝑪\":\"C\",\"𝒞\":\"C\",\"𝓒\":\"C\",\"𝕮\":\"C\",\"𝖢\":\"C\",\"𝗖\":\"C\",\"𝘊\":\"C\",\"𝘾\":\"C\",\"𝙲\":\"C\",\"Ϲ\":\"C\",\"Ⲥ\":\"C\",\"С\":\"C\",\"Ꮯ\":\"C\",\"ꓚ\":\"C\",\"𐊢\":\"C\",\"𐌂\":\"C\",\"𐐕\":\"C\",\"𐔜\":\"C\",\"¢\":\"c̸\",\"ȼ\":\"c̸\",\"₡\":\"C⃫\",\"🅮\":\"C⃠\",\"ç\":\"c̦\",\"ҫ\":\"c̦\",\"Ç\":\"C̦\",\"Ҫ\":\"C̦\",\"Ƈ\":\"C'\",\"℅\":\"c/o\",\"℆\":\"c/u\",\"🅭\":\"㏄\\t⃝\",\"⋴\":\"ꞓ\",\"ɛ\":\"ꞓ\",\"ε\":\"ꞓ\",\"ϵ\":\"ꞓ\",\"𝛆\":\"ꞓ\",\"𝛜\":\"ꞓ\",\"𝜀\":\"ꞓ\",\"𝜖\":\"ꞓ\",\"𝜺\":\"ꞓ\",\"𝝐\":\"ꞓ\",\"𝝴\":\"ꞓ\",\"𝞊\":\"ꞓ\",\"𝞮\":\"ꞓ\",\"𝟄\":\"ꞓ\",\"ⲉ\":\"ꞓ\",\"є\":\"ꞓ\",\"ԑ\":\"ꞓ\",\"ꮛ\":\"ꞓ\",\"𑣎\":\"ꞓ\",\"𐐩\":\"ꞓ\",\"€\":\"Ꞓ\",\"Ⲉ\":\"Ꞓ\",\"Є\":\"Ꞓ\",\"⍷\":\"ꞓ̲\",\"ͽ\":\"ꜿ\",\"Ͽ\":\"Ꜿ\",\"ⅾ\":\"d\",\"ⅆ\":\"d\",\"𝐝\":\"d\",\"𝑑\":\"d\",\"𝒅\":\"d\",\"𝒹\":\"d\",\"𝓭\":\"d\",\"𝔡\":\"d\",\"𝕕\":\"d\",\"𝖉\":\"d\",\"𝖽\":\"d\",\"𝗱\":\"d\",\"𝘥\":\"d\",\"𝙙\":\"d\",\"𝚍\":\"d\",\"ԁ\":\"d\",\"Ꮷ\":\"d\",\"ᑯ\":\"d\",\"ꓒ\":\"d\",\"Ⅾ\":\"D\",\"ⅅ\":\"D\",\"𝐃\":\"D\",\"𝐷\":\"D\",\"𝑫\":\"D\",\"𝒟\":\"D\",\"𝓓\":\"D\",\"𝔇\":\"D\",\"𝔻\":\"D\",\"𝕯\":\"D\",\"𝖣\":\"D\",\"𝗗\":\"D\",\"𝘋\":\"D\",\"𝘿\":\"D\",\"𝙳\":\"D\",\"Ꭰ\":\"D\",\"ᗞ\":\"D\",\"ᗪ\":\"D\",\"ꓓ\":\"D\",\"ɗ\":\"d̔\",\"ɖ\":\"d̨\",\"ƌ\":\"d̄\",\"đ\":\"d̵\",\"Đ\":\"D̵\",\"Ð\":\"D̵\",\"Ɖ\":\"D̵\",\"₫\":\"ḏ̵\",\"ꝺ\":\"Ꝺ\",\"ᑻ\":\"d·\",\"ᒇ\":\"d'\",\"ʤ\":\"dȝ\",\"ǳ\":\"dz\",\"ʣ\":\"dz\",\"ǲ\":\"Dz\",\"Ǳ\":\"DZ\",\"ǆ\":\"dž\",\"ǅ\":\"Dž\",\"Ǆ\":\"DŽ\",\"ʥ\":\"dʑ\",\"ꭰ\":\"ᴅ\",\"⸹\":\"ẟ\",\"δ\":\"ẟ\",\"𝛅\":\"ẟ\",\"𝛿\":\"ẟ\",\"𝜹\":\"ẟ\",\"𝝳\":\"ẟ\",\"𝞭\":\"ẟ\",\"ծ\":\"ẟ\",\"ᕷ\":\"ẟ\",\"℮\":\"e\",\"ｅ\":\"e\",\"ℯ\":\"e\",\"ⅇ\":\"e\",\"𝐞\":\"e\",\"𝑒\":\"e\",\"𝒆\":\"e\",\"𝓮\":\"e\",\"𝔢\":\"e\",\"𝕖\":\"e\",\"𝖊\":\"e\",\"𝖾\":\"e\",\"𝗲\":\"e\",\"𝘦\":\"e\",\"𝙚\":\"e\",\"𝚎\":\"e\",\"ꬲ\":\"e\",\"е\":\"e\",\"ҽ\":\"e\",\"ⷷ\":\"ͤ\",\"⋿\":\"E\",\"Ｅ\":\"E\",\"ℰ\":\"E\",\"𝐄\":\"E\",\"𝐸\":\"E\",\"𝑬\":\"E\",\"𝓔\":\"E\",\"𝔈\":\"E\",\"𝔼\":\"E\",\"𝕰\":\"E\",\"𝖤\":\"E\",\"𝗘\":\"E\",\"𝘌\":\"E\",\"𝙀\":\"E\",\"𝙴\":\"E\",\"Ε\":\"E\",\"𝚬\":\"E\",\"𝛦\":\"E\",\"𝜠\":\"E\",\"𝝚\":\"E\",\"𝞔\":\"E\",\"Е\":\"E\",\"ⴹ\":\"E\",\"Ꭼ\":\"E\",\"ꓰ\":\"E\",\"𑢦\":\"E\",\"𑢮\":\"E\",\"𐊆\":\"E\",\"ě\":\"ĕ\",\"Ě\":\"Ĕ\",\"ɇ\":\"e̸\",\"Ɇ\":\"E̸\",\"ҿ\":\"ę\",\"ꭼ\":\"ᴇ\",\"ə\":\"ǝ\",\"ә\":\"ǝ\",\"∃\":\"Ǝ\",\"ⴺ\":\"Ǝ\",\"ꓱ\":\"Ǝ\",\"ɚ\":\"ǝ˞\",\"ᴔ\":\"ǝo\",\"ꭁ\":\"ǝo̸\",\"ꭂ\":\"ǝo̵\",\"Ә\":\"Ə\",\"𝈡\":\"Ɛ\",\"ℇ\":\"Ɛ\",\"Ԑ\":\"Ɛ\",\"Ꮛ\":\"Ɛ\",\"𖼭\":\"Ɛ\",\"𐐁\":\"Ɛ\",\"ᶟ\":\"ᵋ\",\"ᴈ\":\"ɜ\",\"з\":\"ɜ\",\"ҙ\":\"ɜ̦\",\"𐑂\":\"ɞ\",\"ꞝ\":\"ʚ\",\"𐐪\":\"ʚ\",\"𝐟\":\"f\",\"𝑓\":\"f\",\"𝒇\":\"f\",\"𝒻\":\"f\",\"𝓯\":\"f\",\"𝔣\":\"f\",\"𝕗\":\"f\",\"𝖋\":\"f\",\"𝖿\":\"f\",\"𝗳\":\"f\",\"𝘧\":\"f\",\"𝙛\":\"f\",\"𝚏\":\"f\",\"ꬵ\":\"f\",\"ꞙ\":\"f\",\"ſ\":\"f\",\"ẝ\":\"f\",\"ք\":\"f\",\"𝈓\":\"F\",\"ℱ\":\"F\",\"𝐅\":\"F\",\"𝐹\":\"F\",\"𝑭\":\"F\",\"𝓕\":\"F\",\"𝔉\":\"F\",\"𝔽\":\"F\",\"𝕱\":\"F\",\"𝖥\":\"F\",\"𝗙\":\"F\",\"𝘍\":\"F\",\"𝙁\":\"F\",\"𝙵\":\"F\",\"Ꞙ\":\"F\",\"Ϝ\":\"F\",\"𝟊\":\"F\",\"ᖴ\":\"F\",\"ꓝ\":\"F\",\"𑣂\":\"F\",\"𑢢\":\"F\",\"𐊇\":\"F\",\"𐊥\":\"F\",\"𐔥\":\"F\",\"ƒ\":\"f̦\",\"Ƒ\":\"F̦\",\"ᵮ\":\"f̴\",\"℻\":\"FAX\",\"ﬀ\":\"ff\",\"ﬃ\":\"ffi\",\"ﬄ\":\"ffl\",\"ﬁ\":\"fi\",\"ﬂ\":\"fl\",\"ʩ\":\"fŋ\",\"ᖵ\":\"Ⅎ\",\"ꓞ\":\"Ⅎ\",\"𝈰\":\"ꟻ\",\"ᖷ\":\"ꟻ\",\"ｇ\":\"g\",\"ℊ\":\"g\",\"𝐠\":\"g\",\"𝑔\":\"g\",\"𝒈\":\"g\",\"𝓰\":\"g\",\"𝔤\":\"g\",\"𝕘\":\"g\",\"𝖌\":\"g\",\"𝗀\":\"g\",\"𝗴\":\"g\",\"𝘨\":\"g\",\"𝙜\":\"g\",\"𝚐\":\"g\",\"ɡ\":\"g\",\"ᶃ\":\"g\",\"ƍ\":\"g\",\"ց\":\"g\",\"𝐆\":\"G\",\"𝐺\":\"G\",\"𝑮\":\"G\",\"𝒢\":\"G\",\"𝓖\":\"G\",\"𝔊\":\"G\",\"𝔾\":\"G\",\"𝕲\":\"G\",\"𝖦\":\"G\",\"𝗚\":\"G\",\"𝘎\":\"G\",\"𝙂\":\"G\",\"𝙶\":\"G\",\"Ԍ\":\"G\",\"Ꮐ\":\"G\",\"Ᏻ\":\"G\",\"ꓖ\":\"G\",\"ᶢ\":\"ᵍ\",\"ɠ\":\"g̔\",\"ǧ\":\"ğ\",\"Ǧ\":\"Ğ\",\"ǵ\":\"ģ\",\"ǥ\":\"g̵\",\"Ǥ\":\"G̵\",\"Ɠ\":\"G'\",\"ԍ\":\"ɢ\",\"ꮐ\":\"ɢ\",\"ᏻ\":\"ɢ\",\"ｈ\":\"h\",\"ℎ\":\"h\",\"𝐡\":\"h\",\"𝒉\":\"h\",\"𝒽\":\"h\",\"𝓱\":\"h\",\"𝔥\":\"h\",\"𝕙\":\"h\",\"𝖍\":\"h\",\"𝗁\":\"h\",\"𝗵\":\"h\",\"𝘩\":\"h\",\"𝙝\":\"h\",\"𝚑\":\"h\",\"һ\":\"h\",\"հ\":\"h\",\"Ꮒ\":\"h\",\"Ｈ\":\"H\",\"ℋ\":\"H\",\"ℌ\":\"H\",\"ℍ\":\"H\",\"𝐇\":\"H\",\"𝐻\":\"H\",\"𝑯\":\"H\",\"𝓗\":\"H\",\"𝕳\":\"H\",\"𝖧\":\"H\",\"𝗛\":\"H\",\"𝘏\":\"H\",\"𝙃\":\"H\",\"𝙷\":\"H\",\"Η\":\"H\",\"𝚮\":\"H\",\"𝛨\":\"H\",\"𝜢\":\"H\",\"𝝜\":\"H\",\"𝞖\":\"H\",\"Ⲏ\":\"H\",\"Н\":\"H\",\"Ꮋ\":\"H\",\"ᕼ\":\"H\",\"ꓧ\":\"H\",\"𐋏\":\"H\",\"ᵸ\":\"ᴴ\",\"ɦ\":\"h̔\",\"ꚕ\":\"h̔\",\"Ᏺ\":\"h̔\",\"Ⱨ\":\"H̩\",\"Ң\":\"H̩\",\"ħ\":\"h̵\",\"ℏ\":\"h̵\",\"ћ\":\"h̵\",\"Ħ\":\"H̵\",\"Ӊ\":\"H̦\",\"Ӈ\":\"H̦\",\"н\":\"ʜ\",\"ꮋ\":\"ʜ\",\"ң\":\"ʜ̩\",\"ӊ\":\"ʜ̦\",\"ӈ\":\"ʜ̦\",\"Ԋ\":\"Ƕ\",\"ꮀ\":\"ⱶ\",\"Ͱ\":\"Ⱶ\",\"Ꭸ\":\"Ⱶ\",\"Ꮀ\":\"Ⱶ\",\"ꚱ\":\"Ⱶ\",\"ꞕ\":\"ꜧ\",\"˛\":\"i\",\"⍳\":\"i\",\"ｉ\":\"i\",\"ⅰ\":\"i\",\"ℹ\":\"i\",\"ⅈ\":\"i\",\"𝐢\":\"i\",\"𝑖\":\"i\",\"𝒊\":\"i\",\"𝒾\":\"i\",\"𝓲\":\"i\",\"𝔦\":\"i\",\"𝕚\":\"i\",\"𝖎\":\"i\",\"𝗂\":\"i\",\"𝗶\":\"i\",\"𝘪\":\"i\",\"𝙞\":\"i\",\"𝚒\":\"i\",\"ı\":\"i\",\"𝚤\":\"i\",\"ɪ\":\"i\",\"ɩ\":\"i\",\"ι\":\"i\",\"ι\":\"i\",\"ͺ\":\"i\",\"𝛊\":\"i\",\"𝜄\":\"i\",\"𝜾\":\"i\",\"𝝸\":\"i\",\"𝞲\":\"i\",\"і\":\"i\",\"ꙇ\":\"i\",\"ӏ\":\"i\",\"ꭵ\":\"i\",\"Ꭵ\":\"i\",\"𑣃\":\"i\",\"ⓛ\":\"Ⓘ\",\"⍸\":\"i̲\",\"ǐ\":\"ĭ\",\"Ǐ\":\"Ĭ\",\"ɨ\":\"i̵\",\"ᵻ\":\"i̵\",\"ᵼ\":\"i̵\",\"ⅱ\":\"ii\",\"ⅲ\":\"iii\",\"ĳ\":\"ij\",\"ⅳ\":\"iv\",\"ⅸ\":\"ix\",\"ｊ\":\"j\",\"ⅉ\":\"j\",\"𝐣\":\"j\",\"𝑗\":\"j\",\"𝒋\":\"j\",\"𝒿\":\"j\",\"𝓳\":\"j\",\"𝔧\":\"j\",\"𝕛\":\"j\",\"𝖏\":\"j\",\"𝗃\":\"j\",\"𝗷\":\"j\",\"𝘫\":\"j\",\"𝙟\":\"j\",\"𝚓\":\"j\",\"ϳ\":\"j\",\"ј\":\"j\",\"Ｊ\":\"J\",\"𝐉\":\"J\",\"𝐽\":\"J\",\"𝑱\":\"J\",\"𝒥\":\"J\",\"𝓙\":\"J\",\"𝔍\":\"J\",\"𝕁\":\"J\",\"𝕵\":\"J\",\"𝖩\":\"J\",\"𝗝\":\"J\",\"𝘑\":\"J\",\"𝙅\":\"J\",\"𝙹\":\"J\",\"Ʝ\":\"J\",\"Ϳ\":\"J\",\"Ј\":\"J\",\"Ꭻ\":\"J\",\"ᒍ\":\"J\",\"ꓙ\":\"J\",\"ɉ\":\"j̵\",\"Ɉ\":\"J̵\",\"ᒙ\":\"J·\",\"𝚥\":\"ȷ\",\"յ\":\"ȷ\",\"ꭻ\":\"ᴊ\",\"𝐤\":\"k\",\"𝑘\":\"k\",\"𝒌\":\"k\",\"𝓀\":\"k\",\"𝓴\":\"k\",\"𝔨\":\"k\",\"𝕜\":\"k\",\"𝖐\":\"k\",\"𝗄\":\"k\",\"𝗸\":\"k\",\"𝘬\":\"k\",\"𝙠\":\"k\",\"𝚔\":\"k\",\"K\":\"K\",\"Ｋ\":\"K\",\"𝐊\":\"K\",\"𝐾\":\"K\",\"𝑲\":\"K\",\"𝒦\":\"K\",\"𝓚\":\"K\",\"𝔎\":\"K\",\"𝕂\":\"K\",\"𝕶\":\"K\",\"𝖪\":\"K\",\"𝗞\":\"K\",\"𝘒\":\"K\",\"𝙆\":\"K\",\"𝙺\":\"K\",\"Κ\":\"K\",\"𝚱\":\"K\",\"𝛫\":\"K\",\"𝜥\":\"K\",\"𝝟\":\"K\",\"𝞙\":\"K\",\"Ⲕ\":\"K\",\"К\":\"K\",\"Ꮶ\":\"K\",\"ᛕ\":\"K\",\"ꓗ\":\"K\",\"𐔘\":\"K\",\"ƙ\":\"k̔\",\"Ⱪ\":\"K̩\",\"Қ\":\"K̩\",\"₭\":\"K̵\",\"Ꝁ\":\"K̵\",\"Ҟ\":\"K̵\",\"Ƙ\":\"K'\",\"׀\":\"l\",\"|\":\"l\",\"∣\":\"l\",\"⏽\":\"l\",\"￨\":\"l\",\"١\":\"l\",\"۱\":\"l\",\"𐌠\":\"l\",\"𞣇\":\"l\",\"𝟏\":\"l\",\"𝟙\":\"l\",\"𝟣\":\"l\",\"𝟭\":\"l\",\"𝟷\":\"l\",\"🯱\":\"l\",\"I\":\"l\",\"Ｉ\":\"l\",\"Ⅰ\":\"l\",\"ℐ\":\"l\",\"ℑ\":\"l\",\"𝐈\":\"l\",\"𝐼\":\"l\",\"𝑰\":\"l\",\"𝓘\":\"l\",\"𝕀\":\"l\",\"𝕴\":\"l\",\"𝖨\":\"l\",\"𝗜\":\"l\",\"𝘐\":\"l\",\"𝙄\":\"l\",\"𝙸\":\"l\",\"Ɩ\":\"l\",\"ｌ\":\"l\",\"ⅼ\":\"l\",\"ℓ\":\"l\",\"𝐥\":\"l\",\"𝑙\":\"l\",\"𝒍\":\"l\",\"𝓁\":\"l\",\"𝓵\":\"l\",\"𝔩\":\"l\",\"𝕝\":\"l\",\"𝖑\":\"l\",\"𝗅\":\"l\",\"𝗹\":\"l\",\"𝘭\":\"l\",\"𝙡\":\"l\",\"𝚕\":\"l\",\"ǀ\":\"l\",\"Ι\":\"l\",\"𝚰\":\"l\",\"𝛪\":\"l\",\"𝜤\":\"l\",\"𝝞\":\"l\",\"𝞘\":\"l\",\"Ⲓ\":\"l\",\"І\":\"l\",\"Ӏ\":\"l\",\"ו\":\"l\",\"ן\":\"l\",\"ا\":\"l\",\"𞸀\":\"l\",\"𞺀\":\"l\",\"ﺎ\":\"l\",\"ﺍ\":\"l\",\"ߊ\":\"l\",\"ⵏ\":\"l\",\"ᛁ\":\"l\",\"ꓲ\":\"l\",\"𖼨\":\"l\",\"𐊊\":\"l\",\"𐌉\":\"l\",\"𝈪\":\"L\",\"Ⅼ\":\"L\",\"ℒ\":\"L\",\"𝐋\":\"L\",\"𝐿\":\"L\",\"𝑳\":\"L\",\"𝓛\":\"L\",\"𝔏\":\"L\",\"𝕃\":\"L\",\"𝕷\":\"L\",\"𝖫\":\"L\",\"𝗟\":\"L\",\"𝘓\":\"L\",\"𝙇\":\"L\",\"𝙻\":\"L\",\"Ⳑ\":\"L\",\"Ꮮ\":\"L\",\"ᒪ\":\"L\",\"ꓡ\":\"L\",\"𖼖\":\"L\",\"𑢣\":\"L\",\"𑢲\":\"L\",\"𐐛\":\"L\",\"𐔦\":\"L\",\"ﴼ\":\"l̋\",\"ﴽ\":\"l̋\",\"ł\":\"l̸\",\"Ł\":\"L̸\",\"ɭ\":\"l̨\",\"Ɨ\":\"l̵\",\"ƚ\":\"l̵\",\"ɫ\":\"l̴\",\"إ\":\"lٕ\",\"ﺈ\":\"lٕ\",\"ﺇ\":\"lٕ\",\"ٳ\":\"lٕ\",\"ŀ\":\"l·\",\"Ŀ\":\"l·\",\"ᒷ\":\"l·\",\"🄂\":\"l,\",\"⒈\":\"l.\",\"ױ\":\"l'\",\"⒓\":\"l2.\",\"㏫\":\"l2日\",\"㋋\":\"l2月\",\"㍤\":\"l2点\",\"⒔\":\"l3.\",\"㏬\":\"l3日\",\"㍥\":\"l3点\",\"⒕\":\"l4.\",\"㏭\":\"l4日\",\"㍦\":\"l4点\",\"⒖\":\"l5.\",\"㏮\":\"l5日\",\"㍧\":\"l5点\",\"⒗\":\"l6.\",\"㏯\":\"l6日\",\"㍨\":\"l6点\",\"⒘\":\"l7.\",\"㏰\":\"l7日\",\"㍩\":\"l7点\",\"⒙\":\"l8.\",\"㏱\":\"l8日\",\"㍪\":\"l8点\",\"⒚\":\"l9.\",\"㏲\":\"l9日\",\"㍫\":\"l9点\",\"ǉ\":\"lj\",\"Ĳ\":\"lJ\",\"ǈ\":\"Lj\",\"Ǉ\":\"LJ\",\"‖\":\"ll\",\"∥\":\"ll\",\"Ⅱ\":\"ll\",\"ǁ\":\"ll\",\"װ\":\"ll\",\"𐆙\":\"l̵l̵\",\"⒒\":\"ll.\",\"Ⅲ\":\"lll\",\"𐆘\":\"l̵l̵S̵\",\"㏪\":\"ll日\",\"㋊\":\"ll月\",\"㍣\":\"ll点\",\"Ю\":\"lO\",\"⒑\":\"lO.\",\"㏩\":\"lO日\",\"㋉\":\"lO月\",\"㍢\":\"lO点\",\"ʪ\":\"ls\",\"₶\":\"lt\",\"Ⅳ\":\"lV\",\"Ⅸ\":\"lX\",\"ɮ\":\"lȝ\",\"ʫ\":\"lz\",\"أ\":\"lٴ\",\"ﺄ\":\"lٴ\",\"ﺃ\":\"lٴ\",\"ٲ\":\"lٴ\",\"ٵ\":\"lٴ\",\"ﷳ\":\"lكبر\",\"ﷲ\":\"lللّٰo\",\"㏠\":\"l日\",\"㋀\":\"l月\",\"㍙\":\"l点\",\"ⳑ\":\"ʟ\",\"ꮮ\":\"ʟ\",\"𐑃\":\"ʟ\",\"Ｍ\":\"M\",\"Ⅿ\":\"M\",\"ℳ\":\"M\",\"𝐌\":\"M\",\"𝑀\":\"M\",\"𝑴\":\"M\",\"𝓜\":\"M\",\"𝔐\":\"M\",\"𝕄\":\"M\",\"𝕸\":\"M\",\"𝖬\":\"M\",\"𝗠\":\"M\",\"𝘔\":\"M\",\"𝙈\":\"M\",\"𝙼\":\"M\",\"Μ\":\"M\",\"𝚳\":\"M\",\"𝛭\":\"M\",\"𝜧\":\"M\",\"𝝡\":\"M\",\"𝞛\":\"M\",\"Ϻ\":\"M\",\"Ⲙ\":\"M\",\"М\":\"M\",\"Ꮇ\":\"M\",\"ᗰ\":\"M\",\"ᛖ\":\"M\",\"ꓟ\":\"M\",\"𐊰\":\"M\",\"𐌑\":\"M\",\"Ӎ\":\"M̦\",\"🝫\":\"MB\",\"ⷨ\":\"ᷟ\",\"𝐧\":\"n\",\"𝑛\":\"n\",\"𝒏\":\"n\",\"𝓃\":\"n\",\"𝓷\":\"n\",\"𝔫\":\"n\",\"𝕟\":\"n\",\"𝖓\":\"n\",\"𝗇\":\"n\",\"𝗻\":\"n\",\"𝘯\":\"n\",\"𝙣\":\"n\",\"𝚗\":\"n\",\"ո\":\"n\",\"ռ\":\"n\",\"Ｎ\":\"N\",\"ℕ\":\"N\",\"𝐍\":\"N\",\"𝑁\":\"N\",\"𝑵\":\"N\",\"𝒩\":\"N\",\"𝓝\":\"N\",\"𝔑\":\"N\",\"𝕹\":\"N\",\"𝖭\":\"N\",\"𝗡\":\"N\",\"𝘕\":\"N\",\"𝙉\":\"N\",\"𝙽\":\"N\",\"Ν\":\"N\",\"𝚴\":\"N\",\"𝛮\":\"N\",\"𝜨\":\"N\",\"𝝢\":\"N\",\"𝞜\":\"N\",\"Ⲛ\":\"N\",\"ꓠ\":\"N\",\"𐔓\":\"N\",\"𐆎\":\"N̊\",\"ɳ\":\"n̨\",\"ƞ\":\"n̩\",\"η\":\"n̩\",\"𝛈\":\"n̩\",\"𝜂\":\"n̩\",\"𝜼\":\"n̩\",\"𝝶\":\"n̩\",\"𝞰\":\"n̩\",\"Ɲ\":\"N̦\",\"ᵰ\":\"n̴\",\"ǌ\":\"nj\",\"ǋ\":\"Nj\",\"Ǌ\":\"NJ\",\"№\":\"No\",\"ͷ\":\"ᴎ\",\"и\":\"ᴎ\",\"𐑍\":\"ᴎ\",\"ņ\":\"ɲ\",\"ం\":\"o\",\"ಂ\":\"o\",\"ം\":\"o\",\"ං\":\"o\",\"०\":\"o\",\"੦\":\"o\",\"૦\":\"o\",\"௦\":\"o\",\"౦\":\"o\",\"೦\":\"o\",\"൦\":\"o\",\"๐\":\"o\",\"໐\":\"o\",\"၀\":\"o\",\"٥\":\"o\",\"۵\":\"o\",\"ｏ\":\"o\",\"ℴ\":\"o\",\"𝐨\":\"o\",\"𝑜\":\"o\",\"𝒐\":\"o\",\"𝓸\":\"o\",\"𝔬\":\"o\",\"𝕠\":\"o\",\"𝖔\":\"o\",\"𝗈\":\"o\",\"𝗼\":\"o\",\"𝘰\":\"o\",\"𝙤\":\"o\",\"𝚘\":\"o\",\"ᴏ\":\"o\",\"ᴑ\":\"o\",\"ꬽ\":\"o\",\"ο\":\"o\",\"𝛐\":\"o\",\"𝜊\":\"o\",\"𝝄\":\"o\",\"𝝾\":\"o\",\"𝞸\":\"o\",\"σ\":\"o\",\"𝛔\":\"o\",\"𝜎\":\"o\",\"𝝈\":\"o\",\"𝞂\":\"o\",\"𝞼\":\"o\",\"ⲟ\":\"o\",\"о\":\"o\",\"ჿ\":\"o\",\"օ\":\"o\",\"ס\":\"o\",\"ه\":\"o\",\"𞸤\":\"o\",\"𞹤\":\"o\",\"𞺄\":\"o\",\"ﻫ\":\"o\",\"ﻬ\":\"o\",\"ﻪ\":\"o\",\"ﻩ\":\"o\",\"ھ\":\"o\",\"ﮬ\":\"o\",\"ﮭ\":\"o\",\"ﮫ\":\"o\",\"ﮪ\":\"o\",\"ہ\":\"o\",\"ﮨ\":\"o\",\"ﮩ\":\"o\",\"ﮧ\":\"o\",\"ﮦ\":\"o\",\"ە\":\"o\",\"ഠ\":\"o\",\"ဝ\":\"o\",\"𐓪\":\"o\",\"𑣈\":\"o\",\"𑣗\":\"o\",\"𐐬\":\"o\",\"߀\":\"O\",\"০\":\"O\",\"୦\":\"O\",\"〇\":\"O\",\"𑓐\":\"O\",\"𑣠\":\"O\",\"𝟎\":\"O\",\"𝟘\":\"O\",\"𝟢\":\"O\",\"𝟬\":\"O\",\"𝟶\":\"O\",\"🯰\":\"O\",\"Ｏ\":\"O\",\"𝐎\":\"O\",\"𝑂\":\"O\",\"𝑶\":\"O\",\"𝒪\":\"O\",\"𝓞\":\"O\",\"𝔒\":\"O\",\"𝕆\":\"O\",\"𝕺\":\"O\",\"𝖮\":\"O\",\"𝗢\":\"O\",\"𝘖\":\"O\",\"𝙊\":\"O\",\"𝙾\":\"O\",\"Ο\":\"O\",\"𝚶\":\"O\",\"𝛰\":\"O\",\"𝜪\":\"O\",\"𝝤\":\"O\",\"𝞞\":\"O\",\"Ⲟ\":\"O\",\"О\":\"O\",\"Օ\":\"O\",\"ⵔ\":\"O\",\"ዐ\":\"O\",\"ଠ\":\"O\",\"𐓂\":\"O\",\"ꓳ\":\"O\",\"𑢵\":\"O\",\"𐊒\":\"O\",\"𐊫\":\"O\",\"𐐄\":\"O\",\"𐔖\":\"O\",\"⁰\":\"º\",\"ᵒ\":\"º\",\"ǒ\":\"ŏ\",\"Ǒ\":\"Ŏ\",\"ۿ\":\"ô\",\"Ő\":\"Ö\",\"ø\":\"o̸\",\"ꬾ\":\"o̸\",\"Ø\":\"O̸\",\"ⵁ\":\"O̸\",\"Ǿ\":\"Ó̸\",\"ɵ\":\"o̵\",\"ꝋ\":\"o̵\",\"ө\":\"o̵\",\"ѳ\":\"o̵\",\"ꮎ\":\"o̵\",\"ꮻ\":\"o̵\",\"⊖\":\"O̵\",\"⊝\":\"O̵\",\"⍬\":\"O̵\",\"𝈚\":\"O̵\",\"🜔\":\"O̵\",\"Ɵ\":\"O̵\",\"Ꝋ\":\"O̵\",\"θ\":\"O̵\",\"ϑ\":\"O̵\",\"𝛉\":\"O̵\",\"𝛝\":\"O̵\",\"𝜃\":\"O̵\",\"𝜗\":\"O̵\",\"𝜽\":\"O̵\",\"𝝑\":\"O̵\",\"𝝷\":\"O̵\",\"𝞋\":\"O̵\",\"𝞱\":\"O̵\",\"𝟅\":\"O̵\",\"Θ\":\"O̵\",\"ϴ\":\"O̵\",\"𝚯\":\"O̵\",\"𝚹\":\"O̵\",\"𝛩\":\"O̵\",\"𝛳\":\"O̵\",\"𝜣\":\"O̵\",\"𝜭\":\"O̵\",\"𝝝\":\"O̵\",\"𝝧\":\"O̵\",\"𝞗\":\"O̵\",\"𝞡\":\"O̵\",\"Ө\":\"O̵\",\"Ѳ\":\"O̵\",\"ⴱ\":\"O̵\",\"Ꮎ\":\"O̵\",\"Ꮻ\":\"O̵\",\"ꭴ\":\"ơ\",\"ﳙ\":\"oٰ\",\"🄁\":\"O,\",\"🄀\":\"O.\",\"ơ\":\"o'\",\"Ơ\":\"O'\",\"Ꭴ\":\"O'\",\"%\":\"º/₀\",\"٪\":\"º/₀\",\"⁒\":\"º/₀\",\"‰\":\"º/₀₀\",\"؉\":\"º/₀₀\",\"‱\":\"º/₀₀₀\",\"؊\":\"º/₀₀₀\",\"œ\":\"oe\",\"Œ\":\"OE\",\"ɶ\":\"oᴇ\",\"∞\":\"oo\",\"ꝏ\":\"oo\",\"ꚙ\":\"oo\",\"Ꝏ\":\"OO\",\"Ꚙ\":\"OO\",\"ﳗ\":\"oج\",\"ﱑ\":\"oج\",\"ﳘ\":\"oم\",\"ﱒ\":\"oم\",\"ﶓ\":\"oمج\",\"ﶔ\":\"oمم\",\"ﱓ\":\"oى\",\"ﱔ\":\"oى\",\"ൟ\":\"oരo\",\"တ\":\"oာ\",\"㍘\":\"O点\",\"ↄ\":\"ɔ\",\"ᴐ\":\"ɔ\",\"ͻ\":\"ɔ\",\"𐑋\":\"ɔ\",\"Ↄ\":\"Ɔ\",\"Ͻ\":\"Ɔ\",\"ꓛ\":\"Ɔ\",\"𐐣\":\"Ɔ\",\"ꬿ\":\"ɔ̸\",\"ꭢ\":\"ɔe\",\"𐐿\":\"ɷ\",\"⍴\":\"p\",\"ｐ\":\"p\",\"𝐩\":\"p\",\"𝑝\":\"p\",\"𝒑\":\"p\",\"𝓅\":\"p\",\"𝓹\":\"p\",\"𝔭\":\"p\",\"𝕡\":\"p\",\"𝖕\":\"p\",\"𝗉\":\"p\",\"𝗽\":\"p\",\"𝘱\":\"p\",\"𝙥\":\"p\",\"𝚙\":\"p\",\"ρ\":\"p\",\"ϱ\":\"p\",\"𝛒\":\"p\",\"𝛠\":\"p\",\"𝜌\":\"p\",\"𝜚\":\"p\",\"𝝆\":\"p\",\"𝝔\":\"p\",\"𝞀\":\"p\",\"𝞎\":\"p\",\"𝞺\":\"p\",\"𝟈\":\"p\",\"ⲣ\":\"p\",\"р\":\"p\",\"Ｐ\":\"P\",\"ℙ\":\"P\",\"𝐏\":\"P\",\"𝑃\":\"P\",\"𝑷\":\"P\",\"𝒫\":\"P\",\"𝓟\":\"P\",\"𝔓\":\"P\",\"𝕻\":\"P\",\"𝖯\":\"P\",\"𝗣\":\"P\",\"𝘗\":\"P\",\"𝙋\":\"P\",\"𝙿\":\"P\",\"Ρ\":\"P\",\"𝚸\":\"P\",\"𝛲\":\"P\",\"𝜬\":\"P\",\"𝝦\":\"P\",\"𝞠\":\"P\",\"Ⲣ\":\"P\",\"Р\":\"P\",\"Ꮲ\":\"P\",\"ᑭ\":\"P\",\"ꓑ\":\"P\",\"𐊕\":\"P\",\"ƥ\":\"p̔\",\"ᵽ\":\"p̵\",\"ᑷ\":\"p·\",\"ᒆ\":\"P'\",\"ᴩ\":\"ᴘ\",\"ꮲ\":\"ᴘ\",\"φ\":\"ɸ\",\"ϕ\":\"ɸ\",\"𝛗\":\"ɸ\",\"𝛟\":\"ɸ\",\"𝜑\":\"ɸ\",\"𝜙\":\"ɸ\",\"𝝋\":\"ɸ\",\"𝝓\":\"ɸ\",\"𝞅\":\"ɸ\",\"𝞍\":\"ɸ\",\"𝞿\":\"ɸ\",\"𝟇\":\"ɸ\",\"ⲫ\":\"ɸ\",\"ф\":\"ɸ\",\"𝐪\":\"q\",\"𝑞\":\"q\",\"𝒒\":\"q\",\"𝓆\":\"q\",\"𝓺\":\"q\",\"𝔮\":\"q\",\"𝕢\":\"q\",\"𝖖\":\"q\",\"𝗊\":\"q\",\"𝗾\":\"q\",\"𝘲\":\"q\",\"𝙦\":\"q\",\"𝚚\":\"q\",\"ԛ\":\"q\",\"գ\":\"q\",\"զ\":\"q\",\"ℚ\":\"Q\",\"𝐐\":\"Q\",\"𝑄\":\"Q\",\"𝑸\":\"Q\",\"𝒬\":\"Q\",\"𝓠\":\"Q\",\"𝔔\":\"Q\",\"𝕼\":\"Q\",\"𝖰\":\"Q\",\"𝗤\":\"Q\",\"𝘘\":\"Q\",\"𝙌\":\"Q\",\"𝚀\":\"Q\",\"ⵕ\":\"Q\",\"ʠ\":\"q̔\",\"🜀\":\"QE\",\"ᶐ\":\"ɋ\",\"ᴋ\":\"ĸ\",\"κ\":\"ĸ\",\"ϰ\":\"ĸ\",\"𝛋\":\"ĸ\",\"𝛞\":\"ĸ\",\"𝜅\":\"ĸ\",\"𝜘\":\"ĸ\",\"𝜿\":\"ĸ\",\"𝝒\":\"ĸ\",\"𝝹\":\"ĸ\",\"𝞌\":\"ĸ\",\"𝞳\":\"ĸ\",\"𝟆\":\"ĸ\",\"ⲕ\":\"ĸ\",\"к\":\"ĸ\",\"ꮶ\":\"ĸ\",\"қ\":\"ĸ̩\",\"ҟ\":\"ĸ̵\",\"𝐫\":\"r\",\"𝑟\":\"r\",\"𝒓\":\"r\",\"𝓇\":\"r\",\"𝓻\":\"r\",\"𝔯\":\"r\",\"𝕣\":\"r\",\"𝖗\":\"r\",\"𝗋\":\"r\",\"𝗿\":\"r\",\"𝘳\":\"r\",\"𝙧\":\"r\",\"𝚛\":\"r\",\"ꭇ\":\"r\",\"ꭈ\":\"r\",\"ᴦ\":\"r\",\"ⲅ\":\"r\",\"г\":\"r\",\"ꮁ\":\"r\",\"𝈖\":\"R\",\"ℛ\":\"R\",\"ℜ\":\"R\",\"ℝ\":\"R\",\"𝐑\":\"R\",\"𝑅\":\"R\",\"𝑹\":\"R\",\"𝓡\":\"R\",\"𝕽\":\"R\",\"𝖱\":\"R\",\"𝗥\":\"R\",\"𝘙\":\"R\",\"𝙍\":\"R\",\"𝚁\":\"R\",\"Ʀ\":\"R\",\"Ꭱ\":\"R\",\"Ꮢ\":\"R\",\"𐒴\":\"R\",\"ᖇ\":\"R\",\"ꓣ\":\"R\",\"𖼵\":\"R\",\"ɽ\":\"r̨\",\"ɼ\":\"r̩\",\"ɍ\":\"r̵\",\"ғ\":\"r̵\",\"ᵲ\":\"r̴\",\"ґ\":\"r'\",\"𑣣\":\"rn\",\"m\":\"rn\",\"ⅿ\":\"rn\",\"𝐦\":\"rn\",\"𝑚\":\"rn\",\"𝒎\":\"rn\",\"𝓂\":\"rn\",\"𝓶\":\"rn\",\"𝔪\":\"rn\",\"𝕞\":\"rn\",\"𝖒\":\"rn\",\"𝗆\":\"rn\",\"𝗺\":\"rn\",\"𝘮\":\"rn\",\"𝙢\":\"rn\",\"𝚖\":\"rn\",\"𑜀\":\"rn\",\"₥\":\"rn̸\",\"ɱ\":\"rn̦\",\"ᵯ\":\"rn̴\",\"₨\":\"Rs\",\"ꭱ\":\"ʀ\",\"ꮢ\":\"ʀ\",\"я\":\"ᴙ\",\"ᵳ\":\"ɾ̴\",\"℩\":\"ɿ\",\"ｓ\":\"s\",\"𝐬\":\"s\",\"𝑠\":\"s\",\"𝒔\":\"s\",\"𝓈\":\"s\",\"𝓼\":\"s\",\"𝔰\":\"s\",\"𝕤\":\"s\",\"𝖘\":\"s\",\"𝗌\":\"s\",\"𝘀\":\"s\",\"𝘴\":\"s\",\"𝙨\":\"s\",\"𝚜\":\"s\",\"ꜱ\":\"s\",\"ƽ\":\"s\",\"ѕ\":\"s\",\"ꮪ\":\"s\",\"𑣁\":\"s\",\"𐑈\":\"s\",\"Ｓ\":\"S\",\"𝐒\":\"S\",\"𝑆\":\"S\",\"𝑺\":\"S\",\"𝒮\":\"S\",\"𝓢\":\"S\",\"𝔖\":\"S\",\"𝕊\":\"S\",\"𝕾\":\"S\",\"𝖲\":\"S\",\"𝗦\":\"S\",\"𝘚\":\"S\",\"𝙎\":\"S\",\"𝚂\":\"S\",\"Ѕ\":\"S\",\"Տ\":\"S\",\"Ꮥ\":\"S\",\"Ꮪ\":\"S\",\"ꓢ\":\"S\",\"𖼺\":\"S\",\"𐊖\":\"S\",\"𐐠\":\"S\",\"ʂ\":\"s̨\",\"ᵴ\":\"s̴\",\"ꞵ\":\"ß\",\"β\":\"ß\",\"ϐ\":\"ß\",\"𝛃\":\"ß\",\"𝛽\":\"ß\",\"𝜷\":\"ß\",\"𝝱\":\"ß\",\"𝞫\":\"ß\",\"Ᏸ\":\"ß\",\"🝜\":\"sss\",\"ﬆ\":\"st\",\"∫\":\"ʃ\",\"ꭍ\":\"ʃ\",\"∑\":\"Ʃ\",\"⅀\":\"Ʃ\",\"Σ\":\"Ʃ\",\"𝚺\":\"Ʃ\",\"𝛴\":\"Ʃ\",\"𝜮\":\"Ʃ\",\"𝝨\":\"Ʃ\",\"𝞢\":\"Ʃ\",\"ⵉ\":\"Ʃ\",\"∬\":\"ʃʃ\",\"∭\":\"ʃʃʃ\",\"⨌\":\"ʃʃʃʃ\",\"𝐭\":\"t\",\"𝑡\":\"t\",\"𝒕\":\"t\",\"𝓉\":\"t\",\"𝓽\":\"t\",\"𝔱\":\"t\",\"𝕥\":\"t\",\"𝖙\":\"t\",\"𝗍\":\"t\",\"𝘁\":\"t\",\"𝘵\":\"t\",\"𝙩\":\"t\",\"𝚝\":\"t\",\"⊤\":\"T\",\"⟙\":\"T\",\"🝨\":\"T\",\"Ｔ\":\"T\",\"𝐓\":\"T\",\"𝑇\":\"T\",\"𝑻\":\"T\",\"𝒯\":\"T\",\"𝓣\":\"T\",\"𝔗\":\"T\",\"𝕋\":\"T\",\"𝕿\":\"T\",\"𝖳\":\"T\",\"𝗧\":\"T\",\"𝘛\":\"T\",\"𝙏\":\"T\",\"𝚃\":\"T\",\"Τ\":\"T\",\"𝚻\":\"T\",\"𝛵\":\"T\",\"𝜯\":\"T\",\"𝝩\":\"T\",\"𝞣\":\"T\",\"Ⲧ\":\"T\",\"Т\":\"T\",\"Ꭲ\":\"T\",\"ꓔ\":\"T\",\"𖼊\":\"T\",\"𑢼\":\"T\",\"𐊗\":\"T\",\"𐊱\":\"T\",\"𐌕\":\"T\",\"ƭ\":\"t̔\",\"⍡\":\"T̈\",\"Ⱦ\":\"T̸\",\"Ț\":\"Ţ\",\"Ʈ\":\"T̨\",\"Ҭ\":\"T̩\",\"₮\":\"T⃫\",\"ŧ\":\"t̵\",\"Ŧ\":\"T̵\",\"ᵵ\":\"t̴\",\"Ⴀ\":\"Ꞇ\",\"Ꜩ\":\"T3\",\"ʨ\":\"tɕ\",\"℡\":\"TEL\",\"ꝷ\":\"tf\",\"ʦ\":\"ts\",\"ʧ\":\"tʃ\",\"ꜩ\":\"tȝ\",\"τ\":\"ᴛ\",\"𝛕\":\"ᴛ\",\"𝜏\":\"ᴛ\",\"𝝉\":\"ᴛ\",\"𝞃\":\"ᴛ\",\"𝞽\":\"ᴛ\",\"т\":\"ᴛ\",\"ꭲ\":\"ᴛ\",\"ҭ\":\"ᴛ̩\",\"ţ\":\"ƫ\",\"ț\":\"ƫ\",\"Ꮏ\":\"ƫ\",\"𝐮\":\"u\",\"𝑢\":\"u\",\"𝒖\":\"u\",\"𝓊\":\"u\",\"𝓾\":\"u\",\"𝔲\":\"u\",\"𝕦\":\"u\",\"𝖚\":\"u\",\"𝗎\":\"u\",\"𝘂\":\"u\",\"𝘶\":\"u\",\"𝙪\":\"u\",\"𝚞\":\"u\",\"ꞟ\":\"u\",\"ᴜ\":\"u\",\"ꭎ\":\"u\",\"ꭒ\":\"u\",\"ʋ\":\"u\",\"υ\":\"u\",\"𝛖\":\"u\",\"𝜐\":\"u\",\"𝝊\":\"u\",\"𝞄\":\"u\",\"𝞾\":\"u\",\"ս\":\"u\",\"𐓶\":\"u\",\"𑣘\":\"u\",\"∪\":\"U\",\"⋃\":\"U\",\"𝐔\":\"U\",\"𝑈\":\"U\",\"𝑼\":\"U\",\"𝒰\":\"U\",\"𝓤\":\"U\",\"𝔘\":\"U\",\"𝕌\":\"U\",\"𝖀\":\"U\",\"𝖴\":\"U\",\"𝗨\":\"U\",\"𝘜\":\"U\",\"𝙐\":\"U\",\"𝚄\":\"U\",\"Ս\":\"U\",\"ሀ\":\"U\",\"𐓎\":\"U\",\"ᑌ\":\"U\",\"ꓴ\":\"U\",\"𖽂\":\"U\",\"𑢸\":\"U\",\"ǔ\":\"ŭ\",\"Ǔ\":\"Ŭ\",\"ᵾ\":\"u̵\",\"ꮜ\":\"u̵\",\"Ʉ\":\"U̵\",\"Ꮜ\":\"U̵\",\"ᑘ\":\"U·\",\"ᑧ\":\"U'\",\"ᵫ\":\"ue\",\"ꭣ\":\"uo\",\"ṃ\":\"ꭑ\",\"պ\":\"ɰ\",\"ሣ\":\"ɰ\",\"℧\":\"Ʊ\",\"ᘮ\":\"Ʊ\",\"ᘴ\":\"Ʊ\",\"ᵿ\":\"ʊ̵\",\"∨\":\"v\",\"⋁\":\"v\",\"ｖ\":\"v\",\"ⅴ\":\"v\",\"𝐯\":\"v\",\"𝑣\":\"v\",\"𝒗\":\"v\",\"𝓋\":\"v\",\"𝓿\":\"v\",\"𝔳\":\"v\",\"𝕧\":\"v\",\"𝖛\":\"v\",\"𝗏\":\"v\",\"𝘃\":\"v\",\"𝘷\":\"v\",\"𝙫\":\"v\",\"𝚟\":\"v\",\"ᴠ\":\"v\",\"ν\":\"v\",\"𝛎\":\"v\",\"𝜈\":\"v\",\"𝝂\":\"v\",\"𝝼\":\"v\",\"𝞶\":\"v\",\"ѵ\":\"v\",\"ט\":\"v\",\"𑜆\":\"v\",\"ꮩ\":\"v\",\"𑣀\":\"v\",\"𝈍\":\"V\",\"٧\":\"V\",\"۷\":\"V\",\"Ⅴ\":\"V\",\"𝐕\":\"V\",\"𝑉\":\"V\",\"𝑽\":\"V\",\"𝒱\":\"V\",\"𝓥\":\"V\",\"𝔙\":\"V\",\"𝕍\":\"V\",\"𝖁\":\"V\",\"𝖵\":\"V\",\"𝗩\":\"V\",\"𝘝\":\"V\",\"𝙑\":\"V\",\"𝚅\":\"V\",\"Ѵ\":\"V\",\"ⴸ\":\"V\",\"Ꮩ\":\"V\",\"ᐯ\":\"V\",\"ꛟ\":\"V\",\"ꓦ\":\"V\",\"𖼈\":\"V\",\"𑢠\":\"V\",\"𐔝\":\"V\",\"𐆗\":\"V̵\",\"ᐻ\":\"V·\",\"🝬\":\"VB\",\"ⅵ\":\"vi\",\"ⅶ\":\"vii\",\"ⅷ\":\"viii\",\"Ⅵ\":\"Vl\",\"Ⅶ\":\"Vll\",\"Ⅷ\":\"Vlll\",\"🜈\":\"Vᷤ\",\"ᴧ\":\"ʌ\",\"𐓘\":\"ʌ\",\"٨\":\"Ʌ\",\"۸\":\"Ʌ\",\"Λ\":\"Ʌ\",\"𝚲\":\"Ʌ\",\"𝛬\":\"Ʌ\",\"𝜦\":\"Ʌ\",\"𝝠\":\"Ʌ\",\"𝞚\":\"Ʌ\",\"Л\":\"Ʌ\",\"ⴷ\":\"Ʌ\",\"𐒰\":\"Ʌ\",\"ᐱ\":\"Ʌ\",\"ꛎ\":\"Ʌ\",\"ꓥ\":\"Ʌ\",\"𖼽\":\"Ʌ\",\"𐊍\":\"Ʌ\",\"Ӆ\":\"Ʌ̦\",\"ᐽ\":\"Ʌ·\",\"ɯ\":\"w\",\"𝐰\":\"w\",\"𝑤\":\"w\",\"𝒘\":\"w\",\"𝓌\":\"w\",\"𝔀\":\"w\",\"𝔴\":\"w\",\"𝕨\":\"w\",\"𝖜\":\"w\",\"𝗐\":\"w\",\"𝘄\":\"w\",\"𝘸\":\"w\",\"𝙬\":\"w\",\"𝚠\":\"w\",\"ᴡ\":\"w\",\"ѡ\":\"w\",\"ԝ\":\"w\",\"ա\":\"w\",\"𑜊\":\"w\",\"𑜎\":\"w\",\"𑜏\":\"w\",\"ꮃ\":\"w\",\"𑣯\":\"W\",\"𑣦\":\"W\",\"𝐖\":\"W\",\"𝑊\":\"W\",\"𝑾\":\"W\",\"𝒲\":\"W\",\"𝓦\":\"W\",\"𝔚\":\"W\",\"𝕎\":\"W\",\"𝖂\":\"W\",\"𝖶\":\"W\",\"𝗪\":\"W\",\"𝘞\":\"W\",\"𝙒\":\"W\",\"𝚆\":\"W\",\"Ԝ\":\"W\",\"Ꮃ\":\"W\",\"Ꮤ\":\"W\",\"ꓪ\":\"W\",\"ѽ\":\"w҆҇\",\"𑓅\":\"ẇ\",\"₩\":\"W̵\",\"ꝡ\":\"w̦\",\"ᴍ\":\"ʍ\",\"м\":\"ʍ\",\"ꮇ\":\"ʍ\",\"ӎ\":\"ʍ̦\",\"᙮\":\"x\",\"×\":\"x\",\"⤫\":\"x\",\"⤬\":\"x\",\"⨯\":\"x\",\"ｘ\":\"x\",\"ⅹ\":\"x\",\"𝐱\":\"x\",\"𝑥\":\"x\",\"𝒙\":\"x\",\"𝓍\":\"x\",\"𝔁\":\"x\",\"𝔵\":\"x\",\"𝕩\":\"x\",\"𝖝\":\"x\",\"𝗑\":\"x\",\"𝘅\":\"x\",\"𝘹\":\"x\",\"𝙭\":\"x\",\"𝚡\":\"x\",\"х\":\"x\",\"ᕁ\":\"x\",\"ᕽ\":\"x\",\"ⷯ\":\"ͯ\",\"᙭\":\"X\",\"╳\":\"X\",\"𐌢\":\"X\",\"𑣬\":\"X\",\"Ｘ\":\"X\",\"Ⅹ\":\"X\",\"𝐗\":\"X\",\"𝑋\":\"X\",\"𝑿\":\"X\",\"𝒳\":\"X\",\"𝓧\":\"X\",\"𝔛\":\"X\",\"𝕏\":\"X\",\"𝖃\":\"X\",\"𝖷\":\"X\",\"𝗫\":\"X\",\"𝘟\":\"X\",\"𝙓\":\"X\",\"𝚇\":\"X\",\"Ꭓ\":\"X\",\"Χ\":\"X\",\"𝚾\":\"X\",\"𝛸\":\"X\",\"𝜲\":\"X\",\"𝝬\":\"X\",\"𝞦\":\"X\",\"Ⲭ\":\"X\",\"Х\":\"X\",\"ⵝ\":\"X\",\"ᚷ\":\"X\",\"ꓫ\":\"X\",\"𐊐\":\"X\",\"𐊴\":\"X\",\"𐌗\":\"X\",\"𐔧\":\"X\",\"⨰\":\"ẋ\",\"Ҳ\":\"X̩\",\"𐆖\":\"X̵\",\"ⅺ\":\"xi\",\"ⅻ\":\"xii\",\"Ⅺ\":\"Xl\",\"Ⅻ\":\"Xll\",\"ɣ\":\"y\",\"ᶌ\":\"y\",\"ｙ\":\"y\",\"𝐲\":\"y\",\"𝑦\":\"y\",\"𝒚\":\"y\",\"𝓎\":\"y\",\"𝔂\":\"y\",\"𝔶\":\"y\",\"𝕪\":\"y\",\"𝖞\":\"y\",\"𝗒\":\"y\",\"𝘆\":\"y\",\"𝘺\":\"y\",\"𝙮\":\"y\",\"𝚢\":\"y\",\"ʏ\":\"y\",\"ỿ\":\"y\",\"ꭚ\":\"y\",\"γ\":\"y\",\"ℽ\":\"y\",\"𝛄\":\"y\",\"𝛾\":\"y\",\"𝜸\":\"y\",\"𝝲\":\"y\",\"𝞬\":\"y\",\"у\":\"y\",\"ү\":\"y\",\"ყ\":\"y\",\"𑣜\":\"y\",\"Ｙ\":\"Y\",\"𝐘\":\"Y\",\"𝑌\":\"Y\",\"𝒀\":\"Y\",\"𝒴\":\"Y\",\"𝓨\":\"Y\",\"𝔜\":\"Y\",\"𝕐\":\"Y\",\"𝖄\":\"Y\",\"𝖸\":\"Y\",\"𝗬\":\"Y\",\"𝘠\":\"Y\",\"𝙔\":\"Y\",\"𝚈\":\"Y\",\"Υ\":\"Y\",\"ϒ\":\"Y\",\"𝚼\":\"Y\",\"𝛶\":\"Y\",\"𝜰\":\"Y\",\"𝝪\":\"Y\",\"𝞤\":\"Y\",\"Ⲩ\":\"Y\",\"У\":\"Y\",\"Ү\":\"Y\",\"Ꭹ\":\"Y\",\"Ꮍ\":\"Y\",\"ꓬ\":\"Y\",\"𖽃\":\"Y\",\"𑢤\":\"Y\",\"𐊲\":\"Y\",\"ƴ\":\"y̔\",\"ɏ\":\"y̵\",\"ұ\":\"y̵\",\"¥\":\"Y̵\",\"Ɏ\":\"Y̵\",\"Ұ\":\"Y̵\",\"ʒ\":\"ȝ\",\"ꝫ\":\"ȝ\",\"ⳍ\":\"ȝ\",\"ӡ\":\"ȝ\",\"ჳ\":\"ȝ\",\"𝐳\":\"z\",\"𝑧\":\"z\",\"𝒛\":\"z\",\"𝓏\":\"z\",\"𝔃\":\"z\",\"𝔷\":\"z\",\"𝕫\":\"z\",\"𝖟\":\"z\",\"𝗓\":\"z\",\"𝘇\":\"z\",\"𝘻\":\"z\",\"𝙯\":\"z\",\"𝚣\":\"z\",\"ᴢ\":\"z\",\"ꮓ\":\"z\",\"𑣄\":\"z\",\"𐋵\":\"Z\",\"𑣥\":\"Z\",\"Ｚ\":\"Z\",\"ℤ\":\"Z\",\"ℨ\":\"Z\",\"𝐙\":\"Z\",\"𝑍\":\"Z\",\"𝒁\":\"Z\",\"𝒵\":\"Z\",\"𝓩\":\"Z\",\"𝖅\":\"Z\",\"𝖹\":\"Z\",\"𝗭\":\"Z\",\"𝘡\":\"Z\",\"𝙕\":\"Z\",\"𝚉\":\"Z\",\"Ζ\":\"Z\",\"𝚭\":\"Z\",\"𝛧\":\"Z\",\"𝜡\":\"Z\",\"𝝛\":\"Z\",\"𝞕\":\"Z\",\"Ꮓ\":\"Z\",\"ꓜ\":\"Z\",\"𑢩\":\"Z\",\"ʐ\":\"z̨\",\"ƶ\":\"z̵\",\"Ƶ\":\"Z̵\",\"ȥ\":\"z̦\",\"Ȥ\":\"Z̦\",\"ᵶ\":\"z̴\",\"ƿ\":\"þ\",\"ϸ\":\"þ\",\"Ϸ\":\"Þ\",\"𐓄\":\"Þ\",\"⁹\":\"ꝰ\",\"ᴤ\":\"ƨ\",\"ϩ\":\"ƨ\",\"ꙅ\":\"ƨ\",\"ь\":\"ƅ\",\"ꮟ\":\"ƅ\",\"ы\":\"ƅi\",\"ꭾ\":\"ɂ\",\"ˤ\":\"ˁ\",\"ꛍ\":\"ʡ\",\"⊙\":\"ʘ\",\"☉\":\"ʘ\",\"⨀\":\"ʘ\",\"Ꙩ\":\"ʘ\",\"ⵙ\":\"ʘ\",\"𐓃\":\"ʘ\",\"ℾ\":\"Γ\",\"𝚪\":\"Γ\",\"𝛤\":\"Γ\",\"𝜞\":\"Γ\",\"𝝘\":\"Γ\",\"𝞒\":\"Γ\",\"Ⲅ\":\"Γ\",\"Г\":\"Γ\",\"Ꮁ\":\"Γ\",\"ᒥ\":\"Γ\",\"𖼇\":\"Γ\",\"Ғ\":\"Γ̵\",\"ᒯ\":\"Γ·\",\"Ґ\":\"Γ'\",\"∆\":\"Δ\",\"△\":\"Δ\",\"🜂\":\"Δ\",\"𝚫\":\"Δ\",\"𝛥\":\"Δ\",\"𝜟\":\"Δ\",\"𝝙\":\"Δ\",\"𝞓\":\"Δ\",\"Ⲇ\":\"Δ\",\"ⵠ\":\"Δ\",\"ᐃ\":\"Δ\",\"𖼚\":\"Δ\",\"𐊅\":\"Δ\",\"𐊣\":\"Δ\",\"⍙\":\"Δ̲\",\"ᐏ\":\"Δ·\",\"ᐬ\":\"Δᐠ\",\"𝟋\":\"ϝ\",\"𝛇\":\"ζ\",\"𝜁\":\"ζ\",\"𝜻\":\"ζ\",\"𝝵\":\"ζ\",\"𝞯\":\"ζ\",\"ⳤ\":\"ϗ\",\"𝛌\":\"λ\",\"𝜆\":\"λ\",\"𝝀\":\"λ\",\"𝝺\":\"λ\",\"𝞴\":\"λ\",\"Ⲗ\":\"λ\",\"𐓛\":\"λ\",\"µ\":\"μ\",\"𝛍\":\"μ\",\"𝜇\":\"μ\",\"𝝁\":\"μ\",\"𝝻\":\"μ\",\"𝞵\":\"μ\",\"𝛏\":\"ξ\",\"𝜉\":\"ξ\",\"𝝃\":\"ξ\",\"𝝽\":\"ξ\",\"𝞷\":\"ξ\",\"𝚵\":\"Ξ\",\"𝛯\":\"Ξ\",\"𝜩\":\"Ξ\",\"𝝣\":\"Ξ\",\"𝞝\":\"Ξ\",\"ϖ\":\"π\",\"ℼ\":\"π\",\"𝛑\":\"π\",\"𝛡\":\"π\",\"𝜋\":\"π\",\"𝜛\":\"π\",\"𝝅\":\"π\",\"𝝕\":\"π\",\"𝝿\":\"π\",\"𝞏\":\"π\",\"𝞹\":\"π\",\"𝟉\":\"π\",\"ᴨ\":\"π\",\"п\":\"π\",\"∏\":\"Π\",\"ℿ\":\"Π\",\"𝚷\":\"Π\",\"𝛱\":\"Π\",\"𝜫\":\"Π\",\"𝝥\":\"Π\",\"𝞟\":\"Π\",\"Ⲡ\":\"Π\",\"П\":\"Π\",\"ꛛ\":\"Π\",\"𐊭\":\"Ϙ\",\"𐌒\":\"Ϙ\",\"ϛ\":\"ς\",\"𝛓\":\"ς\",\"𝜍\":\"ς\",\"𝝇\":\"ς\",\"𝞁\":\"ς\",\"𝞻\":\"ς\",\"𝚽\":\"Φ\",\"𝛷\":\"Φ\",\"𝜱\":\"Φ\",\"𝝫\":\"Φ\",\"𝞥\":\"Φ\",\"Ⲫ\":\"Φ\",\"Ф\":\"Φ\",\"Փ\":\"Φ\",\"ቀ\":\"Φ\",\"ᛰ\":\"Φ\",\"𐊳\":\"Φ\",\"ꭓ\":\"χ\",\"ꭕ\":\"χ\",\"𝛘\":\"χ\",\"𝜒\":\"χ\",\"𝝌\":\"χ\",\"𝞆\":\"χ\",\"𝟀\":\"χ\",\"ⲭ\":\"χ\",\"𝛙\":\"ψ\",\"𝜓\":\"ψ\",\"𝝍\":\"ψ\",\"𝞇\":\"ψ\",\"𝟁\":\"ψ\",\"ѱ\":\"ψ\",\"𐓹\":\"ψ\",\"𝚿\":\"Ψ\",\"𝛹\":\"Ψ\",\"𝜳\":\"Ψ\",\"𝝭\":\"Ψ\",\"𝞧\":\"Ψ\",\"Ⲯ\":\"Ψ\",\"Ѱ\":\"Ψ\",\"𐓑\":\"Ψ\",\"ᛘ\":\"Ψ\",\"𐊵\":\"Ψ\",\"⍵\":\"ω\",\"ꞷ\":\"ω\",\"𝛚\":\"ω\",\"𝜔\":\"ω\",\"𝝎\":\"ω\",\"𝞈\":\"ω\",\"𝟂\":\"ω\",\"ⲱ\":\"ω\",\"ꙍ\":\"ω\",\"Ω\":\"Ω\",\"𝛀\":\"Ω\",\"𝛺\":\"Ω\",\"𝜴\":\"Ω\",\"𝝮\":\"Ω\",\"𝞨\":\"Ω\",\"ᘯ\":\"Ω\",\"ᘵ\":\"Ω\",\"𐊶\":\"Ω\",\"⍹\":\"ω̲\",\"ώ\":\"ῴ\",\"☰\":\"Ⲷ\",\"Ⳝ\":\"Ϭ\",\"җ\":\"ж̩\",\"Җ\":\"Ж̩\",\"𝈋\":\"И\",\"Ͷ\":\"И\",\"ꚡ\":\"И\",\"𐐥\":\"И\",\"Й\":\"Ѝ\",\"Ҋ\":\"Ѝ̦\",\"ѝ\":\"й\",\"ҋ\":\"й̦\",\"𐒼\":\"Ӄ\",\"ᴫ\":\"л\",\"ӆ\":\"л̦\",\"ꭠ\":\"љ\",\"𐓫\":\"ꙩ\",\"ᷮ\":\"ⷬ\",\"𐓍\":\"Ћ\",\"𝈂\":\"Ӿ\",\"𝈢\":\"Ѡ\",\"Ꮗ\":\"Ѡ\",\"ᗯ\":\"Ѡ\",\"Ѽ\":\"Ѡ҆҇\",\"ᣭ\":\"Ѡ·\",\"Ꞷ\":\"Ꙍ\",\"ӌ\":\"ҷ\",\"Ӌ\":\"Ҷ\",\"Ҿ\":\"Ҽ̨\",\"ⲽ\":\"ш\",\"Ⲽ\":\"Ш\",\"Ꙑ\":\"Ъl\",\"℈\":\"Э\",\"🜁\":\"Ꙙ\",\"𖼜\":\"Ꙙ\",\"ꦒ\":\"ⰿ\",\"և\":\"եւ\",\"ኔ\":\"ձ\",\"ﬔ\":\"մե\",\"ﬕ\":\"մի\",\"ﬗ\":\"մխ\",\"ﬓ\":\"մն\",\"∩\":\"Ո\",\"⋂\":\"Ո\",\"𝉅\":\"Ո\",\"በ\":\"Ո\",\"ᑎ\":\"Ո\",\"ꓵ\":\"Ո\",\"ᑚ\":\"Ո·\",\"ᑨ\":\"Ո'\",\"ﬖ\":\"վն\",\"₽\":\"Ք\",\"˓\":\"ՙ\",\"ʿ\":\"ՙ\",\"ℵ\":\"א\",\"ﬡ\":\"א\",\"אָ\":\"אַ\",\"אּ\":\"אַ\",\"ﭏ\":\"אל\",\"ℶ\":\"ב\",\"ℷ\":\"ג\",\"ℸ\":\"ד\",\"ﬢ\":\"ד\",\"ﬣ\":\"ה\",\"יּ\":\"יִ\",\"ﬤ\":\"כ\",\"ﬥ\":\"ל\",\"ﬦ\":\"ם\",\"ﬠ\":\"ע\",\"ﬧ\":\"ר\",\"שׂ\":\"שׁ\",\"שּ\":\"שׁ\",\"שּׂ\":\"שּׁ\",\"ﬨ\":\"ת\",\"ﺀ\":\"ء\",\"۽\":\"ء͈\",\"ﺂ\":\"آ\",\"ﺁ\":\"آ\",\"ﭑ\":\"ٱ\",\"ﭐ\":\"ٱ\",\"𞸁\":\"ب\",\"𞸡\":\"ب\",\"𞹡\":\"ب\",\"𞺁\":\"ب\",\"𞺡\":\"ب\",\"ﺑ\":\"ب\",\"ﺒ\":\"ب\",\"ﺐ\":\"ب\",\"ﺏ\":\"ب\",\"ݑ\":\"بۛ\",\"ࢶ\":\"بۢ\",\"ࢡ\":\"بٔ\",\"ﲠ\":\"بo\",\"ﳢ\":\"بo\",\"ﲜ\":\"بج\",\"ﰅ\":\"بج\",\"ﲝ\":\"بح\",\"ﰆ\":\"بح\",\"ﷂ\":\"بحى\",\"ﲞ\":\"بخ\",\"ﰇ\":\"بخ\",\"ﳒ\":\"بخ\",\"ﱋ\":\"بخ\",\"ﶞ\":\"بخى\",\"ﱪ\":\"بر\",\"ﱫ\":\"بز\",\"ﲟ\":\"بم\",\"ﳡ\":\"بم\",\"ﱬ\":\"بم\",\"ﰈ\":\"بم\",\"ﱭ\":\"بن\",\"ﱮ\":\"بى\",\"ﰉ\":\"بى\",\"ﱯ\":\"بى\",\"ﰊ\":\"بى\",\"ﭔ\":\"ٻ\",\"ﭕ\":\"ٻ\",\"ﭓ\":\"ٻ\",\"ﭒ\":\"ٻ\",\"ې\":\"ٻ\",\"ﯦ\":\"ٻ\",\"ﯧ\":\"ٻ\",\"ﯥ\":\"ٻ\",\"ﯤ\":\"ٻ\",\"ﭜ\":\"ڀ\",\"ﭝ\":\"ڀ\",\"ﭛ\":\"ڀ\",\"ﭚ\":\"ڀ\",\"ࢩ\":\"ݔ\",\"ݧ\":\"ݔ\",\"⍥\":\"ة\",\"ö\":\"ة\",\"ﺔ\":\"ة\",\"ﺓ\":\"ة\",\"ۃ\":\"ة\",\"𞸕\":\"ت\",\"𞸵\":\"ت\",\"𞹵\":\"ت\",\"𞺕\":\"ت\",\"𞺵\":\"ت\",\"ﺗ\":\"ت\",\"ﺘ\":\"ت\",\"ﺖ\":\"ت\",\"ﺕ\":\"ت\",\"ﲥ\":\"تo\",\"ﳤ\":\"تo\",\"ﲡ\":\"تج\",\"ﰋ\":\"تج\",\"ﵐ\":\"تجم\",\"ﶠ\":\"تجى\",\"ﶟ\":\"تجى\",\"ﲢ\":\"تح\",\"ﰌ\":\"تح\",\"ﵒ\":\"تحج\",\"ﵑ\":\"تحج\",\"ﵓ\":\"تحم\",\"ﲣ\":\"تخ\",\"ﰍ\":\"تخ\",\"ﵔ\":\"تخم\",\"ﶢ\":\"تخى\",\"ﶡ\":\"تخى\",\"ﱰ\":\"تر\",\"ﱱ\":\"تز\",\"ﲤ\":\"تم\",\"ﳣ\":\"تم\",\"ﱲ\":\"تم\",\"ﰎ\":\"تم\",\"ﵕ\":\"تمج\",\"ﵖ\":\"تمح\",\"ﵗ\":\"تمخ\",\"ﶤ\":\"تمى\",\"ﶣ\":\"تمى\",\"ﱳ\":\"تن\",\"ﱴ\":\"تى\",\"ﰏ\":\"تى\",\"ﱵ\":\"تى\",\"ﰐ\":\"تى\",\"ﭠ\":\"ٺ\",\"ﭡ\":\"ٺ\",\"ﭟ\":\"ٺ\",\"ﭞ\":\"ٺ\",\"ﭤ\":\"ٿ\",\"ﭥ\":\"ٿ\",\"ﭣ\":\"ٿ\",\"ﭢ\":\"ٿ\",\"𞸂\":\"ج\",\"𞸢\":\"ج\",\"𞹂\":\"ج\",\"𞹢\":\"ج\",\"𞺂\":\"ج\",\"𞺢\":\"ج\",\"ﺟ\":\"ج\",\"ﺠ\":\"ج\",\"ﺞ\":\"ج\",\"ﺝ\":\"ج\",\"ﲧ\":\"جح\",\"ﰕ\":\"جح\",\"ﶦ\":\"جحى\",\"ﶾ\":\"جحى\",\"ﷻ\":\"جل جلlلo\",\"ﲨ\":\"جم\",\"ﰖ\":\"جم\",\"ﵙ\":\"جمح\",\"ﵘ\":\"جمح\",\"ﶧ\":\"جمى\",\"ﶥ\":\"جمى\",\"ﴝ\":\"جى\",\"ﴁ\":\"جى\",\"ﴞ\":\"جى\",\"ﴂ\":\"جى\",\"ﭸ\":\"ڃ\",\"ﭹ\":\"ڃ\",\"ﭷ\":\"ڃ\",\"ﭶ\":\"ڃ\",\"ﭴ\":\"ڄ\",\"ﭵ\":\"ڄ\",\"ﭳ\":\"ڄ\",\"ﭲ\":\"ڄ\",\"ﭼ\":\"چ\",\"ﭽ\":\"چ\",\"ﭻ\":\"چ\",\"ﭺ\":\"چ\",\"ﮀ\":\"ڇ\",\"ﮁ\":\"ڇ\",\"ﭿ\":\"ڇ\",\"ﭾ\":\"ڇ\",\"𞸇\":\"ح\",\"𞸧\":\"ح\",\"𞹇\":\"ح\",\"𞹧\":\"ح\",\"𞺇\":\"ح\",\"𞺧\":\"ح\",\"ﺣ\":\"ح\",\"ﺤ\":\"ح\",\"ﺢ\":\"ح\",\"ﺡ\":\"ح\",\"څ\":\"حۛ\",\"ځ\":\"حٔ\",\"ݲ\":\"حٔ\",\"ﲩ\":\"حج\",\"ﰗ\":\"حج\",\"ﶿ\":\"حجى\",\"ﲪ\":\"حم\",\"ﰘ\":\"حم\",\"ﵛ\":\"حمى\",\"ﵚ\":\"حمى\",\"ﴛ\":\"حى\",\"ﳿ\":\"حى\",\"ﴜ\":\"حى\",\"ﴀ\":\"حى\",\"𞸗\":\"خ\",\"𞸷\":\"خ\",\"𞹗\":\"خ\",\"𞹷\":\"خ\",\"𞺗\":\"خ\",\"𞺷\":\"خ\",\"ﺧ\":\"خ\",\"ﺨ\":\"خ\",\"ﺦ\":\"خ\",\"ﺥ\":\"خ\",\"ﲫ\":\"خج\",\"ﰙ\":\"خج\",\"ﰚ\":\"خح\",\"ﲬ\":\"خم\",\"ﰛ\":\"خم\",\"ﴟ\":\"خى\",\"ﴃ\":\"خى\",\"ﴠ\":\"خى\",\"ﴄ\":\"خى\",\"𐋡\":\"د\",\"𞸃\":\"د\",\"𞺃\":\"د\",\"𞺣\":\"د\",\"ﺪ\":\"د\",\"ﺩ\":\"د\",\"ڈ\":\"دؕ\",\"ﮉ\":\"دؕ\",\"ﮈ\":\"دؕ\",\"ڎ\":\"دۛ\",\"ﮇ\":\"دۛ\",\"ﮆ\":\"دۛ\",\"ۮ\":\"د̂\",\"ࢮ\":\"د̤̣\",\"𞸘\":\"ذ\",\"𞺘\":\"ذ\",\"𞺸\":\"ذ\",\"ﺬ\":\"ذ\",\"ﺫ\":\"ذ\",\"ﱛ\":\"ذٰ\",\"ڋ\":\"ڊؕ\",\"ﮅ\":\"ڌ\",\"ﮄ\":\"ڌ\",\"ﮃ\":\"ڍ\",\"ﮂ\":\"ڍ\",\"𞸓\":\"ر\",\"𞺓\":\"ر\",\"𞺳\":\"ر\",\"ﺮ\":\"ر\",\"ﺭ\":\"ر\",\"ڑ\":\"رؕ\",\"ﮍ\":\"رؕ\",\"ﮌ\":\"رؕ\",\"ژ\":\"رۛ\",\"ﮋ\":\"رۛ\",\"ﮊ\":\"رۛ\",\"ڒ\":\"ر̆\",\"ࢹ\":\"ر̆̇\",\"ۯ\":\"ر̂\",\"ݬ\":\"رٔ\",\"ﱜ\":\"رٰ\",\"ﷶ\":\"رسول\",\"﷼\":\"رىlل\",\"𞸆\":\"ز\",\"𞺆\":\"ز\",\"𞺦\":\"ز\",\"ﺰ\":\"ز\",\"ﺯ\":\"ز\",\"ࢲ\":\"ز̂\",\"ݱ\":\"ڗؕ\",\"𞸎\":\"س\",\"𞸮\":\"س\",\"𞹎\":\"س\",\"𞹮\":\"س\",\"𞺎\":\"س\",\"𞺮\":\"س\",\"ﺳ\":\"س\",\"ﺴ\":\"س\",\"ﺲ\":\"س\",\"ﺱ\":\"س\",\"ش\":\"سۛ\",\"𞸔\":\"سۛ\",\"𞸴\":\"سۛ\",\"𞹔\":\"سۛ\",\"𞹴\":\"سۛ\",\"𞺔\":\"سۛ\",\"𞺴\":\"سۛ\",\"ﺷ\":\"سۛ\",\"ﺸ\":\"سۛ\",\"ﺶ\":\"سۛ\",\"ﺵ\":\"سۛ\",\"ݾ\":\"س̂\",\"ﴱ\":\"سo\",\"ﳨ\":\"سo\",\"ﴲ\":\"سۛo\",\"ﳪ\":\"سۛo\",\"ﲭ\":\"سج\",\"ﴴ\":\"سج\",\"ﰜ\":\"سج\",\"ﴭ\":\"سۛج\",\"ﴷ\":\"سۛج\",\"ﴥ\":\"سۛج\",\"ﴉ\":\"سۛج\",\"ﵝ\":\"سجح\",\"ﵞ\":\"سجى\",\"ﵩ\":\"سۛجى\",\"ﲮ\":\"سح\",\"ﴵ\":\"سح\",\"ﰝ\":\"سح\",\"ﴮ\":\"سۛح\",\"ﴸ\":\"سۛح\",\"ﴦ\":\"سۛح\",\"ﴊ\":\"سۛح\",\"ﵜ\":\"سحج\",\"ﵨ\":\"سۛحم\",\"ﵧ\":\"سۛحم\",\"ﶪ\":\"سۛحى\",\"ﲯ\":\"سخ\",\"ﴶ\":\"سخ\",\"ﰞ\":\"سخ\",\"ﴯ\":\"سۛخ\",\"ﴹ\":\"سۛخ\",\"ﴧ\":\"سۛخ\",\"ﴋ\":\"سۛخ\",\"ﶨ\":\"سخى\",\"ﷆ\":\"سخى\",\"ﴪ\":\"سر\",\"ﴎ\":\"سر\",\"ﴩ\":\"سۛر\",\"ﴍ\":\"سۛر\",\"ﲰ\":\"سم\",\"ﳧ\":\"سم\",\"ﰟ\":\"سم\",\"ﴰ\":\"سۛم\",\"ﳩ\":\"سۛم\",\"ﴨ\":\"سۛم\",\"ﴌ\":\"سۛم\",\"ﵡ\":\"سمج\",\"ﵠ\":\"سمح\",\"ﵟ\":\"سمح\",\"ﵫ\":\"سۛمخ\",\"ﵪ\":\"سۛمخ\",\"ﵣ\":\"سمم\",\"ﵢ\":\"سمم\",\"ﵭ\":\"سۛمم\",\"ﵬ\":\"سۛمم\",\"ﴗ\":\"سى\",\"ﳻ\":\"سى\",\"ﴘ\":\"سى\",\"ﳼ\":\"سى\",\"ﴙ\":\"سۛى\",\"ﳽ\":\"سۛى\",\"ﴚ\":\"سۛى\",\"ﳾ\":\"سۛى\",\"𐋲\":\"ص\",\"𞸑\":\"ص\",\"𞸱\":\"ص\",\"𞹑\":\"ص\",\"𞹱\":\"ص\",\"𞺑\":\"ص\",\"𞺱\":\"ص\",\"ﺻ\":\"ص\",\"ﺼ\":\"ص\",\"ﺺ\":\"ص\",\"ﺹ\":\"ص\",\"ڞ\":\"صۛ\",\"ࢯ\":\"ص̤̣\",\"ﲱ\":\"صح\",\"ﰠ\":\"صح\",\"ﵥ\":\"صحح\",\"ﵤ\":\"صحح\",\"ﶩ\":\"صحى\",\"ﲲ\":\"صخ\",\"ﴫ\":\"صر\",\"ﴏ\":\"صر\",\"ﷵ\":\"صلعم\",\"ﷹ\":\"صلى\",\"ﷰ\":\"صلى\",\"ﷺ\":\"صلى lللo علىo وسلم\",\"ﲳ\":\"صم\",\"ﰡ\":\"صم\",\"ﷅ\":\"صمم\",\"ﵦ\":\"صمم\",\"ﴡ\":\"صى\",\"ﴅ\":\"صى\",\"ﴢ\":\"صى\",\"ﴆ\":\"صى\",\"𞸙\":\"ض\",\"𞸹\":\"ض\",\"𞹙\":\"ض\",\"𞹹\":\"ض\",\"𞺙\":\"ض\",\"𞺹\":\"ض\",\"ﺿ\":\"ض\",\"ﻀ\":\"ض\",\"ﺾ\":\"ض\",\"ﺽ\":\"ض\",\"ﲴ\":\"ضج\",\"ﰢ\":\"ضج\",\"ﲵ\":\"ضح\",\"ﰣ\":\"ضح\",\"ﵮ\":\"ضحى\",\"ﶫ\":\"ضحى\",\"ﲶ\":\"ضخ\",\"ﰤ\":\"ضخ\",\"ﵰ\":\"ضخم\",\"ﵯ\":\"ضخم\",\"ﴬ\":\"ضر\",\"ﴐ\":\"ضر\",\"ﲷ\":\"ضم\",\"ﰥ\":\"ضم\",\"ﴣ\":\"ضى\",\"ﴇ\":\"ضى\",\"ﴤ\":\"ضى\",\"ﴈ\":\"ضى\",\"𐋨\":\"ط\",\"𞸈\":\"ط\",\"𞹨\":\"ط\",\"𞺈\":\"ط\",\"𞺨\":\"ط\",\"ﻃ\":\"ط\",\"ﻄ\":\"ط\",\"ﻂ\":\"ط\",\"ﻁ\":\"ط\",\"ڟ\":\"طۛ\",\"ﲸ\":\"طح\",\"ﰦ\":\"طح\",\"ﴳ\":\"طم\",\"ﴺ\":\"طم\",\"ﰧ\":\"طم\",\"ﵲ\":\"طمح\",\"ﵱ\":\"طمح\",\"ﵳ\":\"طمم\",\"ﵴ\":\"طمى\",\"ﴑ\":\"طى\",\"ﳵ\":\"طى\",\"ﴒ\":\"طى\",\"ﳶ\":\"طى\",\"𞸚\":\"ظ\",\"𞹺\":\"ظ\",\"𞺚\":\"ظ\",\"𞺺\":\"ظ\",\"ﻇ\":\"ظ\",\"ﻈ\":\"ظ\",\"ﻆ\":\"ظ\",\"ﻅ\":\"ظ\",\"ﲹ\":\"ظم\",\"ﴻ\":\"ظم\",\"ﰨ\":\"ظم\",\"؏\":\"ع\",\"𞸏\":\"ع\",\"𞸯\":\"ع\",\"𞹏\":\"ع\",\"𞹯\":\"ع\",\"𞺏\":\"ع\",\"𞺯\":\"ع\",\"ﻋ\":\"ع\",\"ﻌ\":\"ع\",\"ﻊ\":\"ع\",\"ﻉ\":\"ع\",\"ﲺ\":\"عج\",\"ﰩ\":\"عج\",\"ﷄ\":\"عجم\",\"ﵵ\":\"عجم\",\"ﷷ\":\"علىo\",\"ﲻ\":\"عم\",\"ﰪ\":\"عم\",\"ﵷ\":\"عمم\",\"ﵶ\":\"عمم\",\"ﵸ\":\"عمى\",\"ﶶ\":\"عمى\",\"ﴓ\":\"عى\",\"ﳷ\":\"عى\",\"ﴔ\":\"عى\",\"ﳸ\":\"عى\",\"𞸛\":\"غ\",\"𞸻\":\"غ\",\"𞹛\":\"غ\",\"𞹻\":\"غ\",\"𞺛\":\"غ\",\"𞺻\":\"غ\",\"ﻏ\":\"غ\",\"ﻐ\":\"غ\",\"ﻎ\":\"غ\",\"ﻍ\":\"غ\",\"ﲼ\":\"غج\",\"ﰫ\":\"غج\",\"ﲽ\":\"غم\",\"ﰬ\":\"غم\",\"ﵹ\":\"غمم\",\"ﵻ\":\"غمى\",\"ﵺ\":\"غمى\",\"ﴕ\":\"غى\",\"ﳹ\":\"غى\",\"ﴖ\":\"غى\",\"ﳺ\":\"غى\",\"𞸐\":\"ف\",\"𞸰\":\"ف\",\"𞹰\":\"ف\",\"𞺐\":\"ف\",\"𞺰\":\"ف\",\"ﻓ\":\"ف\",\"ﻔ\":\"ف\",\"ﻒ\":\"ف\",\"ﻑ\":\"ف\",\"ڧ\":\"ف\",\"ﲾ\":\"فج\",\"ﰭ\":\"فج\",\"ﲿ\":\"فح\",\"ﰮ\":\"فح\",\"ﳀ\":\"فخ\",\"ﰯ\":\"فخ\",\"ﵽ\":\"فخم\",\"ﵼ\":\"فخم\",\"ﳁ\":\"فم\",\"ﰰ\":\"فم\",\"ﷁ\":\"فمى\",\"ﱼ\":\"فى\",\"ﰱ\":\"فى\",\"ﱽ\":\"فى\",\"ﰲ\":\"فى\",\"𞸞\":\"ڡ\",\"𞹾\":\"ڡ\",\"ࢻ\":\"ڡ\",\"ٯ\":\"ڡ\",\"𞸟\":\"ڡ\",\"𞹟\":\"ڡ\",\"ࢼ\":\"ڡ\",\"ڤ\":\"ڡۛ\",\"ﭬ\":\"ڡۛ\",\"ﭭ\":\"ڡۛ\",\"ﭫ\":\"ڡۛ\",\"ﭪ\":\"ڡۛ\",\"ڨ\":\"ڡۛ\",\"ࢤ\":\"ڢۛ\",\"ﭰ\":\"ڦ\",\"ﭱ\":\"ڦ\",\"ﭯ\":\"ڦ\",\"ﭮ\":\"ڦ\",\"𞸒\":\"ق\",\"𞸲\":\"ق\",\"𞹒\":\"ق\",\"𞹲\":\"ق\",\"𞺒\":\"ق\",\"𞺲\":\"ق\",\"ﻗ\":\"ق\",\"ﻘ\":\"ق\",\"ﻖ\":\"ق\",\"ﻕ\":\"ق\",\"ﳂ\":\"قح\",\"ﰳ\":\"قح\",\"ﷱ\":\"قلى\",\"ﳃ\":\"قم\",\"ﰴ\":\"قم\",\"ﶴ\":\"قمح\",\"ﵾ\":\"قمح\",\"ﵿ\":\"قمم\",\"ﶲ\":\"قمى\",\"ﱾ\":\"قى\",\"ﰵ\":\"قى\",\"ﱿ\":\"قى\",\"ﰶ\":\"قى\",\"𞸊\":\"ك\",\"𞸪\":\"ك\",\"𞹪\":\"ك\",\"ﻛ\":\"ك\",\"ﻜ\":\"ك\",\"ﻚ\":\"ك\",\"ﻙ\":\"ك\",\"ک\":\"ك\",\"ﮐ\":\"ك\",\"ﮑ\":\"ك\",\"ﮏ\":\"ك\",\"ﮎ\":\"ك\",\"ڪ\":\"ك\",\"ڭ\":\"كۛ\",\"ﯕ\":\"كۛ\",\"ﯖ\":\"كۛ\",\"ﯔ\":\"كۛ\",\"ﯓ\":\"كۛ\",\"ݣ\":\"كۛ\",\"ﲀ\":\"كl\",\"ﰷ\":\"كl\",\"ﳄ\":\"كج\",\"ﰸ\":\"كج\",\"ﳅ\":\"كح\",\"ﰹ\":\"كح\",\"ﳆ\":\"كخ\",\"ﰺ\":\"كخ\",\"ﳇ\":\"كل\",\"ﳫ\":\"كل\",\"ﲁ\":\"كل\",\"ﰻ\":\"كل\",\"ﳈ\":\"كم\",\"ﳬ\":\"كم\",\"ﲂ\":\"كم\",\"ﰼ\":\"كم\",\"ﷃ\":\"كمم\",\"ﶻ\":\"كمم\",\"ﶷ\":\"كمى\",\"ﲃ\":\"كى\",\"ﰽ\":\"كى\",\"ﲄ\":\"كى\",\"ﰾ\":\"كى\",\"ݢ\":\"ڬ\",\"ﮔ\":\"گ\",\"ﮕ\":\"گ\",\"ﮓ\":\"گ\",\"ﮒ\":\"گ\",\"ࢰ\":\"گ\",\"ڴ\":\"گۛ\",\"ﮜ\":\"ڱ\",\"ﮝ\":\"ڱ\",\"ﮛ\":\"ڱ\",\"ﮚ\":\"ڱ\",\"ﮘ\":\"ڳ\",\"ﮙ\":\"ڳ\",\"ﮗ\":\"ڳ\",\"ﮖ\":\"ڳ\",\"𞸋\":\"ل\",\"𞸫\":\"ل\",\"𞹋\":\"ل\",\"𞺋\":\"ل\",\"𞺫\":\"ل\",\"ﻟ\":\"ل\",\"ﻠ\":\"ل\",\"ﻞ\":\"ل\",\"ﻝ\":\"ل\",\"ڷ\":\"لۛ\",\"ڵ\":\"ل̆\",\"ﻼ\":\"لl\",\"ﻻ\":\"لl\",\"ﻺ\":\"لlٕ\",\"ﻹ\":\"لlٕ\",\"ﻸ\":\"لlٴ\",\"ﻷ\":\"لlٴ\",\"ﳍ\":\"لo\",\"ﻶ\":\"لآ\",\"ﻵ\":\"لآ\",\"ﳉ\":\"لج\",\"ﰿ\":\"لج\",\"ﶃ\":\"لجج\",\"ﶄ\":\"لجج\",\"ﶺ\":\"لجم\",\"ﶼ\":\"لجم\",\"ﶬ\":\"لجى\",\"ﳊ\":\"لح\",\"ﱀ\":\"لح\",\"ﶵ\":\"لحم\",\"ﶀ\":\"لحم\",\"ﶂ\":\"لحى\",\"ﶁ\":\"لحى\",\"ﳋ\":\"لخ\",\"ﱁ\":\"لخ\",\"ﶆ\":\"لخم\",\"ﶅ\":\"لخم\",\"ﳌ\":\"لم\",\"ﳭ\":\"لم\",\"ﲅ\":\"لم\",\"ﱂ\":\"لم\",\"ﶈ\":\"لمح\",\"ﶇ\":\"لمح\",\"ﶭ\":\"لمى\",\"ﲆ\":\"لى\",\"ﱃ\":\"لى\",\"ﲇ\":\"لى\",\"ﱄ\":\"لى\",\"𞸌\":\"م\",\"𞸬\":\"م\",\"𞹬\":\"م\",\"𞺌\":\"م\",\"𞺬\":\"م\",\"ﻣ\":\"م\",\"ﻤ\":\"م\",\"ﻢ\":\"م\",\"ﻡ\":\"م\",\"ࢧ\":\"مۛ\",\"۾\":\"م͈\",\"ﲈ\":\"مl\",\"ﳎ\":\"مج\",\"ﱅ\":\"مج\",\"ﶌ\":\"مجح\",\"ﶒ\":\"مجخ\",\"ﶍ\":\"مجم\",\"ﷀ\":\"مجى\",\"ﳏ\":\"مح\",\"ﱆ\":\"مح\",\"ﶉ\":\"محج\",\"ﶊ\":\"محم\",\"ﷴ\":\"محمد\",\"ﶋ\":\"محى\",\"ﳐ\":\"مخ\",\"ﱇ\":\"مخ\",\"ﶎ\":\"مخج\",\"ﶏ\":\"مخم\",\"ﶹ\":\"مخى\",\"ﳑ\":\"مم\",\"ﲉ\":\"مم\",\"ﱈ\":\"مم\",\"ﶱ\":\"ممى\",\"ﱉ\":\"مى\",\"ﱊ\":\"مى\",\"𞸍\":\"ن\",\"𞸭\":\"ن\",\"𞹍\":\"ن\",\"𞹭\":\"ن\",\"𞺍\":\"ن\",\"𞺭\":\"ن\",\"ﻧ\":\"ن\",\"ﻨ\":\"ن\",\"ﻦ\":\"ن\",\"ﻥ\":\"ن\",\"ݨ\":\"نؕ\",\"ݩ\":\"ن̆\",\"ﳖ\":\"نo\",\"ﳯ\":\"نo\",\"ﶸ\":\"نجح\",\"ﶽ\":\"نجح\",\"ﶘ\":\"نجم\",\"ﶗ\":\"نجم\",\"ﶙ\":\"نجى\",\"ﷇ\":\"نجى\",\"ﳓ\":\"نح\",\"ﱌ\":\"نح\",\"ﶕ\":\"نحم\",\"ﶖ\":\"نحى\",\"ﶳ\":\"نحى\",\"ﳔ\":\"نخ\",\"ﱍ\":\"نخ\",\"ﲊ\":\"نر\",\"ﲋ\":\"نز\",\"ﳕ\":\"نم\",\"ﳮ\":\"نم\",\"ﲌ\":\"نم\",\"ﱎ\":\"نم\",\"ﶛ\":\"نمى\",\"ﶚ\":\"نمى\",\"ﲍ\":\"نن\",\"ﲎ\":\"نى\",\"ﱏ\":\"نى\",\"ﲏ\":\"نى\",\"ﱐ\":\"نى\",\"ۂ\":\"ۀ\",\"ﮥ\":\"ۀ\",\"ﮤ\":\"ۀ\",\"𐋤\":\"و\",\"𞸅\":\"و\",\"𞺅\":\"و\",\"𞺥\":\"و\",\"ﻮ\":\"و\",\"ﻭ\":\"و\",\"ࢱ\":\"و\",\"ۋ\":\"وۛ\",\"ﯟ\":\"وۛ\",\"ﯞ\":\"وۛ\",\"ۇ\":\"و̓\",\"ﯘ\":\"و̓\",\"ﯗ\":\"و̓\",\"ۆ\":\"و̆\",\"ﯚ\":\"و̆\",\"ﯙ\":\"و̆\",\"ۉ\":\"و̂\",\"ﯣ\":\"و̂\",\"ﯢ\":\"و̂\",\"ۈ\":\"وٰ\",\"ﯜ\":\"وٰ\",\"ﯛ\":\"وٰ\",\"ؤ\":\"وٴ\",\"ﺆ\":\"وٴ\",\"ﺅ\":\"وٴ\",\"ٶ\":\"وٴ\",\"ٷ\":\"و̓ٴ\",\"ﯝ\":\"و̓ٴ\",\"ﷸ\":\"وسلم\",\"ﯡ\":\"ۅ\",\"ﯠ\":\"ۅ\",\"ٮ\":\"ى\",\"𞸜\":\"ى\",\"𞹼\":\"ى\",\"ں\":\"ى\",\"𞸝\":\"ى\",\"𞹝\":\"ى\",\"ﮟ\":\"ى\",\"ﮞ\":\"ى\",\"ࢽ\":\"ى\",\"ﯨ\":\"ى\",\"ﯩ\":\"ى\",\"ﻰ\":\"ى\",\"ﻯ\":\"ى\",\"ي\":\"ى\",\"𞸉\":\"ى\",\"𞸩\":\"ى\",\"𞹉\":\"ى\",\"𞹩\":\"ى\",\"𞺉\":\"ى\",\"𞺩\":\"ى\",\"ﻳ\":\"ى\",\"ﻴ\":\"ى\",\"ﻲ\":\"ى\",\"ﻱ\":\"ى\",\"ی\":\"ى\",\"ﯾ\":\"ى\",\"ﯿ\":\"ى\",\"ﯽ\":\"ى\",\"ﯼ\":\"ى\",\"ے\":\"ى\",\"ﮯ\":\"ى\",\"ﮮ\":\"ى\",\"ٹ\":\"ىؕ\",\"ﭨ\":\"ىؕ\",\"ﭩ\":\"ىؕ\",\"ﭧ\":\"ىؕ\",\"ﭦ\":\"ىؕ\",\"ڻ\":\"ىؕ\",\"ﮢ\":\"ىؕ\",\"ﮣ\":\"ىؕ\",\"ﮡ\":\"ىؕ\",\"ﮠ\":\"ىؕ\",\"پ\":\"ىۛ\",\"ﭘ\":\"ىۛ\",\"ﭙ\":\"ىۛ\",\"ﭗ\":\"ىۛ\",\"ﭖ\":\"ىۛ\",\"ث\":\"ىۛ\",\"𞸖\":\"ىۛ\",\"𞸶\":\"ىۛ\",\"𞹶\":\"ىۛ\",\"𞺖\":\"ىۛ\",\"𞺶\":\"ىۛ\",\"ﺛ\":\"ىۛ\",\"ﺜ\":\"ىۛ\",\"ﺚ\":\"ىۛ\",\"ﺙ\":\"ىۛ\",\"ڽ\":\"ىۛ\",\"ۑ\":\"ىۛ\",\"ؿ\":\"ىۛ\",\"ࢷ\":\"ىۛۢ\",\"ݖ\":\"ى̆\",\"ێ\":\"ى̆\",\"ࢺ\":\"ى̆̇\",\"ؽ\":\"ى̂\",\"ࢨ\":\"ىٔ\",\"ﲐ\":\"ىٰ\",\"ﱝ\":\"ىٰ\",\"ﳞ\":\"ىo\",\"ﳱ\":\"ىo\",\"ﳦ\":\"ىۛo\",\"ئ\":\"ىٴ\",\"ﺋ\":\"ىٴ\",\"ﺌ\":\"ىٴ\",\"ﺊ\":\"ىٴ\",\"ﺉ\":\"ىٴ\",\"ٸ\":\"ىٴ\",\"ﯫ\":\"ىٴl\",\"ﯪ\":\"ىٴl\",\"ﲛ\":\"ىٴo\",\"ﳠ\":\"ىٴo\",\"ﯭ\":\"ىٴo\",\"ﯬ\":\"ىٴo\",\"ﯸ\":\"ىٴٻ\",\"ﯷ\":\"ىٴٻ\",\"ﯶ\":\"ىٴٻ\",\"ﲗ\":\"ىٴج\",\"ﰀ\":\"ىٴج\",\"ﲘ\":\"ىٴح\",\"ﰁ\":\"ىٴح\",\"ﲙ\":\"ىٴخ\",\"ﱤ\":\"ىٴر\",\"ﱥ\":\"ىٴز\",\"ﲚ\":\"ىٴم\",\"ﳟ\":\"ىٴم\",\"ﱦ\":\"ىٴم\",\"ﰂ\":\"ىٴم\",\"ﱧ\":\"ىٴن\",\"ﯯ\":\"ىٴو\",\"ﯮ\":\"ىٴو\",\"ﯱ\":\"ىٴو̓\",\"ﯰ\":\"ىٴو̓\",\"ﯳ\":\"ىٴو̆\",\"ﯲ\":\"ىٴو̆\",\"ﯵ\":\"ىٴوٰ\",\"ﯴ\":\"ىٴوٰ\",\"ﯻ\":\"ىٴى\",\"ﯺ\":\"ىٴى\",\"ﱨ\":\"ىٴى\",\"ﯹ\":\"ىٴى\",\"ﰃ\":\"ىٴى\",\"ﱩ\":\"ىٴى\",\"ﰄ\":\"ىٴى\",\"ﳚ\":\"ىج\",\"ﱕ\":\"ىج\",\"ﰑ\":\"ىۛج\",\"ﶯ\":\"ىجى\",\"ﳛ\":\"ىح\",\"ﱖ\":\"ىح\",\"ﶮ\":\"ىحى\",\"ﳜ\":\"ىخ\",\"ﱗ\":\"ىخ\",\"ﲑ\":\"ىر\",\"ﱶ\":\"ىۛر\",\"ﲒ\":\"ىز\",\"ﱷ\":\"ىۛز\",\"ﳝ\":\"ىم\",\"ﳰ\":\"ىم\",\"ﲓ\":\"ىم\",\"ﱘ\":\"ىم\",\"ﲦ\":\"ىۛم\",\"ﳥ\":\"ىۛم\",\"ﱸ\":\"ىۛم\",\"ﰒ\":\"ىۛم\",\"ﶝ\":\"ىمم\",\"ﶜ\":\"ىمم\",\"ﶰ\":\"ىمى\",\"ﲔ\":\"ىن\",\"ﱹ\":\"ىۛن\",\"ﲕ\":\"ىى\",\"ﱙ\":\"ىى\",\"ﲖ\":\"ىى\",\"ﱚ\":\"ىى\",\"ﱺ\":\"ىۛى\",\"ﰓ\":\"ىۛى\",\"ﱻ\":\"ىۛى\",\"ﰔ\":\"ىۛى\",\"ﮱ\":\"ۓ\",\"ﮰ\":\"ۓ\",\"𐊸\":\"ⵀ\",\"⁞\":\"ⵂ\",\"⸽\":\"ⵂ\",\"⦙\":\"ⵂ\",\"︙\":\"ⵗ\",\"⁝\":\"ⵗ\",\"⋮\":\"ⵗ\",\"Մ\":\"ሆ\",\"Ռ\":\"ቡ\",\"Ի\":\"ኮ\",\"Պ\":\"ጣ\",\"आ\":\"अा\",\"ऒ\":\"अाॆ\",\"ओ\":\"अाे\",\"औ\":\"अाै\",\"ऄ\":\"अॆ\",\"ऑ\":\"अॉ\",\"ऍ\":\"एॅ\",\"ऎ\":\"एॆ\",\"ऐ\":\"एे\",\"ई\":\"र्इ\",\"ઽ\":\"ऽ\",\"𑇜\":\"ꣻ\",\"𑇋\":\"ऺ\",\"ુ\":\"ु\",\"ૂ\":\"ू\",\"ੋ\":\"ॆ\",\"੍\":\"्\",\"્\":\"्\",\"আ\":\"অা\",\"ৠ\":\"ঋৃ\",\"ৡ\":\"ঋৃ\",\"𑒒\":\"ঘ\",\"𑒔\":\"চ\",\"𑒖\":\"জ\",\"𑒘\":\"ঞ\",\"𑒙\":\"ট\",\"𑒛\":\"ড\",\"𑒪\":\"ণ\",\"𑒞\":\"ত\",\"𑒟\":\"থ\",\"𑒠\":\"দ\",\"𑒡\":\"ধ\",\"𑒢\":\"ন\",\"𑒣\":\"প\",\"𑒩\":\"ব\",\"𑒧\":\"ম\",\"𑒨\":\"য\",\"𑒫\":\"র\",\"𑒝\":\"ল\",\"𑒭\":\"ষ\",\"𑒮\":\"স\",\"𑓄\":\"ঽ\",\"𑒰\":\"া\",\"𑒱\":\"ি\",\"𑒹\":\"ে\",\"𑒼\":\"ো\",\"𑒾\":\"ৌ\",\"𑓂\":\"্\",\"𑒽\":\"ৗ\",\"ਉ\":\"ੳੁ\",\"ਊ\":\"ੳੂ\",\"ਆ\":\"ਅਾ\",\"ਐ\":\"ਅੈ\",\"ਔ\":\"ਅੌ\",\"ਇ\":\"ੲਿ\",\"ਈ\":\"ੲੀ\",\"ਏ\":\"ੲੇ\",\"આ\":\"અા\",\"ઑ\":\"અાૅ\",\"ઓ\":\"અાે\",\"ઔ\":\"અાૈ\",\"ઍ\":\"અૅ\",\"એ\":\"અે\",\"ઐ\":\"અૈ\",\"ଆ\":\"ଅା\",\"௮\":\"அ\",\"ர\":\"ஈ\",\"ா\":\"ஈ\",\"௫\":\"ஈு\",\"௨\":\"உ\",\"ഉ\":\"உ\",\"ஊ\":\"உள\",\"ഊ\":\"உൗ\",\"௭\":\"எ\",\"௷\":\"எவ\",\"ஜ\":\"ஐ\",\"ജ\":\"ஐ\",\"௧\":\"க\",\"௪\":\"ச\",\"௬\":\"சு\",\"௲\":\"சூ\",\"ഺ\":\"டி\",\"ണ\":\"ண\",\"௺\":\"நீ\",\"௴\":\"மீ\",\"௰\":\"ய\",\"ഴ\":\"ழ\",\"ௗ\":\"ள\",\"ை\":\"ன\",\"ശ\":\"ஶ\",\"௸\":\"ஷ\",\"ി\":\"ி\",\"ീ\":\"ி\",\"ொ\":\"ெஈ\",\"ௌ\":\"ெள\",\"ோ\":\"ேஈ\",\"ಅ\":\"అ\",\"ಆ\":\"ఆ\",\"ಇ\":\"ఇ\",\"ౠ\":\"ఋా\",\"ౡ\":\"ఌా\",\"ಒ\":\"ఒ\",\"ఔ\":\"ఒౌ\",\"ಔ\":\"ఒౌ\",\"ఓ\":\"ఒౕ\",\"ಓ\":\"ఒౕ\",\"ಜ\":\"జ\",\"ಞ\":\"ఞ\",\"ఢ\":\"డ̣\",\"ಣ\":\"ణ\",\"థ\":\"ధּ\",\"భ\":\"బ̣\",\"ಯ\":\"య\",\"ఠ\":\"రּ\",\"ಱ\":\"ఱ\",\"ಲ\":\"ల\",\"ష\":\"వ̣\",\"హ\":\"వా\",\"మ\":\"వు\",\"ూ\":\"ుా\",\"ౄ\":\"ృా\",\"ೡ\":\"ಌಾ\",\"ഈ\":\"ഇൗ\",\"ഐ\":\"എെ\",\"ഓ\":\"ഒാ\",\"ഔ\":\"ഒൗ\",\"ൡ\":\"ഞ\",\"൫\":\"ദ്ര\",\"൹\":\"നു\",\"ഌ\":\"നു\",\"ങ\":\"നു\",\"൯\":\"ന്\",\"ൻ\":\"ന്\",\"൬\":\"ന്ന\",\"൚\":\"ന്മ\",\"റ\":\"ര\",\"൪\":\"ര്\",\"ർ\":\"ര്\",\"൮\":\"വ്ര\",\"൶\":\"ഹ്മ\",\"ൂ\":\"ു\",\"ൃ\":\"ു\",\"ൈ\":\"െെ\",\"෪\":\"ජ\",\"෫\":\"ද\",\"𑐓\":\"𑐴𑑂𑐒\",\"𑐙\":\"𑐴𑑂𑐘\",\"𑐤\":\"𑐴𑑂𑐣\",\"𑐪\":\"𑐴𑑂𑐩\",\"𑐭\":\"𑐴𑑂𑐬\",\"𑐯\":\"𑐴𑑂𑐮\",\"𑗘\":\"𑖂\",\"𑗙\":\"𑖂\",\"𑗚\":\"𑖃\",\"𑗛\":\"𑖄\",\"𑗜\":\"𑖲\",\"𑗝\":\"𑖳\",\"ฃ\":\"ข\",\"ด\":\"ค\",\"ต\":\"ค\",\"ม\":\"ฆ\",\"ຈ\":\"จ\",\"ซ\":\"ช\",\"ฏ\":\"ฎ\",\"ท\":\"ฑ\",\"ບ\":\"บ\",\"ປ\":\"ป\",\"ຝ\":\"ฝ\",\"ພ\":\"พ\",\"ຟ\":\"ฟ\",\"ฦ\":\"ภ\",\"ຍ\":\"ย\",\"។\":\"ฯ\",\"ๅ\":\"า\",\"ำ\":\"̊า\",\"ិ\":\"ิ\",\"ី\":\"ี\",\"ឹ\":\"ึ\",\"ឺ\":\"ื\",\"ຸ\":\"ุ\",\"ູ\":\"ู\",\"แ\":\"เเ\",\"ໜ\":\"ຫນ\",\"ໝ\":\"ຫມ\",\"ຳ\":\"̊າ\",\"༂\":\"འུྂཿ\",\"༃\":\"འུྂ༔\",\"ཪ\":\"ར\",\"ༀ\":\"ཨོཾ\",\"ཷ\":\"ྲཱྀ\",\"ཹ\":\"ླཱྀ\",\"𑲲\":\"𑲪\",\"ႁ\":\"ဂှ\",\"က\":\"ဂာ\",\"ၰ\":\"ဃှ\",\"ၦ\":\"ပှ\",\"ဟ\":\"ပာ\",\"ၯ\":\"ပာှ\",\"ၾ\":\"ၽှ\",\"ဩ\":\"သြ\",\"ဪ\":\"သြော်\",\"႞\":\"ႃ̊\",\"ឣ\":\"អ\",\"᧐\":\"ᦞ\",\"᧑\":\"ᦱ\",\"᪀\":\"ᩅ\",\"᪐\":\"ᩅ\",\"꩓\":\"ꨁ\",\"꩖\":\"ꨣ\",\"᭒\":\"ᬍ\",\"᭓\":\"ᬑ\",\"᭘\":\"ᬨ\",\"ꦣ\":\"ꦝ\",\"ᢖ\":\"ᡜ\",\"ᡕ\":\"ᠵ\",\"ῶ\":\"Ꮿ\",\"ᐍ\":\"ᐁ·\",\"ᐫ\":\"ᐁᐠ\",\"ᐑ\":\"ᐄ·\",\"ᐓ\":\"ᐅ·\",\"ᐭ\":\"ᐅᐠ\",\"ᐕ\":\"ᐆ·\",\"ᐘ\":\"ᐊ·\",\"ᐮ\":\"ᐊᐠ\",\"ᐚ\":\"ᐋ·\",\"ᣝ\":\"ᐞᣟ\",\"ᓑ\":\"ᐡ\",\"ᕀ\":\"ᐩ\",\"ᐿ\":\"ᐲ·\",\"ᑃ\":\"ᐴ·\",\"⍩\":\"ᐵ\",\"ᑇ\":\"ᐹ·\",\"ᑜ\":\"ᑏ·\",\"⸧\":\"ᑐ\",\"⊃\":\"ᑐ\",\"ᑞ\":\"ᑐ·\",\"ᑩ\":\"ᑐ'\",\"⟉\":\"ᑐ/\",\"⫗\":\"ᑐᑕ\",\"ᑠ\":\"ᑑ·\",\"⸦\":\"ᑕ\",\"⊂\":\"ᑕ\",\"ᑢ\":\"ᑕ·\",\"ᑪ\":\"ᑕ'\",\"ᑤ\":\"ᑖ·\",\"ᑵ\":\"ᑫ·\",\"ᒅ\":\"ᑫ'\",\"ᑹ\":\"ᑮ·\",\"ᑽ\":\"ᑰ·\",\"ᘃ\":\"ᒉ\",\"ᒓ\":\"ᒉ·\",\"ᒕ\":\"ᒋ·\",\"ᒗ\":\"ᒌ·\",\"ᒛ\":\"ᒎ·\",\"ᘂ\":\"ᒐ\",\"ᒝ\":\"ᒐ·\",\"ᒟ\":\"ᒑ·\",\"ᒭ\":\"ᒣ·\",\"ᒱ\":\"ᒦ·\",\"ᒳ\":\"ᒧ·\",\"ᒵ\":\"ᒨ·\",\"ᒹ\":\"ᒫ·\",\"ᓊ\":\"ᓀ·\",\"ᣇ\":\"ᓂ·\",\"ᣉ\":\"ᓃ·\",\"ᣋ\":\"ᓄ·\",\"ᣍ\":\"ᓅ·\",\"ᓌ\":\"ᓇ·\",\"ᓎ\":\"ᓈ·\",\"ᘄ\":\"ᓓ\",\"ᓝ\":\"ᓓ·\",\"ᓟ\":\"ᓕ·\",\"ᓡ\":\"ᓖ·\",\"ᓣ\":\"ᓗ·\",\"ᓥ\":\"ᓘ·\",\"ᘇ\":\"ᓚ\",\"ᓧ\":\"ᓚ·\",\"ᓩ\":\"ᓛ·\",\"ᓷ\":\"ᓭ·\",\"ᓹ\":\"ᓯ·\",\"ᓻ\":\"ᓰ·\",\"ᓽ\":\"ᓱ·\",\"ᓿ\":\"ᓲ·\",\"ᔁ\":\"ᓴ·\",\"ᔃ\":\"ᓵ·\",\"ᔌ\":\"ᔋ<\",\"ᔎ\":\"ᔋb\",\"ᔍ\":\"ᔋᑕ\",\"ᔏ\":\"ᔋᒐ\",\"ᔘ\":\"ᔐ·\",\"ᔚ\":\"ᔑ·\",\"ᔜ\":\"ᔒ·\",\"ᔞ\":\"ᔓ·\",\"ᔠ\":\"ᔔ·\",\"ᔢ\":\"ᔕ·\",\"ᔤ\":\"ᔖ·\",\"ᔲ\":\"ᔨ·\",\"ᔴ\":\"ᔩ·\",\"ᔶ\":\"ᔪ·\",\"ᔸ\":\"ᔫ·\",\"ᔺ\":\"ᔭ·\",\"ᔼ\":\"ᔮ·\",\"ᘢ\":\"ᕃ\",\"ᣠ\":\"ᕃ·\",\"ᘣ\":\"ᕆ\",\"ᘤ\":\"ᕊ\",\"ᕏ\":\"ᕌ·\",\"ᖃ\":\"ᕐb\",\"ᖄ\":\"ᕐḃ\",\"ᖁ\":\"ᕐd\",\"ᕿ\":\"ᕐP\",\"ᙯ\":\"ᕐᑫ\",\"ᕾ\":\"ᕐᑬ\",\"ᖀ\":\"ᕐᑮ\",\"ᖂ\":\"ᕐᑰ\",\"ᖅ\":\"ᕐᒃ\",\"ᕜ\":\"ᕚ·\",\"ᣣ\":\"ᕞ·\",\"ᣤ\":\"ᕦ·\",\"ᕩ\":\"ᕧ·\",\"ᣥ\":\"ᕫ·\",\"ᣨ\":\"ᖆ·\",\"ᖑ\":\"ᖕJ\",\"ᙰ\":\"ᖕᒉ\",\"ᖎ\":\"ᖕᒊ\",\"ᖏ\":\"ᖕᒋ\",\"ᖐ\":\"ᖕᒌ\",\"ᖒ\":\"ᖕᒎ\",\"ᖓ\":\"ᖕᒐ\",\"ᖔ\":\"ᖕᒑ\",\"ᙳ\":\"ᖖJ\",\"ᙱ\":\"ᖖᒋ\",\"ᙲ\":\"ᖖᒌ\",\"ᙴ\":\"ᖖᒎ\",\"ᙵ\":\"ᖖᒐ\",\"ᙶ\":\"ᖖᒑ\",\"ᣪ\":\"ᖗ·\",\"ᙷ\":\"ᖧ·\",\"ᙸ\":\"ᖨ·\",\"ᙹ\":\"ᖩ·\",\"ᙺ\":\"ᖪ·\",\"ᙻ\":\"ᖫ·\",\"ᙼ\":\"ᖬ·\",\"ᙽ\":\"ᖭ·\",\"⪫\":\"ᗒ\",\"⪪\":\"ᗕ\",\"ꓷ\":\"ᗡ\",\"ᣰ\":\"ᗴ·\",\"ᣲ\":\"ᘛ·\",\"ᶻ\":\"ᙆ\",\"ꓭ\":\"ᙠ\",\"ᶺ\":\"ᣔ\",\"ᴾ\":\"ᣖ\",\"ᣜ\":\"ᣟᐞ\",\"ˡ\":\"ᣳ\",\"ʳ\":\"ᣴ\",\"ˢ\":\"ᣵ\",\"ᣛ\":\"ᣵ\",\"ꚰ\":\"ᚹ\",\"ᛡ\":\"ᚼ\",\"⍿\":\"ᚽ\",\"ᛂ\":\"ᚽ\",\"𝈿\":\"ᛋ\",\"↑\":\"ᛏ\",\"↿\":\"ᛐ\",\"⥮\":\"ᛐ⇂\",\"⥣\":\"ᛐᛚ\",\"ⵣ\":\"ᛯ\",\"↾\":\"ᛚ\",\"⨡\":\"ᛚ\",\"⋄\":\"ᛜ\",\"◇\":\"ᛜ\",\"◊\":\"ᛜ\",\"♢\":\"ᛜ\",\"🝔\":\"ᛜ\",\"𑢷\":\"ᛜ\",\"𐊔\":\"ᛜ\",\"⍚\":\"ᛜ̲\",\"⋈\":\"ᛞ\",\"⨝\":\"ᛞ\",\"𐓐\":\"ᛦ\",\"↕\":\"ᛨ\",\"𐳼\":\"𐲂\",\"𐳺\":\"𐲥\",\"ㄱ\":\"ᄀ\",\"ᆨ\":\"ᄀ\",\"ᄁ\":\"ᄀᄀ\",\"ㄲ\":\"ᄀᄀ\",\"ᆩ\":\"ᄀᄀ\",\"ᇺ\":\"ᄀᄂ\",\"ᅚ\":\"ᄀᄃ\",\"ᇃ\":\"ᄀᄅ\",\"ᇻ\":\"ᄀᄇ\",\"ᆪ\":\"ᄀᄉ\",\"ㄳ\":\"ᄀᄉ\",\"ᇄ\":\"ᄀᄉᄀ\",\"ᇼ\":\"ᄀᄎ\",\"ᇽ\":\"ᄀᄏ\",\"ᇾ\":\"ᄀᄒ\",\"ㄴ\":\"ᄂ\",\"ᆫ\":\"ᄂ\",\"ᄓ\":\"ᄂᄀ\",\"ᇅ\":\"ᄂᄀ\",\"ᄔ\":\"ᄂᄂ\",\"ㅥ\":\"ᄂᄂ\",\"ᇿ\":\"ᄂᄂ\",\"ᄕ\":\"ᄂᄃ\",\"ㅦ\":\"ᄂᄃ\",\"ᇆ\":\"ᄂᄃ\",\"ퟋ\":\"ᄂᄅ\",\"ᄖ\":\"ᄂᄇ\",\"ᅛ\":\"ᄂᄉ\",\"ᇇ\":\"ᄂᄉ\",\"ㅧ\":\"ᄂᄉ\",\"ᅜ\":\"ᄂᄌ\",\"ᆬ\":\"ᄂᄌ\",\"ㄵ\":\"ᄂᄌ\",\"ퟌ\":\"ᄂᄎ\",\"ᇉ\":\"ᄂᄐ\",\"ᅝ\":\"ᄂᄒ\",\"ᆭ\":\"ᄂᄒ\",\"ㄶ\":\"ᄂᄒ\",\"ᇈ\":\"ᄂᅀ\",\"ㅨ\":\"ᄂᅀ\",\"ㄷ\":\"ᄃ\",\"ᆮ\":\"ᄃ\",\"ᄗ\":\"ᄃᄀ\",\"ᇊ\":\"ᄃᄀ\",\"ᄄ\":\"ᄃᄃ\",\"ㄸ\":\"ᄃᄃ\",\"ퟍ\":\"ᄃᄃ\",\"ퟎ\":\"ᄃᄃᄇ\",\"ᅞ\":\"ᄃᄅ\",\"ᇋ\":\"ᄃᄅ\",\"ꥠ\":\"ᄃᄆ\",\"ꥡ\":\"ᄃᄇ\",\"ퟏ\":\"ᄃᄇ\",\"ꥢ\":\"ᄃᄉ\",\"ퟐ\":\"ᄃᄉ\",\"ퟑ\":\"ᄃᄉᄀ\",\"ꥣ\":\"ᄃᄌ\",\"ퟒ\":\"ᄃᄌ\",\"ퟓ\":\"ᄃᄎ\",\"ퟔ\":\"ᄃᄐ\",\"ㄹ\":\"ᄅ\",\"ᆯ\":\"ᄅ\",\"ꥤ\":\"ᄅᄀ\",\"ᆰ\":\"ᄅᄀ\",\"ㄺ\":\"ᄅᄀ\",\"ꥥ\":\"ᄅᄀᄀ\",\"ퟕ\":\"ᄅᄀᄀ\",\"ᇌ\":\"ᄅᄀᄉ\",\"ㅩ\":\"ᄅᄀᄉ\",\"ퟖ\":\"ᄅᄀᄒ\",\"ᄘ\":\"ᄅᄂ\",\"ᇍ\":\"ᄅᄂ\",\"ꥦ\":\"ᄅᄃ\",\"ᇎ\":\"ᄅᄃ\",\"ㅪ\":\"ᄅᄃ\",\"ꥧ\":\"ᄅᄃᄃ\",\"ᇏ\":\"ᄅᄃᄒ\",\"ᄙ\":\"ᄅᄅ\",\"ᇐ\":\"ᄅᄅ\",\"ퟗ\":\"ᄅᄅᄏ\",\"ꥨ\":\"ᄅᄆ\",\"ᆱ\":\"ᄅᄆ\",\"ㄻ\":\"ᄅᄆ\",\"ᇑ\":\"ᄅᄆᄀ\",\"ᇒ\":\"ᄅᄆᄉ\",\"ퟘ\":\"ᄅᄆᄒ\",\"ꥩ\":\"ᄅᄇ\",\"ᆲ\":\"ᄅᄇ\",\"ㄼ\":\"ᄅᄇ\",\"ퟙ\":\"ᄅᄇᄃ\",\"ꥪ\":\"ᄅᄇᄇ\",\"ᇓ\":\"ᄅᄇᄉ\",\"ㅫ\":\"ᄅᄇᄉ\",\"ꥫ\":\"ᄅᄇᄋ\",\"ᇕ\":\"ᄅᄇᄋ\",\"ퟚ\":\"ᄅᄇᄑ\",\"ᇔ\":\"ᄅᄇᄒ\",\"ꥬ\":\"ᄅᄉ\",\"ᆳ\":\"ᄅᄉ\",\"ㄽ\":\"ᄅᄉ\",\"ᇖ\":\"ᄅᄉᄉ\",\"ᄛ\":\"ᄅᄋ\",\"ퟝ\":\"ᄅᄋ\",\"ꥭ\":\"ᄅᄌ\",\"ꥮ\":\"ᄅᄏ\",\"ᇘ\":\"ᄅᄏ\",\"ᆴ\":\"ᄅᄐ\",\"ㄾ\":\"ᄅᄐ\",\"ᆵ\":\"ᄅᄑ\",\"ㄿ\":\"ᄅᄑ\",\"ᄚ\":\"ᄅᄒ\",\"ㅀ\":\"ᄅᄒ\",\"ᄻ\":\"ᄅᄒ\",\"ᆶ\":\"ᄅᄒ\",\"ퟲ\":\"ᄅᄒ\",\"ᇗ\":\"ᄅᅀ\",\"ㅬ\":\"ᄅᅀ\",\"ퟛ\":\"ᄅᅌ\",\"ᇙ\":\"ᄅᅙ\",\"ㅭ\":\"ᄅᅙ\",\"ퟜ\":\"ᄅᅙᄒ\",\"ㅁ\":\"ᄆ\",\"ᆷ\":\"ᄆ\",\"ꥯ\":\"ᄆᄀ\",\"ᇚ\":\"ᄆᄀ\",\"ퟞ\":\"ᄆᄂ\",\"ퟟ\":\"ᄆᄂᄂ\",\"ꥰ\":\"ᄆᄃ\",\"ᇛ\":\"ᄆᄅ\",\"ퟠ\":\"ᄆᄆ\",\"ᄜ\":\"ᄆᄇ\",\"ㅮ\":\"ᄆᄇ\",\"ᇜ\":\"ᄆᄇ\",\"ퟡ\":\"ᄆᄇᄉ\",\"ꥱ\":\"ᄆᄉ\",\"ᇝ\":\"ᄆᄉ\",\"ㅯ\":\"ᄆᄉ\",\"ᇞ\":\"ᄆᄉᄉ\",\"ᄝ\":\"ᄆᄋ\",\"ㅱ\":\"ᄆᄋ\",\"ᇢ\":\"ᄆᄋ\",\"ퟢ\":\"ᄆᄌ\",\"ᇠ\":\"ᄆᄎ\",\"ᇡ\":\"ᄆᄒ\",\"ᇟ\":\"ᄆᅀ\",\"ㅰ\":\"ᄆᅀ\",\"ㅂ\":\"ᄇ\",\"ᆸ\":\"ᄇ\",\"ᄞ\":\"ᄇᄀ\",\"ㅲ\":\"ᄇᄀ\",\"ᄟ\":\"ᄇᄂ\",\"ᄠ\":\"ᄇᄃ\",\"ㅳ\":\"ᄇᄃ\",\"ퟣ\":\"ᄇᄃ\",\"ᇣ\":\"ᄇᄅ\",\"ퟤ\":\"ᄇᄅᄑ\",\"ퟥ\":\"ᄇᄆ\",\"ᄈ\":\"ᄇᄇ\",\"ㅃ\":\"ᄇᄇ\",\"ퟦ\":\"ᄇᄇ\",\"ᄬ\":\"ᄇᄇᄋ\",\"ㅹ\":\"ᄇᄇᄋ\",\"ᄡ\":\"ᄇᄉ\",\"ㅄ\":\"ᄇᄉ\",\"ᆹ\":\"ᄇᄉ\",\"ᄢ\":\"ᄇᄉᄀ\",\"ㅴ\":\"ᄇᄉᄀ\",\"ᄣ\":\"ᄇᄉᄃ\",\"ㅵ\":\"ᄇᄉᄃ\",\"ퟧ\":\"ᄇᄉᄃ\",\"ᄤ\":\"ᄇᄉᄇ\",\"ᄥ\":\"ᄇᄉᄉ\",\"ᄦ\":\"ᄇᄉᄌ\",\"ꥲ\":\"ᄇᄉᄐ\",\"ᄫ\":\"ᄇᄋ\",\"ㅸ\":\"ᄇᄋ\",\"ᇦ\":\"ᄇᄋ\",\"ᄧ\":\"ᄇᄌ\",\"ㅶ\":\"ᄇᄌ\",\"ퟨ\":\"ᄇᄌ\",\"ᄨ\":\"ᄇᄎ\",\"ퟩ\":\"ᄇᄎ\",\"ꥳ\":\"ᄇᄏ\",\"ᄩ\":\"ᄇᄐ\",\"ㅷ\":\"ᄇᄐ\",\"ᄪ\":\"ᄇᄑ\",\"ᇤ\":\"ᄇᄑ\",\"ꥴ\":\"ᄇᄒ\",\"ᇥ\":\"ᄇᄒ\",\"ㅅ\":\"ᄉ\",\"ᆺ\":\"ᄉ\",\"ᄭ\":\"ᄉᄀ\",\"ㅺ\":\"ᄉᄀ\",\"ᇧ\":\"ᄉᄀ\",\"ᄮ\":\"ᄉᄂ\",\"ㅻ\":\"ᄉᄂ\",\"ᄯ\":\"ᄉᄃ\",\"ㅼ\":\"ᄉᄃ\",\"ᇨ\":\"ᄉᄃ\",\"ᄰ\":\"ᄉᄅ\",\"ᇩ\":\"ᄉᄅ\",\"ᄱ\":\"ᄉᄆ\",\"ퟪ\":\"ᄉᄆ\",\"ᄲ\":\"ᄉᄇ\",\"ㅽ\":\"ᄉᄇ\",\"ᇪ\":\"ᄉᄇ\",\"ᄳ\":\"ᄉᄇᄀ\",\"ퟫ\":\"ᄉᄇᄋ\",\"ᄊ\":\"ᄉᄉ\",\"ㅆ\":\"ᄉᄉ\",\"ᆻ\":\"ᄉᄉ\",\"ퟬ\":\"ᄉᄉᄀ\",\"ퟭ\":\"ᄉᄉᄃ\",\"ꥵ\":\"ᄉᄉᄇ\",\"ᄴ\":\"ᄉᄉᄉ\",\"ᄵ\":\"ᄉᄋ\",\"ᄶ\":\"ᄉᄌ\",\"ㅾ\":\"ᄉᄌ\",\"ퟯ\":\"ᄉᄌ\",\"ᄷ\":\"ᄉᄎ\",\"ퟰ\":\"ᄉᄎ\",\"ᄸ\":\"ᄉᄏ\",\"ᄹ\":\"ᄉᄐ\",\"ퟱ\":\"ᄉᄐ\",\"ᄺ\":\"ᄉᄑ\",\"ퟮ\":\"ᄉᅀ\",\"ㅇ\":\"ᄋ\",\"ᆼ\":\"ᄋ\",\"ᅁ\":\"ᄋᄀ\",\"ᇬ\":\"ᄋᄀ\",\"ᇭ\":\"ᄋᄀᄀ\",\"ᅂ\":\"ᄋᄃ\",\"ꥶ\":\"ᄋᄅ\",\"ᅃ\":\"ᄋᄆ\",\"ᅄ\":\"ᄋᄇ\",\"ᅅ\":\"ᄋᄉ\",\"ᇱ\":\"ᄋᄉ\",\"ㆂ\":\"ᄋᄉ\",\"ᅇ\":\"ᄋᄋ\",\"ㆀ\":\"ᄋᄋ\",\"ᇮ\":\"ᄋᄋ\",\"ᅈ\":\"ᄋᄌ\",\"ᅉ\":\"ᄋᄎ\",\"ᇯ\":\"ᄋᄏ\",\"ᅊ\":\"ᄋᄐ\",\"ᅋ\":\"ᄋᄑ\",\"ꥷ\":\"ᄋᄒ\",\"ᅆ\":\"ᄋᅀ\",\"ᇲ\":\"ᄋᅀ\",\"ㆃ\":\"ᄋᅀ\",\"ㅈ\":\"ᄌ\",\"ᆽ\":\"ᄌ\",\"ퟷ\":\"ᄌᄇ\",\"ퟸ\":\"ᄌᄇᄇ\",\"ᅍ\":\"ᄌᄋ\",\"ᄍ\":\"ᄌᄌ\",\"ㅉ\":\"ᄌᄌ\",\"ퟹ\":\"ᄌᄌ\",\"ꥸ\":\"ᄌᄌᄒ\",\"ㅊ\":\"ᄎ\",\"ᆾ\":\"ᄎ\",\"ᅒ\":\"ᄎᄏ\",\"ᅓ\":\"ᄎᄒ\",\"ㅋ\":\"ᄏ\",\"ᆿ\":\"ᄏ\",\"ㅌ\":\"ᄐ\",\"ᇀ\":\"ᄐ\",\"ꥹ\":\"ᄐᄐ\",\"ㅍ\":\"ᄑ\",\"ᇁ\":\"ᄑ\",\"ᅖ\":\"ᄑᄇ\",\"ᇳ\":\"ᄑᄇ\",\"ퟺ\":\"ᄑᄉ\",\"ᅗ\":\"ᄑᄋ\",\"ㆄ\":\"ᄑᄋ\",\"ᇴ\":\"ᄑᄋ\",\"ퟻ\":\"ᄑᄐ\",\"ꥺ\":\"ᄑᄒ\",\"ㅎ\":\"ᄒ\",\"ᇂ\":\"ᄒ\",\"ᇵ\":\"ᄒᄂ\",\"ᇶ\":\"ᄒᄅ\",\"ᇷ\":\"ᄒᄆ\",\"ᇸ\":\"ᄒᄇ\",\"ꥻ\":\"ᄒᄉ\",\"ᅘ\":\"ᄒᄒ\",\"ㆅ\":\"ᄒᄒ\",\"ᄽ\":\"ᄼᄼ\",\"ᄿ\":\"ᄾᄾ\",\"ㅿ\":\"ᅀ\",\"ᇫ\":\"ᅀ\",\"ퟳ\":\"ᅀᄇ\",\"ퟴ\":\"ᅀᄇᄋ\",\"ㆁ\":\"ᅌ\",\"ᇰ\":\"ᅌ\",\"ퟵ\":\"ᅌᄆ\",\"ퟶ\":\"ᅌᄒ\",\"ᅏ\":\"ᅎᅎ\",\"ᅑ\":\"ᅐᅐ\",\"ㆆ\":\"ᅙ\",\"ᇹ\":\"ᅙ\",\"ꥼ\":\"ᅙᅙ\",\"ㅤ\":\"ᅠ\",\"ㅏ\":\"ᅡ\",\"ᆣ\":\"ᅡー\",\"ᅶ\":\"ᅡᅩ\",\"ᅷ\":\"ᅡᅮ\",\"ᅢ\":\"ᅡ丨\",\"ㅐ\":\"ᅡ丨\",\"ㅑ\":\"ᅣ\",\"ᅸ\":\"ᅣᅩ\",\"ᅹ\":\"ᅣᅭ\",\"ᆤ\":\"ᅣᅮ\",\"ᅤ\":\"ᅣ丨\",\"ㅒ\":\"ᅣ丨\",\"ㅓ\":\"ᅥ\",\"ᅼ\":\"ᅥー\",\"ᅺ\":\"ᅥᅩ\",\"ᅻ\":\"ᅥᅮ\",\"ᅦ\":\"ᅥ丨\",\"ㅔ\":\"ᅥ丨\",\"ㅕ\":\"ᅧ\",\"ᆥ\":\"ᅧᅣ\",\"ᅽ\":\"ᅧᅩ\",\"ᅾ\":\"ᅧᅮ\",\"ᅨ\":\"ᅧ丨\",\"ㅖ\":\"ᅧ丨\",\"ㅗ\":\"ᅩ\",\"ᅪ\":\"ᅩᅡ\",\"ㅘ\":\"ᅩᅡ\",\"ᅫ\":\"ᅩᅡ丨\",\"ㅙ\":\"ᅩᅡ丨\",\"ᆦ\":\"ᅩᅣ\",\"ᆧ\":\"ᅩᅣ丨\",\"ᅿ\":\"ᅩᅥ\",\"ᆀ\":\"ᅩᅥ丨\",\"ힰ\":\"ᅩᅧ\",\"ᆁ\":\"ᅩᅧ丨\",\"ᆂ\":\"ᅩᅩ\",\"ힱ\":\"ᅩᅩ丨\",\"ᆃ\":\"ᅩᅮ\",\"ᅬ\":\"ᅩ丨\",\"ㅚ\":\"ᅩ丨\",\"ㅛ\":\"ᅭ\",\"ힲ\":\"ᅭᅡ\",\"ힳ\":\"ᅭᅡ丨\",\"ᆄ\":\"ᅭᅣ\",\"ㆇ\":\"ᅭᅣ\",\"ᆆ\":\"ᅭᅣ\",\"ᆅ\":\"ᅭᅣ丨\",\"ㆈ\":\"ᅭᅣ丨\",\"ힴ\":\"ᅭᅥ\",\"ᆇ\":\"ᅭᅩ\",\"ᆈ\":\"ᅭ丨\",\"ㆉ\":\"ᅭ丨\",\"ㅜ\":\"ᅮ\",\"ᆉ\":\"ᅮᅡ\",\"ᆊ\":\"ᅮᅡ丨\",\"ᅯ\":\"ᅮᅥ\",\"ㅝ\":\"ᅮᅥ\",\"ᆋ\":\"ᅮᅥー\",\"ᅰ\":\"ᅮᅥ丨\",\"ㅞ\":\"ᅮᅥ丨\",\"ힵ\":\"ᅮᅧ\",\"ᆌ\":\"ᅮᅧ丨\",\"ᆍ\":\"ᅮᅮ\",\"ᅱ\":\"ᅮ丨\",\"ㅟ\":\"ᅮ丨\",\"ힶ\":\"ᅮ丨丨\",\"ㅠ\":\"ᅲ\",\"ᆎ\":\"ᅲᅡ\",\"ힷ\":\"ᅲᅡ丨\",\"ᆏ\":\"ᅲᅥ\",\"ᆐ\":\"ᅲᅥ丨\",\"ᆑ\":\"ᅲᅧ\",\"ㆊ\":\"ᅲᅧ\",\"ᆒ\":\"ᅲᅧ丨\",\"ㆋ\":\"ᅲᅧ丨\",\"ힸ\":\"ᅲᅩ\",\"ᆓ\":\"ᅲᅮ\",\"ᆔ\":\"ᅲ丨\",\"ㆌ\":\"ᅲ丨\",\"ㆍ\":\"ᆞ\",\"ퟅ\":\"ᆞᅡ\",\"ᆟ\":\"ᆞᅥ\",\"ퟆ\":\"ᆞᅥ丨\",\"ᆠ\":\"ᆞᅮ\",\"ᆢ\":\"ᆞᆞ\",\"ᆡ\":\"ᆞ丨\",\"ㆎ\":\"ᆞ丨\",\"ヘ\":\"へ\",\"⍁\":\"〼\",\"⧄\":\"〼\",\"꒞\":\"ꁊ\",\"꒬\":\"ꁐ\",\"꒜\":\"ꃀ\",\"꒨\":\"ꄲ\",\"꒿\":\"ꉙ\",\"꒾\":\"ꊱ\",\"꒔\":\"ꋍ\",\"꓀\":\"ꎫ\",\"꓂\":\"ꎵ\",\"꒺\":\"ꎿ\",\"꒰\":\"ꏂ\",\"꒧\":\"ꑘ\",\"⊥\":\"ꓕ\",\"⟂\":\"ꓕ\",\"𝈜\":\"ꓕ\",\"Ʇ\":\"ꓕ\",\"Ꞟ\":\"ꓤ\",\"⅁\":\"ꓨ\",\"⅂\":\"ꓶ\",\"𝈕\":\"ꓶ\",\"𝈫\":\"ꓶ\",\"𖼦\":\"ꓶ\",\"𐐑\":\"ꓶ\",\"⅃\":\"𖼀\",\"𑫦\":\"𑫥𑫯\",\"𑫨\":\"𑫥𑫥\",\"𑫩\":\"𑫥𑫥𑫯\",\"𑫪\":\"𑫥𑫥𑫰\",\"𑫧\":\"𑫥𑫰\",\"𑫴\":\"𑫳𑫯\",\"𑫶\":\"𑫳𑫳\",\"𑫷\":\"𑫳𑫳𑫯\",\"𑫸\":\"𑫳𑫳𑫰\",\"𑫵\":\"𑫳𑫰\",\"𑫬\":\"𑫫𑫯\",\"𑫭\":\"𑫫𑫫\",\"𑫮\":\"𑫫𑫫𑫯\",\"⊕\":\"𐊨\",\"⨁\":\"𐊨\",\"🜨\":\"𐊨\",\"Ꚛ\":\"𐊨\",\"▽\":\"𐊼\",\"𝈔\":\"𐊼\",\"🜄\":\"𐊼\",\"⧖\":\"𐋀\",\"ꞛ\":\"𐐺\",\"Ꞛ\":\"𐐒\",\"𐒠\":\"𐒆\",\"𐏑\":\"𐎂\",\"𐏓\":\"𐎓\",\"𒀸\":\"𐎚\",\"☥\":\"𐦞\",\"𓋹\":\"𐦞\",\"〹\":\"卄\",\"不\":\"不\",\"丽\":\"丽\",\"並\":\"並\",\"⎜\":\"丨\",\"⎟\":\"丨\",\"⎢\":\"丨\",\"⎥\":\"丨\",\"⎪\":\"丨\",\"⎮\":\"丨\",\"㇑\":\"丨\",\"ᅵ\":\"丨\",\"ㅣ\":\"丨\",\"⼁\":\"丨\",\"ᆜ\":\"丨ー\",\"ᆘ\":\"丨ᅡ\",\"ᆙ\":\"丨ᅣ\",\"ힽ\":\"丨ᅣᅩ\",\"ힾ\":\"丨ᅣ丨\",\"ힿ\":\"丨ᅧ\",\"ퟀ\":\"丨ᅧ丨\",\"ᆚ\":\"丨ᅩ\",\"ퟁ\":\"丨ᅩ丨\",\"ퟂ\":\"丨ᅭ\",\"ᆛ\":\"丨ᅮ\",\"ퟃ\":\"丨ᅲ\",\"ᆝ\":\"丨ᆞ\",\"ퟄ\":\"丨丨\",\"串\":\"串\",\"丸\":\"丸\",\"丹\":\"丹\",\"乁\":\"乁\",\"㇠\":\"乙\",\"⼄\":\"乙\",\"㇟\":\"乚\",\"⺃\":\"乚\",\"㇖\":\"乛\",\"⺂\":\"乛\",\"⻲\":\"亀\",\"亂\":\"亂\",\"㇚\":\"亅\",\"⼅\":\"亅\",\"了\":\"了\",\"ニ\":\"二\",\"⼆\":\"二\",\"𠄢\":\"𠄢\",\"⼇\":\"亠\",\"亮\":\"亮\",\"⼈\":\"人\",\"イ\":\"亻\",\"⺅\":\"亻\",\"什\":\"什\",\"仌\":\"仌\",\"令\":\"令\",\"你\":\"你\",\"倂\":\"併\",\"倂\":\"併\",\"侀\":\"侀\",\"來\":\"來\",\"例\":\"例\",\"侮\":\"侮\",\"侮\":\"侮\",\"侻\":\"侻\",\"便\":\"便\",\"值\":\"値\",\"倫\":\"倫\",\"偺\":\"偺\",\"備\":\"備\",\"像\":\"像\",\"僚\":\"僚\",\"僧\":\"僧\",\"僧\":\"僧\",\"㒞\":\"㒞\",\"⼉\":\"儿\",\"兀\":\"兀\",\"⺎\":\"兀\",\"充\":\"充\",\"免\":\"免\",\"免\":\"免\",\"兔\":\"兔\",\"兤\":\"兤\",\"⼊\":\"入\",\"內\":\"內\",\"全\":\"全\",\"兩\":\"兩\",\"ハ\":\"八\",\"⼋\":\"八\",\"六\":\"六\",\"具\":\"具\",\"𠔜\":\"𠔜\",\"𠔥\":\"𠔥\",\"冀\":\"冀\",\"㒹\":\"㒹\",\"⼌\":\"冂\",\"再\":\"再\",\"𠕋\":\"𠕋\",\"冒\":\"冒\",\"冕\":\"冕\",\"㒻\":\"㒻\",\"最\":\"最\",\"⼍\":\"冖\",\"冗\":\"冗\",\"冤\":\"冤\",\"⼎\":\"冫\",\"冬\":\"冬\",\"况\":\"况\",\"况\":\"况\",\"冷\":\"冷\",\"凉\":\"凉\",\"凌\":\"凌\",\"凜\":\"凜\",\"凞\":\"凞\",\"⼏\":\"几\",\"𠘺\":\"𠘺\",\"凵\":\"凵\",\"⼐\":\"凵\",\"⼑\":\"刀\",\"⺉\":\"刂\",\"刃\":\"刃\",\"切\":\"切\",\"切\":\"切\",\"列\":\"列\",\"利\":\"利\",\"㓟\":\"㓟\",\"刺\":\"刺\",\"刻\":\"刻\",\"剆\":\"剆\",\"割\":\"割\",\"剷\":\"剷\",\"劉\":\"劉\",\"𠠄\":\"𠠄\",\"カ\":\"力\",\"力\":\"力\",\"⼒\":\"力\",\"劣\":\"劣\",\"㔕\":\"㔕\",\"劳\":\"劳\",\"勇\":\"勇\",\"勇\":\"勇\",\"勉\":\"勉\",\"勉\":\"勉\",\"勒\":\"勒\",\"勞\":\"勞\",\"勤\":\"勤\",\"勤\":\"勤\",\"勵\":\"勵\",\"⼓\":\"勹\",\"勺\":\"勺\",\"勺\":\"勺\",\"包\":\"包\",\"匆\":\"匆\",\"𠣞\":\"𠣞\",\"⼔\":\"匕\",\"北\":\"北\",\"北\":\"北\",\"⼕\":\"匚\",\"⼖\":\"匸\",\"匿\":\"匿\",\"⼗\":\"十\",\"〸\":\"十\",\"〺\":\"卅\",\"卉\":\"卉\",\"࿖\":\"卍\",\"࿕\":\"卐\",\"卑\":\"卑\",\"卑\":\"卑\",\"博\":\"博\",\"ト\":\"卜\",\"⼘\":\"卜\",\"⼙\":\"卩\",\"⺋\":\"㔾\",\"即\":\"即\",\"卵\":\"卵\",\"卽\":\"卽\",\"卿\":\"卿\",\"卿\":\"卿\",\"卿\":\"卿\",\"⼚\":\"厂\",\"𠨬\":\"𠨬\",\"⼛\":\"厶\",\"參\":\"參\",\"⼜\":\"又\",\"及\":\"及\",\"叟\":\"叟\",\"𠭣\":\"𠭣\",\"ロ\":\"口\",\"⼝\":\"口\",\"囗\":\"口\",\"⼞\":\"口\",\"句\":\"句\",\"叫\":\"叫\",\"叱\":\"叱\",\"吆\":\"吆\",\"吏\":\"吏\",\"吝\":\"吝\",\"吸\":\"吸\",\"呂\":\"呂\",\"呈\":\"呈\",\"周\":\"周\",\"咞\":\"咞\",\"咢\":\"咢\",\"咽\":\"咽\",\"䎛\":\"㖈\",\"哶\":\"哶\",\"唐\":\"唐\",\"啓\":\"啓\",\"啟\":\"啓\",\"啕\":\"啕\",\"啣\":\"啣\",\"善\":\"善\",\"善\":\"善\",\"喇\":\"喇\",\"喙\":\"喙\",\"喙\":\"喙\",\"喝\":\"喝\",\"喝\":\"喝\",\"喫\":\"喫\",\"喳\":\"喳\",\"嗀\":\"嗀\",\"嗂\":\"嗂\",\"嗢\":\"嗢\",\"嘆\":\"嘆\",\"嘆\":\"嘆\",\"噑\":\"噑\",\"噴\":\"噴\",\"器\":\"器\",\"囹\":\"囹\",\"圖\":\"圖\",\"圗\":\"圗\",\"⼟\":\"土\",\"士\":\"土\",\"⼠\":\"土\",\"型\":\"型\",\"城\":\"城\",\"㦳\":\"㘽\",\"埴\":\"埴\",\"堍\":\"堍\",\"報\":\"報\",\"堲\":\"堲\",\"塀\":\"塀\",\"塚\":\"塚\",\"塚\":\"塚\",\"塞\":\"塞\",\"填\":\"塡\",\"壿\":\"墫\",\"墬\":\"墬\",\"墳\":\"墳\",\"壘\":\"壘\",\"壟\":\"壟\",\"𡓤\":\"𡓤\",\"壮\":\"壮\",\"売\":\"売\",\"壷\":\"壷\",\"⼡\":\"夂\",\"夆\":\"夆\",\"⼢\":\"夊\",\"タ\":\"夕\",\"⼣\":\"夕\",\"多\":\"多\",\"夢\":\"夢\",\"⼤\":\"大\",\"奄\":\"奄\",\"奈\":\"奈\",\"契\":\"契\",\"奔\":\"奔\",\"奢\":\"奢\",\"女\":\"女\",\"⼥\":\"女\",\"𡚨\":\"𡚨\",\"𡛪\":\"𡛪\",\"姘\":\"姘\",\"姬\":\"姬\",\"娛\":\"娛\",\"娧\":\"娧\",\"婢\":\"婢\",\"婦\":\"婦\",\"嬀\":\"媯\",\"㛮\":\"㛮\",\"㛼\":\"㛼\",\"媵\":\"媵\",\"嬈\":\"嬈\",\"嬨\":\"嬨\",\"嬾\":\"嬾\",\"嬾\":\"嬾\",\"⼦\":\"子\",\"⼧\":\"宀\",\"宅\":\"宅\",\"𡧈\":\"𡧈\",\"寃\":\"寃\",\"寘\":\"寘\",\"寧\":\"寧\",\"寧\":\"寧\",\"寧\":\"寧\",\"寮\":\"寮\",\"寳\":\"寳\",\"𡬘\":\"𡬘\",\"⼨\":\"寸\",\"寿\":\"寿\",\"将\":\"将\",\"⼩\":\"小\",\"尢\":\"尢\",\"⺐\":\"尢\",\"⼪\":\"尢\",\"⺏\":\"尣\",\"㞁\":\"㞁\",\"⼫\":\"尸\",\"尿\":\"尿\",\"屠\":\"屠\",\"屢\":\"屢\",\"層\":\"層\",\"履\":\"履\",\"屮\":\"屮\",\"屮\":\"屮\",\"⼬\":\"屮\",\"𡴋\":\"𡴋\",\"⼭\":\"山\",\"峀\":\"峀\",\"岍\":\"岍\",\"𡷤\":\"𡷤\",\"𡷦\":\"𡷦\",\"崙\":\"崙\",\"嵃\":\"嵃\",\"嵐\":\"嵐\",\"嵫\":\"嵫\",\"嵮\":\"嵮\",\"嵼\":\"嵼\",\"嶲\":\"嶲\",\"嶺\":\"嶺\",\"⼮\":\"巛\",\"巢\":\"巢\",\"エ\":\"工\",\"⼯\":\"工\",\"⼰\":\"己\",\"⺒\":\"巳\",\"㠯\":\"㠯\",\"巽\":\"巽\",\"⼱\":\"巾\",\"帲\":\"帡\",\"帨\":\"帨\",\"帽\":\"帽\",\"幩\":\"幩\",\"㡢\":\"㡢\",\"𢆃\":\"𢆃\",\"⼲\":\"干\",\"年\":\"年\",\"𢆟\":\"𢆟\",\"⺓\":\"幺\",\"⼳\":\"幺\",\"⼴\":\"广\",\"度\":\"度\",\"㡼\":\"㡼\",\"庰\":\"庰\",\"庳\":\"庳\",\"庶\":\"庶\",\"廊\":\"廊\",\"廊\":\"廊\",\"廉\":\"廉\",\"廒\":\"廒\",\"廓\":\"廓\",\"廙\":\"廙\",\"廬\":\"廬\",\"⼵\":\"廴\",\"廾\":\"廾\",\"⼶\":\"廾\",\"𢌱\":\"𢌱\",\"𢌱\":\"𢌱\",\"弄\":\"弄\",\"⼷\":\"弋\",\"⼸\":\"弓\",\"弢\":\"弢\",\"弢\":\"弢\",\"⼹\":\"彐\",\"⺔\":\"彑\",\"当\":\"当\",\"㣇\":\"㣇\",\"⼺\":\"彡\",\"形\":\"形\",\"彩\":\"彩\",\"彫\":\"彫\",\"⼻\":\"彳\",\"律\":\"律\",\"㣣\":\"㣣\",\"徚\":\"徚\",\"復\":\"復\",\"徭\":\"徭\",\"⼼\":\"心\",\"⺖\":\"忄\",\"⺗\":\"㣺\",\"忍\":\"忍\",\"志\":\"志\",\"念\":\"念\",\"忹\":\"忹\",\"怒\":\"怒\",\"怜\":\"怜\",\"恵\":\"恵\",\"㤜\":\"㤜\",\"㤺\":\"㤺\",\"悁\":\"悁\",\"悔\":\"悔\",\"悔\":\"悔\",\"惇\":\"惇\",\"惘\":\"惘\",\"惡\":\"惡\",\"𢛔\":\"𢛔\",\"愈\":\"愈\",\"慨\":\"慨\",\"慄\":\"慄\",\"慈\":\"慈\",\"慌\":\"慌\",\"慌\":\"慌\",\"慎\":\"慎\",\"慎\":\"慎\",\"慠\":\"慠\",\"慺\":\"慺\",\"憎\":\"憎\",\"憎\":\"憎\",\"憎\":\"憎\",\"憐\":\"憐\",\"憤\":\"憤\",\"憯\":\"憯\",\"憲\":\"憲\",\"𢡄\":\"𢡄\",\"𢡊\":\"𢡊\",\"懞\":\"懞\",\"懲\":\"懲\",\"懲\":\"懲\",\"懲\":\"懲\",\"懶\":\"懶\",\"懶\":\"懶\",\"戀\":\"戀\",\"⼽\":\"戈\",\"成\":\"成\",\"戛\":\"戛\",\"戮\":\"戮\",\"戴\":\"戴\",\"⼾\":\"戶\",\"戸\":\"戶\",\"⼿\":\"手\",\"⺘\":\"扌\",\"扝\":\"扝\",\"抱\":\"抱\",\"拉\":\"拉\",\"拏\":\"拏\",\"拓\":\"拓\",\"拔\":\"拔\",\"拼\":\"拼\",\"拾\":\"拾\",\"𢬌\":\"𢬌\",\"挽\":\"挽\",\"捐\":\"捐\",\"捨\":\"捨\",\"捻\":\"捻\",\"掃\":\"掃\",\"掠\":\"掠\",\"掩\":\"掩\",\"揄\":\"揄\",\"揤\":\"揤\",\"摒\":\"摒\",\"𢯱\":\"𢯱\",\"搜\":\"搜\",\"搢\":\"搢\",\"揅\":\"揅\",\"摩\":\"摩\",\"摷\":\"摷\",\"摾\":\"摾\",\"㨮\":\"㨮\",\"搉\":\"㩁\",\"撚\":\"撚\",\"撝\":\"撝\",\"擄\":\"擄\",\"㩬\":\"㩬\",\"⽀\":\"支\",\"⽁\":\"攴\",\"⺙\":\"攵\",\"敏\":\"敏\",\"敏\":\"敏\",\"敖\":\"敖\",\"敬\":\"敬\",\"數\":\"數\",\"𣀊\":\"𣀊\",\"⽂\":\"文\",\"⻫\":\"斉\",\"⽃\":\"斗\",\"料\":\"料\",\"⽄\":\"斤\",\"⽅\":\"方\",\"旅\":\"旅\",\"⽆\":\"无\",\"⺛\":\"旡\",\"既\":\"既\",\"旣\":\"旣\",\"⽇\":\"日\",\"易\":\"易\",\"曶\":\"㫚\",\"㫤\":\"㫤\",\"晉\":\"晉\",\"晩\":\"晚\",\"晴\":\"晴\",\"晴\":\"晴\",\"暑\":\"暑\",\"暑\":\"暑\",\"暈\":\"暈\",\"㬈\":\"㬈\",\"暜\":\"暜\",\"暴\":\"暴\",\"曆\":\"曆\",\"㬙\":\"㬙\",\"𣊸\":\"𣊸\",\"⽈\":\"曰\",\"更\":\"更\",\"書\":\"書\",\"⽉\":\"月\",\"𣍟\":\"𣍟\",\"肦\":\"朌\",\"胐\":\"朏\",\"胊\":\"朐\",\"脁\":\"朓\",\"胶\":\"㬵\",\"朗\":\"朗\",\"朗\":\"朗\",\"朗\":\"朗\",\"脧\":\"朘\",\"望\":\"望\",\"望\":\"望\",\"幐\":\"㬺\",\"䐠\":\"㬻\",\"𣎓\":\"𣎓\",\"膧\":\"朣\",\"𣎜\":\"𣎜\",\"⽊\":\"木\",\"李\":\"李\",\"杓\":\"杓\",\"杖\":\"杖\",\"杞\":\"杞\",\"𣏃\":\"𣏃\",\"柿\":\"杮\",\"杻\":\"杻\",\"枅\":\"枅\",\"林\":\"林\",\"㭉\":\"㭉\",\"𣏕\":\"𣏕\",\"柳\":\"柳\",\"柺\":\"柺\",\"栗\":\"栗\",\"栟\":\"栟\",\"桒\":\"桒\",\"𣑭\":\"𣑭\",\"梁\":\"梁\",\"梅\":\"梅\",\"梅\":\"梅\",\"梎\":\"梎\",\"梨\":\"梨\",\"椔\":\"椔\",\"楂\":\"楂\",\"㮝\":\"㮝\",\"㮝\":\"㮝\",\"槩\":\"㮣\",\"樧\":\"榝\",\"榣\":\"榣\",\"槪\":\"槪\",\"樂\":\"樂\",\"樂\":\"樂\",\"樂\":\"樂\",\"樓\":\"樓\",\"𣚣\":\"𣚣\",\"檨\":\"檨\",\"櫓\":\"櫓\",\"櫛\":\"櫛\",\"欄\":\"欄\",\"㰘\":\"㰘\",\"⽋\":\"欠\",\"次\":\"次\",\"𣢧\":\"𣢧\",\"歔\":\"歔\",\"㱎\":\"㱎\",\"⽌\":\"止\",\"⻭\":\"歯\",\"歲\":\"歲\",\"歷\":\"歷\",\"歹\":\"歹\",\"⽍\":\"歹\",\"⺞\":\"歺\",\"殟\":\"殟\",\"殮\":\"殮\",\"⽎\":\"殳\",\"殺\":\"殺\",\"殺\":\"殺\",\"殺\":\"殺\",\"殻\":\"殻\",\"𣪍\":\"𣪍\",\"⽏\":\"毋\",\"⺟\":\"母\",\"𣫺\":\"𣫺\",\"⽐\":\"比\",\"⽑\":\"毛\",\"⽒\":\"氏\",\"⺠\":\"民\",\"⽓\":\"气\",\"⽔\":\"水\",\"⺡\":\"氵\",\"⺢\":\"氺\",\"汎\":\"汎\",\"汧\":\"汧\",\"沈\":\"沈\",\"沿\":\"沿\",\"泌\":\"泌\",\"泍\":\"泍\",\"泥\":\"泥\",\"𣲼\":\"𣲼\",\"洛\":\"洛\",\"洞\":\"洞\",\"洴\":\"洴\",\"派\":\"派\",\"流\":\"流\",\"流\":\"流\",\"流\":\"流\",\"洖\":\"洖\",\"浩\":\"浩\",\"浪\":\"浪\",\"海\":\"海\",\"海\":\"海\",\"浸\":\"浸\",\"涅\":\"涅\",\"𣴞\":\"𣴞\",\"淋\":\"淋\",\"淚\":\"淚\",\"淪\":\"淪\",\"淹\":\"淹\",\"渚\":\"渚\",\"港\":\"港\",\"湮\":\"湮\",\"潙\":\"溈\",\"滋\":\"滋\",\"滋\":\"滋\",\"溜\":\"溜\",\"溺\":\"溺\",\"滇\":\"滇\",\"滑\":\"滑\",\"滛\":\"滛\",\"㴳\":\"㴳\",\"漏\":\"漏\",\"漢\":\"漢\",\"漢\":\"漢\",\"漣\":\"漣\",\"𣻑\":\"𣻑\",\"潮\":\"潮\",\"𣽞\":\"𣽞\",\"𣾎\":\"𣾎\",\"濆\":\"濆\",\"濫\":\"濫\",\"濾\":\"濾\",\"瀛\":\"瀛\",\"瀞\":\"瀞\",\"瀞\":\"瀞\",\"瀹\":\"瀹\",\"灊\":\"灊\",\"㶖\":\"㶖\",\"⽕\":\"火\",\"⺣\":\"灬\",\"灰\":\"灰\",\"灷\":\"灷\",\"災\":\"災\",\"炙\":\"炙\",\"炭\":\"炭\",\"烈\":\"烈\",\"烙\":\"烙\",\"煮\":\"煮\",\"煮\":\"煮\",\"𤉣\":\"𤉣\",\"煅\":\"煅\",\"煉\":\"煉\",\"𤋮\":\"𤋮\",\"熜\":\"熜\",\"燎\":\"燎\",\"燐\":\"燐\",\"𤎫\":\"𤎫\",\"爐\":\"爐\",\"爛\":\"爛\",\"爨\":\"爨\",\"⽖\":\"爪\",\"爫\":\"爫\",\"⺤\":\"爫\",\"爵\":\"爵\",\"爵\":\"爵\",\"⽗\":\"父\",\"⽘\":\"爻\",\"⺦\":\"丬\",\"⽙\":\"爿\",\"⽚\":\"片\",\"牐\":\"牐\",\"⽛\":\"牙\",\"𤘈\":\"𤘈\",\"⽜\":\"牛\",\"牢\":\"牢\",\"犀\":\"犀\",\"犕\":\"犕\",\"⽝\":\"犬\",\"⺨\":\"犭\",\"犯\":\"犯\",\"狀\":\"狀\",\"𤜵\":\"𤜵\",\"狼\":\"狼\",\"猪\":\"猪\",\"猪\":\"猪\",\"𤠔\":\"𤠔\",\"獵\":\"獵\",\"獺\":\"獺\",\"⽞\":\"玄\",\"率\":\"率\",\"率\":\"率\",\"⽟\":\"玉\",\"王\":\"王\",\"㺬\":\"㺬\",\"玥\":\"玥\",\"玲\":\"玲\",\"㺸\":\"㺸\",\"㺸\":\"㺸\",\"珞\":\"珞\",\"琉\":\"琉\",\"理\":\"理\",\"琢\":\"琢\",\"瑇\":\"瑇\",\"瑜\":\"瑜\",\"瑩\":\"瑩\",\"瑱\":\"瑱\",\"瑱\":\"瑱\",\"璅\":\"璅\",\"璉\":\"璉\",\"璘\":\"璘\",\"瓊\":\"瓊\",\"⽠\":\"瓜\",\"⽡\":\"瓦\",\"㼛\":\"㼛\",\"甆\":\"甆\",\"⽢\":\"甘\",\"⽣\":\"生\",\"甤\":\"甤\",\"⽤\":\"用\",\"⽥\":\"田\",\"画\":\"画\",\"甾\":\"甾\",\"𤰶\":\"𤰶\",\"留\":\"留\",\"略\":\"略\",\"異\":\"異\",\"異\":\"異\",\"𤲒\":\"𤲒\",\"⽦\":\"疋\",\"⽧\":\"疒\",\"痢\":\"痢\",\"瘐\":\"瘐\",\"瘟\":\"瘟\",\"瘝\":\"瘝\",\"療\":\"療\",\"癩\":\"癩\",\"⽨\":\"癶\",\"⽩\":\"白\",\"𤾡\":\"𤾡\",\"𤾸\":\"𤾸\",\"⽪\":\"皮\",\"⽫\":\"皿\",\"𥁄\":\"𥁄\",\"㿼\":\"㿼\",\"益\":\"益\",\"益\":\"益\",\"盛\":\"盛\",\"盧\":\"盧\",\"䀈\":\"䀈\",\"⽬\":\"目\",\"直\":\"直\",\"直\":\"直\",\"𥃲\":\"𥃲\",\"𥃳\":\"𥃳\",\"省\":\"省\",\"䀘\":\"䀘\",\"𥄙\":\"𥄙\",\"眞\":\"眞\",\"真\":\"真\",\"真\":\"真\",\"𥄳\":\"𥄳\",\"着\":\"着\",\"睊\":\"睊\",\"睊\":\"睊\",\"鿃\":\"䀹\",\"䀹\":\"䀹\",\"䀹\":\"䀹\",\"晣\":\"䀿\",\"䁆\":\"䁆\",\"瞋\":\"瞋\",\"𥉉\":\"𥉉\",\"瞧\":\"瞧\",\"⽭\":\"矛\",\"⽮\":\"矢\",\"⽯\":\"石\",\"䂖\":\"䂖\",\"𥐝\":\"𥐝\",\"硏\":\"研\",\"硎\":\"硎\",\"硫\":\"硫\",\"碌\":\"碌\",\"碌\":\"碌\",\"碑\":\"碑\",\"磊\":\"磊\",\"磌\":\"磌\",\"磌\":\"磌\",\"磻\":\"磻\",\"䃣\":\"䃣\",\"礪\":\"礪\",\"⽰\":\"示\",\"⺭\":\"礻\",\"礼\":\"礼\",\"社\":\"社\",\"祈\":\"祈\",\"祉\":\"祉\",\"𥘦\":\"𥘦\",\"祐\":\"祐\",\"祖\":\"祖\",\"祖\":\"祖\",\"祝\":\"祝\",\"神\":\"神\",\"祥\":\"祥\",\"視\":\"視\",\"視\":\"視\",\"祿\":\"祿\",\"𥚚\":\"𥚚\",\"禍\":\"禍\",\"禎\":\"禎\",\"福\":\"福\",\"福\":\"福\",\"𥛅\":\"𥛅\",\"禮\":\"禮\",\"⽱\":\"禸\",\"⽲\":\"禾\",\"秊\":\"秊\",\"䄯\":\"䄯\",\"秫\":\"秫\",\"稜\":\"稜\",\"穊\":\"穊\",\"穀\":\"穀\",\"穀\":\"穀\",\"穏\":\"穏\",\"⽳\":\"穴\",\"突\":\"突\",\"𥥼\":\"𥥼\",\"窱\":\"窱\",\"立\":\"立\",\"⽴\":\"立\",\"⻯\":\"竜\",\"𥪧\":\"𥪧\",\"𥪧\":\"𥪧\",\"竮\":\"竮\",\"⽵\":\"竹\",\"笠\":\"笠\",\"節\":\"節\",\"節\":\"節\",\"䈂\":\"䈂\",\"𥮫\":\"𥮫\",\"篆\":\"篆\",\"䈧\":\"䈧\",\"築\":\"築\",\"𥲀\":\"𥲀\",\"𥳐\":\"𥳐\",\"簾\":\"簾\",\"籠\":\"籠\",\"⽶\":\"米\",\"类\":\"类\",\"粒\":\"粒\",\"精\":\"精\",\"糒\":\"糒\",\"糖\":\"糖\",\"糨\":\"糨\",\"䊠\":\"䊠\",\"糣\":\"糣\",\"糧\":\"糧\",\"⽷\":\"糸\",\"⺯\":\"糹\",\"𥾆\":\"𥾆\",\"紀\":\"紀\",\"紐\":\"紐\",\"索\":\"索\",\"累\":\"累\",\"絶\":\"絕\",\"絣\":\"絣\",\"絛\":\"絛\",\"綠\":\"綠\",\"綾\":\"綾\",\"緇\":\"緇\",\"練\":\"練\",\"練\":\"練\",\"練\":\"練\",\"縂\":\"縂\",\"䌁\":\"䌁\",\"縉\":\"縉\",\"縷\":\"縷\",\"繁\":\"繁\",\"繅\":\"繅\",\"𦇚\":\"𦇚\",\"䌴\":\"䌴\",\"⽸\":\"缶\",\"𦈨\":\"𦈨\",\"缾\":\"缾\",\"𦉇\":\"𦉇\",\"⽹\":\"网\",\"⺫\":\"罒\",\"⺲\":\"罒\",\"⺱\":\"罓\",\"䍙\":\"䍙\",\"署\":\"署\",\"𦋙\":\"𦋙\",\"罹\":\"罹\",\"罺\":\"罺\",\"羅\":\"羅\",\"𦌾\":\"𦌾\",\"⽺\":\"羊\",\"羕\":\"羕\",\"羚\":\"羚\",\"羽\":\"羽\",\"⽻\":\"羽\",\"翺\":\"翺\",\"老\":\"老\",\"⽼\":\"老\",\"⺹\":\"耂\",\"者\":\"者\",\"者\":\"者\",\"者\":\"者\",\"⽽\":\"而\",\"𦓚\":\"𦓚\",\"⽾\":\"耒\",\"𦔣\":\"𦔣\",\"⽿\":\"耳\",\"聆\":\"聆\",\"聠\":\"聠\",\"𦖨\":\"𦖨\",\"聯\":\"聯\",\"聰\":\"聰\",\"聾\":\"聾\",\"⾀\":\"聿\",\"⺺\":\"肀\",\"⾁\":\"肉\",\"肋\":\"肋\",\"肭\":\"肭\",\"育\":\"育\",\"䏕\":\"䏕\",\"䏙\":\"䏙\",\"腁\":\"胼\",\"脃\":\"脃\",\"脾\":\"脾\",\"䐋\":\"䐋\",\"朡\":\"朡\",\"𦞧\":\"𦞧\",\"𦞵\":\"𦞵\",\"朦\":\"䑃\",\"臘\":\"臘\",\"⾂\":\"臣\",\"臨\":\"臨\",\"⾃\":\"自\",\"臭\":\"臭\",\"⾄\":\"至\",\"⾅\":\"臼\",\"舁\":\"舁\",\"舁\":\"舁\",\"舄\":\"舄\",\"⾆\":\"舌\",\"舘\":\"舘\",\"⾇\":\"舛\",\"⾈\":\"舟\",\"䑫\":\"䑫\",\"⾉\":\"艮\",\"良\":\"良\",\"⾊\":\"色\",\"⾋\":\"艸\",\"艹\":\"艹\",\"艹\":\"艹\",\"⺾\":\"艹\",\"⺿\":\"艹\",\"⻀\":\"艹\",\"芋\":\"芋\",\"芑\":\"芑\",\"芝\":\"芝\",\"花\":\"花\",\"芳\":\"芳\",\"芽\":\"芽\",\"若\":\"若\",\"若\":\"若\",\"苦\":\"苦\",\"𦬼\":\"𦬼\",\"茶\":\"茶\",\"荒\":\"荒\",\"荣\":\"荣\",\"茝\":\"茝\",\"茣\":\"茣\",\"莽\":\"莽\",\"荓\":\"荓\",\"菉\":\"菉\",\"菊\":\"菊\",\"菌\":\"菌\",\"菜\":\"菜\",\"菧\":\"菧\",\"華\":\"華\",\"菱\":\"菱\",\"著\":\"著\",\"著\":\"著\",\"𦰶\":\"𦰶\",\"莭\":\"莭\",\"落\":\"落\",\"葉\":\"葉\",\"蔿\":\"蒍\",\"𦳕\":\"𦳕\",\"𦵫\":\"𦵫\",\"蓮\":\"蓮\",\"蓱\":\"蓱\",\"蓳\":\"蓳\",\"蓼\":\"蓼\",\"蔖\":\"蔖\",\"䔫\":\"䔫\",\"蕤\":\"蕤\",\"𦼬\":\"𦼬\",\"藍\":\"藍\",\"䕝\":\"䕝\",\"𦾱\":\"𦾱\",\"䕡\":\"䕡\",\"藺\":\"藺\",\"蘆\":\"蘆\",\"䕫\":\"䕫\",\"蘒\":\"蘒\",\"蘭\":\"蘭\",\"𧃒\":\"𧃒\",\"虁\":\"蘷\",\"蘿\":\"蘿\",\"⾌\":\"虍\",\"⻁\":\"虎\",\"虐\":\"虐\",\"虜\":\"虜\",\"虜\":\"虜\",\"虧\":\"虧\",\"虩\":\"虩\",\"⾍\":\"虫\",\"蚩\":\"蚩\",\"蚈\":\"蚈\",\"蛢\":\"蛢\",\"蜎\":\"蜎\",\"蜨\":\"蜨\",\"蝫\":\"蝫\",\"蟡\":\"蟡\",\"蝹\":\"蝹\",\"蝹\":\"蝹\",\"螆\":\"螆\",\"䗗\":\"䗗\",\"𧏊\":\"𧏊\",\"螺\":\"螺\",\"蠁\":\"蠁\",\"䗹\":\"䗹\",\"蠟\":\"蠟\",\"⾎\":\"血\",\"行\":\"行\",\"⾏\":\"行\",\"衠\":\"衠\",\"衣\":\"衣\",\"⾐\":\"衣\",\"⻂\":\"衤\",\"裂\":\"裂\",\"𧙧\":\"𧙧\",\"裏\":\"裏\",\"裗\":\"裗\",\"裞\":\"裞\",\"裡\":\"裡\",\"裸\":\"裸\",\"裺\":\"裺\",\"䘵\":\"䘵\",\"褐\":\"褐\",\"襁\":\"襁\",\"襤\":\"襤\",\"⾑\":\"襾\",\"⻄\":\"西\",\"⻃\":\"覀\",\"覆\":\"覆\",\"見\":\"見\",\"⾒\":\"見\",\"𧢮\":\"𧢮\",\"⻅\":\"见\",\"⾓\":\"角\",\"⾔\":\"言\",\"𧥦\":\"𧥦\",\"詽\":\"訮\",\"訞\":\"䚶\",\"䚾\":\"䚾\",\"䛇\":\"䛇\",\"誠\":\"誠\",\"說\":\"說\",\"說\":\"說\",\"調\":\"調\",\"請\":\"請\",\"諒\":\"諒\",\"論\":\"論\",\"諭\":\"諭\",\"諭\":\"諭\",\"諸\":\"諸\",\"諸\":\"諸\",\"諾\":\"諾\",\"諾\":\"諾\",\"謁\":\"謁\",\"謁\":\"謁\",\"謹\":\"謹\",\"謹\":\"謹\",\"識\":\"識\",\"讀\":\"讀\",\"讏\":\"讆\",\"變\":\"變\",\"變\":\"變\",\"⻈\":\"讠\",\"⾕\":\"谷\",\"⾖\":\"豆\",\"豈\":\"豈\",\"豕\":\"豕\",\"⾗\":\"豕\",\"豣\":\"豜\",\"⾘\":\"豸\",\"𧲨\":\"𧲨\",\"⾙\":\"貝\",\"貫\":\"貫\",\"賁\":\"賁\",\"賂\":\"賂\",\"賈\":\"賈\",\"賓\":\"賓\",\"贈\":\"贈\",\"贈\":\"贈\",\"贛\":\"贛\",\"⻉\":\"贝\",\"⾚\":\"赤\",\"⾛\":\"走\",\"起\":\"起\",\"趆\":\"赿\",\"𧻓\":\"𧻓\",\"𧼯\":\"𧼯\",\"⾜\":\"足\",\"跋\":\"跋\",\"趼\":\"趼\",\"跺\":\"跥\",\"路\":\"路\",\"跰\":\"跰\",\"躛\":\"躗\",\"⾝\":\"身\",\"車\":\"車\",\"⾞\":\"車\",\"軔\":\"軔\",\"輧\":\"軿\",\"輦\":\"輦\",\"輪\":\"輪\",\"輸\":\"輸\",\"輸\":\"輸\",\"輻\":\"輻\",\"轢\":\"轢\",\"⻋\":\"车\",\"⾟\":\"辛\",\"辞\":\"辞\",\"辰\":\"辰\",\"⾠\":\"辰\",\"⾡\":\"辵\",\"辶\":\"辶\",\"⻌\":\"辶\",\"⻍\":\"辶\",\"巡\":\"巡\",\"連\":\"連\",\"逸\":\"逸\",\"逸\":\"逸\",\"遲\":\"遲\",\"遼\":\"遼\",\"𨗒\":\"𨗒\",\"𨗭\":\"𨗭\",\"邏\":\"邏\",\"⾢\":\"邑\",\"邔\":\"邔\",\"郎\":\"郎\",\"郞\":\"郎\",\"郞\":\"郎\",\"郱\":\"郱\",\"都\":\"都\",\"𨜮\":\"𨜮\",\"鄑\":\"鄑\",\"鄛\":\"鄛\",\"⾣\":\"酉\",\"酪\":\"酪\",\"醙\":\"醙\",\"醴\":\"醴\",\"⾤\":\"釆\",\"里\":\"里\",\"⾥\":\"里\",\"量\":\"量\",\"金\":\"金\",\"⾦\":\"金\",\"鈴\":\"鈴\",\"鈸\":\"鈸\",\"鉶\":\"鉶\",\"鋗\":\"鋗\",\"鋘\":\"鋘\",\"鉼\":\"鉼\",\"錄\":\"錄\",\"鍊\":\"鍊\",\"鎮\":\"鎭\",\"鏹\":\"鏹\",\"鐕\":\"鐕\",\"𨯺\":\"𨯺\",\"⻐\":\"钅\",\"⻑\":\"長\",\"⾧\":\"長\",\"⻒\":\"镸\",\"⻓\":\"长\",\"⾨\":\"門\",\"開\":\"開\",\"䦕\":\"䦕\",\"閭\":\"閭\",\"閷\":\"閷\",\"𨵷\":\"𨵷\",\"⻔\":\"门\",\"⾩\":\"阜\",\"⻏\":\"阝\",\"⻖\":\"阝\",\"阮\":\"阮\",\"陋\":\"陋\",\"降\":\"降\",\"陵\":\"陵\",\"陸\":\"陸\",\"陼\":\"陼\",\"隆\":\"隆\",\"隣\":\"隣\",\"䧦\":\"䧦\",\"⾪\":\"隶\",\"隷\":\"隷\",\"隸\":\"隷\",\"隸\":\"隷\",\"⾫\":\"隹\",\"雃\":\"雃\",\"離\":\"離\",\"難\":\"難\",\"難\":\"難\",\"⾬\":\"雨\",\"零\":\"零\",\"雷\":\"雷\",\"霣\":\"霣\",\"𩅅\":\"𩅅\",\"露\":\"露\",\"靈\":\"靈\",\"⾭\":\"靑\",\"⻘\":\"青\",\"靖\":\"靖\",\"靖\":\"靖\",\"𩇟\":\"𩇟\",\"⾮\":\"非\",\"⾯\":\"面\",\"𩈚\":\"𩈚\",\"⾰\":\"革\",\"䩮\":\"䩮\",\"䩶\":\"䩶\",\"⾱\":\"韋\",\"韛\":\"韛\",\"韠\":\"韠\",\"⻙\":\"韦\",\"⾲\":\"韭\",\"𩐊\":\"𩐊\",\"⾳\":\"音\",\"響\":\"響\",\"響\":\"響\",\"⾴\":\"頁\",\"䪲\":\"䪲\",\"頋\":\"頋\",\"頋\":\"頋\",\"頋\":\"頋\",\"領\":\"領\",\"頩\":\"頩\",\"𩒖\":\"𩒖\",\"頻\":\"頻\",\"頻\":\"頻\",\"類\":\"類\",\"⻚\":\"页\",\"⾵\":\"風\",\"𩖶\":\"𩖶\",\"⻛\":\"风\",\"⾶\":\"飛\",\"⻜\":\"飞\",\"⻝\":\"食\",\"⾷\":\"食\",\"⻟\":\"飠\",\"飢\":\"飢\",\"飯\":\"飯\",\"飼\":\"飼\",\"䬳\":\"䬳\",\"館\":\"館\",\"餩\":\"餩\",\"⻠\":\"饣\",\"⾸\":\"首\",\"⾹\":\"香\",\"馧\":\"馧\",\"⾺\":\"馬\",\"駂\":\"駂\",\"駱\":\"駱\",\"駾\":\"駾\",\"驪\":\"驪\",\"⻢\":\"马\",\"⾻\":\"骨\",\"䯎\":\"䯎\",\"⾼\":\"高\",\"⾽\":\"髟\",\"𩬰\":\"𩬰\",\"鬒\":\"鬒\",\"鬒\":\"鬒\",\"⾾\":\"鬥\",\"⾿\":\"鬯\",\"⿀\":\"鬲\",\"⿁\":\"鬼\",\"⻤\":\"鬼\",\"⿂\":\"魚\",\"魯\":\"魯\",\"鱀\":\"鱀\",\"鱗\":\"鱗\",\"⻥\":\"鱼\",\"⿃\":\"鳥\",\"鳽\":\"鳽\",\"䳎\":\"䳎\",\"鵧\":\"鵧\",\"䳭\":\"䳭\",\"𪃎\":\"𪃎\",\"鶴\":\"鶴\",\"𪄅\":\"𪄅\",\"䳸\":\"䳸\",\"鷺\":\"鷺\",\"𪈎\":\"𪈎\",\"鸞\":\"鸞\",\"鹃\":\"鹂\",\"⿄\":\"鹵\",\"鹿\":\"鹿\",\"⿅\":\"鹿\",\"𪊑\":\"𪊑\",\"麗\":\"麗\",\"麟\":\"麟\",\"⿆\":\"麥\",\"⻨\":\"麦\",\"麻\":\"麻\",\"⿇\":\"麻\",\"𪎒\":\"𪎒\",\"⿈\":\"黃\",\"⻩\":\"黄\",\"⿉\":\"黍\",\"黎\":\"黎\",\"䵖\":\"䵖\",\"⿊\":\"黑\",\"黒\":\"黑\",\"墨\":\"墨\",\"黹\":\"黹\",\"⿋\":\"黹\",\"⿌\":\"黽\",\"鼅\":\"鼅\",\"黾\":\"黾\",\"⿍\":\"鼎\",\"鼏\":\"鼏\",\"⿎\":\"鼓\",\"鼖\":\"鼖\",\"⿏\":\"鼠\",\"鼻\":\"鼻\",\"⿐\":\"鼻\",\"齃\":\"齃\",\"⿑\":\"齊\",\"⻬\":\"齐\",\"⿒\":\"齒\",\"𪘀\":\"𪘀\",\"⻮\":\"齿\",\"龍\":\"龍\",\"⿓\":\"龍\",\"龎\":\"龎\",\"⻰\":\"龙\",\"龜\":\"龜\",\"龜\":\"龜\",\"龜\":\"龜\",\"⿔\":\"龜\",\"⻳\":\"龟\",\"⿕\":\"龠\"}");

/***/ }),

/***/ "6e9e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7ed73c7c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("44c8");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7ed73c7c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7ed73c7c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7ed73c7c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7ed73c7c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "6eca":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "6f2e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__("966d");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__("e3db");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__("faa1").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("2aaa");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("f60b").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = Object.create(__webpack_require__("3a7c"));
util.inherits = __webpack_require__("3fb5");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(2);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__("9b54");
var destroyImpl = __webpack_require__("c4c0");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__("d6dd");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__("7d72").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__("d6dd");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__("7d72").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba"), __webpack_require__("4362")))

/***/ }),

/***/ "6f45":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {

    var debug = false;

    var root = this;

    var EXIF = function(obj) {
        if (obj instanceof EXIF) return obj;
        if (!(this instanceof EXIF)) return new EXIF(obj);
        this.EXIFwrapped = obj;
    };

    if (true) {
        if ( true && module.exports) {
            exports = module.exports = EXIF;
        }
        exports.EXIF = EXIF;
    } else {}

    var ExifTags = EXIF.Tags = {

        // version tags
        0x9000 : "ExifVersion",             // EXIF version
        0xA000 : "FlashpixVersion",         // Flashpix format version

        // colorspace tags
        0xA001 : "ColorSpace",              // Color space information tag

        // image configuration
        0xA002 : "PixelXDimension",         // Valid width of meaningful image
        0xA003 : "PixelYDimension",         // Valid height of meaningful image
        0x9101 : "ComponentsConfiguration", // Information about channels
        0x9102 : "CompressedBitsPerPixel",  // Compressed bits per pixel

        // user information
        0x927C : "MakerNote",               // Any desired information written by the manufacturer
        0x9286 : "UserComment",             // Comments by user

        // related file
        0xA004 : "RelatedSoundFile",        // Name of related sound file

        // date and time
        0x9003 : "DateTimeOriginal",        // Date and time when the original image was generated
        0x9004 : "DateTimeDigitized",       // Date and time when the image was stored digitally
        0x9290 : "SubsecTime",              // Fractions of seconds for DateTime
        0x9291 : "SubsecTimeOriginal",      // Fractions of seconds for DateTimeOriginal
        0x9292 : "SubsecTimeDigitized",     // Fractions of seconds for DateTimeDigitized

        // picture-taking conditions
        0x829A : "ExposureTime",            // Exposure time (in seconds)
        0x829D : "FNumber",                 // F number
        0x8822 : "ExposureProgram",         // Exposure program
        0x8824 : "SpectralSensitivity",     // Spectral sensitivity
        0x8827 : "ISOSpeedRatings",         // ISO speed rating
        0x8828 : "OECF",                    // Optoelectric conversion factor
        0x9201 : "ShutterSpeedValue",       // Shutter speed
        0x9202 : "ApertureValue",           // Lens aperture
        0x9203 : "BrightnessValue",         // Value of brightness
        0x9204 : "ExposureBias",            // Exposure bias
        0x9205 : "MaxApertureValue",        // Smallest F number of lens
        0x9206 : "SubjectDistance",         // Distance to subject in meters
        0x9207 : "MeteringMode",            // Metering mode
        0x9208 : "LightSource",             // Kind of light source
        0x9209 : "Flash",                   // Flash status
        0x9214 : "SubjectArea",             // Location and area of main subject
        0x920A : "FocalLength",             // Focal length of the lens in mm
        0xA20B : "FlashEnergy",             // Strobe energy in BCPS
        0xA20C : "SpatialFrequencyResponse",    //
        0xA20E : "FocalPlaneXResolution",   // Number of pixels in width direction per FocalPlaneResolutionUnit
        0xA20F : "FocalPlaneYResolution",   // Number of pixels in height direction per FocalPlaneResolutionUnit
        0xA210 : "FocalPlaneResolutionUnit",    // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution
        0xA214 : "SubjectLocation",         // Location of subject in image
        0xA215 : "ExposureIndex",           // Exposure index selected on camera
        0xA217 : "SensingMethod",           // Image sensor type
        0xA300 : "FileSource",              // Image source (3 == DSC)
        0xA301 : "SceneType",               // Scene type (1 == directly photographed)
        0xA302 : "CFAPattern",              // Color filter array geometric pattern
        0xA401 : "CustomRendered",          // Special processing
        0xA402 : "ExposureMode",            // Exposure mode
        0xA403 : "WhiteBalance",            // 1 = auto white balance, 2 = manual
        0xA404 : "DigitalZoomRation",       // Digital zoom ratio
        0xA405 : "FocalLengthIn35mmFilm",   // Equivalent foacl length assuming 35mm film camera (in mm)
        0xA406 : "SceneCaptureType",        // Type of scene
        0xA407 : "GainControl",             // Degree of overall image gain adjustment
        0xA408 : "Contrast",                // Direction of contrast processing applied by camera
        0xA409 : "Saturation",              // Direction of saturation processing applied by camera
        0xA40A : "Sharpness",               // Direction of sharpness processing applied by camera
        0xA40B : "DeviceSettingDescription",    //
        0xA40C : "SubjectDistanceRange",    // Distance to subject

        // other tags
        0xA005 : "InteroperabilityIFDPointer",
        0xA420 : "ImageUniqueID"            // Identifier assigned uniquely to each image
    };

    var TiffTags = EXIF.TiffTags = {
        0x0100 : "ImageWidth",
        0x0101 : "ImageHeight",
        0x8769 : "ExifIFDPointer",
        0x8825 : "GPSInfoIFDPointer",
        0xA005 : "InteroperabilityIFDPointer",
        0x0102 : "BitsPerSample",
        0x0103 : "Compression",
        0x0106 : "PhotometricInterpretation",
        0x0112 : "Orientation",
        0x0115 : "SamplesPerPixel",
        0x011C : "PlanarConfiguration",
        0x0212 : "YCbCrSubSampling",
        0x0213 : "YCbCrPositioning",
        0x011A : "XResolution",
        0x011B : "YResolution",
        0x0128 : "ResolutionUnit",
        0x0111 : "StripOffsets",
        0x0116 : "RowsPerStrip",
        0x0117 : "StripByteCounts",
        0x0201 : "JPEGInterchangeFormat",
        0x0202 : "JPEGInterchangeFormatLength",
        0x012D : "TransferFunction",
        0x013E : "WhitePoint",
        0x013F : "PrimaryChromaticities",
        0x0211 : "YCbCrCoefficients",
        0x0214 : "ReferenceBlackWhite",
        0x0132 : "DateTime",
        0x010E : "ImageDescription",
        0x010F : "Make",
        0x0110 : "Model",
        0x0131 : "Software",
        0x013B : "Artist",
        0x8298 : "Copyright"
    };

    var GPSTags = EXIF.GPSTags = {
        0x0000 : "GPSVersionID",
        0x0001 : "GPSLatitudeRef",
        0x0002 : "GPSLatitude",
        0x0003 : "GPSLongitudeRef",
        0x0004 : "GPSLongitude",
        0x0005 : "GPSAltitudeRef",
        0x0006 : "GPSAltitude",
        0x0007 : "GPSTimeStamp",
        0x0008 : "GPSSatellites",
        0x0009 : "GPSStatus",
        0x000A : "GPSMeasureMode",
        0x000B : "GPSDOP",
        0x000C : "GPSSpeedRef",
        0x000D : "GPSSpeed",
        0x000E : "GPSTrackRef",
        0x000F : "GPSTrack",
        0x0010 : "GPSImgDirectionRef",
        0x0011 : "GPSImgDirection",
        0x0012 : "GPSMapDatum",
        0x0013 : "GPSDestLatitudeRef",
        0x0014 : "GPSDestLatitude",
        0x0015 : "GPSDestLongitudeRef",
        0x0016 : "GPSDestLongitude",
        0x0017 : "GPSDestBearingRef",
        0x0018 : "GPSDestBearing",
        0x0019 : "GPSDestDistanceRef",
        0x001A : "GPSDestDistance",
        0x001B : "GPSProcessingMethod",
        0x001C : "GPSAreaInformation",
        0x001D : "GPSDateStamp",
        0x001E : "GPSDifferential"
    };

     // EXIF 2.3 Spec
    var IFD1Tags = EXIF.IFD1Tags = {
        0x0100: "ImageWidth",
        0x0101: "ImageHeight",
        0x0102: "BitsPerSample",
        0x0103: "Compression",
        0x0106: "PhotometricInterpretation",
        0x0111: "StripOffsets",
        0x0112: "Orientation",
        0x0115: "SamplesPerPixel",
        0x0116: "RowsPerStrip",
        0x0117: "StripByteCounts",
        0x011A: "XResolution",
        0x011B: "YResolution",
        0x011C: "PlanarConfiguration",
        0x0128: "ResolutionUnit",
        0x0201: "JpegIFOffset",    // When image format is JPEG, this value show offset to JPEG data stored.(aka "ThumbnailOffset" or "JPEGInterchangeFormat")
        0x0202: "JpegIFByteCount", // When image format is JPEG, this value shows data size of JPEG image (aka "ThumbnailLength" or "JPEGInterchangeFormatLength")
        0x0211: "YCbCrCoefficients",
        0x0212: "YCbCrSubSampling",
        0x0213: "YCbCrPositioning",
        0x0214: "ReferenceBlackWhite"
    };

    var StringValues = EXIF.StringValues = {
        ExposureProgram : {
            0 : "Not defined",
            1 : "Manual",
            2 : "Normal program",
            3 : "Aperture priority",
            4 : "Shutter priority",
            5 : "Creative program",
            6 : "Action program",
            7 : "Portrait mode",
            8 : "Landscape mode"
        },
        MeteringMode : {
            0 : "Unknown",
            1 : "Average",
            2 : "CenterWeightedAverage",
            3 : "Spot",
            4 : "MultiSpot",
            5 : "Pattern",
            6 : "Partial",
            255 : "Other"
        },
        LightSource : {
            0 : "Unknown",
            1 : "Daylight",
            2 : "Fluorescent",
            3 : "Tungsten (incandescent light)",
            4 : "Flash",
            9 : "Fine weather",
            10 : "Cloudy weather",
            11 : "Shade",
            12 : "Daylight fluorescent (D 5700 - 7100K)",
            13 : "Day white fluorescent (N 4600 - 5400K)",
            14 : "Cool white fluorescent (W 3900 - 4500K)",
            15 : "White fluorescent (WW 3200 - 3700K)",
            17 : "Standard light A",
            18 : "Standard light B",
            19 : "Standard light C",
            20 : "D55",
            21 : "D65",
            22 : "D75",
            23 : "D50",
            24 : "ISO studio tungsten",
            255 : "Other"
        },
        Flash : {
            0x0000 : "Flash did not fire",
            0x0001 : "Flash fired",
            0x0005 : "Strobe return light not detected",
            0x0007 : "Strobe return light detected",
            0x0009 : "Flash fired, compulsory flash mode",
            0x000D : "Flash fired, compulsory flash mode, return light not detected",
            0x000F : "Flash fired, compulsory flash mode, return light detected",
            0x0010 : "Flash did not fire, compulsory flash mode",
            0x0018 : "Flash did not fire, auto mode",
            0x0019 : "Flash fired, auto mode",
            0x001D : "Flash fired, auto mode, return light not detected",
            0x001F : "Flash fired, auto mode, return light detected",
            0x0020 : "No flash function",
            0x0041 : "Flash fired, red-eye reduction mode",
            0x0045 : "Flash fired, red-eye reduction mode, return light not detected",
            0x0047 : "Flash fired, red-eye reduction mode, return light detected",
            0x0049 : "Flash fired, compulsory flash mode, red-eye reduction mode",
            0x004D : "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
            0x004F : "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
            0x0059 : "Flash fired, auto mode, red-eye reduction mode",
            0x005D : "Flash fired, auto mode, return light not detected, red-eye reduction mode",
            0x005F : "Flash fired, auto mode, return light detected, red-eye reduction mode"
        },
        SensingMethod : {
            1 : "Not defined",
            2 : "One-chip color area sensor",
            3 : "Two-chip color area sensor",
            4 : "Three-chip color area sensor",
            5 : "Color sequential area sensor",
            7 : "Trilinear sensor",
            8 : "Color sequential linear sensor"
        },
        SceneCaptureType : {
            0 : "Standard",
            1 : "Landscape",
            2 : "Portrait",
            3 : "Night scene"
        },
        SceneType : {
            1 : "Directly photographed"
        },
        CustomRendered : {
            0 : "Normal process",
            1 : "Custom process"
        },
        WhiteBalance : {
            0 : "Auto white balance",
            1 : "Manual white balance"
        },
        GainControl : {
            0 : "None",
            1 : "Low gain up",
            2 : "High gain up",
            3 : "Low gain down",
            4 : "High gain down"
        },
        Contrast : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        Saturation : {
            0 : "Normal",
            1 : "Low saturation",
            2 : "High saturation"
        },
        Sharpness : {
            0 : "Normal",
            1 : "Soft",
            2 : "Hard"
        },
        SubjectDistanceRange : {
            0 : "Unknown",
            1 : "Macro",
            2 : "Close view",
            3 : "Distant view"
        },
        FileSource : {
            3 : "DSC"
        },

        Components : {
            0 : "",
            1 : "Y",
            2 : "Cb",
            3 : "Cr",
            4 : "R",
            5 : "G",
            6 : "B"
        }
    };

    function addEvent(element, event, handler) {
        if (element.addEventListener) {
            element.addEventListener(event, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent("on" + event, handler);
        }
    }

    function imageHasData(img) {
        return !!(img.exifdata);
    }


    function base64ToArrayBuffer(base64, contentType) {
        contentType = contentType || base64.match(/^data\:([^\;]+)\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'
        base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
        var binary = atob(base64);
        var len = binary.length;
        var buffer = new ArrayBuffer(len);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < len; i++) {
            view[i] = binary.charCodeAt(i);
        }
        return buffer;
    }

    function objectURLToBlob(url, callback) {
        var http = new XMLHttpRequest();
        http.open("GET", url, true);
        http.responseType = "blob";
        http.onload = function(e) {
            if (this.status == 200 || this.status === 0) {
                callback(this.response);
            }
        };
        http.send();
    }

    function getImageData(img, callback) {
        function handleBinaryFile(binFile) {
            var data = findEXIFinJPEG(binFile);
            img.exifdata = data || {};
            var iptcdata = findIPTCinJPEG(binFile);
            img.iptcdata = iptcdata || {};
            if (EXIF.isXmpEnabled) {
               var xmpdata= findXMPinJPEG(binFile);
               img.xmpdata = xmpdata || {};               
            }
            if (callback) {
                callback.call(img);
            }
        }

        if (img.src) {
            if (/^data\:/i.test(img.src)) { // Data URI
                var arrayBuffer = base64ToArrayBuffer(img.src);
                handleBinaryFile(arrayBuffer);

            } else if (/^blob\:/i.test(img.src)) { // Object URL
                var fileReader = new FileReader();
                fileReader.onload = function(e) {
                    handleBinaryFile(e.target.result);
                };
                objectURLToBlob(img.src, function (blob) {
                    fileReader.readAsArrayBuffer(blob);
                });
            } else {
                var http = new XMLHttpRequest();
                http.onload = function() {
                    if (this.status == 200 || this.status === 0) {
                        handleBinaryFile(http.response);
                    } else {
                        throw "Could not load image";
                    }
                    http = null;
                };
                http.open("GET", img.src, true);
                http.responseType = "arraybuffer";
                http.send(null);
            }
        } else if (self.FileReader && (img instanceof self.Blob || img instanceof self.File)) {
            var fileReader = new FileReader();
            fileReader.onload = function(e) {
                if (debug) console.log("Got file of length " + e.target.result.byteLength);
                handleBinaryFile(e.target.result);
            };

            fileReader.readAsArrayBuffer(img);
        }
    }

    function findEXIFinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            marker;

        while (offset < length) {
            if (dataView.getUint8(offset) != 0xFF) {
                if (debug) console.log("Not a valid marker at offset " + offset + ", found: " + dataView.getUint8(offset));
                return false; // not a valid marker, something is wrong
            }

            marker = dataView.getUint8(offset + 1);
            if (debug) console.log(marker);

            // we could implement handling for other markers here,
            // but we're only looking for 0xFFE1 for EXIF data

            if (marker == 225) {
                if (debug) console.log("Found 0xFFE1 marker");

                return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);

                // offset += 2 + file.getShortAt(offset+2, true);

            } else {
                offset += 2 + dataView.getUint16(offset+2);
            }

        }

    }

    function findIPTCinJPEG(file) {
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
            if (debug) console.log("Not a valid JPEG");
            return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength;


        var isFieldSegmentStart = function(dataView, offset){
            return (
                dataView.getUint8(offset) === 0x38 &&
                dataView.getUint8(offset+1) === 0x42 &&
                dataView.getUint8(offset+2) === 0x49 &&
                dataView.getUint8(offset+3) === 0x4D &&
                dataView.getUint8(offset+4) === 0x04 &&
                dataView.getUint8(offset+5) === 0x04
            );
        };

        while (offset < length) {

            if ( isFieldSegmentStart(dataView, offset )){

                // Get the length of the name header (which is padded to an even number of bytes)
                var nameHeaderLength = dataView.getUint8(offset+7);
                if(nameHeaderLength % 2 !== 0) nameHeaderLength += 1;
                // Check for pre photoshop 6 format
                if(nameHeaderLength === 0) {
                    // Always 4
                    nameHeaderLength = 4;
                }

                var startOffset = offset + 8 + nameHeaderLength;
                var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);

                return readIPTCData(file, startOffset, sectionLength);

                break;

            }


            // Not the marker, continue searching
            offset++;

        }

    }
    var IptcFieldMap = {
        0x78 : 'caption',
        0x6E : 'credit',
        0x19 : 'keywords',
        0x37 : 'dateCreated',
        0x50 : 'byline',
        0x55 : 'bylineTitle',
        0x7A : 'captionWriter',
        0x69 : 'headline',
        0x74 : 'copyright',
        0x0F : 'category'
    };
    function readIPTCData(file, startOffset, sectionLength){
        var dataView = new DataView(file);
        var data = {};
        var fieldValue, fieldName, dataSize, segmentType, segmentSize;
        var segmentStartPos = startOffset;
        while(segmentStartPos < startOffset+sectionLength) {
            if(dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos+1) === 0x02){
                segmentType = dataView.getUint8(segmentStartPos+2);
                if(segmentType in IptcFieldMap) {
                    dataSize = dataView.getInt16(segmentStartPos+3);
                    segmentSize = dataSize + 5;
                    fieldName = IptcFieldMap[segmentType];
                    fieldValue = getStringFromDB(dataView, segmentStartPos+5, dataSize);
                    // Check if we already stored a value with this name
                    if(data.hasOwnProperty(fieldName)) {
                        // Value already stored with this name, create multivalue field
                        if(data[fieldName] instanceof Array) {
                            data[fieldName].push(fieldValue);
                        }
                        else {
                            data[fieldName] = [data[fieldName], fieldValue];
                        }
                    }
                    else {
                        data[fieldName] = fieldValue;
                    }
                }

            }
            segmentStartPos++;
        }
        return data;
    }



    function readTags(file, tiffStart, dirStart, strings, bigEnd) {
        var entries = file.getUint16(dirStart, !bigEnd),
            tags = {},
            entryOffset, tag,
            i;

        for (i=0;i<entries;i++) {
            entryOffset = dirStart + i*12 + 2;
            tag = strings[file.getUint16(entryOffset, !bigEnd)];
            if (!tag && debug) console.log("Unknown tag: " + file.getUint16(entryOffset, !bigEnd));
            tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
        }
        return tags;
    }


    function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {
        var type = file.getUint16(entryOffset+2, !bigEnd),
            numValues = file.getUint32(entryOffset+4, !bigEnd),
            valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
            offset,
            vals, val, n,
            numerator, denominator;

        switch (type) {
            case 1: // byte, 8-bit unsigned int
            case 7: // undefined, 8-bit byte, value depending on field
                if (numValues == 1) {
                    return file.getUint8(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint8(offset + n);
                    }
                    return vals;
                }

            case 2: // ascii, 8-bit byte
                offset = numValues > 4 ? valueOffset : (entryOffset + 8);
                return getStringFromDB(file, offset, numValues-1);

            case 3: // short, 16 bit int
                if (numValues == 1) {
                    return file.getUint16(entryOffset + 8, !bigEnd);
                } else {
                    offset = numValues > 2 ? valueOffset : (entryOffset + 8);
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint16(offset + 2*n, !bigEnd);
                    }
                    return vals;
                }

            case 4: // long, 32 bit int
                if (numValues == 1) {
                    return file.getUint32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 5:    // rational = two long values, first is numerator, second is denominator
                if (numValues == 1) {
                    numerator = file.getUint32(valueOffset, !bigEnd);
                    denominator = file.getUint32(valueOffset+4, !bigEnd);
                    val = new Number(numerator / denominator);
                    val.numerator = numerator;
                    val.denominator = denominator;
                    return val;
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
                        denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
                        vals[n] = new Number(numerator / denominator);
                        vals[n].numerator = numerator;
                        vals[n].denominator = denominator;
                    }
                    return vals;
                }

            case 9: // slong, 32 bit signed int
                if (numValues == 1) {
                    return file.getInt32(entryOffset + 8, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
                    }
                    return vals;
                }

            case 10: // signed rational, two slongs, first is numerator, second is denominator
                if (numValues == 1) {
                    return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
                } else {
                    vals = [];
                    for (n=0;n<numValues;n++) {
                        vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
                    }
                    return vals;
                }
        }
    }

    /**
    * Given an IFD (Image File Directory) start offset
    * returns an offset to next IFD or 0 if it's the last IFD.
    */
    function getNextIFDOffset(dataView, dirStart, bigEnd){
        //the first 2bytes means the number of directory entries contains in this IFD
        var entries = dataView.getUint16(dirStart, !bigEnd);

        // After last directory entry, there is a 4bytes of data,
        // it means an offset to next IFD.
        // If its value is '0x00000000', it means this is the last IFD and there is no linked IFD.

        return dataView.getUint32(dirStart + 2 + entries * 12, !bigEnd); // each entry is 12 bytes long
    }

    function readThumbnailImage(dataView, tiffStart, firstIFDOffset, bigEnd){
        // get the IFD1 offset
        var IFD1OffsetPointer = getNextIFDOffset(dataView, tiffStart+firstIFDOffset, bigEnd);

        if (!IFD1OffsetPointer) {
            // console.log('******** IFD1Offset is empty, image thumb not found ********');
            return {};
        }
        else if (IFD1OffsetPointer > dataView.byteLength) { // this should not happen
            // console.log('******** IFD1Offset is outside the bounds of the DataView ********');
            return {};
        }
        // console.log('*******  thumbnail IFD offset (IFD1) is: %s', IFD1OffsetPointer);

        var thumbTags = readTags(dataView, tiffStart, tiffStart + IFD1OffsetPointer, IFD1Tags, bigEnd)

        // EXIF 2.3 specification for JPEG format thumbnail

        // If the value of Compression(0x0103) Tag in IFD1 is '6', thumbnail image format is JPEG.
        // Most of Exif image uses JPEG format for thumbnail. In that case, you can get offset of thumbnail
        // by JpegIFOffset(0x0201) Tag in IFD1, size of thumbnail by JpegIFByteCount(0x0202) Tag.
        // Data format is ordinary JPEG format, starts from 0xFFD8 and ends by 0xFFD9. It seems that
        // JPEG format and 160x120pixels of size are recommended thumbnail format for Exif2.1 or later.

        if (thumbTags['Compression']) {
            // console.log('Thumbnail image found!');

            switch (thumbTags['Compression']) {
                case 6:
                    // console.log('Thumbnail image format is JPEG');
                    if (thumbTags.JpegIFOffset && thumbTags.JpegIFByteCount) {
                    // extract the thumbnail
                        var tOffset = tiffStart + thumbTags.JpegIFOffset;
                        var tLength = thumbTags.JpegIFByteCount;
                        thumbTags['blob'] = new Blob([new Uint8Array(dataView.buffer, tOffset, tLength)], {
                            type: 'image/jpeg'
                        });
                    }
                break;

            case 1:
                console.log("Thumbnail image format is TIFF, which is not implemented.");
                break;
            default:
                console.log("Unknown thumbnail image format '%s'", thumbTags['Compression']);
            }
        }
        else if (thumbTags['PhotometricInterpretation'] == 2) {
            console.log("Thumbnail image format is RGB, which is not implemented.");
        }
        return thumbTags;
    }

    function getStringFromDB(buffer, start, length) {
        var outstr = "";
        for (n = start; n < start+length; n++) {
            outstr += String.fromCharCode(buffer.getUint8(n));
        }
        return outstr;
    }

    function readEXIFData(file, start) {
        if (getStringFromDB(file, start, 4) != "Exif") {
            if (debug) console.log("Not valid EXIF data! " + getStringFromDB(file, start, 4));
            return false;
        }

        var bigEnd,
            tags, tag,
            exifData, gpsData,
            tiffOffset = start + 6;

        // test for TIFF validity and endianness
        if (file.getUint16(tiffOffset) == 0x4949) {
            bigEnd = false;
        } else if (file.getUint16(tiffOffset) == 0x4D4D) {
            bigEnd = true;
        } else {
            if (debug) console.log("Not valid TIFF data! (no 0x4949 or 0x4D4D)");
            return false;
        }

        if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A) {
            if (debug) console.log("Not valid TIFF data! (no 0x002A)");
            return false;
        }

        var firstIFDOffset = file.getUint32(tiffOffset+4, !bigEnd);

        if (firstIFDOffset < 0x00000008) {
            if (debug) console.log("Not valid TIFF data! (First offset less than 8)", file.getUint32(tiffOffset+4, !bigEnd));
            return false;
        }

        tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);

        if (tags.ExifIFDPointer) {
            exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);
            for (tag in exifData) {
                switch (tag) {
                    case "LightSource" :
                    case "Flash" :
                    case "MeteringMode" :
                    case "ExposureProgram" :
                    case "SensingMethod" :
                    case "SceneCaptureType" :
                    case "SceneType" :
                    case "CustomRendered" :
                    case "WhiteBalance" :
                    case "GainControl" :
                    case "Contrast" :
                    case "Saturation" :
                    case "Sharpness" :
                    case "SubjectDistanceRange" :
                    case "FileSource" :
                        exifData[tag] = StringValues[tag][exifData[tag]];
                        break;

                    case "ExifVersion" :
                    case "FlashpixVersion" :
                        exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);
                        break;

                    case "ComponentsConfiguration" :
                        exifData[tag] =
                            StringValues.Components[exifData[tag][0]] +
                            StringValues.Components[exifData[tag][1]] +
                            StringValues.Components[exifData[tag][2]] +
                            StringValues.Components[exifData[tag][3]];
                        break;
                }
                tags[tag] = exifData[tag];
            }
        }

        if (tags.GPSInfoIFDPointer) {
            gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);
            for (tag in gpsData) {
                switch (tag) {
                    case "GPSVersionID" :
                        gpsData[tag] = gpsData[tag][0] +
                            "." + gpsData[tag][1] +
                            "." + gpsData[tag][2] +
                            "." + gpsData[tag][3];
                        break;
                }
                tags[tag] = gpsData[tag];
            }
        }

        // extract thumbnail
        tags['thumbnail'] = readThumbnailImage(file, tiffOffset, firstIFDOffset, bigEnd);

        return tags;
    }

   function findXMPinJPEG(file) {

        if (!('DOMParser' in self)) {
            // console.warn('XML parsing not supported without DOMParser');
            return;
        }
        var dataView = new DataView(file);

        if (debug) console.log("Got file of length " + file.byteLength);
        if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {
           if (debug) console.log("Not a valid JPEG");
           return false; // not a valid jpeg
        }

        var offset = 2,
            length = file.byteLength,
            dom = new DOMParser();

        while (offset < (length-4)) {
            if (getStringFromDB(dataView, offset, 4) == "http") {
                var startOffset = offset - 1;
                var sectionLength = dataView.getUint16(offset - 2) - 1;
                var xmpString = getStringFromDB(dataView, startOffset, sectionLength)
                var xmpEndIndex = xmpString.indexOf('xmpmeta>') + 8;
                xmpString = xmpString.substring( xmpString.indexOf( '<x:xmpmeta' ), xmpEndIndex );

                var indexOfXmp = xmpString.indexOf('x:xmpmeta') + 10
                //Many custom written programs embed xmp/xml without any namespace. Following are some of them.
                //Without these namespaces, XML is thought to be invalid by parsers
                xmpString = xmpString.slice(0, indexOfXmp)
                            + 'xmlns:Iptc4xmpCore="http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/" '
                            + 'xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" '
                            + 'xmlns:tiff="http://ns.adobe.com/tiff/1.0/" '
                            + 'xmlns:plus="http://schemas.android.com/apk/lib/com.google.android.gms.plus" '
                            + 'xmlns:ext="http://www.gettyimages.com/xsltExtension/1.0" '
                            + 'xmlns:exif="http://ns.adobe.com/exif/1.0/" '
                            + 'xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#" '
                            + 'xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#" '
                            + 'xmlns:crs="http://ns.adobe.com/camera-raw-settings/1.0/" '
                            + 'xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/" '
                            + 'xmlns:Iptc4xmpExt="http://iptc.org/std/Iptc4xmpExt/2008-02-29/" '
                            + xmpString.slice(indexOfXmp)

                var domDocument = dom.parseFromString( xmpString, 'text/xml' );
                return xml2Object(domDocument);
            } else{
             offset++;
            }
        }
    }

    function xml2json(xml) {
        var json = {};
      
        if (xml.nodeType == 1) { // element node
          if (xml.attributes.length > 0) {
            json['@attributes'] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
              var attribute = xml.attributes.item(j);
              json['@attributes'][attribute.nodeName] = attribute.nodeValue;
            }
          }
        } else if (xml.nodeType == 3) { // text node
          return xml.nodeValue;
        }
      
        // deal with children
        if (xml.hasChildNodes()) {
          for(var i = 0; i < xml.childNodes.length; i++) {
            var child = xml.childNodes.item(i);
            var nodeName = child.nodeName;
            if (json[nodeName] == null) {
              json[nodeName] = xml2json(child);
            } else {
              if (json[nodeName].push == null) {
                var old = json[nodeName];
                json[nodeName] = [];
                json[nodeName].push(old);
              }
              json[nodeName].push(xml2json(child));
            }
          }
        }
        
        return json;
    }

    function xml2Object(xml) {
        try {
            var obj = {};
            if (xml.children.length > 0) {
              for (var i = 0; i < xml.children.length; i++) {
                var item = xml.children.item(i);
                var attributes = item.attributes;
                for(var idx in attributes) {
                    var itemAtt = attributes[idx];
                    var dataKey = itemAtt.nodeName;
                    var dataValue = itemAtt.nodeValue;

                    if(dataKey !== undefined) {
                        obj[dataKey] = dataValue;
                    }
                }
                var nodeName = item.nodeName;

                if (typeof (obj[nodeName]) == "undefined") {
                  obj[nodeName] = xml2json(item);
                } else {
                  if (typeof (obj[nodeName].push) == "undefined") {
                    var old = obj[nodeName];

                    obj[nodeName] = [];
                    obj[nodeName].push(old);
                  }
                  obj[nodeName].push(xml2json(item));
                }
              }
            } else {
              obj = xml.textContent;
            }
            return obj;
          } catch (e) {
              console.log(e.message);
          }
    }

    EXIF.enableXmp = function() {
        EXIF.isXmpEnabled = true;
    }

    EXIF.disableXmp = function() {
        EXIF.isXmpEnabled = false;
    }

    EXIF.getData = function(img, callback) {
        if (((self.Image && img instanceof self.Image)
            || (self.HTMLImageElement && img instanceof self.HTMLImageElement))
            && !img.complete)
            return false;

        if (!imageHasData(img)) {
            getImageData(img, callback);
        } else {
            if (callback) {
                callback.call(img);
            }
        }
        return true;
    }

    EXIF.getTag = function(img, tag) {
        if (!imageHasData(img)) return;
        return img.exifdata[tag];
    }
    
    EXIF.getIptcTag = function(img, tag) {
        if (!imageHasData(img)) return;
        return img.iptcdata[tag];
    }

    EXIF.getAllTags = function(img) {
        if (!imageHasData(img)) return {};
        var a,
            data = img.exifdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }
    
    EXIF.getAllIptcTags = function(img) {
        if (!imageHasData(img)) return {};
        var a,
            data = img.iptcdata,
            tags = {};
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                tags[a] = data[a];
            }
        }
        return tags;
    }

    EXIF.pretty = function(img) {
        if (!imageHasData(img)) return "";
        var a,
            data = img.exifdata,
            strPretty = "";
        for (a in data) {
            if (data.hasOwnProperty(a)) {
                if (typeof data[a] == "object") {
                    if (data[a] instanceof Number) {
                        strPretty += a + " : " + data[a] + " [" + data[a].numerator + "/" + data[a].denominator + "]\r\n";
                    } else {
                        strPretty += a + " : [" + data[a].length + " values]\r\n";
                    }
                } else {
                    strPretty += a + " : " + data[a] + "\r\n";
                }
            }
        }
        return strPretty;
    }

    EXIF.readFromBinaryFile = function(file) {
        return findEXIFinJPEG(file);
    }

    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
            return EXIF;
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
}.call(this));



/***/ }),

/***/ "6fbc":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "body{color:#02061a;background:rgb(var(--background-total-theme))}a{text-decoration:none}select{-moz-appearance:none!important;-webkit-appearance:none!important;appearance:none!important}input{outline:none}input:focus{border:10px}.unselectable{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.loadinggradient{background:linear-gradient(-45deg,rgb(var(--background-secondary-theme)),rgb(var(--background-total-theme)),rgb(var(--background-main)));background-size:400% 400%;-webkit-animation:gradient 2s ease infinite;animation:gradient 2s ease infinite}.messagesLine{display:flex;justify-content:flex-start;align-items:center;margin:20px 0;transition:.3s}.circlePreview{width:22px;height:22px;margin:0 10px 0 0;background-color:#000;border-radius:50%;transition:.3s}.messageLine{margin:0 auto 0 0}.messageLine,.myMessageLine{border-radius:13px;height:34px;transition:.3s}.myMessageLine{margin:0 0 0 auto}.dg-container{font-family:Segoe UI Variable,Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif}.dg-container .dg-main-content{padding:1.5em;border:0;border-radius:0;background:rgb(var(--background-total-theme));color:rgb(var(--text-color))}.dg-container .dg-content-footer{overflow:hidden}.dg-container .dg-content-footer button{margin-left:.5em;display:block;float:right;font-size:1em;font-weight:400;color:rgb(var(--color-bg-ac));background:transparent;border:1px solid transparent}.dg-container .dg-content-footer button.dg-pull-right{border:1px solid rgb(var(--color-bg-ac));background:rgb(var(--color-bg-ac));color:rgb(var(--text-on-bg-ac-color))}.dg-container .dg-content-body{border:0;padding-bottom:0}.dg-container .dg-content-body .dg-content{font-size:2em;font-weight:100}@-webkit-keyframes gradient{0%{background-position:0 50%}50%{background-position:100% 50%}to{background-position:0 50%}}@keyframes gradient{0%{background-position:0 50%}50%{background-position:100% 50%}to{background-position:0 50%}}mark{background-color:rgb(var(--color-bg-selection))!important}button.button{background:rgb(var(--color-bg-ac));border:1px solid rgb(var(--color-bg-ac));color:rgb(var(--text-on-bg-ac-color));padding:1em;text-align:center;transition:.3s;min-width:200px;cursor:pointer;outline:none;text-decoration:none}button.button.small{padding:.5em 1em;min-width:150px;font-size:.8em}button.button.good{background:rgb(var(--color-good));border:1px solid rgb(var(--color-good))}@media (pointer:fine){button.button.good:hover{background:rgba(var(--color-good),.9);color:rgb(var(--text-on-bg-ac-color))}}button.button.black{background:rgb(var(--neutral-grad-0));border:1px solid rgb(var(--neutral-grad-0));color:rgb(var(--neutral-grad-3))}@media (pointer:fine){button.button.black:hover{background:rgba(var(--neutral-grad-3),.9);color:rgb(var(--text-on-bg-ac-color))}}button.button.orange{background:rgb(var(--color-bg-orange));border:1px solid rgb(var(--color-bg-orange))}@media (pointer:fine){button.button.orange:hover{background:rgba(var(--color-bg-orange),.9);color:rgb(var(--text-on-bg-ac-color))}}button.button.round{width:44px;height:44px;border-radius:50%;font-size:.8em;min-width:0;padding:0;line-height:42px}button.button.rounded{border-radius:22px}button.button.border{font-size:.8em}button.button.border,button.button.ghost{background:transparent;color:rgb(var(--color-txt-ac))}button.button.ghost{border:1px solid transparent}@media (pointer:fine){button.button.ghost:hover{color:rgb(var(--color-txt-gray))}}@media (pointer:fine){button.button:hover{background:transparent;color:rgb(var(--color-txt-ac))}}button.button.underscored{text-decoration:underline}button.button.badbutton{background:transparent;border:1px solid transparent;font-weight:500;color:rgb(var(--color-bad))}button.button[disabled=disabled]{cursor:default}button.button[disabled=disabled],button.button[disabled=disabled]:hover{background:rgb(var(--neutral-grad-2));border-color:rgb(var(--neutral-grad-2))}button.button[disabled=disabled]:hover{color:#fff}.rootcontent.pip *{transform:none!important}.rootcontent.pip .js-player #vjs-forward-button,.rootcontent.pip .js-player #vjs-rewind-button,.rootcontent.pip .js-player .vjs-big-play-button,.rootcontent.pip .js-player .vjs-control-bar,.rootcontent.pip .js-player .vjs-overlay{display:none!important}.iconbuttonRound{width:44px;height:44px;line-height:42px;text-align:center;cursor:pointer;color:rgb(var(--color-txt-ac));font-size:.9em;border-radius:50%;transition:.3s}@media (pointer:fine){.iconbuttonRound:hover{color:rgb(var(--neutral-grad-4))}}.iconbuttonRound.second{background:rgb(var(--neutral-grad-2))}@media (pointer:fine){.iconbuttonRound.second:hover{color:rgb(var(--color-txt-ac))}}.iconbuttonRound.bright{color:rgb(var(--text-on-bg-ac-color));background:rgb(var(--color-txt-ac))}@media (pointer:fine){.iconbuttonRound.bright:hover{color:rgb(var(--color-txt-ac-1))}}.iconbuttonsmall{cursor:pointer;color:rgb(var(--color-txt-ac));text-align:center;transition:.3s}.iconbuttonsmall i{font-size:.8em}@media (pointer:fine){.iconbuttonsmall:hover{color:rgb(var(--neutral-grad-3))}}.iconbutton{cursor:pointer;color:rgb(var(--color-txt-ac));text-align:center;transition:.3s}@media (pointer:fine){.iconbutton:hover{color:rgb(var(--neutral-grad-3))}}.internalpocketnetlink a{cursor:pointer;display:block;text-align:center;padding:1.5em;font-size:.8em;background:rgba(var(--neutral-grad-2),.1);color:rgb(var(--neutral-grad-3));border-radius:5px}.rootcontent{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-family:Segoe UI Variable,Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif;color:rgb(var(--text-color));font-size:1.1em}.rootcontent .dmdv{width:1px;height:1px;opacity:0;background:rgb(var(--background-total-theme))}.rootcontent.mobile,.rootcontent.unselect{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.rootcontent *{scrollbar-width:none}.rootcontent ::-webkit-scrollbar{width:0!important}.rootcontent .backface{position:fixed;left:100%;top:100%;bottom:-1%;right:-1%;transition:background .3s;background:transparent}.rootcontent .chatwrapper,.rootcontent .chatwrapper .main-wrapper{position:absolute;left:0;right:0;top:0;bottom:0}.rootcontent.fix{font-size:.9em}.rootcontent.fix .chatwrapper{transition:.3s;position:fixed;width:340px;top:70px;left:auto;right:.5em;bottom:.5em;z-index:1000}.rootcontent.fix .likeoffline{bottom:103px}.rootcontent.fix.minimized #modal .work,.rootcontent.fix.minimized .page .work{transition:.3s}.rootcontent.fix.minimized .work{padding:0}.rootcontent.fix.minimized #modal .work{padding:0 .5em}.rootcontent.fix.minimized .chatwrapper{width:44px}.rootcontent.fix.minimized:not(.active) .likeoffline,.rootcontent.fix.minimized:not(.active) .offline{background:transparent}.rootcontent.fix.minimized:not(.active) .likeoffline .table>div .icon,.rootcontent.fix.minimized:not(.active) .offline .table>div .icon{font-size:.8em;padding:0}.rootcontent.fix.minimized.active .page .work{padding:0 .25em}.rootcontent.fix.minimized.active .backface{top:0;bottom:0;right:0;left:0}.rootcontent .likeoffline,.rootcontent .offline{color:rgb(var(--neutral-grad-1));background:rgb(var(--background-secondary-theme))}.rootcontent .likeoffline .table,.rootcontent .offline .table{width:100%;height:100%}.rootcontent .likeoffline .table>div,.rootcontent .offline .table>div{vertical-align:middle;text-align:center;padding-bottom:45%}.rootcontent .likeoffline .table>div .icon,.rootcontent .offline .table>div .icon{font-size:2.3em;padding:.5em;color:rgb(var(--color-bg-ac))}.rootcontent .likeoffline .table>div .label,.rootcontent .offline .table>div .label{font-size:1em;padding:0 4em}.rootcontent .likeoffline{background:transparent}.rootcontent .fixedallwrapper,.rootcontent .fixedallwrapperDisplayed,.rootcontent .preloaderWrapper{position:absolute;left:0;right:0;top:0;bottom:0;z-index:998;transition:.3s}.rootcontent .fixedallwrapperDisplayed{background:rgb(var(--background-total-theme))}.rootcontent .fixedOnPageBottom,.rootcontent .fixedOnPageTop{transition:.3s}.rootcontent .fade-in-right-enter-to .fixedallwrapper,.rootcontent .fade-in-right-enter-to .preloaderWrapper,.rootcontent .fade-in-right-enter .fixedallwrapper,.rootcontent .fade-in-right-enter .preloaderWrapper,.rootcontent .fade-in-right-leave-to .fixedallwrapper,.rootcontent .fade-in-right-leave-to .preloaderWrapper{opacity:0}.rootcontent .fade-in-right-enter-to .fixedOnPageBottom,.rootcontent .fade-in-right-enter .fixedOnPageBottom,.rootcontent .fade-in-right-leave-to .fixedOnPageBottom{opacity:0;bottom:-1.5em}.rootcontent .fade-in-right-enter-to .fixedOnPageTop,.rootcontent .fade-in-right-enter .fixedOnPageTop,.rootcontent .fade-in-right-leave-to .fixedOnPageTop{opacity:0;top:-1.5em}.rootcontent .content{padding-top:66px}.rootcontent .work{padding:0 .5em;margin:0 auto;max-width:640px}.rootcontent .pwork{max-width:640px;background:transparent;margin:0 auto;padding:0 4em}.rootcontent .effects{position:fixed;left:0;top:0;bottom:0;right:0;z-index:2020}.rootcontent .speechWrapper{position:fixed;left:0;bottom:0;padding-bottom:2em;right:0;z-index:2000;height:80px}.rootcontent .speechWrapper .speechAbsWrapper{position:relative;width:100%;height:100%}.rootcontent .emptyRec{padding:10em 2em;text-align:center;font-size:.8em}.rootcontent .enablevoice .forbutton{margin-top:2em}.table{display:table;table-layout:fixed;width:100%}.table>div{display:table-cell}.m-message-container.is-bottom-right{padding:0;right:56px;bottom:.75em;width:auto}.m-message-container.is-top-left{top:calc(.5em + var(--app-margin-top))}.notificationWrapper{display:block;max-width:none;font-family:Segoe UI Variable,Segoe UI,SegoeUI,Helvetica Neue,Helvetica,Arial,sans-serif}.notificationWrapper.m-message-wrapper+.m-message-wrapper{margin-top:.5em}.notificationWrapper .m-message{padding:.5em .5em;border:1px solid rgba(var(--neutral-grad-0),.9);border-radius:5px;box-shadow:none;background:rgb(var(--background-secondary-theme));font-size:1em}.notificationWrapper .m-message--title{font-weight:700;color:rgb(var(--color-txt-gray-dark));font-size:.8em}.notificationWrapper .m-message--title:first-letter{text-transform:capitalize}.notificationWrapper .m-message--description{margin-top:0}.notificationWrapper .m-message-content{flex-grow:1}.notificationWrapper .m-message-content .listPreview{cursor:pointer}.notificationWrapper .m-message-content .listPreview .invitedEvent{width:180px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;display:flex;justify-content:space-between;align-items:center}.notificationWrapper .m-message-content .listPreview .invitedEvent span{display:block;font-size:.8em}.notificationWrapper .m-message-content .listPreview .invitedEvent .txt{color:rgb(var(--color-txt-gray-dark))}.notificationWrapper .m-message-content .listPreview .invitedEvent .txtNew{color:rgb(var(--color-good))}.notificationWrapper .m-message-content .listPreview .linkPreview span:first-letter{text-transform:uppercase}.notificationWrapper .m-message-content .listPreview .linkPreview .senderName{font-weight:700;color:rgb(var(--color-txt-gray-dark))}.notificationWrapper .m-message-content .listPreview .linkPreview .linkTitle{color:#707070}.notificationWrapper .m-message-content .listPreview .linkPreview .pocketnetLink{color:rgb(var(--color-txt-gray-dark))}.notificationWrapper .m-message-content .listPreview .previewMessageList span{color:rgb(var(--color-txt-gray-dark));text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:left}.notificationWrapper .m-message-content .listPreview .previewMessage{display:flex;justify-content:flex-start;align-items:center;width:100%}.notificationWrapper .m-message-content .listPreview .previewMessage span{display:block;color:rgb(var(--color-txt-gray-dark));font-size:.8em;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;text-align:left;max-width:150px}.notificationWrapper .m-message-icons{float:none}.notificationWrapper .m-message--icon{display:block;vertical-align:top}.notificationWrapper .m-message--button.m-message--arrow-down{display:none}.is-top-left{padding:.5em}.is-top-left .notificationWrapper{width:100%;box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}@media only screen and (max-width:640px){#app{width:100%}#app .pwork{padding:0 .5em}#app .work{padding:0 .5em 10px}}.collapse{max-width:768px;margin:0 auto;position:relative;z-index:999;padding:.5em 0}.collapse .iconbutton{width:50px;margin-left:auto;color:grey}@media (pointer:fine){.collapse .iconbutton{opacity:.5}.collapse .iconbutton:hover{opacity:1}}.collapsed{display:flex;justify-content:space-between;padding:1em 0;max-width:768px;margin:auto}.angle{display:flex;justify-content:center;width:50px;cursor:pointer}.expand{margin-right:.5em}.bout .collapse{display:none}.resize-observer{position:absolute;right:-20000px}.pswp__img{-o-object-fit:contain;object-fit:contain}.vue-js-switch{display:inline-block;position:relative;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;user-select:none;font-size:10px;cursor:pointer}.vue-js-switch .v-switch-input{opacity:0;position:absolute;width:1px;height:1px}.vue-js-switch .v-switch-label{position:absolute;top:0;font-weight:600;color:#fff;z-index:1}.vue-js-switch .v-switch-label.v-left{left:10px}.vue-js-switch .v-switch-label.v-right{right:10px}.vue-js-switch .v-switch-core{display:block;position:relative;box-sizing:border-box;outline:0;margin:0;transition:border-color .3s,background-color .3s;-webkit-user-select:none;-moz-user-select:none;user-select:none}.vue-js-switch .v-switch-core .v-switch-button{display:block;position:absolute;overflow:hidden;top:0;left:0;border-radius:100%;background-color:rgb(var(--background-total-theme));z-index:2}.vue-js-switch.disabled{pointer-events:none;opacity:.6}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "6ffa":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__("966d");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = Object.create(__webpack_require__("3a7c"));
util.inherits = __webpack_require__("3fb5");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__("b7d1")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__("2aaa");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__("f60b").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__("c4c0");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__("d6dd");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__("d6dd");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362"), __webpack_require__("c8ba")))

/***/ }),

/***/ "7037":
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}

module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "703d":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".searchWrapperEA.work[data-v-12492b0b]{margin-bottom:.5em!important;padding-top:.5em!important}#contacts.minimized:not(.active) .inviteUserDiv[data-v-12492b0b]{width:44px}#contacts.minimized:not(.active) .inviteUserDiv .inviteButton[data-v-12492b0b]{height:44px;text-align:center;line-height:44px}#contacts.minimized:not(.active) .inviteUserDiv .inviteButton i[data-v-12492b0b]{width:auto;position:relative}#contacts.minimized:not(.active) .inviteUserDiv span[data-v-12492b0b],#contacts.minimized:not(.active) .titleContacts[data-v-12492b0b]{display:none}.titleContacts[data-v-12492b0b],.titleSearchResult[data-v-12492b0b]{text-align:center}.titleContacts span[data-v-12492b0b],.titleSearchResult span[data-v-12492b0b]{font-size:.8em}.titleContacts.empty[data-v-12492b0b],.titleSearchResult.empty[data-v-12492b0b]{padding:2em;text-align:center}.titleContacts.empty span[data-v-12492b0b],.titleSearchResult.empty span[data-v-12492b0b]{font-size:1.5em;font-weight:100}.searchResult[data-v-12492b0b]{position:relative}.searchResult .linepreloaderWrapper[data-v-12492b0b]{padding:.5em;text-align:center}.searchResult .noSearchResult[data-v-12492b0b]{left:0;right:0;top:50%;padding:3em;text-align:center}.searchResult .noSearchResult i[data-v-12492b0b]{display:block;font-size:1.5em;color:stgb(--neutral-grad-3)}.searchResult .noSearchResult span[data-v-12492b0b]{color:stgb(--neutral-grad-3);display:block;margin:1em 0;font-size:2em;font-weight:100}.groupNameInputCaption[data-v-12492b0b]{padding:.5em 0;text-align:center}.groupNameInputCaption span[data-v-12492b0b]{font-size:.8em}.groupList .groupCaption[data-v-12492b0b]{position:relative;padding:.5em;text-align:center;display:flex;justify-content:space-between;align-items:center}.groupList .groupCaption .label[data-v-12492b0b]{font-size:.8em;font-weight:500}.groupList .groupCaption .selectWrapper[data-v-12492b0b]{position:relative}.groupList .groupCaption .selectWrapper i[data-v-12492b0b]{position:absolute;right:0;top:4px;color:stgb(--color-txt-ac)}.groupList .groupCaption .selectWrapper .selectRoomVisible[data-v-12492b0b]{padding-right:15px;font-size:.8em;cursor:pointer;color:stgb(--color-txt-ac);-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden;position:relative}.groupList .groupCaption .selectWrapper .selectRoomVisible[data-v-12492b0b]::-ms-expand{display:none}.groupList .groupCaption .selectWrapper .selectRoomVisible option[data-v-12492b0b]{font-size:.8em}.participants[data-v-12492b0b]{display:flex;background:rgba(var(--neutral-grad-0),.5);flex-wrap:wrap;border-radius:15px;padding:.5em;margin-bottom:.5em;max-height:123px;overflow-y:auto}.participants>div[data-v-12492b0b]{flex-grow:1}.participants .groupListName[data-v-12492b0b]{margin-bottom:.25em}.participants[data-v-12492b0b] .iconWrapper{width:33px}.participants[data-v-12492b0b] .iconWrapper .userpic{width:33px;height:33px;line-height:33px}.participants[data-v-12492b0b] .summaryLine{font-size:.8em}.participants .groupListName[data-v-12492b0b]{margin-right:1em;margin-top:0;border-radius:1em;display:flex;align-items:center}.participants .groupListName span[data-v-12492b0b]{color:rgb(var(--text-on-bg-ac-color));font-size:.9em;display:block;margin-right:5px}.participants .groupListName i[data-v-12492b0b]{text-align:center;width:33px}.chatBtnWrapper[data-v-12492b0b],.GroupBtnWrapper[data-v-12492b0b],.inviteBtnWrapper[data-v-12492b0b]{z-index:2;padding:.5em;text-align:center;left:0;right:0}.minimized .chatBtnWrapper[data-v-12492b0b],.minimized .GroupBtnWrapper[data-v-12492b0b],.minimized .inviteBtnWrapper[data-v-12492b0b]{position:sticky}#contacts.minimized .inviteUserDiv[data-v-12492b0b]{margin-top:.5em}.unauthorized.minimized[data-v-12492b0b]:not(.active){display:none}.unauthorized[data-v-12492b0b]{padding:3em 0;text-align:center}.unauthorized .buttonWrapper[data-v-12492b0b]{padding:1em}.unauthorized .captionWrapper[data-v-12492b0b]{padding:1em;text-align:center}.unauthorized .captionWrapper span[data-v-12492b0b]{font-size:1.5em;font-weight:100}.groupNameInput[data-v-12492b0b]{padding:.5em 1em}.groupNameInput label[data-v-12492b0b]{display:block}.groupNameInput input[data-v-12492b0b]{height:35px;width:100%;padding-right:0}#contacts .inviteUserDiv[data-v-12492b0b]{margin-top:.4em}#contacts .inviteUserDiv .inviteButton[data-v-12492b0b]{background-color:rgb(var(--color-bg-ac-bright));color:rgb(var(--text-on-bg-ac-color));width:100%;height:34px;font-size:.9em;border-radius:30px;position:relative;cursor:pointer}#contacts .inviteUserDiv .inviteButton i[data-v-12492b0b]{position:absolute;right:0;top:0;line-height:34px;width:50px;text-align:center}#contacts .inviteUserDiv .inviteButton.colored[data-v-12492b0b]{background-color:rgb(var(--color-bg-orange))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "704f":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("76df");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("63f17088", content, shadowRoot)
};

/***/ }),

/***/ "706e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ModalWindow_vue_vue_type_style_index_0_id_96a5a68e_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("cde8");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ModalWindow_vue_vue_type_style_index_0_id_96a5a68e_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ModalWindow_vue_vue_type_style_index_0_id_96a5a68e_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ModalWindow_vue_vue_type_style_index_0_id_96a5a68e_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ModalWindow_vue_vue_type_style_index_0_id_96a5a68e_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "7156":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("1626");
var isObject = __webpack_require__("861d");
var setPrototypeOf = __webpack_require__("d2bb");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "71da":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contacts/index.vue?vue&type=template&id=12492b0b&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active},attrs:{"id":"contacts"}},[(!_vm.unauthorized)?_c('div',[(_vm.mode === 'Contacts' && _vm.window.cordova)?_c('div',{staticClass:"work"},[_c('div',{staticClass:"inviteUserDiv"},[_c('router-link',{staticClass:"inviteButton",class:{ colored: true },attrs:{"to":"/invite","tag":"button"}},[_c('span',[_vm._v(_vm._s(_vm.$i18n.t("caption.inviteFriend")))]),_vm._v(" "),_c('i',{staticClass:"fas fa-address-card"})])],1)]):_vm._e(),(_vm.mode === 'Contacts' && !_vm.window.cordova)?_c('div',{staticClass:"work"},[_c('div',{staticClass:"inviteUserDiv"},[_c('button',{staticClass:"inviteButton",class:{ colored: true },on:{"click":_vm.invitepnt}},[_c('span',[_vm._v(_vm._s(_vm.$i18n.t("caption.inviteFriend")))]),_vm._v(" "),_c('i',{staticClass:"fas fa-address-card"})])])]):_vm._e(),_c('div',{staticClass:"namebuttoncreate"},[(_vm.mode === 'Selectmany' && _vm.selectedlength)?_c('div',{},[_c('div',{staticClass:"work"},[_c('div',{staticClass:"groupList"},[_c('div',{staticClass:"groupCaption"},[_c('span',{staticClass:"label"},[_vm._v("Selected ("+_vm._s(_vm.selectedlength)+")")])])]),_c('div',{staticClass:"participants"},_vm._l((_vm.selected),function(v){return _c('div',{key:v.id || v,staticClass:"groupListName"},[_c('preview',{attrs:{"contact":_vm.usersinfo[v.id || v],"mode":"mini"}}),(!v.id)?_c('i',{staticClass:"far fa-times-circle",on:{"click":function($event){return _vm.toggleUser(v)}}}):_vm._e()],1)}),0)])]):_vm._e()]),_c('div',{staticClass:"work searchWrapperEA"},[_c('search',{attrs:{"minimize":_vm.minimized},on:{"search":_vm.search}})],1),_c('div',{staticClass:"work"},[(_vm.users.contacts.length !== 0)?_c('div',{staticClass:"titleContacts"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.contacts")))])]):_vm._e(),_c('list',{attrs:{"mode":_vm.mode,"selected":_vm.selected,"users":_vm.users.contacts,"title":'Contacts'},on:{"toggleUser":_vm.toggleUser,"select":_vm.select}})],1),_c('div',{staticClass:"work"},[(_vm.users.contacts.length === 0 && !_vm.searching && !_vm.loading && !_vm.inputText)?_c('div',{staticClass:"titleContacts empty"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.contactsempty")))])]):_vm._e()]),(_vm.inputText.length && (_vm.searching || _vm.users.contacts.length === 0 || _vm.users.search.length))?_c('div',{staticClass:"searchResult"},[_c('div',{staticClass:"work"},[(_vm.users.search.length !== 0)?_c('div',{staticClass:"titleSearchResult"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.searchResult")))])]):_vm._e(),(_vm.users.search.length)?_c('list',{attrs:{"mode":_vm.mode,"selected":_vm.selected,"users":_vm.users.search,"title":'Search results'},on:{"toggleUser":_vm.toggleUser,"select":_vm.select}}):_vm._e()],1),(_vm.inputText.length >= 3 && !_vm.users.search.length && !_vm.loading && !_vm.searching)?_c('div',{staticClass:"noSearchResult"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.queryNoResults")))]),_c('i',{staticClass:"fas fa-search"})]):_vm._e(),(_vm.searching)?_c('div',{staticClass:"searching"},[_c('div',{staticClass:"linepreloaderWrapper"},[_c('linepreloader')],1)]):_vm._e()]):_vm._e()]):_c('div',{staticClass:"dmdv"})])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contacts/index.vue?vue&type=template&id=12492b0b&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// EXTERNAL MODULE: ./src/components/contacts/list/index.vue + 9 modules
var list = __webpack_require__("f978");

// EXTERNAL MODULE: ./src/components/contacts/preview/index.vue + 4 modules
var preview = __webpack_require__("92a6");

// EXTERNAL MODULE: ./src/components/contact/index.vue + 14 modules
var contact = __webpack_require__("d3ff");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contacts?vue&type=script&lang=js&




/* harmony default export */ var contacts_vue_type_script_lang_js_ = ({
  name: 'contacts',
  props: {
    mode: {
      type: String,
      default: function () {
        return '';
      }
    },
    chatRoomId: String //

  },
  components: {
    list: list["default"],
    contact: contact["default"],
    preview: preview["a" /* default */]
  },
  data: function () {
    return {
      loading: false,
      searching: false,
      fromSearch: [],
      inputText: '',
      groupContacts: [],
      groupName: '',
      contact: {},
      selected: {}
    };
  },
  mounted: function () {
    if (this.mode && this.mode != 'page') {//$(this.$el).find('input').focus()
    }
  },
  created: function () {},
  watch: {},
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    window: function () {
      return window;
    },
    users: function () {
      var c = {
        contacts: [],
        search: []
      };
      c.contacts = _.filter(this.contactsMap, contact => {
        if (!this.inputText || contact.name.toLowerCase().match(this.inputText.toLowerCase())) return true;
      });
      c.search = _.filter(this.fromSearch, (contact, index) => {
        return !this.contactsMap[contact.id];
      });
      return c;
    },
    ...Object(vuex_esm["c" /* mapState */])(['contactsMap', 'pocketnet', 'minimized', 'active', 'unauthorized']),
    usersinfo: function () {
      return this.$store.state.users;
    },
    u: function () {
      return this.$route.query.u;
    },
    selectedlength: function () {
      return _.toArray(this.selected).length;
    },

    contactsListFiltered() {
      var arr = [];
      var contacts = this.contactsMap;
      var text = this.inputText;

      _.each(contacts, function (key, value) {
        key.selected = false;
        arr.push(key);
      });

      return arr.filter(function (contact) {
        return contact.name.match(text);
      });
    },

    gName: function () {
      var name = this.groupName;
      return name.replace(/ /g, '_');
    }
  }),
  methods: {
    select: function (u) {
      this.$emit('select', u);
    },
    toggleUser: function (id) {
      if (!this.selected[id]) {
        if (this.selectedlength >= 11) {
          this.$store.commit('icon', {
            icon: 'warning',
            message: "At the moment, you can add no more than 12 users to the chat"
          });
          return;
        }

        this.$set(this.selected, id, id);
      } else this.$delete(this.selected, id);

      this.$emit('selectedUsers', this.selected);
    },

    /*chat: function () {
        this.core.mtrx.kit.tetatetid(this.usersinfo[this.directcontact], this.core.user.userinfo)
      },*/
    search(text) {
      this.inputText = text;
      this.searching = true;

      if (!this.inputText) {
        this.fromSearch = [];
      } else {
        this.core.user.searchContacts(this.inputText).then(users => {
          this.fromSearch = _.filter(users || [], u => {
            return u.id != this.core.user.userinfo.id;
          });
        }).finally(() => {
          this.searching = false;
        });
      }
    },

    invitepnt() {
      this.core.invitepnt();
    },

    inviteUserAction(users) {
      var client = this.core.mtrx.client;
      var roomID = this.chatRoomId;
      var self = this;

      _.each(users, id => {
        var matrixID = '@' + `${id}` + ':' + self.core.domain;
        client.invite(roomID, matrixID).then(r => {});
      });

      this.$emit('closeModal', false);
    }

  }
});
// CONCATENATED MODULE: ./src/components/contacts?vue&type=script&lang=js&
 /* harmony default export */ var components_contacts_vue_type_script_lang_js_ = (contacts_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/contacts/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("b4f6")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  components_contacts_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "12492b0b",
  null
  ,true
)

/* harmony default export */ var contacts = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "71e5":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".v-spinner{text-align:center}.v-spinner .v-clip{-webkit-animation:v-clipDelay .75s linear 0s infinite;animation:v-clipDelay .75s linear 0s infinite;-webkit-animation-fill-mode:both;animation-fill-mode:both;display:inline-block}@-webkit-keyframes v-clipDelay{0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(.8)}to{transform:rotate(1turn) scale(1)}}@keyframes v-clipDelay{0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(.8)}to{transform:rotate(1turn) scale(1)}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "7212":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52afd868_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b0a4");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52afd868_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52afd868_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52afd868_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52afd868_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "722a":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Browser Request
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// UMD HEADER START 
(function (root, factory) {
    if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
// UMD HEADER END

var XHR = XMLHttpRequest
if (!XHR) throw new Error('missing XMLHttpRequest')
request.log = {
  'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop
}

var DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes

//
// request
//

function request(options, callback) {
  // The entry-point to the API: prep the options object and pass the real work to run_xhr.
  if(typeof callback !== 'function')
    throw new Error('Bad callback given: ' + callback)

  if(!options)
    throw new Error('No options given')

  var options_onResponse = options.onResponse; // Save this for later.

  if(typeof options === 'string')
    options = {'uri':options};
  else
    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.

  options.onResponse = options_onResponse // And put it back.

  if (options.verbose) request.log = getLogger();

  if(options.url) {
    options.uri = options.url;
    delete options.url;
  }

  if(!options.uri && options.uri !== "")
    throw new Error("options.uri is a required argument");

  if(typeof options.uri != "string")
    throw new Error("options.uri must be a string");

  var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']
  for (var i = 0; i < unsupported_options.length; i++)
    if(options[ unsupported_options[i] ])
      throw new Error("options." + unsupported_options[i] + " is not supported")

  options.callback = callback
  options.method = options.method || 'GET';
  options.headers = options.headers || {};
  options.body    = options.body || null
  options.timeout = options.timeout || request.DEFAULT_TIMEOUT

  if(options.headers.host)
    throw new Error("Options.headers.host is not supported");

  if(options.json) {
    options.headers.accept = options.headers.accept || 'application/json'
    if(options.method !== 'GET')
      options.headers['content-type'] = 'application/json'

    if(typeof options.json !== 'boolean')
      options.body = JSON.stringify(options.json)
    else if(typeof options.body !== 'string')
      options.body = JSON.stringify(options.body)
  }
  
  //BEGIN QS Hack
  var serialize = function(obj) {
    var str = [];
    for(var p in obj)
      if (obj.hasOwnProperty(p)) {
        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
      }
    return str.join("&");
  }
  
  if(options.qs){
    var qs = (typeof options.qs == 'string')? options.qs : serialize(options.qs);
    if(options.uri.indexOf('?') !== -1){ //no get params
        options.uri = options.uri+'&'+qs;
    }else{ //existing get params
        options.uri = options.uri+'?'+qs;
    }
  }
  //END QS Hack
  
  //BEGIN FORM Hack
  var multipart = function(obj) {
    //todo: support file type (useful?)
    var result = {};
    result.boundry = '-------------------------------'+Math.floor(Math.random()*1000000000);
    var lines = [];
    for(var p in obj){
        if (obj.hasOwnProperty(p)) {
            lines.push(
                '--'+result.boundry+"\n"+
                'Content-Disposition: form-data; name="'+p+'"'+"\n"+
                "\n"+
                obj[p]+"\n"
            );
        }
    }
    lines.push( '--'+result.boundry+'--' );
    result.body = lines.join('');
    result.length = result.body.length;
    result.type = 'multipart/form-data; boundary='+result.boundry;
    return result;
  }
  
  if(options.form){
    if(typeof options.form == 'string') throw('form name unsupported');
    if(options.method === 'POST'){
        var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();
        options.headers['content-type'] = encoding;
        switch(encoding){
            case 'application/x-www-form-urlencoded':
                options.body = serialize(options.form).replace(/%20/g, "+");
                break;
            case 'multipart/form-data':
                var multi = multipart(options.form);
                //options.headers['content-length'] = multi.length;
                options.body = multi.body;
                options.headers['content-type'] = multi.type;
                break;
            default : throw new Error('unsupported encoding:'+encoding);
        }
    }
  }
  //END FORM Hack

  // If onResponse is boolean true, call back immediately when the response is known,
  // not when the full request is complete.
  options.onResponse = options.onResponse || noop
  if(options.onResponse === true) {
    options.onResponse = callback
    options.callback = noop
  }

  // XXX Browsers do not like this.
  //if(options.body)
  //  options.headers['content-length'] = options.body.length;

  // HTTP basic authentication
  if(!options.headers.authorization && options.auth)
    options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);

  return run_xhr(options)
}

var req_seq = 0
function run_xhr(options) {
  var xhr = new XHR
    , timed_out = false
    , is_cors = is_crossDomain(options.uri)
    , supports_cors = ('withCredentials' in xhr)

  req_seq += 1
  xhr.seq_id = req_seq
  xhr.id = req_seq + ': ' + options.method + ' ' + options.uri
  xhr._id = xhr.id // I know I will type "_id" from habit all the time.

  if(is_cors && !supports_cors) {
    var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)
    cors_err.cors = 'unsupported'
    return options.callback(cors_err, xhr)
  }

  xhr.timeoutTimer = setTimeout(too_late, options.timeout)
  function too_late() {
    timed_out = true
    var er = new Error('ETIMEDOUT')
    er.code = 'ETIMEDOUT'
    er.duration = options.timeout

    request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })
    return options.callback(er, xhr)
  }

  // Some states can be skipped over, so remember what is still incomplete.
  var did = {'response':false, 'loading':false, 'end':false}

  xhr.onreadystatechange = on_state_change
  xhr.open(options.method, options.uri, true) // asynchronous
  if(is_cors)
    xhr.withCredentials = !! options.withCredentials
  xhr.send(options.body)
  return xhr

  function on_state_change(event) {
    if(timed_out)
      return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})

    request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})

    if(xhr.readyState === XHR.OPENED) {
      request.log.debug('Request started', {'id':xhr.id})
      for (var key in options.headers)
        xhr.setRequestHeader(key, options.headers[key])
    }

    else if(xhr.readyState === XHR.HEADERS_RECEIVED)
      on_response()

    else if(xhr.readyState === XHR.LOADING) {
      on_response()
      on_loading()
    }

    else if(xhr.readyState === XHR.DONE) {
      on_response()
      on_loading()
      on_end()
    }
  }

  function on_response() {
    if(did.response)
      return

    did.response = true
    request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})
    clearTimeout(xhr.timeoutTimer)
    xhr.statusCode = xhr.status // Node request compatibility

    // Detect failed CORS requests.
    if(is_cors && xhr.statusCode == 0) {
      var cors_err = new Error('CORS request rejected: ' + options.uri)
      cors_err.cors = 'rejected'

      // Do not process this request further.
      did.loading = true
      did.end = true

      return options.callback(cors_err, xhr)
    }

    options.onResponse(null, xhr)
  }

  function on_loading() {
    if(did.loading)
      return

    did.loading = true
    request.log.debug('Response body loading', {'id':xhr.id})
    // TODO: Maybe simulate "data" events by watching xhr.responseText
  }

  function on_end() {
    if(did.end)
      return

    did.end = true
    request.log.debug('Request done', {'id':xhr.id})

    xhr.body = xhr.responseText
    if(options.json) {
      try        { xhr.body = JSON.parse(xhr.responseText) }
      catch (er) { return options.callback(er, xhr)        }
    }

    options.callback(null, xhr, xhr.body)
  }

} // request

request.withCredentials = false;
request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;

//
// defaults
//

request.defaults = function(options, requester) {
  var def = function (method) {
    var d = function (params, callback) {
      if(typeof params === 'string')
        params = {'uri': params};
      else {
        params = JSON.parse(JSON.stringify(params));
      }
      for (var i in options) {
        if (params[i] === undefined) params[i] = options[i]
      }
      return method(params, callback)
    }
    return d
  }
  var de = def(request)
  de.get = def(request.get)
  de.post = def(request.post)
  de.put = def(request.put)
  de.head = def(request.head)
  return de
}

//
// HTTP method shortcuts
//

var shortcuts = [ 'get', 'put', 'post', 'head' ];
shortcuts.forEach(function(shortcut) {
  var method = shortcut.toUpperCase();
  var func   = shortcut.toLowerCase();

  request[func] = function(opts) {
    if(typeof opts === 'string')
      opts = {'method':method, 'uri':opts};
    else {
      opts = JSON.parse(JSON.stringify(opts));
      opts.method = method;
    }

    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
    return request.apply(this, args);
  }
})

//
// CouchDB shortcut
//

request.couch = function(options, callback) {
  if(typeof options === 'string')
    options = {'uri':options}

  // Just use the request API to do JSON.
  options.json = true
  if(options.body)
    options.json = options.body
  delete options.body

  callback = callback || noop

  var xhr = request(options, couch_handler)
  return xhr

  function couch_handler(er, resp, body) {
    if(er)
      return callback(er, resp, body)

    if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
      // The body is a Couch JSON object indicating the error.
      er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))
      for (var key in body)
        er[key] = body[key]
      return callback(er, resp, body);
    }

    return callback(er, resp, body);
  }
}

//
// Utility
//

function noop() {}

function getLogger() {
  var logger = {}
    , levels = ['trace', 'debug', 'info', 'warn', 'error']
    , level, i

  for(i = 0; i < levels.length; i++) {
    level = levels[i]

    logger[level] = noop
    if(typeof console !== 'undefined' && console && console[level])
      logger[level] = formatted(console, level)
  }

  return logger
}

function formatted(obj, method) {
  return formatted_logger

  function formatted_logger(str, context) {
    if(typeof context === 'object')
      str += ' ' + JSON.stringify(context)

    return obj[method].call(obj, str)
  }
}

// Return whether a URL is a cross-domain request.
function is_crossDomain(url) {
  var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/

  // jQuery #8138, IE may throw an exception when accessing
  // a field from window.location if document.domain has been set
  var ajaxLocation
  try { ajaxLocation = location.href }
  catch (e) {
    // Use the href attribute of an A element since IE will modify it given document.location
    ajaxLocation = document.createElement( "a" );
    ajaxLocation.href = "";
    ajaxLocation = ajaxLocation.href;
  }

  var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
    , parts = rurl.exec(url.toLowerCase() )

  var result = !!(
    parts &&
    (  parts[1] != ajaxLocParts[1]
    || parts[2] != ajaxLocParts[2]
    || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))
    )
  )

  //console.debug('is_crossDomain('+url+') -> ' + result)
  return result
}

// MIT License from http://phpjs.org/functions/base64_encode:358
function b64_enc (data) {
    // Encodes string using MIME base64 algorithm
    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc="", tmp_arr = [];

    if (!data) {
        return data;
    }

    // assume utf8 data
    // data = this.utf8_encode(data+'');

    do { // pack three octets into four hexets
        o1 = data.charCodeAt(i++);
        o2 = data.charCodeAt(i++);
        o3 = data.charCodeAt(i++);

        bits = o1<<16 | o2<<8 | o3;

        h1 = bits>>18 & 0x3f;
        h2 = bits>>12 & 0x3f;
        h3 = bits>>6 & 0x3f;
        h4 = bits & 0x3f;

        // use hexets to index into b64, and append result to encoded string
        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);

    enc = tmp_arr.join('');

    switch (data.length % 3) {
        case 1:
            enc = enc.slice(0, -2) + '==';
        break;
        case 2:
            enc = enc.slice(0, -1) + '=';
        break;
    }

    return enc;
}
    return request;
//UMD FOOTER START
}));
//UMD FOOTER END


/***/ }),

/***/ "72a7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_659136c0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("de24");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_659136c0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_659136c0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_659136c0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_659136c0_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "72aa":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("3fb5")
var Sha256 = __webpack_require__("a255")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ "738c":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".back-icon[data-v-7e97eec1]{cursor:pointer}.backbutton-caption[data-v-7e97eec1]{cursor:pointer;position:relative;left:1em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "739c":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("377e");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("f92d7f0c", content, shadowRoot)
};

/***/ }),

/***/ "73c2":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("0cd0");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("237d0f98", content, shadowRoot)
};

/***/ }),

/***/ "7418":
/***/ (function(module, exports) {

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "7608":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("8f4c");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("8e00a578", content, shadowRoot)
};

/***/ }),

/***/ "76a3":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".voiceMessage[data-v-0438bc11]{-webkit-tap-highlight-color:transparent;display:flex;contain:strict;width:230px;height:100%}.voiceMessage_wrapper[data-v-0438bc11]{display:flex;justify-content:flex-end;align-items:center;overflow:hidden;min-width:10em;padding:0 .5em;padding-right:1em;border-radius:2em;background:rgb(var(--background-secondary-theme))}.voiceMessage_toggle[data-v-0438bc11]{cursor:pointer;height:33px;width:33px;margin-right:.5em;border-radius:50%;background:rgb(var(--neutral-grad-1));display:flex;align-items:center;justify-content:center;color:rgb(var(--color-bg-ac))}.voiceMessage_toggle i[data-v-0438bc11]{font-size:.5em}.voiceMessage_graph[data-v-0438bc11]{position:relative;cursor:pointer}.voiceMessage_options[data-v-0438bc11]{display:flex;justify-content:center;margin-left:10px;padding:2px 10px;min-width:40px;background:rgb(var(--neutral-grad-1));border-radius:10px}.voiceMessage_options span[data-v-0438bc11]{font-size:.8em;color:rgb(var(--neutral-grad-3))}.voiceMessage.playing .voiceMessage_options span[data-v-0438bc11]{font-size:.8em;color:rgb(var(--color-bg-ac-bright))}.voiceMessage .fa-exclamation-circle[data-v-0438bc11]{font-size:.7em;color:rgb(var(--color-bad));padding:.5em}.voiceMessage .encsign[data-v-0438bc11]{position:absolute;right:0;top:0;bottom:0;display:flex;align-items:center;padding-right:.35em}.voiceMessage .encsign i[data-v-0438bc11]{font-size:.5em;color:rgb(var(--neutral-grad-2));opacity:.6}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "76df":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".imageWrapper[data-v-756bd822]{margin:0 auto;width:88px}.nameWrapper[data-v-756bd822]{margin-top:.5em;text-align:center}.nameWrapper span[data-v-756bd822]{font-size:2em;font-weight:100}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "7704":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Создать\",\"addPublicChatName\":\"Имя Публичной комнаты\",\"addGroupNamePlaceHolder\":\"Имя Чата\",\"createPublicChat\":\"Создать публичный чат\",\"chatTopic\":\"Топик изменён\",\"publicRoomTitle\":\"Публичная комната\",\"asModerator\":\"права модерации\",\"marked\":\"Передал\",\"unmarked\":\"Снял\",\"removeBan\":\"Снять Бан\",\"cancelModeration\":\"Снять модерцию\",\"uploadFiles\":\"Загрузить файлы\",\"header\":\"Заголовок\",\"dragAndDropAFile\":\"Перетятите файл в эту область\",\"chatInvite\":\"Вы приглашены в чат с\",\"cantJoion\":\"Вы не можете присоединиться к чату с\",\"chatInviteDecline\":\"Вы можете присоединиться к чату или отклонить приглашение\",\"creatorLeft\":\"Так как создатель чата покинул его\",\"encrypted\":\"Зашифровано \",\"noImages\":\"В чате пока нет изображений\",\"noFiles\":\"В чате пока нет файлов\",\"inviteUser\":\"Пригласить пользователя\",\"invite\":\"Пригласить\",\"add\":\"Добавить\",\"mute\":\"Отключить звук\",\"unmute\":\"Включить звук\",\"leave\":\"Покинуть\",\"Info\":\"Информация\",\"new\":\"Новый\",\"typing\":\"печатает\",\"accNotFound\":\"Ваш аккаунт находится в процессе регистрации, пожалуйста, подождите...\",\"emptyList\":\"Список пуст\",\"welcome\":\"Добро пожаловать в чат!\",\"startNewChat\":\"Начать новый чат\",\"chats\":\"Чаты\",\"shareWith\":\"Поделиться с\",\"newChat\":\"Новый чат\",\"moveToChat\":\"Перейти в чат\",\"queryNoResults\":\"Нет результатов по запросу\",\"needMoreCharacters\":\"Введите больше символов для поиска\",\"createGroup\":\"Создать группу\",\"unabletoDecrypt\":\"* Невозможно расшифровать\",\"messageDeleted\":\"Сообщение удалено\",\"sentImage\":\"отправлено изображение\",\"sentVoiceMessage\":\"отправлено голосовое сообщение\",\"invitationToChat\":\"Приглашение в чат\",\"invitationToRoom\":\"Приглашение в комнату\",\"leftChat\":\"покинул чат\",\"joined\":\"присоединился\",\"chatRenamed\":\"Чат переименован в \",\"recentComment\":\"Последний комментарий:\",\"share\":\"Поделиться\",\"followers\":\"Подписались\",\"reputation\":\"Репутация\",\"unsubscribe\":\"Отписаться\",\"following\":\"Подписан\",\"theme\":\"Тема:\",\"contacts\":\"Контакты\",\"phoneContacts\":\"Телефонные контакты\",\"chooseInviteMedia\":\"Пожалуйста, выберите, способ приглашения\",\"admin\":\"Админ\",\"moderator\":\"Модератор\",\"videocall\":\"Видеозвонок\",\"call\":\"Звонок\",\"leaveAndDelete\":\"Покинуть и удалить чат\",\"donate\":\"Донат\",\"makeModerator\":\"Сделать модератором\",\"ban\":\"Бан\",\"kick\":\"Исключить\",\"members\":\"Участники\",\"media\":\"Медиа\",\"files\":\"Файлы\",\"contactsList\":\"Список контактов\",\"send\":\"Отправить\",\"pageCaption\":\"Заголовок страницы\",\"caption\":\"Заголовок\",\"text\":\"текст\",\"placeholder\":\"плейсхолдер\",\"sendTransactionTo\":\"Послать транзакрию\",\"toBePaidByReceiver\":\"Оплата получателем\",\"toBePaidBySender\":\"Оплата отправителем\",\"source\":\"Источник\",\"amount\":\"Количество\",\"receiver\":\"Получатель\",\"message\":\"Сообщение\",\"includeFeesInAmount\":\"Включить комиссию в сумму\",\"transactionFees\":\"Комиссия за транзакцию\",\"totalAmount\":\"Итого\",\"balanceTooLow\":\"Баланс слишком низкий\",\"transactionError\":\"Ошибка: нельзя совершить транзакцию\",\"calculateFees\":\"Подсчитать комиссию\",\"startChatWith\":\"Начать чат с\",\"searchResult\":\"Результат поиска\",\"joinedInTheChat\":\"вошел в чат\",\"invited\":\"приглашен \",\"hasInvited\":\"приглашен \",\"inTheChat\":\" в чат\",\"banned\":\"забанен\",\"andRoom\":\"и комната\",\"inRoom\":\"в комнате\",\"left\":\"покинул\",\"theChat\":\" чат \",\"made\":\"сделал \",\"aModerator\":\" модератором\",\"editedChatNameTo \":\"изменил имя чата на \",\"somebody\":\"Кто-то\",\"sent\":\"отправлено\",\"PKOINto\":\" PKOIN для \",\"response\":\"Ответ\",\"edited\":\"Отредактировано\",\"settings\":\"Настройки\",\"unauthorized\":\"Неавторизован\",\"search\":\"Поиск\",\"replyOnMessage\":\"Ответить на сообщение\",\"editMessage\":\"Редактировать сообщение\",\"inviteFriend\":\"Пригласить друзей\",\"emptyContactList\":\"Ваша книга контактов пуста\",\"joinApp\":\"Присоединяйтесь ко мне в защищенном чате.\",\"hasInvitedToJoin\":\"Это зашифрованный чат, который не привязывается к номеру телефона.\",\"messagefrom\":\"Пересланное сообщение от\",\"usernotgen\":\"User did not generate their encryption keys yet. You will be able to chat them when their keys are generated.\",\"younotgen\":\"Please wait a minute, Your encryption keys are being generated...\",\"messageRead\":\"Сообщение прочитано\",\"open\":\"Открыть\",\"You\":\"Вы\",\"chatsearchingempty\":\"Чатов по данному фильтру не найдено\",\"sendmessage\":\"Отправить сообщение\"},\"input\":{\"patientEmailPlaceholder\":\"Электронная почта\",\"refillNamePlaceholder\":\"Заполнить имя еще раз\"},\"message\":{},\"button\":{\"starChatButton\":\"Начать чат\",\"decline\":\"Отклонить\",\"join\":\"Присоединиться\",\"ok\":\"Ок\",\"copy\":\"Скопировать\",\"forward\":\"Переслать\",\"delete\":\"Удалить\",\"save\":\"Сохранить\",\"reply\":\"Ответить\",\"share\":\"Переслать\",\"download\":\"Загрузить\",\"downloaded\":\"Загружено\",\"goToPocketnetProfile\":\"Перейти в профиль\",\"sendFile\":\"Отправить файл\",\"takePhotoOrVideo\":\"Отправить фотографию\",\"sendCoins\":\"Отправить коины\",\"edit\":\"Редактировать\",\"select\":\"Выбрать\",\"block\":\"Заблокировать\",\"unblock\":\"Разблокировать\",\"blockUser\":\"Заблокировать пользователя\",\"Complain\":\"Пожаловаться\"},\"type\":{\"publicgroup\":\"Создать публичную группу\",\"privategroup\":\"Создать приватную группу\",\"one\":\"Чат один на один\"},\"typelabel\":{\"publicgroup\":\"Создание публичной группы\",\"privategroup\":\"Создание приватной группы\",\"one\":\"Создание чата один на один\"},\"yes\":\"Да\",\"cancel\":\"Отменить\",\"teamMessages\":{\"1-title\":\"Добро пожаловать в приватный чат Bastyon!\",\"1-list1\":\"Личный мессенджер, который НЕ связан с вашим номером телефона\",\"1-list2\":\"Конечное шифрование каждого разговора 1 на 1 по умолчанию\",\"1-list3\":\"Все изображения, отправленные или полученные через чат, хранятся в зашифрованном виде\",\"1-list4\":\"История сообщений сохраняется только в течение 7 дней\",\"2-title\":\"Огромное объявление! Приложение Pocketnet теперь называется Bastyon!\",\"2-message1\":\"Домен будет перенесен на Bastyon.com. Недавно мы выпустили следующие крупные обновления:\",\"2-list1\":\"Частный зашифрованный мессенджер, не связанный с вашим номером телефона\",\"2-list2\":\"Возможность пожертвовать PKOIN блогерам\",\"2-list3\":\"Видео и прямая трансляция\",\"2-message2\":\"Пригласите своих друзей сейчас и станьте частью большого будущего децентрализованного интернета!\",\"2-button\":\"Пригласите друзей\"},\"sendingerror\":\"Возникла ошибка при отправке сообщения\",\"details\":\"Подробнее\",\"settings_pin\":\"Закрепить окно чата\",\"checked\":\"Да\",\"unchecked\":\"Нет\",\"settings_read\":\"Отправлять отчёты о прочтении\",\"messagewasburn\":\"Данное сообщение осталось только лишь в памяти вашего устройства\",\"messagewillburn\":\"Сообщение скоро будет удалено\",\"micaccessbrowser\":\"Доступ к микрофону запрещен настройками браузера, пожалуйста проверьте настройки.\",\"micaccesscommonproblem\":\"Извините, по какой-то причине запись голосовых сообщений невозможна на устройстве.\",\"micaccesscordova\":\"Доступ к микрофону запрещен настройками устройства, пожалуйста разрешите доступ к микрофону в настройках устройства.\",\"micdevicenotfound\":\"Устройство для записи звука не найдено\"}");

/***/ }),

/***/ "7769":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "77ae":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".default .preloader span[data-v-3e6353d6]:nth-child(2){-webkit-animation:circle2-data-v-3e6353d6 1.5s infinite;animation:circle2-data-v-3e6353d6 1.5s infinite;transition-timing-function:ease-in-out;transform:translateX(1px);transform:scale(1.3);transform:translateY(1px)}.default .preloader span[data-v-3e6353d6]:first-child{-webkit-animation:circle1-data-v-3e6353d6 1.5s infinite;animation:circle1-data-v-3e6353d6 1.5s infinite;transition-timing-function:ease-in-out;transform:translateX(1px) translateY(1px) scale(.7)}.default .preloader span[data-v-3e6353d6]:nth-child(3){-webkit-animation:circle3-data-v-3e6353d6 1.5s infinite;animation:circle3-data-v-3e6353d6 1.5s infinite;transition-timing-function:ease-in-out;transform:translateX(1px);transform:scale(.7);transform:translateY(1px)}.spinner-eff.spinner-eff-3 .circle[data-v-3e6353d6]{border-radius:100px;position:absolute;left:0;right:0;margin:auto;transform:scale(1);transform-origin:center center}.spinner-eff.spinner-eff-3 .circle-1[data-v-3e6353d6]{width:100%;height:100%;background-color:#000;top:0;-webkit-animation:pulse-data-v-3e6353d6 1.6s linear 0s infinite;animation:pulse-data-v-3e6353d6 1.6s linear 0s infinite}.spinner-eff.spinner-eff-3 .circle-2[data-v-3e6353d6]{width:66.6%;height:66.6%;background-color:rgba(4,31,104,.4);top:16.5%;-webkit-animation:pulse-2-data-v-3e6353d6 1.6s linear 0s infinite;animation:pulse-2-data-v-3e6353d6 1.6s linear 0s infinite}.spinner-eff.spinner-eff-3 .circle-3[data-v-3e6353d6]{width:33.3%;height:33.3%;background-color:rgba(0,70,128,.6);top:33.3%}@-webkit-keyframes circle1-data-v-3e6353d6{0%{transform:translateY(5px) translateX(0) scale(1.3)}50%{transform:translateY(0) translateX(23px) scale(2);background-color:#041f68}to{transform:translateY(5px) translateX(0) scale(1.3)}}@keyframes circle1-data-v-3e6353d6{0%{transform:translateY(5px) translateX(0) scale(1.3)}50%{transform:translateY(0) translateX(23px) scale(2);background-color:#041f68}to{transform:translateY(5px) translateX(0) scale(1.3)}}@-webkit-keyframes circle2-data-v-3e6353d6{0%{transform:translateY(10px) translateX(0) scale(1.3);background-color:transparent}50%{transform:translateY(17px) translateX(0) scale(2);background-color:#041f68}to{transform:translateY(10px) translateX(0) scale(1.3);background-color:transparent}}@keyframes circle2-data-v-3e6353d6{0%{transform:translateY(10px) translateX(0) scale(1.3);background-color:transparent}50%{transform:translateY(17px) translateX(0) scale(2);background-color:#041f68}to{transform:translateY(10px) translateX(0) scale(1.3);background-color:transparent}}@-webkit-keyframes circle3-data-v-3e6353d6{0%{transform:translateY(5px) translateX(0) scale(1.3)}50%{transform:translateY(0) translateX(-23px) scale(2);background-color:#041f68}to{transform:translateY(5px) translateX(0) scale(1.3)}}@keyframes circle3-data-v-3e6353d6{0%{transform:translateY(5px) translateX(0) scale(1.3)}50%{transform:translateY(0) translateX(-23px) scale(2);background-color:#041f68}to{transform:translateY(5px) translateX(0) scale(1.3)}}@-webkit-keyframes pulse-data-v-3e6353d6{0%{transform:scale(0)}50%{transform:scale(1.3);opacity:0}to{transform:scale(1.3);opacity:0}}@keyframes pulse-data-v-3e6353d6{0%{transform:scale(0)}50%{transform:scale(1.3);opacity:0}to{transform:scale(1.3);opacity:0}}@-webkit-keyframes pulse-2-data-v-3e6353d6{0%{transform:scale(0)}to{transform:scale(1.3);opacity:0}}@keyframes pulse-2-data-v-3e6353d6{0%{transform:scale(0)}to{transform:scale(1.3);opacity:0}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "780f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__("27bf");

__webpack_require__("3fb5")(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "7839":
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "788e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SERVICE_TYPES = void 0;
/*
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

const SERVICE_TYPES = Object.freeze({
  IS: 'SERVICE_TYPE_IS',
  // An Identity Service
  IM: 'SERVICE_TYPE_IM' // An Integration Manager

});
exports.SERVICE_TYPES = SERVICE_TYPES;

/***/ }),

/***/ "78ad":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52fddf5e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("5faa");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52fddf5e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52fddf5e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52fddf5e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_52fddf5e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "78db":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;margin:0}button,input,select,textarea{background-color:transparent;border-style:none;color:inherit;outline:none}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "790c":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("6eca");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("5b848ab6", content, shadowRoot)
};

/***/ }),

/***/ "79bb":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".namebuttoncreate[data-v-f0734632],.selectedtype[data-v-f0734632],.type[data-v-f0734632]{padding:1em;display:flex;align-items:center;border-bottom:1px solid rgb(var(--neutral-grad-0));white-space:nowrap;text-overflow:ellipsis;overflow:hidden;cursor:pointer}.namebuttoncreate .icon i[data-v-f0734632],.selectedtype .icon i[data-v-f0734632],.type .icon i[data-v-f0734632]{width:30px;opacity:.7;font-size:.8em}.namebuttoncreate span[data-v-f0734632],.selectedtype span[data-v-f0734632],.type span[data-v-f0734632]{font-size:.9em}.namebuttoncreate button[data-v-f0734632],.selectedtype button[data-v-f0734632],.type button[data-v-f0734632]{white-space:nowrap;min-width:0!important}.namebuttoncreate input[data-v-f0734632],.selectedtype input[data-v-f0734632],.type input[data-v-f0734632]{width:auto}.namebuttoncreate .completewrapper[data-v-f0734632],.selectedtype .completewrapper[data-v-f0734632],.type .completewrapper[data-v-f0734632]{flex-grow:1;text-align:right}.namebuttoncreate[data-v-f0734632]{padding-top:0;padding-bottom:0}.namebuttoncreate>div[data-v-f0734632]{flex-grow:1}.namebuttoncreate input[data-v-f0734632]{width:100%;padding-top:1em;padding-bottom:1em}.selectedtype[data-v-f0734632]{background:rgb(var(--background-total-theme));position:sticky;top:-1px;z-index:12}.selectedtype .icon[data-v-f0734632]{cursor:pointer;transition:.3s}.selectedtype .icon[data-v-f0734632]:hover{opacity:.5}.selectedtype .label[data-v-f0734632]{font-weight:700;font-size:.8em}.oneonone[data-v-f0734632] .namebuttoncreate{display:none}.oneonone[data-v-f0734632] .searchWrapperEA{background:rgb(var(--background-total-theme));position:sticky;top:-1px;z-index:12;padding-bottom:.5em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "79f0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixScheduler = MatrixScheduler;

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module which manages queuing, scheduling and retrying
 * of requests.
 * @module scheduler
 */


const DEBUG = false; // set true to enable console logging.

/**
 * Construct a scheduler for Matrix. Requires
 * {@link module:scheduler~MatrixScheduler#setProcessFunction} to be provided
 * with a way of processing events.
 * @constructor
 * @param {module:scheduler~retryAlgorithm} retryAlgorithm Optional. The retry
 * algorithm to apply when determining when to try to send an event again.
 * Defaults to {@link module:scheduler~MatrixScheduler.RETRY_BACKOFF_RATELIMIT}.
 * @param {module:scheduler~queueAlgorithm} queueAlgorithm Optional. The queuing
 * algorithm to apply when determining which events should be sent before the
 * given event. Defaults to {@link module:scheduler~MatrixScheduler.QUEUE_MESSAGES}.
 */

function MatrixScheduler(retryAlgorithm, queueAlgorithm) {
  this.retryAlgorithm = retryAlgorithm || MatrixScheduler.RETRY_BACKOFF_RATELIMIT;
  this.queueAlgorithm = queueAlgorithm || MatrixScheduler.QUEUE_MESSAGES;
  this._queues = {// queueName: [{
    //  event: MatrixEvent,  // event to send
    //  defer: Deferred,  // defer to resolve/reject at the END of the retries
    //  attempts: Number  // number of times we've called processFn
    // }, ...]
  };
  this._activeQueues = [];
  this._procFn = null;
}
/**
 * Retrieve a queue based on an event. The event provided does not need to be in
 * the queue.
 * @param {MatrixEvent} event An event to get the queue for.
 * @return {?Array<MatrixEvent>} A shallow copy of events in the queue or null.
 * Modifying this array will not modify the list itself. Modifying events in
 * this array <i>will</i> modify the underlying event in the queue.
 * @see MatrixScheduler.removeEventFromQueue To remove an event from the queue.
 */


MatrixScheduler.prototype.getQueueForEvent = function (event) {
  const name = this.queueAlgorithm(event);

  if (!name || !this._queues[name]) {
    return null;
  }

  return utils.map(this._queues[name], function (obj) {
    return obj.event;
  });
};
/**
 * Remove this event from the queue. The event is equal to another event if they
 * have the same ID returned from event.getId().
 * @param {MatrixEvent} event The event to remove.
 * @return {boolean} True if this event was removed.
 */


MatrixScheduler.prototype.removeEventFromQueue = function (event) {
  const name = this.queueAlgorithm(event);

  if (!name || !this._queues[name]) {
    return false;
  }

  let removed = false;
  utils.removeElement(this._queues[name], function (element) {
    if (element.event.getId() === event.getId()) {
      // XXX we should probably reject the promise?
      // https://github.com/matrix-org/matrix-js-sdk/issues/496
      removed = true;
      return true;
    }
  });
  return removed;
};
/**
 * Set the process function. Required for events in the queue to be processed.
 * If set after events have been added to the queue, this will immediately start
 * processing them.
 * @param {module:scheduler~processFn} fn The function that can process events
 * in the queue.
 */


MatrixScheduler.prototype.setProcessFunction = function (fn) {
  this._procFn = fn;

  _startProcessingQueues(this);
};
/**
 * Queue an event if it is required and start processing queues.
 * @param {MatrixEvent} event The event that may be queued.
 * @return {?Promise} A promise if the event was queued, which will be
 * resolved or rejected in due time, else null.
 */


MatrixScheduler.prototype.queueEvent = function (event) {
  const queueName = this.queueAlgorithm(event);

  if (!queueName) {
    return null;
  } // add the event to the queue and make a deferred for it.


  if (!this._queues[queueName]) {
    this._queues[queueName] = [];
  }

  const defer = utils.defer();

  this._queues[queueName].push({
    event: event,
    defer: defer,
    attempts: 0
  });

  debuglog("Queue algorithm dumped event %s into queue '%s'", event.getId(), queueName);

  _startProcessingQueues(this);

  return defer.promise;
};
/**
 * Retries events up to 4 times using exponential backoff. This produces wait
 * times of 2, 4, 8, and 16 seconds (30s total) after which we give up. If the
 * failure was due to a rate limited request, the time specified in the error is
 * waited before being retried.
 * @param {MatrixEvent} event
 * @param {Number} attempts
 * @param {MatrixError} err
 * @return {Number}
 * @see module:scheduler~retryAlgorithm
 */


MatrixScheduler.RETRY_BACKOFF_RATELIMIT = function (event, attempts, err) {
  if (err.httpStatus === 400 || err.httpStatus === 403 || err.httpStatus === 401) {
    // client error; no amount of retrying with save you now.
    return -1;
  } // we ship with browser-request which returns { cors: rejected } when trying
  // with no connection, so if we match that, give up since they have no conn.


  if (err.cors === "rejected") {
    return -1;
  } // if event that we are trying to send is too large in any way then retrying won't help


  if (err.name === "M_TOO_LARGE") {
    return -1;
  }

  if (err.name === "M_LIMIT_EXCEEDED") {
    const waitTime = err.data.retry_after_ms;

    if (waitTime > 0) {
      return waitTime;
    }
  }

  if (attempts > 4) {
    return -1; // give up
  }

  return 1000 * Math.pow(2, attempts);
};
/**
 * Queues <code>m.room.message</code> events and lets other events continue
 * concurrently.
 * @param {MatrixEvent} event
 * @return {string}
 * @see module:scheduler~queueAlgorithm
 */


MatrixScheduler.QUEUE_MESSAGES = function (event) {
  // enqueue messages or events that associate with another event (redactions and relations)
  if (event.getType() === "m.room.message" || event.hasAssocation()) {
    // put these events in the 'message' queue.
    return "message";
  } // allow all other events continue concurrently.


  return null;
};

function _startProcessingQueues(scheduler) {
  if (!scheduler._procFn) {
    return;
  } // for each inactive queue with events in them


  utils.forEach(utils.filter(utils.keys(scheduler._queues), function (queueName) {
    return scheduler._activeQueues.indexOf(queueName) === -1 && scheduler._queues[queueName].length > 0;
  }), function (queueName) {
    // mark the queue as active
    scheduler._activeQueues.push(queueName); // begin processing the head of the queue


    debuglog("Spinning up queue: '%s'", queueName);

    _processQueue(scheduler, queueName);
  });
}

function _processQueue(scheduler, queueName) {
  // get head of queue
  const obj = _peekNextEvent(scheduler, queueName);

  if (!obj) {
    // queue is empty. Mark as inactive and stop recursing.
    const index = scheduler._activeQueues.indexOf(queueName);

    if (index >= 0) {
      scheduler._activeQueues.splice(index, 1);
    }

    debuglog("Stopping queue '%s' as it is now empty", queueName);
    return;
  }

  debuglog("Queue '%s' has %s pending events", queueName, scheduler._queues[queueName].length); // fire the process function and if it resolves, resolve the deferred. Else
  // invoke the retry algorithm.
  // First wait for a resolved promise, so the resolve handlers for
  // the deferred of the previously sent event can run.
  // This way enqueued relations/redactions to enqueued events can receive
  // the remove id of their target before being sent.

  Promise.resolve().then(() => {
    return scheduler._procFn(obj.event);
  }).then(function (res) {
    // remove this from the queue
    _removeNextEvent(scheduler, queueName);

    debuglog("Queue '%s' sent event %s", queueName, obj.event.getId());
    obj.defer.resolve(res); // keep processing

    _processQueue(scheduler, queueName);
  }, function (err) {
    obj.attempts += 1; // ask the retry algorithm when/if we should try again

    const waitTimeMs = scheduler.retryAlgorithm(obj.event, obj.attempts, err);
    debuglog("retry(%s) err=%s event_id=%s waitTime=%s", obj.attempts, err, obj.event.getId(), waitTimeMs);

    if (waitTimeMs === -1) {
      // give up (you quitter!)
      debuglog("Queue '%s' giving up on event %s", queueName, obj.event.getId()); // remove this from the queue

      _removeNextEvent(scheduler, queueName);

      obj.defer.reject(err); // process next event

      _processQueue(scheduler, queueName);
    } else {
      setTimeout(function () {
        _processQueue(scheduler, queueName);
      }, waitTimeMs);
    }
  });
}

function _peekNextEvent(scheduler, queueName) {
  const queue = scheduler._queues[queueName];

  if (!utils.isArray(queue)) {
    return null;
  }

  return queue[0];
}

function _removeNextEvent(scheduler, queueName) {
  const queue = scheduler._queues[queueName];

  if (!utils.isArray(queue)) {
    return null;
  }

  return queue.shift();
}

function debuglog() {
  if (DEBUG) {
    _logger.logger.log(...arguments);
  }
}
/**
 * The retry algorithm to apply when retrying events. To stop retrying, return
 * <code>-1</code>. If this event was part of a queue, it will be removed from
 * the queue.
 * @callback retryAlgorithm
 * @param {MatrixEvent} event The event being retried.
 * @param {Number} attempts The number of failed attempts. This will always be
 * >= 1.
 * @param {MatrixError} err The most recent error message received when trying
 * to send this event.
 * @return {Number} The number of milliseconds to wait before trying again. If
 * this is 0, the request will be immediately retried. If this is
 * <code>-1</code>, the event will be marked as
 * {@link module:models/event.EventStatus.NOT_SENT} and will not be retried.
 */

/**
 * The queuing algorithm to apply to events. This function must be idempotent as
 * it may be called multiple times with the same event. All queues created are
 * serviced in a FIFO manner. To send the event ASAP, return <code>null</code>
 * which will not put this event in a queue. Events that fail to send that form
 * part of a queue will be removed from the queue and the next event in the
 * queue will be sent.
 * @callback queueAlgorithm
 * @param {MatrixEvent} event The event to be sent.
 * @return {string} The name of the queue to put the event into. If a queue with
 * this name does not exist, it will be created. If this is <code>null</code>,
 * the event is not put into a queue and will be sent concurrently.
 */

/**
* The function to invoke to process (send) events in the queue.
* @callback processFn
* @param {MatrixEvent} event The event to send.
* @return {Promise} Resolved/rejected depending on the outcome of the request.
*/

/***/ }),

/***/ "7a1f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export install */
/* harmony import */ var _components_VuePageTransition_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("4a1e");
 // Install the components

function install(Vue) {
  Vue.component('vue-page-transition', _components_VuePageTransition_vue__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);
} // Expose the components

 // Plugin

const plugin = {
  /* eslint-disable no-undef */
  version: 1,
  install
};
/* harmony default export */ __webpack_exports__["a"] = (plugin); // Auto-install

let GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "7a77":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "7aac":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "7acf":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_9d2b1700_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("d3b8");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_9d2b1700_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_9d2b1700_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_9d2b1700_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_9d2b1700_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "7b0b":
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__("1d80");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "7c16":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("d6dd");


/***/ }),

/***/ "7cd7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_2_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8713");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_2_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_2_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_2_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_2_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "7d2a":
/***/ (function(module, exports) {

var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}


/***/ }),

/***/ "7d72":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__("62c8").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "7e58":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("6fbc");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("004add65", content, shadowRoot)
};

/***/ }),

/***/ "7e59":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#maincontent .expandp[data-v-a8a70f9c]{position:absolute;left:0;right:-.5em;top:0;bottom:0;cursor:pointer;overflow-y:hidden;z-index:3}#maincontent .expandp .etablew[data-v-a8a70f9c]{position:absolute;left:0;right:0;top:0;bottom:0;z-index:2}#maincontent .expandp .etable[data-v-a8a70f9c]{height:100%;width:100%}#maincontent .expandp .etable>div[data-v-a8a70f9c]{transition:.3s;opacity:0;color:rgb(var(--text-on-bg-ac-color));vertical-align:middle;text-align:center}#maincontent .expandp[data-v-a8a70f9c]:before{--size:0;content:\"\";position:absolute;left:var(--x);top:50%;width:var(--size);height:var(--size);background:radial-gradient(circle closest-side,rgba(0,24,48,.34902),transparent);transform:translate(-50%,-50%);transition:.3s}#maincontent .expandp:hover .etable>div[data-v-a8a70f9c]{opacity:1}#maincontent .expandp[data-v-a8a70f9c]:hover:before{--size:400px}#maincontent.bout .expandp[data-v-a8a70f9c]{display:none}#maincontent[data-v-a8a70f9c] .resize-observer{height:1px;overflow:hidden}#maincontent .headerSpacer[data-v-a8a70f9c]{position:static;left:0;right:0;top:0;bottom:0;padding-bottom:0;margin:0 auto;max-width:640px}#maincontent .headerSpacerWrapper[data-v-a8a70f9c]{position:absolute;left:0;right:0;top:calc(65px + var(--app-margin-top));bottom:90px;overflow-y:auto;overflow-x:hidden}#maincontent .headerSpacerWrapperOvf[data-v-a8a70f9c]{position:absolute;left:0;right:0;top:0;bottom:0;overflow-y:scroll;overflow-x:hidden;overscroll-behavior:contain}#maincontent.minimized .headerSpacerWrapper[data-v-a8a70f9c]{top:55px}#maincontent.minimized.fix .headerSpacerWrapper[data-v-a8a70f9c]{overflow-y:inherit;overflow-x:inherit;top:0;bottom:103px;will-change:transform;transition:transform .3s}#maincontent.minimized.fix:not(.active):not(.unauthorized) .headerSpacerWrapperOvf[data-v-a8a70f9c]{-webkit-mask-image:linear-gradient(0deg,transparent 3%,#000 10%);mask-image:linear-gradient(0deg,transparent 3%,#000 10%)}#maincontent.minimized.fix[data-v-a8a70f9c]:not(.active):not(.unauthorized) .maskedtop{-webkit-mask-image:linear-gradient(180deg,transparent 3%,#000 10%);mask-image:linear-gradient(180deg,transparent 3%,#000 10%)}#maincontent.minimized.fix .headerSpacerWrapperOvf[data-v-a8a70f9c]{position:relative;width:344px;height:100%;overflow:visible;will-change:transform;transition:transform .3s}#maincontent.minimized.fix .headerSpacer[data-v-a8a70f9c]{position:absolute;height:100%;left:0;width:344px;padding:0;overflow-x:hidden;will-change:transform;overscroll-behavior:contain}#maincontent.minimized.fix.active .expandp[data-v-a8a70f9c]{display:none}#maincontent.minimized.fix.active .headerSpacerWrapper[data-v-a8a70f9c]{transform:translateZ(0);z-index:130}#maincontent.minimized.fix.active .headerSpacerWrapperOvf[data-v-a8a70f9c]{transform:translate3d(-300px,4px,0)}#maincontent.minimized.fix.active .headerSpacerWrapperOvf .headerSpacer[data-v-a8a70f9c]{border-radius:8px;border-top-left-radius:0;border-top-right-radius:0;background:rgb(var(--background-total-theme));border:1px solid rgba(var(--neutral-grad-2),.2);box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7);right:0}.modalcommoncontent[data-v-a8a70f9c] .previewContact{padding-left:.75em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "7e78":
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__("3fb5")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "7f9a":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isCallable = __webpack_require__("1626");
var inspectSource = __webpack_require__("8925");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "7ffb":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".eventMember[data-v-54a240c2]{display:flex;align-items:center;padding-left:.25em}.eventMember .iconWrapper[data-v-54a240c2]{width:33px;height:33px;margin-right:.5em}.eventMember .labelwrapper[data-v-54a240c2]{line-height:.9em;padding-bottom:7px;max-width:80%}.eventMember .labelwrapper span[data-v-54a240c2]{vertical-align:middle}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "810b":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("d270");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("2d214bb3", content, shadowRoot)
};

/***/ }),

/***/ "8157":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("7e59");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("6b42ebab", content, shadowRoot)
};

/***/ }),

/***/ "8183":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("738c");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("2aed7758", content, shadowRoot)
};

/***/ }),

/***/ "81bf":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_7650772c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a14c");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_7650772c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_7650772c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_7650772c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_7650772c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "820f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "825a":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "826f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_0635047f_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("0b70");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_0635047f_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_0635047f_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_0635047f_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_0635047f_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "827e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__("480d");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "83ab":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "83b9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsoluteURL = __webpack_require__("d925");
var combineURLs = __webpack_require__("e683");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "848b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pkg = __webpack_require__("4a0c");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "85fe":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ObserveVisibility; });
/* unused harmony export install */
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function processOptions(value) {
  var options;

  if (typeof value === 'function') {
    // Simple options (callback-only)
    options = {
      callback: value
    };
  } else {
    // Options object
    options = value;
  }

  return options;
}
function throttle(callback, delay) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var timeout;
  var lastState;
  var currentArgs;

  var throttled = function throttled(state) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    currentArgs = args;
    if (timeout && state === lastState) return;
    var leading = options.leading;

    if (typeof leading === 'function') {
      leading = leading(state, lastState);
    }

    if ((!timeout || state !== lastState) && leading) {
      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));
    }

    lastState = state;
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));
      timeout = 0;
    }, delay);
  };

  throttled._clear = function () {
    clearTimeout(timeout);
    timeout = null;
  };

  return throttled;
}
function deepEqual(val1, val2) {
  if (val1 === val2) return true;

  if (_typeof(val1) === 'object') {
    for (var key in val1) {
      if (!deepEqual(val1[key], val2[key])) {
        return false;
      }
    }

    return true;
  }

  return false;
}

var VisibilityState =
/*#__PURE__*/
function () {
  function VisibilityState(el, options, vnode) {
    _classCallCheck(this, VisibilityState);

    this.el = el;
    this.observer = null;
    this.frozen = false;
    this.createObserver(options, vnode);
  }

  _createClass(VisibilityState, [{
    key: "createObserver",
    value: function createObserver(options, vnode) {
      var _this = this;

      if (this.observer) {
        this.destroyObserver();
      }

      if (this.frozen) return;
      this.options = processOptions(options);

      this.callback = function (result, entry) {
        _this.options.callback(result, entry);

        if (result && _this.options.once) {
          _this.frozen = true;

          _this.destroyObserver();
        }
      }; // Throttle


      if (this.callback && this.options.throttle) {
        var _ref = this.options.throttleOptions || {},
            _leading = _ref.leading;

        this.callback = throttle(this.callback, this.options.throttle, {
          leading: function leading(state) {
            return _leading === 'both' || _leading === 'visible' && state || _leading === 'hidden' && !state;
          }
        });
      }

      this.oldResult = undefined;
      this.observer = new IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entries.length > 1) {
          var intersectingEntry = entries.find(function (e) {
            return e.isIntersecting;
          });

          if (intersectingEntry) {
            entry = intersectingEntry;
          }
        }

        if (_this.callback) {
          // Use isIntersecting if possible because browsers can report isIntersecting as true, but intersectionRatio as 0, when something very slowly enters the viewport.
          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;
          if (result === _this.oldResult) return;
          _this.oldResult = result;

          _this.callback(result, entry);
        }
      }, this.options.intersection); // Wait for the element to be in document

      vnode.context.$nextTick(function () {
        if (_this.observer) {
          _this.observer.observe(_this.el);
        }
      });
    }
  }, {
    key: "destroyObserver",
    value: function destroyObserver() {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      } // Cancel throttled call


      if (this.callback && this.callback._clear) {
        this.callback._clear();

        this.callback = null;
      }
    }
  }, {
    key: "threshold",
    get: function get() {
      return this.options.intersection && this.options.intersection.threshold || 0;
    }
  }]);

  return VisibilityState;
}();

function bind(el, _ref2, vnode) {
  var value = _ref2.value;
  if (!value) return;

  if (typeof IntersectionObserver === 'undefined') {
    console.warn('[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill');
  } else {
    var state = new VisibilityState(el, value, vnode);
    el._vue_visibilityState = state;
  }
}

function update(el, _ref3, vnode) {
  var value = _ref3.value,
      oldValue = _ref3.oldValue;
  if (deepEqual(value, oldValue)) return;
  var state = el._vue_visibilityState;

  if (!value) {
    unbind(el);
    return;
  }

  if (state) {
    state.createObserver(value, vnode);
  } else {
    bind(el, {
      value: value
    }, vnode);
  }
}

function unbind(el) {
  var state = el._vue_visibilityState;

  if (state) {
    state.destroyObserver();
    delete el._vue_visibilityState;
  }
}

var ObserveVisibility = {
  bind: bind,
  update: update,
  unbind: unbind
};

function install(Vue) {
  Vue.directive('observe-visibility', ObserveVisibility);
  /* -- Add more components here -- */
}
/* -- Plugin definition & Auto-install -- */

/* You shouldn't have to modify the code below */
// Plugin

var plugin = {
  // eslint-disable-next-line no-undef
  version: "0.4.6",
  install: install
};

var GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
}

/* unused harmony default export */ var _unused_webpack_default_export = (plugin);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "861d":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("1626");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "8707":
/***/ (function(module, exports, __webpack_require__) {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("b639")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "8713":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("1507");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("80c5bd92", content, shadowRoot)
};

/***/ }),

/***/ "87d6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.User = User;

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _events = __webpack_require__("faa1");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/user
 */

/**
 * Construct a new User. A User must have an ID and can optionally have extra
 * information associated with it.
 * @constructor
 * @param {string} userId Required. The ID of this user.
 * @prop {string} userId The ID of the user.
 * @prop {Object} info The info object supplied in the constructor.
 * @prop {string} displayName The 'displayname' of the user if known.
 * @prop {string} avatarUrl The 'avatar_url' of the user if known.
 * @prop {string} presence The presence enum if known.
 * @prop {string} presenceStatusMsg The presence status message if known.
 * @prop {Number} lastActiveAgo The time elapsed in ms since the user interacted
 *                proactively with the server, or we saw a message from the user
 * @prop {Number} lastPresenceTs Timestamp (ms since the epoch) for when we last
 *                received presence data for this user.  We can subtract
 *                lastActiveAgo from this to approximate an absolute value for
 *                when a user was last active.
 * @prop {Boolean} currentlyActive Whether we should consider lastActiveAgo to be
 *               an approximation and that the user should be seen as active 'now'
 * @prop {string} _unstable_statusMessage The status message for the user, if known. This is
 *                different from the presenceStatusMsg in that this is not tied to
 *                the user's presence, and should be represented differently.
 * @prop {Object} events The events describing this user.
 * @prop {MatrixEvent} events.presence The m.presence event for this user.
 */


function User(userId) {
  this.userId = userId;
  this.presence = "offline";
  this.presenceStatusMsg = null;
  this._unstable_statusMessage = "";
  this.displayName = userId;
  this.rawDisplayName = userId;
  this.avatarUrl = null;
  this.lastActiveAgo = 0;
  this.lastPresenceTs = 0;
  this.currentlyActive = false;
  this.events = {
    presence: null,
    profile: null
  };

  this._updateModifiedTime();
}

utils.inherits(User, _events.EventEmitter);
/**
 * Update this User with the given presence event. May fire "User.presence",
 * "User.avatarUrl" and/or "User.displayName" if this event updates this user's
 * properties.
 * @param {MatrixEvent} event The <code>m.presence</code> event.
 * @fires module:client~MatrixClient#event:"User.presence"
 * @fires module:client~MatrixClient#event:"User.displayName"
 * @fires module:client~MatrixClient#event:"User.avatarUrl"
 */

User.prototype.setPresenceEvent = function (event) {
  if (event.getType() !== "m.presence") {
    return;
  }

  const firstFire = this.events.presence === null;
  this.events.presence = event;
  const eventsToFire = [];

  if (event.getContent().presence !== this.presence || firstFire) {
    eventsToFire.push("User.presence");
  }

  if (event.getContent().avatar_url && event.getContent().avatar_url !== this.avatarUrl) {
    eventsToFire.push("User.avatarUrl");
  }

  if (event.getContent().displayname && event.getContent().displayname !== this.displayName) {
    eventsToFire.push("User.displayName");
  }

  if (event.getContent().currently_active !== undefined && event.getContent().currently_active !== this.currentlyActive) {
    eventsToFire.push("User.currentlyActive");
  }

  this.presence = event.getContent().presence;
  eventsToFire.push("User.lastPresenceTs");

  if (event.getContent().status_msg) {
    this.presenceStatusMsg = event.getContent().status_msg;
  }

  if (event.getContent().displayname) {
    this.displayName = event.getContent().displayname;
  }

  if (event.getContent().avatar_url) {
    this.avatarUrl = event.getContent().avatar_url;
  }

  this.lastActiveAgo = event.getContent().last_active_ago;
  this.lastPresenceTs = Date.now();
  this.currentlyActive = event.getContent().currently_active;

  this._updateModifiedTime();

  for (let i = 0; i < eventsToFire.length; i++) {
    this.emit(eventsToFire[i], event, this);
  }
};
/**
 * Manually set this user's display name. No event is emitted in response to this
 * as there is no underlying MatrixEvent to emit with.
 * @param {string} name The new display name.
 */


User.prototype.setDisplayName = function (name) {
  const oldName = this.displayName;

  if (typeof name === "string") {
    this.displayName = name;
  } else {
    this.displayName = undefined;
  }

  if (name !== oldName) {
    this._updateModifiedTime();
  }
};
/**
 * Manually set this user's non-disambiguated display name. No event is emitted
 * in response to this as there is no underlying MatrixEvent to emit with.
 * @param {string} name The new display name.
 */


User.prototype.setRawDisplayName = function (name) {
  if (typeof name === "string") {
    this.rawDisplayName = name;
  } else {
    this.rawDisplayName = undefined;
  }
};
/**
 * Manually set this user's avatar URL. No event is emitted in response to this
 * as there is no underlying MatrixEvent to emit with.
 * @param {string} url The new avatar URL.
 */


User.prototype.setAvatarUrl = function (url) {
  const oldUrl = this.avatarUrl;
  this.avatarUrl = url;

  if (url !== oldUrl) {
    this._updateModifiedTime();
  }
};
/**
 * Update the last modified time to the current time.
 */


User.prototype._updateModifiedTime = function () {
  this._modified = Date.now();
};
/**
 * Get the timestamp when this User was last updated. This timestamp is
 * updated when this User receives a new Presence event which has updated a
 * property on this object. It is updated <i>before</i> firing events.
 * @return {number} The timestamp
 */


User.prototype.getLastModifiedTime = function () {
  return this._modified;
};
/**
 * Get the absolute timestamp when this User was last known active on the server.
 * It is *NOT* accurate if this.currentlyActive is true.
 * @return {number} The timestamp
 */


User.prototype.getLastActiveTs = function () {
  return this.lastPresenceTs - this.lastActiveAgo;
};
/**
 * Manually set the user's status message.
 * @param {MatrixEvent} event The <code>im.vector.user_status</code> event.
 * @fires module:client~MatrixClient#event:"User._unstable_statusMessage"
 */


User.prototype._unstable_updateStatusMessage = function (event) {
  if (!event.getContent()) this._unstable_statusMessage = "";else this._unstable_statusMessage = event.getContent()["status"];

  this._updateModifiedTime();

  this.emit("User._unstable_statusMessage", this);
};
/**
 * Fires whenever any user's lastPresenceTs changes,
 * ie. whenever any presence event is received for a user.
 * @event module:client~MatrixClient#"User.lastPresenceTs"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {User} user The user whose User.lastPresenceTs changed.
 * @example
 * matrixClient.on("User.lastPresenceTs", function(event, user){
 *   var newlastPresenceTs = user.lastPresenceTs;
 * });
 */

/**
 * Fires whenever any user's presence changes.
 * @event module:client~MatrixClient#"User.presence"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {User} user The user whose User.presence changed.
 * @example
 * matrixClient.on("User.presence", function(event, user){
 *   var newPresence = user.presence;
 * });
 */

/**
 * Fires whenever any user's currentlyActive changes.
 * @event module:client~MatrixClient#"User.currentlyActive"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {User} user The user whose User.currentlyActive changed.
 * @example
 * matrixClient.on("User.currentlyActive", function(event, user){
 *   var newCurrentlyActive = user.currentlyActive;
 * });
 */

/**
 * Fires whenever any user's display name changes.
 * @event module:client~MatrixClient#"User.displayName"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {User} user The user whose User.displayName changed.
 * @example
 * matrixClient.on("User.displayName", function(event, user){
 *   var newName = user.displayName;
 * });
 */

/**
 * Fires whenever any user's avatar URL changes.
 * @event module:client~MatrixClient#"User.avatarUrl"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @param {User} user The user whose User.avatarUrl changed.
 * @example
 * matrixClient.on("User.avatarUrl", function(event, user){
 *   var newUrl = user.avatarUrl;
 * });
 */

/***/ }),

/***/ "883d":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("6668");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("d6256b5a", content, shadowRoot)
};

/***/ }),

/***/ "8875":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// addapted from the document.currentScript polyfill by Adam Miller
// MIT license
// source: https://github.com/amiller-gh/currentScript-polyfill

// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(typeof self !== 'undefined' ? self : this, function () {
  function getCurrentScript () {
    var descriptor = Object.getOwnPropertyDescriptor(document, 'currentScript')
    // for chrome
    if (!descriptor && 'currentScript' in document && document.currentScript) {
      return document.currentScript
    }

    // for other browsers with native support for currentScript
    if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
      return document.currentScript
    }
  
    // IE 8-10 support script readyState
    // IE 11+ & Firefox support stack trace
    try {
      throw new Error();
    }
    catch (err) {
      // Find the second match for the "at" string to get file src url from stack.
      var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig,
        ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig,
        stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),
        scriptLocation = (stackDetails && stackDetails[1]) || false,
        line = (stackDetails && stackDetails[2]) || false,
        currentLocation = document.location.href.replace(document.location.hash, ''),
        pageSource,
        inlineScriptSourceRegExp,
        inlineScriptSource,
        scripts = document.getElementsByTagName('script'); // Live NodeList collection
  
      if (scriptLocation === currentLocation) {
        pageSource = document.documentElement.outerHTML;
        inlineScriptSourceRegExp = new RegExp('(?:[^\\n]+?\\n){0,' + (line - 2) + '}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*', 'i');
        inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();
      }
  
      for (var i = 0; i < scripts.length; i++) {
        // If ready state is interactive, return the script tag
        if (scripts[i].readyState === 'interactive') {
          return scripts[i];
        }
  
        // If src matches, return the script tag
        if (scripts[i].src === scriptLocation) {
          return scripts[i];
        }
  
        // If inline source matches, return the script tag
        if (
          scriptLocation === currentLocation &&
          scripts[i].innerHTML &&
          scripts[i].innerHTML.trim() === inlineScriptSource
        ) {
          return scripts[i];
        }
      }
  
      // If no match, return null
      return null;
    }
  };

  return getCurrentScript
}));


/***/ }),

/***/ "8925":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");
var isCallable = __webpack_require__("1626");
var store = __webpack_require__("c6cd");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "89fd":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("0ac3").Transform


/***/ }),

/***/ "8b3a":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("71e5");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("10c21eb7", content, shadowRoot)
};

/***/ }),

/***/ "8b5c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__("a593");
var normalizeHeaderName = __webpack_require__("820f");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__("2100");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__("2100");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "8ba6":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("3d2e");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("6d85e643", content, shadowRoot)
};

/***/ }),

/***/ "8be6":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("8707").Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}


/***/ }),

/***/ "8cd8":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0f8b05de_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2eac");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0f8b05de_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0f8b05de_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0f8b05de_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0f8b05de_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "8d7d":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".previewWrapper[data-v-951b8314]{display:flex;align-items:center;width:100%}.previewWrapper .settingsWrapper[data-v-951b8314]{width:50px;text-align:center;opacity:.2}.previewWrapper .iconWrapper[data-v-951b8314]{width:44px}.previewWrapper .infoWrapper[data-v-951b8314]{padding-left:.5em;flex-grow:1}.emptyEvent span[data-v-951b8314]{color:rgb(var(--color-good));font-size:.8em}.contacts-preview[data-v-951b8314]{width:100%}.summaryLine[data-v-951b8314]{display:flex}.summaryLine .caption[data-v-951b8314]{flex-grow:1}.summaryLine .caption[data-v-951b8314] span{font-size:.9em;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-weight:700}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "8db5":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/*! HTML5 Boilerplate v7.3.0 | MIT License | https://html5boilerplate.com/ */:root{--app-margin-top-default:0px;--app-margin-top:max(env(safe-area-inset-top),var(--app-margin-top-default));--safe-area-inset-top:0px;--safe-area-inset-right:0px;--safe-area-inset-bottom:0px;--safe-area-inset-left:0px}@supports (padding-top:constant(safe-area-inset-top)){:root{--safe-area-inset-top:constant(safe-area-inset-top,0);--safe-area-inset-right:constant(safe-area-inset-right,0);--safe-area-inset-bottom:constant(safe-area-inset-bottom,0);--safe-area-inset-left:constant(safe-area-inset-left,0)}}@supports (padding-top:env(safe-area-inset-top)){:root{--safe-area-inset-top:env(safe-area-inset-top,0);--safe-area-inset-right:env(safe-area-inset-right,0);--safe-area-inset-bottom:env(safe-area-inset-bottom,0);--safe-area-inset-left:env(safe-area-inset-left,0)}}:root{--background-hidden-layer:255,255,255;--background-total-theme:255,255,255;--background-secondary-theme:250,250,250;--background-main:240,242,245;--background-main-contrast:10,12,23;--color-medium-theme:199,200,217;--neutral-grad-0:235,235,240;--neutral-grad-1:227,228,235;--neutral-grad-2:142,144,166;--neutral-grad-3:85,87,112;--neutral-grad-4:64,65,82;--text-color:10,12,23;--text-on-main-bg-color:85,87,112;--text-on-bg-ac-color:255,255,255;--color-bg-ac-bright:0,163,247;--color-bg-ac:0,164,255;--color-bg-ac-1:0,142,191;--color-bg-ac-2:250,110,132;--color-bg-selection:179,212,252;--color-txt-ac:0,164,255;--color-txt-ac-1:0,142,191;--color-txt-ac-2:250,110,132;--color-txt-gray:70,71,98;--color-txt-gray-dark:53,53,63;--color-bg-orange:255,59,0;--color-txt-orange:255,72,0;--color-star-yellow:255,174,0;--color-shadow-base:2,18,24;--color-shadow-var:32,35,42;--text-on-bg-shadow-color:255,255,255;--color-bad:244,26,77;--color-nrml:0,0,0;--color-good:7,108,52;--color-yellow:255,238,0}:root,:root[theme=black]{--voice-message-fillStyle:81,129,184}:root[theme=black]{--background-hidden-layer:10,12,23;--background-total-theme:18,22,33;--background-secondary-theme:24,36,52;--background-main:14,28,43;--background-main-contrast:240,242,245;--color-medium-theme:99,100,117;--neutral-grad-0:16,16,17;--neutral-grad-1:34,34,37;--neutral-grad-2:59,59,71;--neutral-grad-3:77,78,92;--neutral-grad-4:85,87,112;--text-color:178,171,172;--text-on-main-bg-color:85,87,112;--text-on-bg-ac-color:255,255,255;--color-bg-ac-bright:0,90,200;--color-bg-ac:0,80,190;--color-bg-ac-1:0,142,191;--color-bg-ac-2:250,110,132;--color-bg-selection:179,212,252;--color-txt-ac:0,164,255;--color-txt-ac-1:0,142,191;--color-txt-ac-2:250,110,132;--color-txt-gray:103,105,128;--color-txt-gray-dark:113,113,134;--color-bg-orange:255,72,0;--text-txt-orange:255,72,0;--color-shadow-base:12,14,33;--color-shadow-var:18,18,26;--text-on-bg-shadow-color:214,219,230;--color-bad:244,26,77;--color-nrml:0,0,0;--color-good:7,108,52;--color-yellow:255,238,0}html{font-size:1em;line-height:1.4;position:relative;overflow-y:hidden;overflow-x:hidden;background:rgb(var(--background-total-theme))}body,html{min-height:100%}body{height:100%}*{box-sizing:border-box}a{color:inherit}::-moz-selection{background:#b3d4fc;text-shadow:none}::selection{background:#b3d4fc;text-shadow:none}hr{display:block;height:1px;border:0;border-top:1px solid #ccc;margin:1em 0;padding:0}audio,canvas,iframe,img,svg,video{vertical-align:middle}fieldset{border:0;margin:0;padding:0}textarea{resize:vertical}.browserupgrade{margin:.2em 0;background:#ccc;color:#000;padding:.2em 0}.hidden{display:none!important}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.sr-only.focusable:active,.sr-only.focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;white-space:inherit;width:auto}.invisible{visibility:hidden}.clearfix:after,.clearfix:before{content:\" \";display:table}.clearfix:after{clear:both}@media print{*,:after,:before{background:transparent!important;color:#000!important;box-shadow:none!important;text-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:\" (\" attr(href) \")\"}abbr[title]:after{content:\" (\" attr(title) \")\"}a[href^=\"#\"]:after,a[href^=\"javascript:\"]:after{content:\"\"}pre{white-space:pre-wrap!important}blockquote,pre{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}img,tr{page-break-inside:avoid}h2,h3,p{orphans:3;widows:3}h2,h3{page-break-after:avoid}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "8df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__("7a77");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "8e08":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// tslint:disable:max-classes-per-file
Object.defineProperty(exports, "__esModule", { value: true });
/** Thrown when ciphertext fails to verify as authentic */
class IntegrityError extends Error {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, IntegrityError.prototype);
    }
}
exports.IntegrityError = IntegrityError;
/** Thrown when we attempt to use an unsupported crypto algorithm via WebCrypto */
class NotImplementedError extends Error {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, NotImplementedError.prototype);
    }
}
exports.NotImplementedError = NotImplementedError;


/***/ }),

/***/ "8e26":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri
// MIT License. See LICENSE file for details.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = __webpack_require__("69fc");
const xor_1 = __webpack_require__("bbd4");
/**
 * The AES-CMAC message authentication code
 */
class CMAC {
    constructor(_cipher, _subkey1, _subkey2) {
        this._cipher = _cipher;
        this._subkey1 = _subkey1;
        this._subkey2 = _subkey2;
        this._bufferPos = 0;
        this._finished = false;
        this._buffer = new block_1.default();
    }
    /** Create a new CMAC instance from the given key */
    static importKey(provider, keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            const cipher = yield provider.importBlockCipherKey(keyData);
            // Generate subkeys.
            const subkey1 = new block_1.default();
            yield cipher.encryptBlock(subkey1);
            subkey1.dbl();
            const subkey2 = subkey1.clone();
            subkey2.dbl();
            return new CMAC(cipher, subkey1, subkey2);
        });
    }
    reset() {
        this._buffer.clear();
        this._bufferPos = 0;
        this._finished = false;
        return this;
    }
    clear() {
        this.reset();
        this._subkey1.clear();
        this._subkey2.clear();
    }
    update(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const left = block_1.default.SIZE - this._bufferPos;
            let dataPos = 0;
            let dataLength = data.length;
            if (dataLength > left) {
                for (let i = 0; i < left; i++) {
                    this._buffer.data[this._bufferPos + i] ^= data[i];
                }
                dataLength -= left;
                dataPos += left;
                yield this._cipher.encryptBlock(this._buffer);
                this._bufferPos = 0;
            }
            // TODO: use AES-CBC with a span of multiple blocks instead of encryptBlock
            // to encrypt many blocks in a single call to the WebCrypto API
            while (dataLength > block_1.default.SIZE) {
                for (let i = 0; i < block_1.default.SIZE; i++) {
                    this._buffer.data[i] ^= data[dataPos + i];
                }
                dataLength -= block_1.default.SIZE;
                dataPos += block_1.default.SIZE;
                yield this._cipher.encryptBlock(this._buffer);
            }
            for (let i = 0; i < dataLength; i++) {
                this._buffer.data[this._bufferPos++] ^= data[dataPos + i];
            }
            return this;
        });
    }
    finish() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._finished) {
                // Select which subkey to use.
                const subkey = (this._bufferPos < block_1.default.SIZE) ? this._subkey2 : this._subkey1;
                // XOR in the subkey.
                xor_1.xor(this._buffer.data, subkey.data);
                // Pad if needed.
                if (this._bufferPos < block_1.default.SIZE) {
                    this._buffer.data[this._bufferPos] ^= 0x80;
                }
                // Encrypt buffer to get the final digest.
                yield this._cipher.encryptBlock(this._buffer);
                // Set finished flag.
                this._finished = true;
            }
            return this._buffer.clone().data;
        });
    }
}
exports.CMAC = CMAC;


/***/ }),

/***/ "8ec6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "8f4c":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".name[data-v-d18e99d2]{text-align:center}.name span[data-v-d18e99d2]{font-size:2em;font-weight:100}.gotoprofile[data-v-d18e99d2]{text-align:center;padding:1em;padding-top:0}.imageWrapper[data-v-d18e99d2]{padding:1em 0;padding-top:0;max-width:120px;margin:0 auto}.info[data-v-d18e99d2]{display:flex;padding:.5em;width:95%;border-radius:35px;background:rgb(var(--background-total-theme));margin:0 auto;margin-bottom:.5em;box-shadow:0 5px 5px -3px rgba(var(--color-shadow-base),.4)}.info .infoPart[data-v-d18e99d2]{width:33.3%;padding:.5em;text-align:center}.info .infoPart span[data-v-d18e99d2]{font-size:.8em}.info .infoPart .value[data-v-d18e99d2]{font-size:1.3em;font-weight:700}[data-v-d18e99d2] .userpic{width:120px;height:120px;line-height:120px;margin:0 auto}.haskeys[data-v-d18e99d2]{position:absolute;left:.5em;top:.5em;color:rgb(var(--color-good))}.haskeys i[data-v-d18e99d2]{font-size:.8em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "8fc3":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("703d");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("78a51160", content, shadowRoot)
};

/***/ }),

/***/ "8ff0":
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e(__webpack_require__("a026")):undefined}(this,function(t){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="/",e(0)}([function(t,e,n){var r,o,i;!function(s,u){o=[t,e,n(13),n(14),n(43),n(44)],r=u,i="function"==typeof r?r.apply(e,o):r,!(void 0!==i&&(t.exports=i))}(this,function(t,e,n,r,o,i){"use strict";function s(t){return t&&t.__esModule?t:{default:t}}function u(t,e){var n=t.length;if(n!=e.length)return!1;for(var r=0;r<n;r++){var o=t[r],i=e[r];if(o.img!==i.img||o.src!==i.src)return!1}return!0}function c(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if("function"!=typeof t)throw"imageLoaded directive error: objet "+t+" should be a function "+e}function f(t,e){var n=e.value,r=e.arg,o=e.modifiers;if(!r)return c(n),void t.on("always",function(t){return setTimeout(function(){return n(t)})});var i=!!o&&!!(0,h.default)(o).length,s=i?o:n,u=i?function(t){return n}:function(t){return n[t]},f=function(){var e=u(a);c(e,i?"":"property "+a+" of "+n),t[r](a,function(t,n){return setTimeout(function(){return e(t,n)})})};for(var a in s)f()}function a(t,e){var n=(0,d.default)(t),r=n.images.map(function(t){return{img:t.img,src:t.img.src}}),o=t.__imagesLoaded__.context;u(o,r)||(f(n,e),(0,p.default)(t.__imagesLoaded__,{context:r,imageLoaded:n}))}Object.defineProperty(e,"__esModule",{value:!0});var p=s(n),h=s(r),d=s(o),l=s(i);e.default={bind:function(t){t.__imagesLoaded__={context:[]}},inserted:function(t,e){a(t,e)},componentUpdated:function(t,e){l.default.nextTick(function(){a(t,e)})},unbind:function(t,e){t.__imagesLoaded__=null}},t.exports=e.default})},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){t.exports=!n(2)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(4),o=n(1),i=n(21),s=n(25),u="prototype",c=function(t,e,n){var f,a,p,h=t&c.F,d=t&c.G,l=t&c.S,v=t&c.P,m=t&c.B,g=t&c.W,y=d?o:o[e]||(o[e]={}),x=y[u],b=d?r:l?r[e]:(r[e]||{})[u];d&&(n=e);for(f in n)a=!h&&b&&void 0!==b[f],a&&f in y||(p=a?b[f]:n[f],y[f]=d&&"function"!=typeof b[f]?n[f]:m&&a?i(p,r):g&&b[f]==p?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e[u]=t[u],e}(p):v&&"function"==typeof p?i(Function.call,p):p,v&&((y.virtual||(y.virtual={}))[f]=p,t&c.R&&x&&!x[f]&&s(x,f,p)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e,n){var r=n(20);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(30),o=n(23);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(8),o=n(6);t.exports=function(t){return r(o(t))}},function(t,e,n){var r=n(6);t.exports=function(t){return Object(r(t))}},function(t,e,n){t.exports={default:n(15),__esModule:!0}},function(t,e,n){t.exports={default:n(16),__esModule:!0}},function(t,e,n){n(40),t.exports=n(1).Object.assign},function(t,e,n){n(41),t.exports=n(1).Object.keys},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(5);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){var r=n(11),o=n(37),i=n(36);t.exports=function(t){return function(e,n,s){var u,c=r(e),f=o(c.length),a=i(s,f);if(t&&n!=n){for(;f>a;)if(u=c[a++],u!=u)return!0}else for(;f>a;a++)if((t||a in c)&&c[a]===n)return t||a||0;return!t&&-1}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(17);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(5),o=n(4).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(28),o=n(33);t.exports=n(3)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){t.exports=!n(3)&&!n(2)(function(){return 7!=Object.defineProperty(n(22)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(9),o=n(29),i=n(31),s=n(12),u=n(8),c=Object.assign;t.exports=!c||n(2)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=r})?function(t,e){for(var n=s(t),c=arguments.length,f=1,a=o.f,p=i.f;c>f;)for(var h,d=u(arguments[f++]),l=a?r(d).concat(a(d)):r(d),v=l.length,m=0;v>m;)p.call(d,h=l[m++])&&(n[h]=d[h]);return n}:c},function(t,e,n){var r=n(18),o=n(26),i=n(38),s=Object.defineProperty;e.f=n(3)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(24),o=n(11),i=n(19)(!1),s=n(34)("IE_PROTO");t.exports=function(t,e){var n,u=o(t),c=0,f=[];for(n in u)n!=s&&r(u,n)&&f.push(n);for(;e.length>c;)r(u,n=e[c++])&&(~i(f,n)||f.push(n));return f}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(7),o=n(1),i=n(2);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],s={};s[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",s)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(35)("keys"),o=n(39);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e,n){var r=n(4),o="__core-js_shared__",i=r[o]||(r[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,n){var r=n(10),o=Math.max,i=Math.min;t.exports=function(t,e){return t=r(t),t<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(10),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e,n){var r=n(5);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(7);r(r.S+r.F,"Object",{assign:n(27)})},function(t,e,n){var r=n(12),o=n(9);n(32)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){var r,o;!function(i,s){r=s,o="function"==typeof r?r.call(e,n,e,t):r,!(void 0!==o&&(t.exports=o))}("undefined"!=typeof window?window:this,function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},r=n[t]=n[t]||[];return r.indexOf(e)==-1&&r.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{},r=n[t]=n[t]||{};return r[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var r=n.indexOf(e);return r!=-1&&n.splice(r,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var r=0,o=n[r];e=e||[];for(var i=this._onceEvents&&this._onceEvents[t];o;){var s=i&&i[o];s&&(this.off(t,o),delete i[o]),o.apply(this,e),r+=s?0:1,o=n[r]}return this}},t})},function(t,e,n){var r,o;/*!
	 * imagesLoaded v4.1.1
	 * JavaScript is all like "You images are done yet or what?"
	 * MIT License
	 */
!function(i,s){"use strict";r=[n(42)],o=function(t){return s(i,t)}.apply(e,r),!(void 0!==o&&(t.exports=o))}(window,function(t,e){"use strict";function n(t,e){for(var n in e)t[n]=e[n];return t}function r(t){var e=[];if(Array.isArray(t))e=t;else if("number"==typeof t.length)for(var n=0;n<t.length;n++)e.push(t[n]);else e.push(t);return e}function o(t,e,i){return this instanceof o?("string"==typeof t&&(t=document.querySelectorAll(t)),this.elements=r(t),this.options=n({},this.options),"function"==typeof e?i=e:n(this.options,e),i&&this.on("always",i),this.getImages(),u&&(this.jqDeferred=new u.Deferred),void setTimeout(function(){this.check()}.bind(this))):new o(t,e,i)}function i(t){this.img=t}function s(t,e){this.url=t,this.element=e,this.img=new Image}var u=t.jQuery,c=t.console;o.prototype=Object.create(e.prototype),o.prototype.options={},o.prototype.getImages=function(){this.images=[],this.elements.forEach(this.addElementImages,this)},o.prototype.addElementImages=function(t){"IMG"==t.nodeName&&this.addImage(t),this.options.background===!0&&this.addElementBackgroundImages(t);var e=t.nodeType;if(e&&f[e]){for(var n=t.querySelectorAll("img"),r=0;r<n.length;r++){var o=n[r];this.addImage(o)}if("string"==typeof this.options.background){var i=t.querySelectorAll(this.options.background);for(r=0;r<i.length;r++){var s=i[r];this.addElementBackgroundImages(s)}}}};var f={1:!0,9:!0,11:!0};return o.prototype.addElementBackgroundImages=function(t){var e=getComputedStyle(t);if(e)for(var n=/url\((['"])?(.*?)\1\)/gi,r=n.exec(e.backgroundImage);null!==r;){var o=r&&r[2];o&&this.addBackground(o,t),r=n.exec(e.backgroundImage)}},o.prototype.addImage=function(t){var e=new i(t);this.images.push(e)},o.prototype.addBackground=function(t,e){var n=new s(t,e);this.images.push(n)},o.prototype.check=function(){function t(t,n,r){setTimeout(function(){e.progress(t,n,r)})}var e=this;return this.progressedCount=0,this.hasAnyBroken=!1,this.images.length?void this.images.forEach(function(e){e.once("progress",t),e.check()}):void this.complete()},o.prototype.progress=function(t,e,n){this.progressedCount++,this.hasAnyBroken=this.hasAnyBroken||!t.isLoaded,this.emitEvent("progress",[this,t,e]),this.jqDeferred&&this.jqDeferred.notify&&this.jqDeferred.notify(this,t),this.progressedCount==this.images.length&&this.complete(),this.options.debug&&c&&c.log("progress: "+n,t,e)},o.prototype.complete=function(){var t=this.hasAnyBroken?"fail":"done";if(this.isComplete=!0,this.emitEvent(t,[this]),this.emitEvent("always",[this]),this.jqDeferred){var e=this.hasAnyBroken?"reject":"resolve";this.jqDeferred[e](this)}},i.prototype=Object.create(e.prototype),i.prototype.check=function(){var t=this.getIsImageComplete();return t?void this.confirm(0!==this.img.naturalWidth,"naturalWidth"):(this.proxyImage=new Image,this.proxyImage.addEventListener("load",this),this.proxyImage.addEventListener("error",this),this.img.addEventListener("load",this),this.img.addEventListener("error",this),void(this.proxyImage.src=this.img.src))},i.prototype.getIsImageComplete=function(){return this.img.complete&&void 0!==this.img.naturalWidth},i.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.img,e])},i.prototype.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.prototype.onload=function(){this.confirm(!0,"onload"),this.unbindEvents()},i.prototype.onerror=function(){this.confirm(!1,"onerror"),this.unbindEvents()},i.prototype.unbindEvents=function(){this.proxyImage.removeEventListener("load",this),this.proxyImage.removeEventListener("error",this),this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype=Object.create(i.prototype),s.prototype.check=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.url;var t=this.getIsImageComplete();t&&(this.confirm(0!==this.img.naturalWidth,"naturalWidth"),this.unbindEvents())},s.prototype.unbindEvents=function(){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this)},s.prototype.confirm=function(t,e){this.isLoaded=t,this.emitEvent("progress",[this,this.element,e])},o.makeJQueryPlugin=function(e){e=e||t.jQuery,e&&(u=e,u.fn.imagesLoaded=function(t,e){var n=new o(this,t,e);return n.jqDeferred.promise(u(this))})},o.makeJQueryPlugin(),o})},function(e,n){e.exports=t}])});
//# sourceMappingURL=vueimagesloaded.js.map

/***/ }),

/***/ "903c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__("c9b8").codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ "9060":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const exceptions_1 = __webpack_require__("8e08");
const aes_1 = __webpack_require__("69f5");
const aes_ctr_1 = __webpack_require__("4d5e");
/** Placeholder backend for using pure JavaScript crypto implementations */
class WebCryptoProvider {
    constructor(crypto = window.crypto) {
        this.crypto = crypto;
    }
    importBlockCipherKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            return aes_1.default.importKey(this.crypto, keyData);
        });
    }
    importCTRKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield aes_ctr_1.default.importKey(this.crypto, keyData);
            }
            catch (e) {
                if (e.message.includes("unsupported")) {
                    throw new exceptions_1.NotImplementedError("WebCryptoProvider: AES-CTR unsupported. Use PolyfillCryptoProvider.");
                }
                else {
                    throw e;
                }
            }
        });
    }
}
exports.WebCryptoProvider = WebCryptoProvider;


/***/ }),

/***/ "907a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ArrayBufferViewCore = __webpack_require__("ebb5");
var lengthOfArrayLike = __webpack_require__("07fa");
var toIntegerOrInfinity = __webpack_require__("5926");

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

// `%TypedArray%.prototype.at` method
// https://github.com/tc39/proposal-relative-indexing-method
exportTypedArrayMethod('at', function at(index) {
  var O = aTypedArray(this);
  var len = lengthOfArrayLike(O);
  var relativeIndex = toIntegerOrInfinity(index);
  var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
  return (k < 0 || k >= len) ? undefined : O[k];
});


/***/ }),

/***/ "90e3":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "9112":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var definePropertyModule = __webpack_require__("9bf2");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "9152":
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "91dd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "9205":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6fd14ec6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("5e55");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6fd14ec6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6fd14ec6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6fd14ec6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6fd14ec6_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "92a6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contacts/preview/index.vue?vue&type=template&id=951b8314&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"contacts-preview"},[_c('div',{staticClass:"previewWrapper",style:(_vm.isUser)},[_c('div',{staticClass:"iconWrapper"},[_c('userpic',{attrs:{"userinfo":_vm.contact,"mode":'Contacts'}})],1),_c('div',{staticClass:"infoWrapper"},[_c('div',{staticClass:"summaryLine"},[_c('div',{staticClass:"caption"},[_c('span',[_vm._v(_vm._s(_vm.contact.name))])])])])])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contacts/preview/index.vue?vue&type=template&id=951b8314&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contacts/preview?vue&type=script&lang=js&

/* harmony default export */ var preview_vue_type_script_lang_js_ = ({
  name: 'contactsPreview',
  props: {
    contact: {},
    // selected: false,
    mode: {
      default: '',
      type: String
    },
    user: null
  },
  components: {},
  data: function () {
    return {
      loading: false,
      isUser: '',
      asd: {}
    };
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth
  }),
  methods: {},

  mounted() {// Checking if such user has signed up in chat
    // const user = this.core.mtrx.client.getUser(`@${this.user}:${this.core.domain}`)
    // if(!user) this.isUser = 'opacity: 0.5'
  }

});
// CONCATENATED MODULE: ./src/components/contacts/preview?vue&type=script&lang=js&
 /* harmony default export */ var contacts_preview_vue_type_script_lang_js_ = (preview_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/contacts/preview/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("4001")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  contacts_preview_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "951b8314",
  null
  ,true
)

/* harmony default export */ var preview = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "93e6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("8707").Buffer
var Transform = __webpack_require__("e372").Transform
var inherits = __webpack_require__("3fb5")

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase


/***/ }),

/***/ "94bc":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("fbbb");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("341a8e06", content, shadowRoot)
};

/***/ }),

/***/ "94ca":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var isCallable = __webpack_require__("1626");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "9523":
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "956b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2017-2018 Dmitry Chestnykh, Tony Arcieri
// MIT License. See LICENSE file for details.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const constant_time_1 = __webpack_require__("b8d8");
const wipe_1 = __webpack_require__("ffd9");
const xor_1 = __webpack_require__("bbd4");
const exceptions_1 = __webpack_require__("8e08");
const block_1 = __webpack_require__("69fc");
const cmac_1 = __webpack_require__("8e26");
const pmac_1 = __webpack_require__("9bed");
const webcrypto_1 = __webpack_require__("9060");
/** Maximum number of associated data items */
exports.MAX_ASSOCIATED_DATA = 126;
/** The AES-SIV mode of authenticated encryption */
class SIV {
    /** Create a new AES-SIV instance with the given 32-byte or 64-byte key */
    static importKey(keyData, alg, provider = new webcrypto_1.WebCryptoProvider()) {
        return __awaiter(this, void 0, void 0, function* () {
            // We only support AES-128 and AES-256. AES-SIV needs a key 2X as long the intended security level
            if (keyData.length !== 32 && keyData.length !== 64) {
                throw new Error(`AES-SIV: key must be 32 or 64-bytes (got ${keyData.length}`);
            }
            const macKey = keyData.subarray(0, keyData.length / 2 | 0);
            const encKey = keyData.subarray(keyData.length / 2 | 0);
            let mac;
            switch (alg) {
                case "AES-SIV":
                    mac = yield cmac_1.CMAC.importKey(provider, macKey);
                    break;
                case "AES-CMAC-SIV":
                    mac = yield cmac_1.CMAC.importKey(provider, macKey);
                    break;
                case "AES-PMAC-SIV":
                    mac = yield pmac_1.PMAC.importKey(provider, macKey);
                    break;
                default:
                    throw new exceptions_1.NotImplementedError(`Miscreant: algorithm not supported: ${alg}`);
            }
            const ctr = yield provider.importCTRKey(encKey);
            return new SIV(mac, ctr);
        });
    }
    constructor(mac, ctr) {
        this._mac = mac;
        this._ctr = ctr;
        this._tmp1 = new block_1.default();
        this._tmp2 = new block_1.default();
    }
    /** Encrypt and authenticate data using AES-SIV */
    seal(plaintext, associatedData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {
                throw new Error("AES-SIV: too many associated data items");
            }
            // Allocate space for sealed ciphertext.
            const resultLength = block_1.default.SIZE + plaintext.length;
            const result = new Uint8Array(resultLength);
            // Authenticate.
            const iv = yield this._s2v(associatedData, plaintext);
            result.set(iv);
            // Encrypt.
            zeroIVBits(iv);
            result.set(yield this._ctr.encryptCtr(iv, plaintext), iv.length);
            return result;
        });
    }
    /** Decrypt and authenticate data using AES-SIV */
    open(sealed, associatedData) {
        return __awaiter(this, void 0, void 0, function* () {
            if (associatedData.length > exports.MAX_ASSOCIATED_DATA) {
                throw new Error("AES-SIV: too many associated data items");
            }
            if (sealed.length < block_1.default.SIZE) {
                throw new exceptions_1.IntegrityError("AES-SIV: ciphertext is truncated");
            }
            // Decrypt.
            const tag = sealed.subarray(0, block_1.default.SIZE);
            const iv = this._tmp1.data;
            iv.set(tag);
            zeroIVBits(iv);
            // NOTE: "encryptCtr" is intentional. CTR encryption/decryption are the same
            const result = yield this._ctr.encryptCtr(iv, sealed.subarray(block_1.default.SIZE));
            // Authenticate.
            const expectedTag = yield this._s2v(associatedData, result);
            if (!constant_time_1.equal(expectedTag, tag)) {
                wipe_1.wipe(result);
                throw new exceptions_1.IntegrityError("AES-SIV: ciphertext verification failure!");
            }
            return result;
        });
    }
    /** Make a best effort to wipe memory used by this instance */
    clear() {
        this._tmp1.clear();
        this._tmp2.clear();
        this._ctr.clear();
        this._mac.clear();
        return this;
    }
    /**
     * The S2V operation consists of the doubling and XORing of the outputs
     * of the pseudo-random function CMAC (or PMAC in the case of AES-PMAC-SIV).
     *
     * See Section 2.4 of RFC 5297 for more information
     */
    _s2v(associated_data, plaintext) {
        return __awaiter(this, void 0, void 0, function* () {
            this._mac.reset();
            this._tmp1.clear();
            // Note: the standalone S2V returns CMAC(1) if the number of passed
            // vectors is zero, however in SIV construction this case is never
            // triggered, since we always pass plaintext as the last vector (even
            // if it's zero-length), so we omit this case.
            yield this._mac.update(this._tmp1.data);
            this._tmp2.clear();
            this._tmp2.data.set(yield this._mac.finish());
            this._mac.reset();
            for (const ad of associated_data) {
                yield this._mac.update(ad);
                this._tmp1.clear();
                this._tmp1.data.set(yield this._mac.finish());
                this._mac.reset();
                this._tmp2.dbl();
                xor_1.xor(this._tmp2.data, this._tmp1.data);
            }
            this._tmp1.clear();
            if (plaintext.length >= block_1.default.SIZE) {
                const n = plaintext.length - block_1.default.SIZE;
                this._tmp1.data.set(plaintext.subarray(n));
                yield this._mac.update(plaintext.subarray(0, n));
            }
            else {
                this._tmp1.data.set(plaintext);
                this._tmp1.data[plaintext.length] = 0x80;
                this._tmp2.dbl();
            }
            xor_1.xor(this._tmp1.data, this._tmp2.data);
            yield this._mac.update(this._tmp1.data);
            return this._mac.finish();
        });
    }
}
exports.SIV = SIV;
/** Zero out the top bits in the last 32-bit words of the IV */
function zeroIVBits(iv) {
    // "We zero-out the top bit in each of the last two 32-bit words
    // of the IV before assigning it to Ctr"
    //  — http://web.cs.ucdavis.edu/~rogaway/papers/siv.pdf
    iv[iv.length - 8] &= 0x7f;
    iv[iv.length - 4] &= 0x7f;
}


/***/ }),

/***/ "9589":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchResult = SearchResult;

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _eventContext = __webpack_require__("bb76");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/search-result
 */

/**
 * Construct a new SearchResult
 *
 * @param {number} rank   where this SearchResult ranks in the results
 * @param {event-context.EventContext} eventContext  the matching event and its
 *    context
 *
 * @constructor
 */


function SearchResult(rank, eventContext) {
  this.rank = rank;
  this.context = eventContext;
}
/**
 * Create a SearchResponse from the response to /search
 * @static
 * @param {Object} jsonObj
 * @param {function} eventMapper
 * @return {SearchResult}
 */


SearchResult.fromJson = function (jsonObj, eventMapper) {
  const jsonContext = jsonObj.context || {};
  const events_before = jsonContext.events_before || [];
  const events_after = jsonContext.events_after || [];
  const context = new _eventContext.EventContext(eventMapper(jsonObj.result));
  context.setPaginateToken(jsonContext.start, true);
  context.addEvents(utils.map(events_before, eventMapper), true);
  context.addEvents(utils.map(events_after, eventMapper), false);
  context.setPaginateToken(jsonContext.end, false);
  return new SearchResult(jsonObj.rank, context);
};

/***/ }),

/***/ "966d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (typeof process === 'undefined' ||
    !process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "96c4":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("40d6");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("7424724d", content, shadowRoot)
};

/***/ }),

/***/ "96ee":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addPublicChatName\":\"Add Public Chat Name\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"createPublicChat\":\"Create public chat\",\"chatTopic\":\"Topic renamed\",\"publicRoomTitle\":\"Public Room Preview\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"上传文件\",\"header\":\"头\",\"dragAndDropAFile\":\"拖放文件\",\"chatInvite\":\"你被邀请与之聊天：\",\"cantJoin\":\"您不能加入与以下人员的聊天：\",\"chatInviteDecline\":\"你可以加入聊天或拒绝邀请\",\"creatorLeft\":\"因为创建者离开了房间\",\"encrypted\":\"加密的\",\"noImages\":\"此聊天中还没有图片\",\"noFiles\":\"There are no files in this chat yet\",\"inviteUser\":\"邀请用户\",\"invite\":\"邀请\",\"add\":\"添加\",\"mute\":\"静音\",\"unmute\":\"取消静音\",\"leave\":\"离开\",\"Info\":\"信息\",\"new\":\"新\",\"tying\":\"打字\",\"accNotFound\":\"您的注册正在进行中，请等待...\",\"emptyList\":\"列表为空（已过滤或只是空）\",\"welcome\":\"欢迎来到Pocketnet聊天\",\"startNewChat\":\"开始一个新的聊天\",\"chats\":\"Chats\",\"shareWith\":\"与人分享\",\"newChat\":\"新聊天\",\"moveToChat\":\"移动到聊天\",\"queryNoResults\":\"查询报告没有结果\",\"needMoreCharacters\":\"需要更多的字符来获得结果\",\"createGroup\":\"创建群组\",\"unabletoDecrypt\":\"* 无法解密\",\"messageDeleted\":\"信息已删除\",\"sentImage\":\"已发送的图片\",\"sentVoiceMessage\":\"发了一条语音信息\",\"invitationToChat\":\"邀请聊天\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"离开聊天\",\"joined\":\"加入\",\"chatRenamed\":\"聊天记录重命名为\",\"recentComment\":\"最近的评论：\",\"share\":\"SHARE\",\"followers\":\"Followers:\",\"reputation\":\"声誉:\",\"following\":\"关注：\",\"theme\":\"主题:\",\"contacts\":\"联系人\",\"phoneContacts\":\"电话联系人\",\"chooseInviteMedia\":\"请选择你的邀请方式：\",\"admin\":\"管理员\",\"moderator\":\"版主\",\"videocall\":\"视频通话\",\"call\":\"呼叫\",\"leaveAndDelete\":\"离开和删除\",\"donate\":\"捐献\",\"makeModerator\":\"做版主\",\"ban\":\"禁止\",\"kick\":\"踢\",\"members\":\"会员\",\"media\":\"媒体\",\"files\":\"文件\",\"contactsList\":\"联系人列表\",\"send\":\"发送\",\"pageCaption\":\"页面标题\",\"caption\":\"标题\",\"text\":\"文本\",\"placeholder\":\"占位符\",\"sendTransactionTo\":\"发送交易到\",\"toBePaidByReceiver\":\"由收件人支付\",\"toBePaidBySender\":\"将由发送方支付\",\"source\":\"来源\",\"amount\":\"金额\",\"receiver\":\"收件人\",\"message\":\"消息\",\"includeFeesInAmount\":\"在金额中包括费用\",\"transactionFees\":\"交易费用\",\"totalAmount\":\"总金额\",\"balanceTooLow\":\"余额太低\",\"transactionError\":\"Error, can't make the transaction\",\"calculateFees\":\"计算费用\",\"startChatWith\":\"开始与之聊天\",\"searchResult\":\"搜索结果\",\"joinInTheChat\":\"加入到聊天中\",\"invested\":\"被邀请\",\"inTheChat\":\"在聊天中\",\"banned\":\"被禁止的\",\"andRoom\":\"和室\",\"left\":\"左边\",\"theChat\":\" 聊天\",\"made\":\"制造\",\"aModerator\":\"一个版主\",\"editedChatNameTo\":\"将聊天名称编辑为\",\"somebody\":\"某人\",\"sent\":\"已发送\",\"PKOINto\":\" PKOIN to \",\"response\":\"回应\",\"messagefrom\":\"轉發的消息來自\",\"edited\":\"已编辑\",\"settings\":\"设置\",\"unauthorized\":\"未经授权\",\"search\":\"搜索\",\"replyOnMessage\":\"在信息中回复\",\"editMessage\":\"编辑信息\",\"inviteFriend\":\"邀请朋友\",\"emptyContactList\":\"联系人列表是空的\",\"joinApp\":\"加入口袋网\",\"hasInvitedToJoin\":\"已邀请您加入口袋网\",\"contactsempty\":\"您还没有联系人，请在搜索中找到他们\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"电子邮件\",\"refillNamePlaceholder\":\"补货名称\"},\"message\":{},\"button\":{\"starChatButton\":\"开始聊天\",\"decline\":\"拒绝\",\"declineandignore\":\"忽略用户\",\"join\":\"加入\",\"ok\":\"好的\",\"copy\":\"复制\",\"forward\":\"转发\",\"delete\":\"删除\",\"reply\":\"回复\",\"save\":\"Save\",\"share\":\"分享\",\"download\":\"下载\",\"downloaded\":\"已下载\",\"goToPocketnetProfile\":\"转到Pocketnet配置文件\",\"sendFile\":\"发送文件\",\"takePhotoOrVideo\":\"发送图像\",\"sendCoins\":\"发送硬币\",\"edit\":\"编辑\",\"select\":\"選擇\",\"block\":\"阻止\",\"unblock\":\"解除封锁\",\"blockUser\":\"阻止用户\"},\"yes\":\"是的\",\"cancel\":\"取消\",\"teamMessages\":{\"1-title\":\"欢迎来到巴斯蒂昂私人聊天室!\",\"1-list1\":\"与你的手机号码无关的私人信使\",\"1-list2\":\"默认对每一次1对1对话进行端对端加密\",\"1-list3\":\"通过聊天发送或接收的所有图像都是加密存储的\",\"1-list4\":\"信息的历史记录只保存7天\",\"2-title\":\"一个巨大的公告! 口袋网的应用程序现在被称为Bastyon!\",\"2-message1\":\"该域名将被转移到Bastyon.com。我们最近发布了以下重大更新\",\"2-list1\":\"不与你的电话号码相连的私人加密信使\",\"2-list2\":\"能够将PKOIN捐赠给博主\",\"2-list3\":\"视频和实时流媒体\",\"2-message2\":\"现在就邀请你的朋友，成为去中心化的互联网大未来的一部分吧\",\"2-button\":\"邀请朋友\"},\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "9730":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeHtmlMessage = makeHtmlMessage;
exports.makeHtmlNotice = makeHtmlNotice;
exports.makeHtmlEmote = makeHtmlEmote;
exports.makeTextMessage = makeTextMessage;
exports.makeNotice = makeNotice;
exports.makeEmoteMessage = makeEmoteMessage;
/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** @module ContentHelpers */

/**
 * Generates the content for a HTML Message event
 * @param {string} body the plaintext body of the message
 * @param {string} htmlBody the HTML representation of the message
 * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}
 */

function makeHtmlMessage(body, htmlBody) {
  return {
    msgtype: "m.text",
    format: "org.matrix.custom.html",
    body: body,
    formatted_body: htmlBody
  };
}
/**
 * Generates the content for a HTML Notice event
 * @param {string} body the plaintext body of the notice
 * @param {string} htmlBody the HTML representation of the notice
 * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}
 */


function makeHtmlNotice(body, htmlBody) {
  return {
    msgtype: "m.notice",
    format: "org.matrix.custom.html",
    body: body,
    formatted_body: htmlBody
  };
}
/**
 * Generates the content for a HTML Emote event
 * @param {string} body the plaintext body of the emote
 * @param {string} htmlBody the HTML representation of the emote
 * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}
 */


function makeHtmlEmote(body, htmlBody) {
  return {
    msgtype: "m.emote",
    format: "org.matrix.custom.html",
    body: body,
    formatted_body: htmlBody
  };
}
/**
 * Generates the content for a Plaintext Message event
 * @param {string} body the plaintext body of the emote
 * @returns {{msgtype: string, body: string}}
 */


function makeTextMessage(body) {
  return {
    msgtype: "m.text",
    body: body
  };
}
/**
 * Generates the content for a Plaintext Notice event
 * @param {string} body the plaintext body of the notice
 * @returns {{msgtype: string, body: string}}
 */


function makeNotice(body) {
  return {
    msgtype: "m.notice",
    body: body
  };
}
/**
 * Generates the content for a Plaintext Emote event
 * @param {string} body the plaintext body of the emote
 * @returns {{msgtype: string, body: string}}
 */


function makeEmoteMessage(body) {
  return {
    msgtype: "m.emote",
    body: body
  };
}

/***/ }),

/***/ "9783":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("c181");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("02c034d6", content, shadowRoot)
};

/***/ }),

/***/ "9801":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_ba5ac396_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("883d");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_ba5ac396_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_ba5ac396_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_ba5ac396_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_ba5ac396_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "980b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

__webpack_require__("907a");

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixClient = MatrixClient;
exports.CRYPTO_ENABLED = void 0;

var _url = _interopRequireDefault(__webpack_require__("0b16"));

var _events = __webpack_require__("faa1");

var _baseApis = __webpack_require__("d0f2");

var _filter = __webpack_require__("c976");

var _sync = __webpack_require__("646c");

var _event = __webpack_require__("a120");

var _eventTimeline = __webpack_require__("e685");

var _searchResult = __webpack_require__("9589");

var _stub = __webpack_require__("a376");

var _call = __webpack_require__("3134");

var _callEventHandler = __webpack_require__("16e5");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _httpApi = __webpack_require__("1c8f");

var _contentRepo = __webpack_require__("07df");

var ContentHelpers = _interopRequireWildcard(__webpack_require__("9730")); //var olmlib = _interopRequireWildcard(require("./crypto/olmlib"));


var _ReEmitter = __webpack_require__("3da4");

var _RoomList = __webpack_require__("5f05");

var _logger = __webpack_require__("63c7"); //var _crypto = require("./crypto");
//var _recoverykey = require("./crypto/recoverykey");
//var _key_passphrase = require("./crypto/key_passphrase");


var _randomstring = __webpack_require__("f408");

var _pushprocessor = __webpack_require__("ef06");

var _user = __webpack_require__("87d6");

var _autodiscovery = __webpack_require__("3700"); //var _dehydration = require("./crypto/dehydration");

/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2018-2019 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. See {@link MatrixClient} for the public class.
 * @module client
 */


const SCROLLBACK_DELAY_MS = 3000;
const CRYPTO_ENABLED = false; //(0, _crypto.isCryptoAvailable)();

exports.CRYPTO_ENABLED = CRYPTO_ENABLED;
const CAPABILITIES_CACHE_MS = 21600000; // 6 hours - an arbitrary value

const TURN_CHECK_INTERVAL = 10 * 60 * 1000; // poll for turn credentials every 10 minutes

function keysFromRecoverySession(sessions, decryptionKey, roomId) {
  const keys = [];

  for (const [sessionId, sessionData] of Object.entries(sessions)) {
    try {
      const decrypted = keyFromRecoverySession(sessionData, decryptionKey);
      decrypted.session_id = sessionId;
      decrypted.room_id = roomId;
      keys.push(decrypted);
    } catch (e) {
      _logger.logger.log("Failed to decrypt megolm session from backup", e);
    }
  }

  return keys;
}

function keyFromRecoverySession(session, decryptionKey) {
  return JSON.parse(decryptionKey.decrypt(session.session_data.ephemeral, session.session_data.mac, session.session_data.ciphertext));
}
/**
 * Construct a Matrix Client. Only directly construct this if you want to use
 * custom modules. Normally, {@link createClient} should be used
 * as it specifies 'sensible' defaults for these modules.
 * @constructor
 * @extends {external:EventEmitter}
 * @extends {module:base-apis~MatrixBaseApis}
 *
 * @param {Object} opts The configuration options for this client.
 * @param {string} opts.baseUrl Required. The base URL to the client-server
 * HTTP API.
 * @param {string} opts.idBaseUrl Optional. The base identity server URL for
 * identity server requests.
 * @param {Function} opts.request Required. The function to invoke for HTTP
 * requests. The value of this property is typically <code>require("request")
 * </code> as it returns a function which meets the required interface. See
 * {@link requestFunction} for more information.
 *
 * @param {string} opts.accessToken The access_token for this user.
 *
 * @param {string} opts.userId The user ID for this user.
 *
 * @param {Object} opts.deviceToImport Device data exported with
 *     "exportDevice" method that must be imported to recreate this device.
 *     Should only be useful for devices with end-to-end crypto enabled.
 *     If provided, opts.deviceId and opts.userId should **NOT** be provided
 *     (they are present in the exported data).
 *
 * @param {string} opts.pickleKey Key used to pickle olm objects or other
 *     sensitive data.
 *
 * @param {IdentityServerProvider} [opts.identityServer]
 * Optional. A provider object with one function `getAccessToken`, which is a
 * callback that returns a Promise<String> of an identity access token to supply
 * with identity requests. If the object is unset, no access token will be
 * supplied.
 * See also https://github.com/vector-im/element-web/issues/10615 which seeks to
 * replace the previous approach of manual access tokens params with this
 * callback throughout the SDK.
 *
 * @param {Object=} opts.store
 *    The data store used for sync data from the homeserver. If not specified,
 *    this client will not store any HTTP responses. The `createClient` helper
 *    will create a default store if needed.
 *
 * @param {module:store/session/webstorage~WebStorageSessionStore} opts.sessionStore
 *    A store to be used for end-to-end crypto session data. Most data has been
 *    migrated out of here to `cryptoStore` instead. If not specified,
 *    end-to-end crypto will be disabled. The `createClient` helper
 *    _will not_ create this store at the moment.
 *
 * @param {module:crypto.store.base~CryptoStore} opts.cryptoStore
 *    A store to be used for end-to-end crypto session data. If not specified,
 *    end-to-end crypto will be disabled. The `createClient` helper will create
 *    a default store if needed.
 *
 * @param {string=} opts.deviceId A unique identifier for this device; used for
 *    tracking things like crypto keys and access tokens.  If not specified,
 *    end-to-end crypto will be disabled.
 *
 * @param {Object} opts.scheduler Optional. The scheduler to use. If not
 * specified, this client will not retry requests on failure. This client
 * will supply its own processing function to
 * {@link module:scheduler~MatrixScheduler#setProcessFunction}.
 *
 * @param {Object} opts.queryParams Optional. Extra query parameters to append
 * to all requests with this client. Useful for application services which require
 * <code>?user_id=</code>.
 *
 * @param {Number=} opts.localTimeoutMs Optional. The default maximum amount of
 * time to wait before timing out HTTP requests. If not specified, there is no timeout.
 *
 * @param {boolean} [opts.useAuthorizationHeader = false] Set to true to use
 * Authorization header instead of query param to send the access token to the server.
 *
 * @param {boolean} [opts.timelineSupport = false] Set to true to enable
 * improved timeline support ({@link
 * module:client~MatrixClient#getEventTimeline getEventTimeline}). It is
 * disabled by default for compatibility with older clients - in particular to
 * maintain support for back-paginating the live timeline after a '/sync'
 * result with a gap.
 *
 * @param {boolean} [opts.unstableClientRelationAggregation = false]
 * Optional. Set to true to enable client-side aggregation of event relations
 * via `EventTimelineSet#getRelationsForEvent`.
 * This feature is currently unstable and the API may change without notice.
 *
 * @param {Array} [opts.verificationMethods] Optional. The verification method
 * that the application can handle.  Each element should be an item from {@link
 * module:crypto~verificationMethods verificationMethods}, or a class that
 * implements the {$link module:crypto/verification/Base verifier interface}.
 *
 * @param {boolean} [opts.forceTURN]
 * Optional. Whether relaying calls through a TURN server should be forced.
 *
 * * @param {boolean} [opts.iceCandidatePoolSize]
 * Optional. Up to this many ICE candidates will be gathered when an incoming call arrives.
 * Gathering does not send data to the caller, but will communicate with the configured TURN
 * server. Default 0.
 *
 * @param {boolean} [opts.supportsCallTransfer]
 * Optional. True to advertise support for call transfers to other parties on Matrix calls.
 *
 * @param {boolean} [opts.fallbackICEServerAllowed]
 * Optional. Whether to allow a fallback ICE server should be used for negotiating a
 * WebRTC connection if the homeserver doesn't provide any servers. Defaults to false.
 *
 * @param {boolean} [opts.usingExternalCrypto]
 * Optional. Whether to allow sending messages to encrypted rooms when encryption
 * is not available internally within this SDK. This is useful if you are using an external
 * E2E proxy, for example. Defaults to false.
 *
 * @param {object} opts.cryptoCallbacks Optional. Callbacks for crypto and cross-signing.
 *     The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @param {function} [opts.cryptoCallbacks.getCrossSigningKey]
 * Optional. Function to call when a cross-signing private key is needed.
 * Secure Secret Storage will be used by default if this is unset.
 * Args:
 *    {string} type The type of key needed.  Will be one of "master",
 *      "self_signing", or "user_signing"
 *    {Uint8Array} publicKey The public key matching the expected private key.
 *        This can be passed to checkPrivateKey() along with the private key
 *        in order to check that a given private key matches what is being
 *        requested.
 *   Should return a promise that resolves with the private key as a
 *   UInt8Array or rejects with an error.
 *
 * @param {function} [opts.cryptoCallbacks.saveCrossSigningKeys]
 * Optional. Called when new private keys for cross-signing need to be saved.
 * Secure Secret Storage will be used by default if this is unset.
 * Args:
 *   {object} keys the private keys to save. Map of key name to private key
 *       as a UInt8Array. The getPrivateKey callback above will be called
 *       with the corresponding key name when the keys are required again.
 *
 * @param {function} [opts.cryptoCallbacks.shouldUpgradeDeviceVerifications]
 * Optional. Called when there are device-to-device verifications that can be
 * upgraded into cross-signing verifications.
 * Args:
 *   {object} users The users whose device verifications can be
 *     upgraded to cross-signing verifications.  This will be a map of user IDs
 *     to objects with the properties `devices` (array of the user's devices
 *     that verified their cross-signing key), and `crossSigningInfo` (the
 *     user's cross-signing information)
 * Should return a promise which resolves with an array of the user IDs who
 * should be cross-signed.
 *
 * @param {function} [opts.cryptoCallbacks.getSecretStorageKey]
 * Optional. Function called when an encryption key for secret storage
 *     is required. One or more keys will be described in the keys object.
 *     The callback function should return a promise with an array of:
 *     [<key name>, <UInt8Array private key>] or null if it cannot provide
 *     any of the keys.
 * Args:
 *   {object} keys Information about the keys:
 *       {
 *           keys: {
 *               <key name>: {
 *                   "algorithm": "m.secret_storage.v1.aes-hmac-sha2",
 *                   "passphrase": {
 *                       "algorithm": "m.pbkdf2",
 *                       "iterations": 500000,
 *                       "salt": "..."
 *                   },
 *                   "iv": "...",
 *                   "mac": "..."
 *               }, ...
 *           }
 *       }
 *   {string} name the name of the value we want to read out of SSSS, for UI purposes.
 *
 * @param {function} [opts.cryptoCallbacks.cacheSecretStorageKey]
 * Optional. Function called when a new encryption key for secret storage
 * has been created. This allows the application a chance to cache this key if
 * desired to avoid user prompts.
 * Args:
 *   {string} keyId the ID of the new key
 *   {object} keyInfo Infomation about the key as above for `getSecretStorageKey`
 *   {Uint8Array} key the new private key
 *
 * @param {function} [opts.cryptoCallbacks.onSecretRequested]
 * Optional. Function called when a request for a secret is received from another
 * device.
 * Args:
 *   {string} name The name of the secret being requested.
 *   {string} userId The user ID of the client requesting
 *   {string} deviceId The device ID of the client requesting the secret.
 *   {string} requestId The ID of the request. Used to match a
 *     corresponding `crypto.secrets.request_cancelled`. The request ID will be
 *     unique per sender, device pair.
 *   {DeviceTrustLevel} deviceTrust: The trust status of the device requesting
 *     the secret as returned by {@link module:client~MatrixClient#checkDeviceTrust}.
 */


function MatrixClient(opts) {
  opts.baseUrl = utils.ensureNoTrailingSlash(opts.baseUrl);
  opts.idBaseUrl = utils.ensureNoTrailingSlash(opts.idBaseUrl);

  _baseApis.MatrixBaseApis.call(this, opts);

  this.olmVersion = null; // Populated after initCrypto is done

  this.reEmitter = new _ReEmitter.ReEmitter(this);
  this.usingExternalCrypto = opts.usingExternalCrypto;
  this.store = opts.store || new _stub.StubStore();
  this.deviceId = opts.deviceId || null;
  const userId = opts.userId || null;
  this.credentials = {
    userId: userId
  };

  if (opts.deviceToImport) {
    if (this.deviceId) {
      _logger.logger.warn('not importing device because' + ' device ID is provided to constructor' + ' independently of exported data');
    } else if (this.credentials.userId) {
      _logger.logger.warn('not importing device because' + ' user ID is provided to constructor' + ' independently of exported data');
    } else if (!opts.deviceToImport.deviceId) {
      _logger.logger.warn('not importing device because no device ID in exported data');
    } else {
      this.deviceId = opts.deviceToImport.deviceId;
      this.credentials.userId = opts.deviceToImport.userId; // will be used during async initialization of the crypto

      this._exportedOlmDeviceToImport = opts.deviceToImport.olmDevice;
    }
  } else if (opts.pickleKey) {
    this.pickleKey = opts.pickleKey;
  }

  this.scheduler = opts.scheduler;

  if (this.scheduler) {
    const self = this;
    this.scheduler.setProcessFunction( /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (eventToSend) {
        const room = self.getRoom(eventToSend.getRoomId());

        if (eventToSend.status !== _event.EventStatus.SENDING) {
          _updatePendingEventStatus(room, eventToSend, _event.EventStatus.SENDING);
        }

        const res = yield _sendEventHttpRequest(self, eventToSend);

        if (room) {
          // ensure we update pending event before the next scheduler run so that any listeners to event id
          // updates on the synchronous event emitter get a chance to run first.
          room.updatePendingEvent(eventToSend, _event.EventStatus.SENT, res.event_id);
        }

        return res;
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
  }

  this.clientRunning = false; // try constructing a MatrixCall to see if we are running in an environment
  // which has WebRTC. If we are, listen for and handle m.call.* events.

  const call = (0, _call.createNewMatrixCall)(this);
  this._supportsVoip = false;

  if (call) {
    this._callEventHandler = new _callEventHandler.CallEventHandler(this);
    this._supportsVoip = true;
  } else {
    this._callEventHandler = null;
  }

  this._syncingRetry = null;
  this._syncApi = null;
  this._peekSync = null;
  this._isGuest = false;
  this._ongoingScrollbacks = {};
  this.timelineSupport = Boolean(opts.timelineSupport);
  this.urlPreviewCache = {}; // key=preview key, value=Promise for preview (may be an error)

  this._notifTimelineSet = null;
  this.unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation;
  this._crypto = null;
  this._cryptoStore = opts.cryptoStore;
  this._sessionStore = opts.sessionStore;
  this._verificationMethods = opts.verificationMethods;
  this._cryptoCallbacks = opts.cryptoCallbacks || {};
  this._forceTURN = opts.forceTURN || false;
  this._iceCandidatePoolSize = opts.iceCandidatePoolSize === undefined ? 0 : opts.iceCandidatePoolSize;
  this._supportsCallTransfer = opts.supportsCallTransfer || false;
  this._fallbackICEServerAllowed = opts.fallbackICEServerAllowed || false; // List of which rooms have encryption enabled: separate from crypto because
  // we still want to know which rooms are encrypted even if crypto is disabled:
  // we don't want to start sending unencrypted events to them.
  //this._roomList = new _RoomList.RoomList(this._cryptoStore); // The pushprocessor caches useful things, so keep one and re-use it

  this._pushProcessor = new _pushprocessor.PushProcessor(this); // Promise to a response of the server's /versions response
  // TODO: This should expire: https://github.com/matrix-org/matrix-js-sdk/issues/1020

  this._serverVersionsPromise = null;
  this._cachedCapabilities = null; // { capabilities: {}, lastUpdated: timestamp }

  this._clientWellKnown = undefined;
  this._clientWellKnownPromise = undefined;
  this._turnServers = [];
  this._turnServersExpiry = 0;
  this._checkTurnServersIntervalID = null; // The SDK doesn't really provide a clean way for events to recalculate the push
  // actions for themselves, so we have to kinda help them out when they are encrypted.
  // We do this so that push rules are correctly executed on events in their decrypted
  // state, such as highlights when the user's name is mentioned.

  this.on("Event.decrypted", event => {
    const oldActions = event.getPushActions();

    const actions = this._pushProcessor.actionsForEvent(event);

    event.setPushActions(actions); // Might as well while we're here

    const room = this.getRoom(event.getRoomId());
    if (!room) return;
    const currentCount = room.getUnreadNotificationCount("highlight"); // Ensure the unread counts are kept up to date if the event is encrypted
    // We also want to make sure that the notification count goes up if we already
    // have encrypted events to avoid other code from resetting 'highlight' to zero.

    const oldHighlight = oldActions && oldActions.tweaks ? !!oldActions.tweaks.highlight : false;
    const newHighlight = actions && actions.tweaks ? !!actions.tweaks.highlight : false;

    if (oldHighlight !== newHighlight || currentCount > 0) {
      // TODO: Handle mentions received while the client is offline
      // See also https://github.com/vector-im/element-web/issues/9069
      if (!room.hasUserReadEvent(this.getUserId(), event.getId())) {
        let newCount = currentCount;
        if (newHighlight && !oldHighlight) newCount++;
        if (!newHighlight && oldHighlight) newCount--;
        room.setUnreadNotificationCount("highlight", newCount); // Fix 'Mentions Only' rooms from not having the right badge count

        const totalCount = room.getUnreadNotificationCount('total');

        if (totalCount < newCount) {
          room.setUnreadNotificationCount('total', newCount);
        }
      }
    }
  }); // Like above, we have to listen for read receipts from ourselves in order to
  // correctly handle notification counts on encrypted rooms.
  // This fixes https://github.com/vector-im/element-web/issues/9421

  this.on("Room.receipt", (event, room) => {
    if (room && this.isRoomEncrypted(room.roomId)) {
      // Figure out if we've read something or if it's just informational
      const content = event.getContent();
      const isSelf = Object.keys(content).filter(eid => {
        return Object.keys(content[eid]['m.read']).includes(this.getUserId());
      }).length > 0;
      if (!isSelf) return; // Work backwards to determine how many events are unread. We also set
      // a limit for how back we'll look to avoid spinning CPU for too long.
      // If we hit the limit, we assume the count is unchanged.

      const maxHistory = 20;
      const events = room.getLiveTimeline().getEvents();
      let highlightCount = 0;

      for (let i = events.length - 1; i >= 0; i--) {
        if (i === events.length - maxHistory) return; // limit reached

        const event = events[i];

        if (room.hasUserReadEvent(this.getUserId(), event.getId())) {
          // If the user has read the event, then the counting is done.
          break;
        }

        const pushActions = this.getPushActionsForEvent(event);
        highlightCount += pushActions.tweaks && pushActions.tweaks.highlight ? 1 : 0;
      } // Note: we don't need to handle 'total' notifications because the counts
      // will come from the server.


      room.setUnreadNotificationCount("highlight", highlightCount);
    }
  });
}

utils.inherits(MatrixClient, _events.EventEmitter);
utils.extend(MatrixClient.prototype, _baseApis.MatrixBaseApis.prototype);
/**
 * Try to rehydrate a device if available.  The client must have been
 * initialized with a `cryptoCallback.getDehydrationKey` option, and this
 * function must be called before initCrypto and startClient are called.
 *
 * @return {Promise} Resolves to undefined if a device could not be dehydrated, or
 *     to the new device ID if the dehydration was successful.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */

MatrixClient.prototype.rehydrateDevice = /*#__PURE__*/_asyncToGenerator(function* () {
  if (this._crypto) {
    throw new Error("Cannot rehydrate device after crypto is initialized");
  }

  if (!this._cryptoCallbacks.getDehydrationKey) {
    return;
  }

  const getDeviceResult = yield this.getDehydratedDevice();

  if (!getDeviceResult) {
    return;
  }

  if (!getDeviceResult.device_data || !getDeviceResult.device_id) {
    _logger.logger.info("no dehydrated device found");

    return;
  }

  const account = new global.Olm.Account();

  try {
    const deviceData = getDeviceResult.device_data;

    if (deviceData.algorithm !== _dehydration.DEHYDRATION_ALGORITHM) {
      _logger.logger.warn("Wrong algorithm for dehydrated device");

      return;
    }

    _logger.logger.log("unpickling dehydrated device");

    const key = yield this._cryptoCallbacks.getDehydrationKey(deviceData, k => {
      // copy the key so that it doesn't get clobbered
      account.unpickle(new Uint8Array(k), deviceData.account);
    });
    account.unpickle(key, deviceData.account);

    _logger.logger.log("unpickled device");

    const rehydrateResult = yield this._http.authedRequest(undefined, "POST", "/dehydrated_device/claim", undefined, {
      device_id: getDeviceResult.device_id
    }, {
      prefix: "/_matrix/client/unstable/org.matrix.msc2697.v2"
    });

    if (rehydrateResult.success === true) {
      this.deviceId = getDeviceResult.device_id;

      _logger.logger.info("using dehydrated device");

      const pickleKey = this.pickleKey || "DEFAULT_KEY";
      this._exportedOlmDeviceToImport = {
        pickledAccount: account.pickle(pickleKey),
        sessions: [],
        pickleKey: pickleKey
      };
      account.free();
      return this.deviceId;
    } else {
      account.free();

      _logger.logger.info("not using dehydrated device");

      return;
    }
  } catch (e) {
    account.free();

    _logger.logger.warn("could not unpickle", e);
  }
});
/**
 * Get the current dehydrated device, if any
 * @return {Promise} A promise of an object containing the dehydrated device
 */

MatrixClient.prototype.getDehydratedDevice = /*#__PURE__*/_asyncToGenerator(function* () {
  try {
    return yield this._http.authedRequest(undefined, "GET", "/dehydrated_device", undefined, undefined, {
      prefix: "/_matrix/client/unstable/org.matrix.msc2697.v2"
    });
  } catch (e) {
    _logger.logger.info("could not get dehydrated device", e.toString());

    return;
  }
});
/**
 * Set the dehydration key.  This will also periodically dehydrate devices to
 * the server.
 *
 * @param {Uint8Array} key the dehydration key
 * @param {object} [keyInfo] Information about the key.  Primarily for
 *     information about how to generate the key from a passphrase.
 * @param {string} [deviceDisplayName] The device display name for the
 *     dehydrated device.
 * @return {Promise} A promise that resolves when the dehydrated device is stored.
 */

MatrixClient.prototype.setDehydrationKey = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* (key) {
    let keyInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let deviceDisplayName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    if (!this._crypto) {
      _logger.logger.warn('not dehydrating device if crypto is not enabled');

      return;
    }

    return yield this._crypto._dehydrationManager.setKeyAndQueueDehydration(key, keyInfo, deviceDisplayName);
  });

  return function (_x2) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Creates a new dehydrated device (without queuing periodic dehydration)
 * @param {Uint8Array} key the dehydration key
 * @param {object} [keyInfo] Information about the key.  Primarily for
 *     information about how to generate the key from a passphrase.
 * @param {string} [deviceDisplayName] The device display name for the
 *     dehydrated device.
 * @return {Promise<String>} the device id of the newly created dehydrated device
 */


MatrixClient.prototype.createDehydratedDevice = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* (key) {
    let keyInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let deviceDisplayName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    if (!this._crypto) {
      _logger.logger.warn('not dehydrating device if crypto is not enabled');

      return;
    }

    yield this._crypto._dehydrationManager.setKey(key, keyInfo, deviceDisplayName);
    return yield this._crypto._dehydrationManager.dehydrateDevice();
  });

  return function (_x3) {
    return _ref5.apply(this, arguments);
  };
}();

MatrixClient.prototype.exportDevice = /*#__PURE__*/_asyncToGenerator(function* () {
  if (!this._crypto) {
    _logger.logger.warn('not exporting device if crypto is not enabled');

    return;
  }

  return {
    userId: this.credentials.userId,
    deviceId: this.deviceId,
    olmDevice: yield this._crypto._olmDevice.export()
  };
});
/**
 * Clear any data out of the persistent stores used by the client.
 *
 * @returns {Promise} Promise which resolves when the stores have been cleared.
 */

MatrixClient.prototype.clearStores = function () {
  if (this._clientRunning) {
    throw new Error("Cannot clear stores while client is running");
  }

  const promises = [];
  promises.push(this.store.deleteAllData());

  if (this._cryptoStore) {
    promises.push(this._cryptoStore.deleteAllData());
  }

  return Promise.all(promises);
};
/**
 * Get the user-id of the logged-in user
 *
 * @return {?string} MXID for the logged-in user, or null if not logged in
 */


MatrixClient.prototype.getUserId = function () {
  if (this.credentials && this.credentials.userId) {
    return this.credentials.userId;
  }

  return null;
};
/**
 * Get the domain for this client's MXID
 * @return {?string} Domain of this MXID
 */


MatrixClient.prototype.getDomain = function () {
  if (this.credentials && this.credentials.userId) {
    return this.credentials.userId.replace(/^.*?:/, '');
  }

  return null;
};
/**
 * Get the local part of the current user ID e.g. "foo" in "@foo:bar".
 * @return {?string} The user ID localpart or null.
 */


MatrixClient.prototype.getUserIdLocalpart = function () {
  if (this.credentials && this.credentials.userId) {
    return this.credentials.userId.split(":")[0].substring(1);
  }

  return null;
};
/**
 * Get the device ID of this client
 * @return {?string} device ID
 */


MatrixClient.prototype.getDeviceId = function () {
  return this.deviceId;
};
/**
 * Check if the runtime environment supports VoIP calling.
 * @return {boolean} True if VoIP is supported.
 */


MatrixClient.prototype.supportsVoip = function () {
  return this._supportsVoip;
};
/**
 * Set whether VoIP calls are forced to use only TURN
 * candidates. This is the same as the forceTURN option
 * when creating the client.
 * @param {bool} forceTURN True to force use of TURN servers
 */


MatrixClient.prototype.setForceTURN = function (forceTURN) {
  this._forceTURN = forceTURN;
};
/**
 * Set whether to advertise transfer support to other parties on Matrix calls.
 * @param {bool} supportsCallTransfer True to advertise the 'm.call.transferee' capability
 */


MatrixClient.prototype.setSupportsCallTransfer = function (supportsCallTransfer) {
  this._supportsCallTransfer = supportsCallTransfer;
};
/**
 * Get the current sync state.
 * @return {?string} the sync state, which may be null.
 * @see module:client~MatrixClient#event:"sync"
 */


MatrixClient.prototype.getSyncState = function () {
  if (!this._syncApi) {
    return null;
  }

  return this._syncApi.getSyncState();
};
/**
 * Returns the additional data object associated with
 * the current sync state, or null if there is no
 * such data.
 * Sync errors, if available, are put in the 'error' key of
 * this object.
 * @return {?Object}
 */


MatrixClient.prototype.getSyncStateData = function () {
  if (!this._syncApi) {
    return null;
  }

  return this._syncApi.getSyncStateData();
};
/**
 * Whether the initial sync has completed.
 * @return {boolean} True if at least on sync has happened.
 */


MatrixClient.prototype.isInitialSyncComplete = function () {
  const state = this.getSyncState();

  if (!state) {
    return false;
  }

  return state === "PREPARED" || state === "SYNCING";
};
/**
 * Return whether the client is configured for a guest account.
 * @return {boolean} True if this is a guest access_token (or no token is supplied).
 */


MatrixClient.prototype.isGuest = function () {
  return this._isGuest;
};
/**
 * Return the provided scheduler, if any.
 * @return {?module:scheduler~MatrixScheduler} The scheduler or null
 */


MatrixClient.prototype.getScheduler = function () {
  return this.scheduler;
};
/**
 * Set whether this client is a guest account. <b>This method is experimental
 * and may change without warning.</b>
 * @param {boolean} isGuest True if this is a guest account.
 */


MatrixClient.prototype.setGuest = function (isGuest) {
  // EXPERIMENTAL:
  // If the token is a macaroon, it should be encoded in it that it is a 'guest'
  // access token, which means that the SDK can determine this entirely without
  // the dev manually flipping this flag.
  this._isGuest = isGuest;
};
/**
 * Retry a backed off syncing request immediately. This should only be used when
 * the user <b>explicitly</b> attempts to retry their lost connection.
 * @return {boolean} True if this resulted in a request being retried.
 */


MatrixClient.prototype.retryImmediately = function () {
  return this._syncApi.retryImmediately();
};
/**
 * Return the global notification EventTimelineSet, if any
 *
 * @return {EventTimelineSet} the globl notification EventTimelineSet
 */


MatrixClient.prototype.getNotifTimelineSet = function () {
  return this._notifTimelineSet;
};
/**
 * Set the global notification EventTimelineSet
 *
 * @param {EventTimelineSet} notifTimelineSet
 */


MatrixClient.prototype.setNotifTimelineSet = function (notifTimelineSet) {
  this._notifTimelineSet = notifTimelineSet;
};
/**
 * Gets the capabilities of the homeserver. Always returns an object of
 * capability keys and their options, which may be empty.
 * @param {boolean} fresh True to ignore any cached values.
 * @return {Promise} Resolves to the capabilities of the homeserver
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getCapabilities = function () {
  let fresh = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  const now = new Date().getTime();

  if (this._cachedCapabilities && !fresh) {
    if (now < this._cachedCapabilities.expiration) {
      _logger.logger.log("Returning cached capabilities");

      return Promise.resolve(this._cachedCapabilities.capabilities);
    }
  } // We swallow errors because we need a default object anyhow


  return this._http.authedRequest(undefined, "GET", "/capabilities").catch(e => {
    _logger.logger.error(e);

    return null; // otherwise consume the error
  }).then(r => {
    if (!r) r = {};
    const capabilities = r["capabilities"] || {}; // If the capabilities missed the cache, cache it for a shorter amount
    // of time to try and refresh them later.

    const cacheMs = Object.keys(capabilities).length ? CAPABILITIES_CACHE_MS : 60000 + Math.random() * 5000;
    this._cachedCapabilities = {
      capabilities: capabilities,
      expiration: now + cacheMs
    };

    _logger.logger.log("Caching capabilities: ", capabilities);

    return capabilities;
  });
}; // Crypto bits
// ===========

/**
 * Initialise support for end-to-end encryption in this client
 *
 * You should call this method after creating the matrixclient, but *before*
 * calling `startClient`, if you want to support end-to-end encryption.
 *
 * It will return a Promise which will resolve when the crypto layer has been
 * successfully initialised.
 */


MatrixClient.prototype.initCrypto = /*#__PURE__*/_asyncToGenerator(function* () {
  if (!(0, _crypto.isCryptoAvailable)()) {
    throw new Error(`End-to-end encryption not supported in this js-sdk build: did ` + `you remember to load the olm library?`);
  }

  if (this._crypto) {
    _logger.logger.warn("Attempt to re-initialise e2e encryption on MatrixClient");

    return;
  }

  if (!this._sessionStore) {
    // this is temporary, the sessionstore is supposed to be going away
    throw new Error(`Cannot enable encryption: no sessionStore provided`);
  }

  if (!this._cryptoStore) {
    // the cryptostore is provided by sdk.createClient, so this shouldn't happen
    throw new Error(`Cannot enable encryption: no cryptoStore provided`);
  }

  _logger.logger.log("Crypto: Starting up crypto store...");

  yield this._cryptoStore.startup(); // initialise the list of encrypted rooms (whether or not crypto is enabled)

  _logger.logger.log("Crypto: initialising roomlist...");

  yield this._roomList.init();
  const userId = this.getUserId();

  if (userId === null) {
    throw new Error(`Cannot enable encryption on MatrixClient with unknown userId: ` + `ensure userId is passed in createClient().`);
  }

  if (this.deviceId === null) {
    throw new Error(`Cannot enable encryption on MatrixClient with unknown deviceId: ` + `ensure deviceId is passed in createClient().`);
  }

  const crypto = new _crypto.Crypto(this, this._sessionStore, userId, this.deviceId, this.store, this._cryptoStore, this._roomList, this._verificationMethods);
  this.reEmitter.reEmit(crypto, ["crypto.keyBackupFailed", "crypto.keyBackupSessionsRemaining", "crypto.roomKeyRequest", "crypto.roomKeyRequestCancellation", "crypto.warning", "crypto.devicesUpdated", "crypto.willUpdateDevices", "deviceVerificationChanged", "userTrustStatusChanged", "crossSigning.keysChanged"]);

  _logger.logger.log("Crypto: initialising crypto object...");

  yield crypto.init({
    exportedOlmDevice: this._exportedOlmDeviceToImport,
    pickleKey: this.pickleKey
  });
  delete this._exportedOlmDeviceToImport;
  this.olmVersion = _crypto.Crypto.getOlmVersion(); // if crypto initialisation was successful, tell it to attach its event
  // handlers.

  crypto.registerEventHandlers(this);
  this._crypto = crypto;
});
/**
 * Is end-to-end crypto enabled for this client.
 * @return {boolean} True if end-to-end is enabled.
 */

MatrixClient.prototype.isCryptoEnabled = function () {
  return this._crypto !== null;
};
/**
 * Get the Ed25519 key for this device
 *
 * @return {?string} base64-encoded ed25519 key. Null if crypto is
 *    disabled.
 */


MatrixClient.prototype.getDeviceEd25519Key = function () {
  if (!this._crypto) {
    return null;
  }

  return this._crypto.getDeviceEd25519Key();
};
/**
 * Get the Curve25519 key for this device
 *
 * @return {?string} base64-encoded curve25519 key. Null if crypto is
 *    disabled.
 */


MatrixClient.prototype.getDeviceCurve25519Key = function () {
  if (!this._crypto) {
    return null;
  }

  return this._crypto.getDeviceCurve25519Key();
};
/**
 * Upload the device keys to the homeserver.
 * @return {object} A promise that will resolve when the keys are uploaded.
 */


MatrixClient.prototype.uploadKeys = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.uploadDeviceKeys();
};
/**
 * Download the keys for a list of users and stores the keys in the session
 * store.
 * @param {Array} userIds The users to fetch.
 * @param {bool} forceDownload Always download the keys even if cached.
 *
 * @return {Promise} A promise which resolves to a map userId->deviceId->{@link
 * module:crypto~DeviceInfo|DeviceInfo}.
 */


MatrixClient.prototype.downloadKeys = function (userIds, forceDownload) {
  if (this._crypto === null) {
    return Promise.reject(new Error("End-to-end encryption disabled"));
  }

  return this._crypto.downloadKeys(userIds, forceDownload);
};
/**
 * Get the stored device keys for a user id
 *
 * @param {string} userId the user to list keys for.
 *
 * @return {module:crypto/deviceinfo[]} list of devices
 */


MatrixClient.prototype.getStoredDevicesForUser = function (userId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.getStoredDevicesForUser(userId) || [];
};
/**
 * Get the stored device key for a user id and device id
 *
 * @param {string} userId the user to list keys for.
 * @param {string} deviceId unique identifier for the device
 *
 * @return {module:crypto/deviceinfo} device or null
 */


MatrixClient.prototype.getStoredDevice = function (userId, deviceId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.getStoredDevice(userId, deviceId) || null;
};
/**
 * Mark the given device as verified
 *
 * @param {string} userId owner of the device
 * @param {string} deviceId unique identifier for the device or user's
 * cross-signing public key ID.
 *
 * @param {boolean=} verified whether to mark the device as verified. defaults
 *   to 'true'.
 *
 * @returns {Promise}
 *
 * @fires module:client~event:MatrixClient"deviceVerificationChanged"
 */


MatrixClient.prototype.setDeviceVerified = function (userId, deviceId, verified) {
  if (verified === undefined) {
    verified = true;
  }

  const prom = _setDeviceVerification(this, userId, deviceId, verified, null); // if one of the user's own devices is being marked as verified / unverified,
  // check the key backup status, since whether or not we use this depends on
  // whether it has a signature from a verified device


  if (userId == this.credentials.userId) {
    this._crypto.checkKeyBackup();
  }

  return prom;
};
/**
 * Mark the given device as blocked/unblocked
 *
 * @param {string} userId owner of the device
 * @param {string} deviceId unique identifier for the device or user's
 * cross-signing public key ID.
 *
 * @param {boolean=} blocked whether to mark the device as blocked. defaults
 *   to 'true'.
 *
 * @returns {Promise}
 *
 * @fires module:client~event:MatrixClient"deviceVerificationChanged"
 */


MatrixClient.prototype.setDeviceBlocked = function (userId, deviceId, blocked) {
  if (blocked === undefined) {
    blocked = true;
  }

  return _setDeviceVerification(this, userId, deviceId, null, blocked);
};
/**
 * Mark the given device as known/unknown
 *
 * @param {string} userId owner of the device
 * @param {string} deviceId unique identifier for the device or user's
 * cross-signing public key ID.
 *
 * @param {boolean=} known whether to mark the device as known. defaults
 *   to 'true'.
 *
 * @returns {Promise}
 *
 * @fires module:client~event:MatrixClient"deviceVerificationChanged"
 */


MatrixClient.prototype.setDeviceKnown = function (userId, deviceId, known) {
  if (known === undefined) {
    known = true;
  }

  return _setDeviceVerification(this, userId, deviceId, null, null, known);
};

function _setDeviceVerification(_x4, _x5, _x6, _x7, _x8, _x9) {
  return _setDeviceVerification2.apply(this, arguments);
}
/**
 * Request a key verification from another user, using a DM.
 *
 * @param {string} userId the user to request verification with
 * @param {string} roomId the room to use for verification
 *
 * @returns {Promise<module:crypto/verification/request/VerificationRequest>} resolves to a VerificationRequest
 *    when the request has been sent to the other party.
 */


function _setDeviceVerification2() {
  _setDeviceVerification2 = _asyncToGenerator(function* (client, userId, deviceId, verified, blocked, known) {
    if (!client._crypto) {
      throw new Error("End-to-End encryption disabled");
    }

    yield client._crypto.setDeviceVerification(userId, deviceId, verified, blocked, known);
  });
  return _setDeviceVerification2.apply(this, arguments);
}

MatrixClient.prototype.requestVerificationDM = function (userId, roomId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.requestVerificationDM(userId, roomId);
};
/**
 * Finds a DM verification request that is already in progress for the given room id
 *
 * @param {string} roomId the room to use for verification
 *
 * @returns {module:crypto/verification/request/VerificationRequest?} the VerificationRequest that is in progress, if any
 */


MatrixClient.prototype.findVerificationRequestDMInProgress = function (roomId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.findVerificationRequestDMInProgress(roomId);
};
/**
 * Returns all to-device verification requests that are already in progress for the given user id
 *
 * @param {string} userId the ID of the user to query
 *
 * @returns {module:crypto/verification/request/VerificationRequest[]} the VerificationRequests that are in progress
 */


MatrixClient.prototype.getVerificationRequestsToDeviceInProgress = function (userId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.getVerificationRequestsToDeviceInProgress(userId);
};
/**
 * Request a key verification from another user.
 *
 * @param {string} userId the user to request verification with
 * @param {Array} devices array of device IDs to send requests to.  Defaults to
 *    all devices owned by the user
 *
 * @returns {Promise<module:crypto/verification/request/VerificationRequest>} resolves to a VerificationRequest
 *    when the request has been sent to the other party.
 */


MatrixClient.prototype.requestVerification = function (userId, devices) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.requestVerification(userId, devices);
};
/**
 * Begin a key verification.
 *
 * @param {string} method the verification method to use
 * @param {string} userId the user to verify keys with
 * @param {string} deviceId the device to verify
 *
 * @returns {module:crypto/verification/Base} a verification object
 */


MatrixClient.prototype.beginKeyVerification = function (method, userId, deviceId) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.beginKeyVerification(method, userId, deviceId);
};
/**
 * Set the global override for whether the client should ever send encrypted
 * messages to unverified devices.  This provides the default for rooms which
 * do not specify a value.
 *
 * @param {boolean} value whether to blacklist all unverified devices by default
 */


MatrixClient.prototype.setGlobalBlacklistUnverifiedDevices = function (value) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  this._crypto.setGlobalBlacklistUnverifiedDevices(value);
};
/**
 * @return {boolean} whether to blacklist all unverified devices by default
 */


MatrixClient.prototype.getGlobalBlacklistUnverifiedDevices = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.getGlobalBlacklistUnverifiedDevices();
};
/**
 * Set whether sendMessage in a room with unknown and unverified devices
 * should throw an error and not send them message. This has 'Global' for
 * symmetry with setGlobalBlacklistUnverifiedDevices but there is currently
 * no room-level equivalent for this setting.
 *
 * This API is currently UNSTABLE and may change or be removed without notice.
 *
 * @param {boolean} value whether error on unknown devices
 */


MatrixClient.prototype.setGlobalErrorOnUnknownDevices = function (value) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  this._crypto.setGlobalErrorOnUnknownDevices(value);
};
/**
 * @return {boolean} whether to error on unknown devices
 *
 * This API is currently UNSTABLE and may change or be removed without notice.
 */


MatrixClient.prototype.getGlobalErrorOnUnknownDevices = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.getGlobalErrorOnUnknownDevices();
};
/**
 * Add methods that call the corresponding method in this._crypto
 *
 * @param {class} MatrixClient the class to add the method to
 * @param {string} names the names of the methods to call
 */


function wrapCryptoFuncs(MatrixClient, names) {
  for (const name of names) {
    MatrixClient.prototype[name] = function () {
      if (!this._crypto) {
        // eslint-disable-line no-invalid-this
        throw new Error("End-to-end encryption disabled");
      }

      return this._crypto[name](...arguments); // eslint-disable-line no-invalid-this
    };
  }
}
/**
 * Get the user's cross-signing key ID.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#getCrossSigningId
 * @param {string} [type=master] The type of key to get the ID of.  One of
 *     "master", "self_signing", or "user_signing".  Defaults to "master".
 *
 * @returns {string} the key ID
 */

/**
 * Get the cross signing information for a given user.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#getStoredCrossSigningForUser
 * @param {string} userId the user ID to get the cross-signing info for.
 *
 * @returns {CrossSigningInfo} the cross signing information for the user.
 */

/**
 * Check whether a given user is trusted.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#checkUserTrust
 * @param {string} userId The ID of the user to check.
 *
 * @returns {UserTrustLevel}
 */

/**
 * Check whether a given device is trusted.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#checkDeviceTrust
 * @param {string} userId The ID of the user whose devices is to be checked.
 * @param {string} deviceId The ID of the device to check
 *
 * @returns {DeviceTrustLevel}
 */

/**
 * Check the copy of our cross-signing key that we have in the device list and
 * see if we can get the private key. If so, mark it as trusted.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#checkOwnCrossSigningTrust
 */

/**
 * Checks that a given cross-signing private key matches a given public key.
 * This can be used by the getCrossSigningKey callback to verify that the
 * private key it is about to supply is the one that was requested.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#checkCrossSigningPrivateKey
 * @param {Uint8Array} privateKey The private key
 * @param {string} expectedPublicKey The public key
 * @returns {boolean} true if the key matches, otherwise false
 */

/**
 * Perform any background tasks that can be done before a message is ready to
 * send, in order to speed up sending of the message.
 *
 * @function module:client~MatrixClient#prepareToEncrypt
 * @param {module:models/room} room the room the event is in
 */

/**
 * Checks whether cross signing:
 * - is enabled on this account and trusted by this device
 * - has private keys either cached locally or stored in secret storage
 *
 * If this function returns false, bootstrapCrossSigning() can be used
 * to fix things such that it returns true. That is to say, after
 * bootstrapCrossSigning() completes successfully, this function should
 * return true.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#isCrossSigningReady
 * @return {bool} True if cross-signing is ready to be used on this device
 */

/**
 * Bootstrap cross-signing by creating keys if needed. If everything is already
 * set up, then no changes are made, so this is safe to run to ensure
 * cross-signing is ready for use.
 *
 * This function:
 * - creates new cross-signing keys if they are not found locally cached nor in
 *   secret storage (if it has been setup)
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#bootstrapCrossSigning
 * @param {function} opts.authUploadDeviceSigningKeys Function
 * called to await an interactive auth flow when uploading device signing keys.
 * @param {bool} [opts.setupNewCrossSigning] Optional. Reset even if keys
 * already exist.
 * Args:
 *     {function} A function that makes the request requiring auth. Receives the
 *     auth data as an object. Can be called multiple times, first with an empty
 *     authDict, to obtain the flows.
 */


wrapCryptoFuncs(MatrixClient, ["getCrossSigningId", "getStoredCrossSigningForUser", "checkUserTrust", "checkDeviceTrust", "checkOwnCrossSigningTrust", "checkCrossSigningPrivateKey", "legacyDeviceVerification", "prepareToEncrypt", "isCrossSigningReady", "bootstrapCrossSigning", "getCryptoTrustCrossSignedDevices", "setCryptoTrustCrossSignedDevices", "countSessionsNeedingBackup"]);
/**
 * Get information about the encryption of an event
 *
 * @function module:client~MatrixClient#getEventEncryptionInfo
 *
 * @param {module:models/event.MatrixEvent} event event to be checked
 *
 * @return {object} An object with the fields:
 *    - encrypted: whether the event is encrypted (if not encrypted, some of the
 *      other properties may not be set)
 *    - senderKey: the sender's key
 *    - algorithm: the algorithm used to encrypt the event
 *    - authenticated: whether we can be sure that the owner of the senderKey
 *      sent the event
 *    - sender: the sender's device information, if available
 *    - mismatchedSender: if the event's ed25519 and curve25519 keys don't match
 *      (only meaningful if `sender` is set)
 */

/**
 * Create a recovery key from a user-supplied passphrase.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#createRecoveryKeyFromPassphrase
 * @param {string} password Passphrase string that can be entered by the user
 *     when restoring the backup as an alternative to entering the recovery key.
 *     Optional.
 * @returns {Promise<Object>} Object with public key metadata, encoded private
 *     recovery key which should be disposed of after displaying to the user,
 *     and raw private key to avoid round tripping if needed.
 */

/**
 * Checks whether secret storage:
 * - is enabled on this account
 * - is storing cross-signing private keys
 * - is storing session backup key (if enabled)
 *
 * If this function returns false, bootstrapSecretStorage() can be used
 * to fix things such that it returns true. That is to say, after
 * bootstrapSecretStorage() completes successfully, this function should
 * return true.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#isSecretStorageReady
 * @return {bool} True if secret storage is ready to be used on this device
 */

/**
 * Bootstrap Secure Secret Storage if needed by creating a default key. If everything is
 * already set up, then no changes are made, so this is safe to run to ensure secret
 * storage is ready for use.
 *
 * This function
 * - creates a new Secure Secret Storage key if no default key exists
 *   - if a key backup exists, it is migrated to store the key in the Secret
 *     Storage
 * - creates a backup if none exists, and one is requested
 * - migrates Secure Secret Storage to use the latest algorithm, if an outdated
 *   algorithm is found
 *
 * @function module:client~MatrixClient#bootstrapSecretStorage
 * @param {function} [opts.createSecretStorageKey] Optional. Function
 * called to await a secret storage key creation flow.
 * Returns:
 *     {Promise<Object>} Object with public key metadata, encoded private
 *     recovery key which should be disposed of after displaying to the user,
 *     and raw private key to avoid round tripping if needed.
 * @param {object} [opts.keyBackupInfo] The current key backup object. If passed,
 * the passphrase and recovery key from this backup will be used.
 * @param {bool} [opts.setupNewKeyBackup] If true, a new key backup version will be
 * created and the private key stored in the new SSSS store. Ignored if keyBackupInfo
 * is supplied.
 * @param {bool} [opts.setupNewSecretStorage] Optional. Reset even if keys already exist.
 * @param {func} [opts.getKeyBackupPassphrase] Optional. Function called to get the user's
 *     current key backup passphrase. Should return a promise that resolves with a Buffer
 *     containing the key, or rejects if the key cannot be obtained.
 * Returns:
 *     {Promise} A promise which resolves to key creation data for
 *     SecretStorage#addKey: an object with `passphrase` etc fields.
 */

/**
 * Add a key for encrypting secrets.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#addSecretStorageKey
 * @param {string} algorithm the algorithm used by the key
 * @param {object} opts the options for the algorithm.  The properties used
 *     depend on the algorithm given.
 * @param {string} [keyName] the name of the key.  If not given, a random
 *     name will be generated.
 *
 * @return {object} An object with:
 *     keyId: {string} the ID of the key
 *     keyInfo: {object} details about the key (iv, mac, passphrase)
 */

/**
 * Check whether we have a key with a given ID.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#hasSecretStorageKey
 * @param {string} [keyId = default key's ID] The ID of the key to check
 *     for. Defaults to the default key ID if not provided.
 * @return {boolean} Whether we have the key.
 */

/**
 * Store an encrypted secret on the server.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#storeSecret
 * @param {string} name The name of the secret
 * @param {string} secret The secret contents.
 * @param {Array} keys The IDs of the keys to use to encrypt the secret or null/undefined
 *     to use the default (will throw if no default key is set).
 */

/**
 * Get a secret from storage.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#getSecret
 * @param {string} name the name of the secret
 *
 * @return {string} the contents of the secret
 */

/**
 * Check if a secret is stored on the server.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#isSecretStored
 * @param {string} name the name of the secret
 * @param {boolean} checkKey check if the secret is encrypted by a trusted
 *     key
 *
 * @return {object?} map of key name to key info the secret is encrypted
 *     with, or null if it is not present or not encrypted with a trusted
 *     key
 */

/**
 * Request a secret from another device.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#requestSecret
 * @param {string} name the name of the secret to request
 * @param {string[]} devices the devices to request the secret from
 *
 * @return {string} the contents of the secret
 */

/**
 * Get the current default key ID for encrypting secrets.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#getDefaultSecretStorageKeyId
 *
 * @return {string} The default key ID or null if no default key ID is set
 */

/**
 * Set the current default key ID for encrypting secrets.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#setDefaultSecretStorageKeyId
 * @param {string} keyId The new default key ID
 */

/**
 * Checks that a given secret storage private key matches a given public key.
 * This can be used by the getSecretStorageKey callback to verify that the
 * private key it is about to supply is the one that was requested.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @function module:client~MatrixClient#checkSecretStoragePrivateKey
 * @param {Uint8Array} privateKey The private key
 * @param {string} expectedPublicKey The public key
 * @returns {boolean} true if the key matches, otherwise false
 */

wrapCryptoFuncs(MatrixClient, ["getEventEncryptionInfo", "createRecoveryKeyFromPassphrase", "isSecretStorageReady", "bootstrapSecretStorage", "addSecretStorageKey", "hasSecretStorageKey", "storeSecret", "getSecret", "isSecretStored", "requestSecret", "getDefaultSecretStorageKeyId", "setDefaultSecretStorageKeyId", "checkSecretStorageKey", "checkSecretStoragePrivateKey"]);
/**
 * Get e2e information on the device that sent an event
 *
 * @param {MatrixEvent} event event to be checked
 *
 * @return {Promise<module:crypto/deviceinfo?>}
 */

MatrixClient.prototype.getEventSenderDeviceInfo = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator(function* (event) {
    if (!this._crypto) {
      return null;
    }

    return this._crypto.getEventSenderDeviceInfo(event);
  });

  return function (_x10) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Check if the sender of an event is verified
 *
 * @param {MatrixEvent} event event to be checked
 *
 * @return {boolean} true if the sender of this event has been verified using
 * {@link module:client~MatrixClient#setDeviceVerified|setDeviceVerified}.
 */


MatrixClient.prototype.isEventSenderVerified = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator(function* (event) {
    const device = yield this.getEventSenderDeviceInfo(event);

    if (!device) {
      return false;
    }

    return device.isVerified();
  });

  return function (_x11) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Cancel a room key request for this event if one is ongoing and resend the
 * request.
 * @param  {MatrixEvent} event event of which to cancel and resend the room
 *                            key request.
 * @return {Promise} A promise that will resolve when the key request is queued
 */


MatrixClient.prototype.cancelAndResendEventRoomKeyRequest = function (event) {
  return event.cancelAndResendKeyRequest(this._crypto, this.getUserId());
};
/**
 * Enable end-to-end encryption for a room. This does not modify room state.
 * Any messages sent before the returned promise resolves will be sent unencrypted.
 * @param {string} roomId The room ID to enable encryption in.
 * @param {object} config The encryption config for the room.
 * @return {Promise} A promise that will resolve when encryption is set up.
 */


MatrixClient.prototype.setRoomEncryption = function (roomId, config) {
  if (!this._crypto) {
    throw new Error("End-to-End encryption disabled");
  }

  return this._crypto.setRoomEncryption(roomId, config);
};
/**
 * Whether encryption is enabled for a room.
 * @param {string} roomId the room id to query.
 * @return {bool} whether encryption is enabled.
 */


MatrixClient.prototype.isRoomEncrypted = function (roomId) {
  const room = this.getRoom(roomId);

  if (!room) {
    // we don't know about this room, so can't determine if it should be
    // encrypted. Let's assume not.
    return false;
  } // if there is an 'm.room.encryption' event in this room, it should be
  // encrypted (independently of whether we actually support encryption)


  const ev = room.currentState.getStateEvents("m.room.encryption", "");

  if (ev) {
    return true;
  } // we don't have an m.room.encrypted event, but that might be because
  // the server is hiding it from us. Check the store to see if it was
  // previously encrypted.


  return false; // this._roomList.isRoomEncrypted(roomId);
};
/**
 * Forces the current outbound group session to be discarded such
 * that another one will be created next time an event is sent.
 *
 * @param {string} roomId The ID of the room to discard the session for
 *
 * This should not normally be necessary.
 */


MatrixClient.prototype.forceDiscardSession = function (roomId) {
  if (!this._crypto) {
    throw new Error("End-to-End encryption disabled");
  }

  this._crypto.forceDiscardSession(roomId);
};
/**
 * Get a list containing all of the room keys
 *
 * This should be encrypted before returning it to the user.
 *
 * @return {Promise} a promise which resolves to a list of
 *    session export objects
 */


MatrixClient.prototype.exportRoomKeys = function () {
  if (!this._crypto) {
    return Promise.reject(new Error("End-to-end encryption disabled"));
  }

  return this._crypto.exportRoomKeys();
};
/**
 * Import a list of room keys previously exported by exportRoomKeys
 *
 * @param {Object[]} keys a list of session export objects
 * @param {Object} opts
 * @param {Function} opts.progressCallback called with an object that has a "stage" param
 *
 * @return {Promise} a promise which resolves when the keys
 *    have been imported
 */


MatrixClient.prototype.importRoomKeys = function (keys, opts) {
  if (!this._crypto) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.importRoomKeys(keys, opts);
};
/**
 * Force a re-check of the local key backup status against
 * what's on the server.
 *
 * @returns {Object} Object with backup info (as returned by
 *     getKeyBackupVersion) in backupInfo and
 *     trust information (as returned by isKeyBackupTrusted)
 *     in trustInfo.
 */


MatrixClient.prototype.checkKeyBackup = function () {
  return this._crypto.checkKeyBackup();
};
/**
 * Get information about the current key backup.
 * @returns {Promise} Information object from API or null
 */


MatrixClient.prototype.getKeyBackupVersion = function () {
  return this._http.authedRequest(undefined, "GET", "/room_keys/version", undefined, undefined, {
    prefix: _httpApi.PREFIX_UNSTABLE
  }).then(res => {
    if (res.algorithm !== olmlib.MEGOLM_BACKUP_ALGORITHM) {
      const err = "Unknown backup algorithm: " + res.algorithm;
      return Promise.reject(err);
    } else if (!(typeof res.auth_data === "object") || !res.auth_data.public_key) {
      const err = "Invalid backup data returned";
      return Promise.reject(err);
    } else {
      return res;
    }
  }).catch(e => {
    if (e.errcode === 'M_NOT_FOUND') {
      return null;
    } else {
      throw e;
    }
  });
};
/**
 * @param {object} info key backup info dict from getKeyBackupVersion()
 * @return {object} {
 *     usable: [bool], // is the backup trusted, true iff there is a sig that is valid & from a trusted device
 *     sigs: [
 *         valid: [bool],
 *         device: [DeviceInfo],
 *     ]
 * }
 */


MatrixClient.prototype.isKeyBackupTrusted = function (info) {
  return this._crypto.isKeyBackupTrusted(info);
};
/**
 * @returns {bool} true if the client is configured to back up keys to
 *     the server, otherwise false. If we haven't completed a successful check
 *     of key backup status yet, returns null.
 */


MatrixClient.prototype.getKeyBackupEnabled = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  if (!this._crypto._checkedForBackup) {
    return null;
  }

  return Boolean(this._crypto.backupKey);
};
/**
 * Enable backing up of keys, using data previously returned from
 * getKeyBackupVersion.
 *
 * @param {object} info Backup information object as returned by getKeyBackupVersion
 */


MatrixClient.prototype.enableKeyBackup = function (info) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  this._crypto.backupInfo = info;
  if (this._crypto.backupKey) this._crypto.backupKey.free();
  this._crypto.backupKey = new global.Olm.PkEncryption();

  this._crypto.backupKey.set_recipient_key(info.auth_data.public_key);

  this.emit('crypto.keyBackupStatus', true); // There may be keys left over from a partially completed backup, so
  // schedule a send to check.

  this._crypto.scheduleKeyBackupSend();
};
/**
 * Disable backing up of keys.
 */


MatrixClient.prototype.disableKeyBackup = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  this._crypto.backupInfo = null;
  if (this._crypto.backupKey) this._crypto.backupKey.free();
  this._crypto.backupKey = null;
  this.emit('crypto.keyBackupStatus', false);
};
/**
 * Set up the data required to create a new backup version.  The backup version
 * will not be created and enabled until createKeyBackupVersion is called.
 *
 * @param {string} password Passphrase string that can be entered by the user
 *     when restoring the backup as an alternative to entering the recovery key.
 *     Optional.
 * @param {boolean} [opts.secureSecretStorage = false] Whether to use Secure
 *     Secret Storage to store the key encrypting key backups.
 *     Optional, defaults to false.
 *
 * @returns {Promise<object>} Object that can be passed to createKeyBackupVersion and
 *     additionally has a 'recovery_key' member with the user-facing recovery key string.
 */


MatrixClient.prototype.prepareKeyBackupVersion = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator(function* (password) {
    let {
      secureSecretStorage = false
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (this._crypto === null) {
      throw new Error("End-to-end encryption disabled");
    }

    const {
      keyInfo,
      encodedPrivateKey,
      privateKey
    } = yield this.createRecoveryKeyFromPassphrase(password);

    if (secureSecretStorage) {
      yield this.storeSecret("m.megolm_backup.v1", (0, olmlib.encodeBase64)(privateKey));

      _logger.logger.info("Key backup private key stored in secret storage");
    } // Reshape objects into form expected for key backup


    const authData = {
      public_key: keyInfo.pubkey
    };

    if (keyInfo.passphrase) {
      authData.private_key_salt = keyInfo.passphrase.salt;
      authData.private_key_iterations = keyInfo.passphrase.iterations;
    }

    return {
      algorithm: olmlib.MEGOLM_BACKUP_ALGORITHM,
      auth_data: authData,
      recovery_key: encodedPrivateKey
    };
  });

  return function (_x12) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Check whether the key backup private key is stored in secret storage.
 * @return {Promise<object?>} map of key name to key info the secret is
 *     encrypted with, or null if it is not present or not encrypted with a
 *     trusted key
 */


MatrixClient.prototype.isKeyBackupKeyStored = /*#__PURE__*/_asyncToGenerator(function* () {
  return this.isSecretStored("m.megolm_backup.v1", false
  /* checkKey */
  );
});
/**
 * Create a new key backup version and enable it, using the information return
 * from prepareKeyBackupVersion.
 *
 * @param {object} info Info object from prepareKeyBackupVersion
 * @returns {Promise<object>} Object with 'version' param indicating the version created
 */

MatrixClient.prototype.createKeyBackupVersion = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator(function* (info) {
    if (this._crypto === null) {
      throw new Error("End-to-end encryption disabled");
    }

    const data = {
      algorithm: info.algorithm,
      auth_data: info.auth_data
    }; // Sign the backup auth data with the device key for backwards compat with
    // older devices with cross-signing. This can probably go away very soon in
    // favour of just signing with the cross-singing master key.

    yield this._crypto._signObject(data.auth_data);

    if (this._cryptoCallbacks.getCrossSigningKey && this._crypto._crossSigningInfo.getId()) {
      // now also sign the auth data with the cross-signing master key
      // we check for the callback explicitly here because we still want to be able
      // to create an un-cross-signed key backup if there is a cross-signing key but
      // no callback supplied.
      yield this._crypto._crossSigningInfo.signObject(data.auth_data, "master");
    }

    const res = yield this._http.authedRequest(undefined, "POST", "/room_keys/version", undefined, data, {
      prefix: _httpApi.PREFIX_UNSTABLE
    }); // We could assume everything's okay and enable directly, but this ensures
    // we run the same signature verification that will be used for future
    // sessions.

    yield this.checkKeyBackup();

    if (!this.getKeyBackupEnabled()) {
      _logger.logger.error("Key backup not usable even though we just created it");
    }

    return res;
  });

  return function (_x13) {
    return _ref12.apply(this, arguments);
  };
}();

MatrixClient.prototype.deleteKeyBackupVersion = function (version) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  } // If we're currently backing up to this backup... stop.
  // (We start using it automatically in createKeyBackupVersion
  // so this is symmetrical).


  if (this._crypto.backupInfo && this._crypto.backupInfo.version === version) {
    this.disableKeyBackup();
  }

  const path = utils.encodeUri("/room_keys/version/$version", {
    $version: version
  });
  return this._http.authedRequest(undefined, "DELETE", path, undefined, undefined, {
    prefix: _httpApi.PREFIX_UNSTABLE
  });
};

MatrixClient.prototype._makeKeyBackupPath = function (roomId, sessionId, version) {
  let path;

  if (sessionId !== undefined) {
    path = utils.encodeUri("/room_keys/keys/$roomId/$sessionId", {
      $roomId: roomId,
      $sessionId: sessionId
    });
  } else if (roomId !== undefined) {
    path = utils.encodeUri("/room_keys/keys/$roomId", {
      $roomId: roomId
    });
  } else {
    path = "/room_keys/keys";
  }

  const queryData = version === undefined ? undefined : {
    version: version
  };
  return {
    path: path,
    queryData: queryData
  };
};
/**
 * Back up session keys to the homeserver.
 * @param {string} roomId ID of the room that the keys are for Optional.
 * @param {string} sessionId ID of the session that the keys are for Optional.
 * @param {integer} version backup version Optional.
 * @param {object} data Object keys to send
 * @return {Promise} a promise that will resolve when the keys
 * are uploaded
 */


MatrixClient.prototype.sendKeyBackup = function (roomId, sessionId, version, data) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  const path = this._makeKeyBackupPath(roomId, sessionId, version);

  return this._http.authedRequest(undefined, "PUT", path.path, path.queryData, data, {
    prefix: _httpApi.PREFIX_UNSTABLE
  });
};
/**
 * Marks all group sessions as needing to be backed up and schedules them to
 * upload in the background as soon as possible.
 */


MatrixClient.prototype.scheduleAllGroupSessionsForBackup = /*#__PURE__*/_asyncToGenerator(function* () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  yield this._crypto.scheduleAllGroupSessionsForBackup();
});
/**
 * Marks all group sessions as needing to be backed up without scheduling
 * them to upload in the background.
 * @returns {Promise<int>} Resolves to the number of sessions requiring a backup.
 */

MatrixClient.prototype.flagAllGroupSessionsForBackup = function () {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  return this._crypto.flagAllGroupSessionsForBackup();
};

MatrixClient.prototype.isValidRecoveryKey = function (recoveryKey) {
  try {
    (0, _recoverykey.decodeRecoveryKey)(recoveryKey);
    return true;
  } catch (e) {
    return false;
  }
};
/**
 * Get the raw key for a key backup from the password
 * Used when migrating key backups into SSSS
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @param {string} password Passphrase
 * @param {object} backupInfo Backup metadata from `checkKeyBackup`
 * @return {Promise<Uint8Array>} key backup key
 */


MatrixClient.prototype.keyBackupKeyFromPassword = function (password, backupInfo) {
  return (0, _key_passphrase.keyFromAuthData)(backupInfo.auth_data, password);
};
/**
 * Get the raw key for a key backup from the recovery key
 * Used when migrating key backups into SSSS
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @param {string} recoveryKey The recovery key
 * @return {Uint8Array} key backup key
 */


MatrixClient.prototype.keyBackupKeyFromRecoveryKey = function (recoveryKey) {
  return (0, _recoverykey.decodeRecoveryKey)(recoveryKey);
};

MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY = 'RESTORE_BACKUP_ERROR_BAD_KEY';
/**
 * Restore from an existing key backup via a passphrase.
 *
 * @param {string} password Passphrase
 * @param {string} [targetRoomId] Room ID to target a specific room.
 * Restores all rooms if omitted.
 * @param {string} [targetSessionId] Session ID to target a specific session.
 * Restores all sessions if omitted.
 * @param {object} backupInfo Backup metadata from `checkKeyBackup`
 * @param {object} opts Optional params such as callbacks
 * @return {Promise<object>} Status of restoration with `total` and `imported`
 * key counts.
 */

MatrixClient.prototype.restoreKeyBackupWithPassword = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator(function* (password, targetRoomId, targetSessionId, backupInfo, opts) {
    const privKey = yield (0, _key_passphrase.keyFromAuthData)(backupInfo.auth_data, password);
    return this._restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);
  });

  return function (_x14, _x15, _x16, _x17, _x18) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Restore from an existing key backup via a private key stored in secret
 * storage.
 *
 * @param {object} backupInfo Backup metadata from `checkKeyBackup`
 * @param {string} [targetRoomId] Room ID to target a specific room.
 * Restores all rooms if omitted.
 * @param {string} [targetSessionId] Session ID to target a specific session.
 * Restores all sessions if omitted.
 * @param {object} opts Optional params such as callbacks
 * @return {Promise<object>} Status of restoration with `total` and `imported`
 * key counts.
 */


MatrixClient.prototype.restoreKeyBackupWithSecretStorage = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator(function* (backupInfo, targetRoomId, targetSessionId, opts) {
    const storedKey = yield this.getSecret("m.megolm_backup.v1"); // ensure that the key is in the right format.  If not, fix the key and
    // store the fixed version

    const fixedKey = (0, _crypto.fixBackupKey)(storedKey);

    if (fixedKey) {
      const [keyId] = yield this._crypto.getSecretStorageKey();
      yield this.storeSecret("m.megolm_backup.v1", fixedKey, [keyId]);
    }

    const privKey = (0, olmlib.decodeBase64)(fixedKey || storedKey);
    return this._restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);
  });

  return function (_x19, _x20, _x21, _x22) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Restore from an existing key backup via an encoded recovery key.
 *
 * @param {string} recoveryKey Encoded recovery key
 * @param {string} [targetRoomId] Room ID to target a specific room.
 * Restores all rooms if omitted.
 * @param {string} [targetSessionId] Session ID to target a specific session.
 * Restores all sessions if omitted.
 * @param {object} backupInfo Backup metadata from `checkKeyBackup`
 * @param {object} opts Optional params such as callbacks

 * @return {Promise<object>} Status of restoration with `total` and `imported`
 * key counts.
 */


MatrixClient.prototype.restoreKeyBackupWithRecoveryKey = function (recoveryKey, targetRoomId, targetSessionId, backupInfo, opts) {
  const privKey = (0, _recoverykey.decodeRecoveryKey)(recoveryKey);
  return this._restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);
};
/**
 * Restore from an existing key backup using a cached key, or fail
 *
 * @param {string} [targetRoomId] Room ID to target a specific room.
 * Restores all rooms if omitted.
 * @param {string} [targetSessionId] Session ID to target a specific session.
 * Restores all sessions if omitted.
 * @param {object} backupInfo Backup metadata from `checkKeyBackup`
 * @param {object} opts Optional params such as callbacks
 * @return {Promise<object>} Status of restoration with `total` and `imported`
 * key counts.
 */


MatrixClient.prototype.restoreKeyBackupWithCache = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator(function* (targetRoomId, targetSessionId, backupInfo, opts) {
    const privKey = yield this._crypto.getSessionBackupPrivateKey();

    if (!privKey) {
      throw new Error("Couldn't get key");
    }

    return this._restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);
  });

  return function (_x23, _x24, _x25, _x26) {
    return _ref16.apply(this, arguments);
  };
}();

MatrixClient.prototype._restoreKeyBackup = function (privKey, targetRoomId, targetSessionId, backupInfo) {
  let {
    cacheCompleteCallback,
    // For sequencing during tests
    progressCallback
  } = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  let totalKeyCount = 0;
  let keys = [];

  const path = this._makeKeyBackupPath(targetRoomId, targetSessionId, backupInfo.version);

  const decryption = new global.Olm.PkDecryption();
  let backupPubKey;

  try {
    backupPubKey = decryption.init_with_private_key(privKey);
  } catch (e) {
    decryption.free();
    throw e;
  } // If the pubkey computed from the private data we've been given
  // doesn't match the one in the auth_data, the user has enetered
  // a different recovery key / the wrong passphrase.


  if (backupPubKey !== backupInfo.auth_data.public_key) {
    return Promise.reject({
      errcode: MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY
    });
  } // Cache the key, if possible.
  // This is async.


  this._crypto.storeSessionBackupPrivateKey(privKey).catch(e => {
    _logger.logger.warn("Error caching session backup key:", e);
  }).then(cacheCompleteCallback);

  if (progressCallback) {
    progressCallback({
      stage: "fetch"
    });
  }

  return this._http.authedRequest(undefined, "GET", path.path, path.queryData, undefined, {
    prefix: _httpApi.PREFIX_UNSTABLE
  }).then(res => {
    if (res.rooms) {
      for (const [roomId, roomData] of Object.entries(res.rooms)) {
        if (!roomData.sessions) continue;
        totalKeyCount += Object.keys(roomData.sessions).length;
        const roomKeys = keysFromRecoverySession(roomData.sessions, decryption, roomId);

        for (const k of roomKeys) {
          k.room_id = roomId;
          keys.push(k);
        }
      }
    } else if (res.sessions) {
      totalKeyCount = Object.keys(res.sessions).length;
      keys = keysFromRecoverySession(res.sessions, decryption, targetRoomId, keys);
    } else {
      totalKeyCount = 1;

      try {
        const key = keyFromRecoverySession(res, decryption);
        key.room_id = targetRoomId;
        key.session_id = targetSessionId;
        keys.push(key);
      } catch (e) {
        _logger.logger.log("Failed to decrypt megolm session from backup", e);
      }
    }

    return this.importRoomKeys(keys, {
      progressCallback,
      untrusted: true,
      source: "backup"
    });
  }).then(() => {
    return this._crypto.setTrustedBackupPubKey(backupPubKey);
  }).then(() => {
    return {
      total: totalKeyCount,
      imported: keys.length
    };
  }).finally(() => {
    decryption.free();
  });
};

MatrixClient.prototype.deleteKeysFromBackup = function (roomId, sessionId, version) {
  if (this._crypto === null) {
    throw new Error("End-to-end encryption disabled");
  }

  const path = this._makeKeyBackupPath(roomId, sessionId, version);

  return this._http.authedRequest(undefined, "DELETE", path.path, path.queryData, undefined, {
    prefix: _httpApi.PREFIX_UNSTABLE
  });
};
/**
 * Share shared-history decryption keys with the given users.
 *
 * @param {string} roomId the room for which keys should be shared.
 * @param {array} userIds a list of users to share with.  The keys will be sent to
 *     all of the user's current devices.
 */


MatrixClient.prototype.sendSharedHistoryKeys = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator(function* (roomId, userIds) {
    if (this._crypto === null) {
      throw new Error("End-to-end encryption disabled");
    }

    const roomEncryption = this._roomList.getRoomEncryption(roomId);

    if (!roomEncryption) {
      // unknown room, or unencrypted room
      _logger.logger.error("Unknown room.  Not sharing decryption keys");

      return;
    }

    const deviceInfos = yield this._crypto.downloadKeys(userIds);
    const devicesByUser = {};

    for (const [userId, devices] of Object.entries(deviceInfos)) {
      devicesByUser[userId] = Object.values(devices);
    }

    const alg = this._crypto._getRoomDecryptor(roomId, roomEncryption.algorithm);

    if (alg.sendSharedHistoryInboundSessions) {
      yield alg.sendSharedHistoryInboundSessions(devicesByUser);
    } else {
      _logger.logger.warning("Algorithm does not support sharing previous keys", roomEncryption.algorithm);
    }
  });

  return function (_x27, _x28) {
    return _ref17.apply(this, arguments);
  };
}(); // Group ops
// =========
// Operations on groups that come down the sync stream (ie. ones the
// user is a member of or invited to)

/**
 * Get the group for the given group ID.
 * This function will return a valid group for any group for which a Group event
 * has been emitted.
 * @param {string} groupId The group ID
 * @return {Group} The Group or null if the group is not known or there is no data store.
 */


MatrixClient.prototype.getGroup = function (groupId) {
  return this.store.getGroup(groupId);
};
/**
 * Retrieve all known groups.
 * @return {Group[]} A list of groups, or an empty list if there is no data store.
 */


MatrixClient.prototype.getGroups = function () {
  return this.store.getGroups();
};
/**
 * Get the config for the media repository.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves with an object containing the config.
 */


MatrixClient.prototype.getMediaConfig = function (callback) {
  return this._http.authedRequest(callback, "GET", "/config", undefined, undefined, {
    prefix: _httpApi.PREFIX_MEDIA_R0
  });
}; // Room ops
// ========

/**
 * Get the room for the given room ID.
 * This function will return a valid room for any room for which a Room event
 * has been emitted. Note in particular that other events, eg. RoomState.members
 * will be emitted for a room before this function will return the given room.
 * @param {string} roomId The room ID
 * @return {Room} The Room or null if it doesn't exist or there is no data store.
 */


MatrixClient.prototype.getRoom = function (roomId) {
  return this.store.getRoom(roomId);
};
/**
 * Retrieve all known rooms.
 * @return {Room[]} A list of rooms, or an empty list if there is no data store.
 */


MatrixClient.prototype.getRooms = function () {
  return this.store.getRooms();
};
/**
 * Retrieve all rooms that should be displayed to the user
 * This is essentially getRooms() with some rooms filtered out, eg. old versions
 * of rooms that have been replaced or (in future) other rooms that have been
 * marked at the protocol level as not to be displayed to the user.
 * @return {Room[]} A list of rooms, or an empty list if there is no data store.
 */


MatrixClient.prototype.getVisibleRooms = function () {
  const allRooms = this.store.getRooms();
  const replacedRooms = new Set();

  for (const r of allRooms) {
    const createEvent = r.currentState.getStateEvents('m.room.create', ''); // invites are included in this list and we don't know their create events yet

    if (createEvent) {
      const predecessor = createEvent.getContent()['predecessor'];

      if (predecessor && predecessor['room_id']) {
        replacedRooms.add(predecessor['room_id']);
      }
    }
  }

  return allRooms.filter(r => {
    const tombstone = r.currentState.getStateEvents('m.room.tombstone', '');

    if (tombstone && replacedRooms.has(r.roomId)) {
      return false;
    }

    return true;
  });
};
/**
 * Retrieve a user.
 * @param {string} userId The user ID to retrieve.
 * @return {?User} A user or null if there is no data store or the user does
 * not exist.
 */


MatrixClient.prototype.getUser = function (userId) {
  return this.store.getUser(userId);
};
/**
 * Retrieve all known users.
 * @return {User[]} A list of users, or an empty list if there is no data store.
 */


MatrixClient.prototype.getUsers = function () {
  return this.store.getUsers();
}; // User Account Data operations
// ============================

/**
 * Set account data event for the current user.
 * It will retry the request up to 5 times.
 * @param {string} eventType The event type
 * @param {Object} contents the contents object for the event
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setAccountData = function (eventType, contents, callback) {
  const path = utils.encodeUri("/user/$userId/account_data/$type", {
    $userId: this.credentials.userId,
    $type: eventType
  });
  const promise = (0, _httpApi.retryNetworkOperation)(5, () => {
    return this._http.authedRequest(undefined, "PUT", path, undefined, contents);
  });

  if (callback) {
    promise.then(result => callback(null, result), callback);
  }

  return promise;
};
/**
 * Get account data event of given type for the current user.
 * @param {string} eventType The event type
 * @return {?object} The contents of the given account data event
 */


MatrixClient.prototype.getAccountData = function (eventType) {
  return this.store.getAccountData(eventType);
};
/**
 * Get account data event of given type for the current user. This variant
 * gets account data directly from the homeserver if the local store is not
 * ready, which can be useful very early in startup before the initial sync.
 * @param {string} eventType The event type
 * @return {Promise} Resolves: The contents of the given account
 * data event.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getAccountDataFromServer = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator(function* (eventType) {
    if (this.isInitialSyncComplete()) {
      const event = this.store.getAccountData(eventType);

      if (!event) {
        return null;
      } // The network version below returns just the content, so this branch
      // does the same to match.


      return event.getContent();
    }

    const path = utils.encodeUri("/user/$userId/account_data/$type", {
      $userId: this.credentials.userId,
      $type: eventType
    });

    try {
      const result = yield this._http.authedRequest(undefined, "GET", path, undefined);
      return result;
    } catch (e) {
      if (e.data && e.data.errcode === 'M_NOT_FOUND') {
        return null;
      }

      throw e;
    }
  });

  return function (_x29) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Gets the users that are ignored by this client
 * @returns {string[]} The array of users that are ignored (empty if none)
 */


MatrixClient.prototype.getIgnoredUsers = function () {
  const event = this.getAccountData("m.ignored_user_list");
  if (!event || !event.getContent() || !event.getContent()["ignored_users"]) return [];
  return Object.keys(event.getContent()["ignored_users"]);
};
/**
 * Sets the users that the current user should ignore.
 * @param {string[]} userIds the user IDs to ignore
 * @param {module:client.callback} [callback] Optional.
 * @return {Promise} Resolves: Account data event
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setIgnoredUsers = function (userIds, callback) {
  const content = {
    ignored_users: {}
  };
  userIds.map(u => content.ignored_users[u] = {});
  return this.setAccountData("m.ignored_user_list", content, callback);
};
/**
 * Gets whether or not a specific user is being ignored by this client.
 * @param {string} userId the user ID to check
 * @returns {boolean} true if the user is ignored, false otherwise
 */


MatrixClient.prototype.isUserIgnored = function (userId) {
  return this.getIgnoredUsers().indexOf(userId) !== -1;
}; // Room operations
// ===============

/**
 * Join a room. If you have already joined the room, this will no-op.
 * @param {string} roomIdOrAlias The room ID or room alias to join.
 * @param {Object} opts Options when joining the room.
 * @param {boolean} opts.syncRoom True to do a room initial sync on the resulting
 * room. If false, the <strong>returned Room object will have no current state.
 * </strong> Default: true.
 * @param {boolean} opts.inviteSignUrl If the caller has a keypair 3pid invite,
 *                                     the signing URL is passed in this parameter.
 * @param {string[]} opts.viaServers The server names to try and join through in
 *                                   addition to those that are automatically chosen.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Room object.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.joinRoom = function (roomIdOrAlias, opts, callback) {
  // to help people when upgrading..
  if (utils.isFunction(opts)) {
    throw new Error("Expected 'opts' object, got function.");
  }

  opts = opts || {};

  if (opts.syncRoom === undefined) {
    opts.syncRoom = true;
  }

  const room = this.getRoom(roomIdOrAlias);

  if (room && room.hasMembershipState(this.credentials.userId, "join")) {
    return Promise.resolve(room);
  }

  let sign_promise = Promise.resolve();

  if (opts.inviteSignUrl) {
    sign_promise = this._http.requestOtherUrl(undefined, 'POST', opts.inviteSignUrl, {
      mxid: this.credentials.userId
    });
  }

  const queryString = {};

  if (opts.viaServers) {
    queryString["server_name"] = opts.viaServers;
  }

  const reqOpts = {
    qsStringifyOptions: {
      arrayFormat: 'repeat'
    }
  };
  const self = this;
  const prom = new Promise((resolve, reject) => {
    sign_promise.then(function (signed_invite_object) {
      const data = {};

      if (signed_invite_object) {
        data.third_party_signed = signed_invite_object;
      }

      const path = utils.encodeUri("/join/$roomid", {
        $roomid: roomIdOrAlias
      });
      return self._http.authedRequest(undefined, "POST", path, queryString, data, reqOpts);
    }).then(function (res) {
      const roomId = res.room_id;
      const syncApi = new _sync.SyncApi(self, self._clientOpts);
      const room = syncApi.createRoom(roomId);

      if (opts.syncRoom) {// v2 will do this for us
        // return syncApi.syncRoom(room);
      }

      return Promise.resolve(room);
    }).then(function (room) {
      _resolve(callback, resolve, room);
    }, function (err) {
      _reject(callback, reject, err);
    });
  });
  return prom;
};
/**
 * Resend an event.
 * @param {MatrixEvent} event The event to resend.
 * @param {Room} room Optional. The room the event is in. Will update the
 * timeline entry if provided.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.resendEvent = function (event, room) {
  _updatePendingEventStatus(room, event, _event.EventStatus.SENDING);

  return _sendEvent(this, room, event);
};
/**
 * Cancel a queued or unsent event.
 *
 * @param {MatrixEvent} event   Event to cancel
 * @throws Error if the event is not in QUEUED or NOT_SENT state
 */


MatrixClient.prototype.cancelPendingEvent = function (event) {
  if ([_event.EventStatus.QUEUED, _event.EventStatus.NOT_SENT].indexOf(event.status) < 0) {
    throw new Error("cannot cancel an event with status " + event.status);
  } // first tell the scheduler to forget about it, if it's queued


  if (this.scheduler) {
    this.scheduler.removeEventFromQueue(event);
  } // then tell the room about the change of state, which will remove it
  // from the room's list of pending events.


  const room = this.getRoom(event.getRoomId());

  _updatePendingEventStatus(room, event, _event.EventStatus.CANCELLED);
};
/**
 * @param {string} roomId
 * @param {string} name
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomName = function (roomId, name, callback) {
  return this.sendStateEvent(roomId, "m.room.name", {
    name: name
  }, undefined, callback);
};
/**
 * @param {string} roomId
 * @param {string} topic
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomAvatarUrl = function (roomId, url, callback) {
  return this.sendStateEvent(roomId, "m.room.avatar", {
    avatarUrl: url
  }, undefined, callback);
};
/**
 * @param {string} roomId
 * @param {string} topic
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomTopic = function (roomId, topic, callback) {
  return this.sendStateEvent(roomId, "m.room.topic", {
    topic: topic
  }, undefined, callback);
};
/**
 * @param {string} roomId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getRoomTags = function (roomId, callback) {
  const path = utils.encodeUri("/user/$userId/rooms/$roomId/tags/", {
    $userId: this.credentials.userId,
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "GET", path, undefined);
};
/**
 * @param {string} roomId
 * @param {string} tagName name of room tag to be set
 * @param {object} metadata associated with that tag to be stored
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomTag = function (roomId, tagName, metadata, callback) {
  const path = utils.encodeUri("/user/$userId/rooms/$roomId/tags/$tag", {
    $userId: this.credentials.userId,
    $roomId: roomId,
    $tag: tagName
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, metadata);
};
/**
 * @param {string} roomId
 * @param {string} tagName name of room tag to be removed
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.deleteRoomTag = function (roomId, tagName, callback) {
  const path = utils.encodeUri("/user/$userId/rooms/$roomId/tags/$tag", {
    $userId: this.credentials.userId,
    $roomId: roomId,
    $tag: tagName
  });
  return this._http.authedRequest(callback, "DELETE", path, undefined, undefined);
};
/**
 * @param {string} roomId
 * @param {string} eventType event type to be set
 * @param {object} content event content
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomAccountData = function (roomId, eventType, content, callback) {
  const path = utils.encodeUri("/user/$userId/rooms/$roomId/account_data/$type", {
    $userId: this.credentials.userId,
    $roomId: roomId,
    $type: eventType
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, content);
};
/**
 * Set a user's power level.
 * @param {string} roomId
 * @param {string} userId
 * @param {Number} powerLevel
 * @param {MatrixEvent} event
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setPowerLevel = function (roomId, userId, powerLevel, event, callback) {
  let content = {
    users: {}
  };

  if (event && event.getType() === "m.room.power_levels") {
    // take a copy of the content to ensure we don't corrupt
    // existing client state with a failed power level change
    content = utils.deepCopy(event.getContent());
  }

  content.users[userId] = powerLevel;
  const path = utils.encodeUri("/rooms/$roomId/state/m.room.power_levels", {
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, content);
};
/**
 * @param {string} roomId
 * @param {string} eventType
 * @param {Object} content
 * @param {string} txnId Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendEvent = function (roomId, eventType, content, txnId, callback) {
  return this._sendCompleteEvent(roomId, {
    type: eventType,
    content: content
  }, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {object} eventObject An object with the partial structure of an event, to which event_id, user_id, room_id and origin_server_ts will be added.
 * @param {string} txnId the txnId.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype._sendCompleteEvent = function (roomId, eventObject, txnId, callback) {
  if (utils.isFunction(txnId)) {
    callback = txnId;
    txnId = undefined;
  }

  if (!txnId) {
    txnId = this.makeTxnId();
  } // we always construct a MatrixEvent when sending because the store and
  // scheduler use them. We'll extract the params back out if it turns out
  // the client has no scheduler or store.


  const localEvent = new _event.MatrixEvent(Object.assign(eventObject, {
    event_id: "~" + roomId + ":" + txnId,
    user_id: this.credentials.userId,
    sender: this.credentials.userId,
    room_id: roomId,
    origin_server_ts: new Date().getTime()
  }));
  const room = this.getRoom(roomId); // if this is a relation or redaction of an event
  // that hasn't been sent yet (e.g. with a local id starting with a ~)
  // then listen for the remote echo of that event so that by the time
  // this event does get sent, we have the correct event_id

  const targetId = localEvent.getAssociatedId();

  if (targetId && targetId.startsWith("~")) {
    const target = room.getPendingEvents().find(e => e.getId() === targetId);
    target.once("Event.localEventIdReplaced", () => {
      localEvent.updateAssociatedId(target.getId());
    });
  }

  const type = localEvent.getType();

  _logger.logger.log(`sendEvent of type ${type} in ${roomId} with txnId ${txnId}`);

  localEvent.setTxnId(txnId);
  localEvent.setStatus(_event.EventStatus.SENDING); // add this event immediately to the local store as 'sending'.

  if (room) {
    room.addPendingEvent(localEvent, txnId);
  } // addPendingEvent can change the state to NOT_SENT if it believes
  // that there's other events that have failed. We won't bother to
  // try sending the event if the state has changed as such.


  if (localEvent.status === _event.EventStatus.NOT_SENT) {
    return Promise.reject(new Error("Event blocked by other events not yet sent"));
  }

  return _sendEvent(this, room, localEvent, callback);
}; // encrypts the event if necessary
// adds the event to the queue, or sends it
// marks the event as sent/unsent
// returns a promise which resolves with the result of the send request


function _sendEvent(client, room, event, callback) {
  // Add an extra Promise.resolve() to turn synchronous exceptions into promise rejections,
  // so that we can handle synchronous and asynchronous exceptions with the
  // same code path.
  return Promise.resolve().then(function () {
    const encryptionPromise = _encryptEventIfNeeded(client, event, room);

    if (!encryptionPromise) {
      return null;
    }

    _updatePendingEventStatus(room, event, _event.EventStatus.ENCRYPTING);

    return encryptionPromise.then(() => {
      _updatePendingEventStatus(room, event, _event.EventStatus.SENDING);
    });
  }).then(function () {
    let promise; // this event may be queued

    if (client.scheduler) {
      // if this returns a promise then the scheduler has control now and will
      // resolve/reject when it is done. Internally, the scheduler will invoke
      // processFn which is set to this._sendEventHttpRequest so the same code
      // path is executed regardless.
      promise = client.scheduler.queueEvent(event);

      if (promise && client.scheduler.getQueueForEvent(event).length > 1) {
        // event is processed FIFO so if the length is 2 or more we know
        // this event is stuck behind an earlier event.
        _updatePendingEventStatus(room, event, _event.EventStatus.QUEUED);
      }
    }

    if (!promise) {
      promise = _sendEventHttpRequest(client, event);

      if (room) {
        promise = promise.then(res => {
          room.updatePendingEvent(event, _event.EventStatus.SENT, res.event_id);
          return res;
        });
      }
    }

    return promise;
  }).then(function (res) {
    // the request was sent OK
    if (callback) {
      callback(null, res);
    }

    return res;
  }, function (err) {
    // the request failed to send.
    _logger.logger.error("Error sending event", err.stack || err);

    try {
      // set the error on the event before we update the status:
      // updating the status emits the event, so the state should be
      // consistent at that point.
      event.error = err;

      _updatePendingEventStatus(room, event, _event.EventStatus.NOT_SENT); // also put the event object on the error: the caller will need this
      // to resend or cancel the event


      err.event = event;

      if (callback) {
        callback(err);
      }
    } catch (err2) {
      _logger.logger.error("Exception in error handler!", err2.stack || err);
    }

    throw err;
  });
}
/**
 * Encrypt an event according to the configuration of the room, if necessary.
 *
 * @param {MatrixClient} client
 *
 * @param {module:models/event.MatrixEvent} event  event to be sent
 *
 * @param {module:models/room?} room destination room. Null if the destination
 *     is not a room we have seen over the sync pipe.
 *
 * @return {Promise?} Promise which resolves when the event has been
 *     encrypted, or null if nothing was needed
 */


function _encryptEventIfNeeded(client, event, room) {
  if (event.isEncrypted()) {
    // this event has already been encrypted; this happens if the
    // encryption step succeeded, but the send step failed on the first
    // attempt.
    return null;
  }

  if (!client.isRoomEncrypted(event.getRoomId())) {
    // looks like this room isn't encrypted.
    return null;
  }

  if (!client._crypto && client.usingExternalCrypto) {
    // The client has opted to allow sending messages to encrypted
    // rooms even if the room is encrypted, and we haven't setup
    // crypto. This is useful for users of matrix-org/pantalaimon
    return null;
  }

  if (event.getType() === "m.reaction") {
    // For reactions, there is a very little gained by encrypting the entire
    // event, as relation data is already kept in the clear. Event
    // encryption for a reaction effectively only obscures the event type,
    // but the purpose is still obvious from the relation data, so nothing
    // is really gained. It also causes quite a few problems, such as:
    //   * triggers notifications via default push rules
    //   * prevents server-side bundling for reactions
    // The reaction key / content / emoji value does warrant encrypting, but
    // this will be handled separately by encrypting just this value.
    // See https://github.com/matrix-org/matrix-doc/pull/1849#pullrequestreview-248763642
    return null;
  }

  if (!client._crypto) {
    throw new Error("This room is configured to use encryption, but your client does " + "not support encryption.");
  }

  return client._crypto.encryptEvent(event, room);
}
/**
 * Returns the eventType that should be used taking encryption into account
 * for a given eventType.
 * @param {MatrixClient} client the client
 * @param {string} roomId the room for the events `eventType` relates to
 * @param {string} eventType the event type
 * @return {string} the event type taking encryption into account
 */


function _getEncryptedIfNeededEventType(client, roomId, eventType) {
  if (eventType === "m.reaction") {
    return eventType;
  }

  const isEncrypted = client.isRoomEncrypted(roomId);
  return isEncrypted ? "m.room.encrypted" : eventType;
}

function _updatePendingEventStatus(room, event, newStatus) {
  if (room) {
    room.updatePendingEvent(event, newStatus);
  } else {
    event.setStatus(newStatus);
  }
}

function _sendEventHttpRequest(client, event) {
  let txnId = event.getTxnId();

  if (!txnId) {
    txnId = client.makeTxnId();
    event.setTxnId(txnId);
  }

  const pathParams = {
    $roomId: event.getRoomId(),
    $eventType: event.getWireType(),
    $stateKey: event.getStateKey(),
    $txnId: txnId
  };
  let path;

  if (event.isState()) {
    let pathTemplate = "/rooms/$roomId/state/$eventType";

    if (event.getStateKey() && event.getStateKey().length > 0) {
      pathTemplate = "/rooms/$roomId/state/$eventType/$stateKey";
    }

    path = utils.encodeUri(pathTemplate, pathParams);
  } else if (event.isRedaction()) {
    const pathTemplate = `/rooms/$roomId/redact/$redactsEventId/$txnId`;
    path = utils.encodeUri(pathTemplate, Object.assign({
      $redactsEventId: event.event.redacts
    }, pathParams));
  } else {
    path = utils.encodeUri("/rooms/$roomId/send/$eventType/$txnId", pathParams);
  }

  return client._http.authedRequest(undefined, "PUT", path, undefined, event.getWireContent()).then(res => {
    _logger.logger.log(`Event sent to ${event.getRoomId()} with event id ${res.event_id}`);

    return res;
  });
}
/**
 * @param {string} roomId
 * @param {string} eventId
 * @param {string} [txnId]  transaction id. One will be made up if not
 *    supplied.
 * @param {object|module:client.callback} callbackOrOpts
 *    Options to pass on, may contain `reason`.
 *    Can be callback for backwards compatibility.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.redactEvent = function (roomId, eventId, txnId, callbackOrOpts) {
  const opts = typeof callbackOrOpts === 'object' ? callbackOrOpts : {};
  const reason = opts.reason;
  const callback = typeof callbackOrOpts === 'function' ? callbackOrOpts : undefined;
  return this._sendCompleteEvent(roomId, {
    type: "m.room.redaction",
    content: {
      reason: reason
    },
    redacts: eventId
  }, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {Object} content
 * @param {string} txnId Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendMessage = function (roomId, content, txnId, callback) {
  if (utils.isFunction(txnId)) {
    callback = txnId;
    txnId = undefined;
  }

  return this.sendEvent(roomId, "m.room.message", content, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} txnId Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendTextMessage = function (roomId, body, txnId, callback) {
  const content = ContentHelpers.makeTextMessage(body);
  return this.sendMessage(roomId, content, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} txnId Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendNotice = function (roomId, body, txnId, callback) {
  const content = ContentHelpers.makeNotice(body);
  return this.sendMessage(roomId, content, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} txnId Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendEmoteMessage = function (roomId, body, txnId, callback) {
  const content = ContentHelpers.makeEmoteMessage(body);
  return this.sendMessage(roomId, content, txnId, callback);
};
/**
 * @param {string} roomId
 * @param {string} url
 * @param {Object} info
 * @param {string} text
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendImageMessage = function (roomId, url, info, text, callback) {
  if (utils.isFunction(text)) {
    callback = text;
    text = undefined;
  }

  if (!text) {
    text = "Image";
  }

  const content = {
    msgtype: "m.image",
    url: url,
    info: info,
    body: text
  };
  return this.sendMessage(roomId, content, callback);
};
/**
 * @param {string} roomId
 * @param {string} url
 * @param {Object} info
 * @param {string} text
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendAudioMessage = function (roomId, url, info, text, callback) {
  if (utils.isFunction(text)) {
    callback = text;
    text = undefined;
  }

  if (!text) {
    text = "Audio";
  }

  const content = {
    msgtype: "m.audio",
    url: url,
    info: info,
    body: text
  };
  return this.sendMessage(roomId, content, callback);
};
/**
 * @param {string} roomId
 * @param {string} url
 * @param {Object} info
 * @param {string} text
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendStickerMessage = function (roomId, url, info, text, callback) {
  if (utils.isFunction(text)) {
    callback = text;
    text = undefined;
  }

  if (!text) {
    text = "Sticker";
  }

  const content = {
    url: url,
    info: info,
    body: text
  };
  return this.sendEvent(roomId, "m.sticker", content, callback, undefined);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} htmlBody
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendHtmlMessage = function (roomId, body, htmlBody, callback) {
  const content = ContentHelpers.makeHtmlMessage(body, htmlBody);
  return this.sendMessage(roomId, content, callback);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} htmlBody
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendHtmlNotice = function (roomId, body, htmlBody, callback) {
  const content = ContentHelpers.makeHtmlNotice(body, htmlBody);
  return this.sendMessage(roomId, content, callback);
};
/**
 * @param {string} roomId
 * @param {string} body
 * @param {string} htmlBody
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendHtmlEmote = function (roomId, body, htmlBody, callback) {
  const content = ContentHelpers.makeHtmlEmote(body, htmlBody);
  return this.sendMessage(roomId, content, callback);
};
/**
 * Send a receipt.
 * @param {Event} event The event being acknowledged
 * @param {string} receiptType The kind of receipt e.g. "m.read"
 * @param {object} opts Additional content to send alongside the receipt.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendReceipt = function (event, receiptType, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  if (this.isGuest()) {
    return Promise.resolve({}); // guests cannot send receipts so don't bother.
  }

  const path = utils.encodeUri("/rooms/$roomId/receipt/$receiptType/$eventId", {
    $roomId: event.getRoomId(),
    $receiptType: receiptType,
    $eventId: event.getId()
  });

  const promise = this._http.authedRequest(callback, "POST", path, undefined, opts || {});

  const room = this.getRoom(event.getRoomId());

  if (room) {
    room._addLocalEchoReceipt(this.credentials.userId, event, receiptType);
  }

  return promise;
};
/**
 * Send a read receipt.
 * @param {Event} event The event that has been read.
 * @param {object} opts The options for the read receipt.
 * @param {boolean} opts.hidden True to prevent the receipt from being sent to
 * other users and homeservers. Default false (send to everyone). <b>This
 * property is unstable and may change in the future.</b>
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendReadReceipt = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator(function* (event, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    if (!opts) opts = {};
    const eventId = event.getId();
    const room = this.getRoom(event.getRoomId());

    if (room && room.hasPendingEvent(eventId)) {
      throw new Error(`Cannot set read receipt to a pending event (${eventId})`);
    }

    const addlContent = {
      "m.hidden": Boolean(opts.hidden)
    };
    return this.sendReceipt(event, "m.read", addlContent, callback);
  });

  return function (_x30, _x31, _x32) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Set a marker to indicate the point in a room before which the user has read every
 * event. This can be retrieved from room account data (the event type is `m.fully_read`)
 * and displayed as a horizontal line in the timeline that is visually distinct to the
 * position of the user's own read receipt.
 * @param {string} roomId ID of the room that has been read
 * @param {string} rmEventId ID of the event that has been read
 * @param {string} rrEvent the event tracked by the read receipt. This is here for
 * convenience because the RR and the RM are commonly updated at the same time as each
 * other. The local echo of this receipt will be done if set. Optional.
 * @param {object} opts Options for the read markers
 * @param {object} opts.hidden True to hide the receipt from other users and homeservers.
 * <b>This property is unstable and may change in the future.</b>
 * @return {Promise} Resolves: the empty object, {}.
 */


MatrixClient.prototype.setRoomReadMarkers = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator(function* (roomId, rmEventId, rrEvent, opts) {
    const room = this.getRoom(roomId);

    if (room && room.hasPendingEvent(rmEventId)) {
      throw new Error(`Cannot set read marker to a pending event (${rmEventId})`);
    } // Add the optional RR update, do local echo like `sendReceipt`


    let rrEventId;

    if (rrEvent) {
      rrEventId = rrEvent.getId();

      if (room && room.hasPendingEvent(rrEventId)) {
        throw new Error(`Cannot set read receipt to a pending event (${rrEventId})`);
      }

      if (room) {
        room._addLocalEchoReceipt(this.credentials.userId, rrEvent, "m.read");
      }
    }

    return this.setRoomReadMarkersHttpRequest(roomId, rmEventId, rrEventId, opts);
  });

  return function (_x33, _x34, _x35, _x36) {
    return _ref20.apply(this, arguments);
  };
}();
/**
 * Get a preview of the given URL as of (roughly) the given point in time,
 * described as an object with OpenGraph keys and associated values.
 * Attributes may be synthesized where actual OG metadata is lacking.
 * Caches results to prevent hammering the server.
 * @param {string} url The URL to get preview data for
 * @param {Number} ts The preferred point in time that the preview should
 * describe (ms since epoch).  The preview returned will either be the most
 * recent one preceding this timestamp if available, or failing that the next
 * most recent available preview.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Object of OG metadata.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 * May return synthesized attributes if the URL lacked OG meta.
 */


MatrixClient.prototype.getUrlPreview = function (url, ts, callback) {
  // bucket the timestamp to the nearest minute to prevent excessive spam to the server
  // Surely 60-second accuracy is enough for anyone.
  ts = Math.floor(ts / 60000) * 60000;
  const key = ts + "_" + url; // If there's already a request in flight (or we've handled it), return that instead.

  const cachedPreview = this.urlPreviewCache[key];

  if (cachedPreview) {
    if (callback) {
      cachedPreview.then(callback).catch(callback);
    }

    return cachedPreview;
  }

  const resp = this._http.authedRequest(callback, "GET", "/preview_url", {
    url: url,
    ts: ts
  }, undefined, {
    prefix: _httpApi.PREFIX_MEDIA_R0
  }); // TODO: Expire the URL preview cache sometimes


  this.urlPreviewCache[key] = resp;
  return resp;
};
/**
 * @param {string} roomId
 * @param {boolean} isTyping
 * @param {Number} timeoutMs
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.sendTyping = function (roomId, isTyping, timeoutMs, callback) {
  if (this.isGuest()) {
    return Promise.resolve({}); // guests cannot send typing notifications so don't bother.
  }

  const path = utils.encodeUri("/rooms/$roomId/typing/$userId", {
    $roomId: roomId,
    $userId: this.credentials.userId
  });
  const data = {
    typing: isTyping
  };

  if (isTyping) {
    data.timeout = timeoutMs ? timeoutMs : 20000;
  }

  return this._http.authedRequest(callback, "PUT", path, undefined, data);
};
/**
 * Determines the history of room upgrades for a given room, as far as the
 * client can see. Returns an array of Rooms where the first entry is the
 * oldest and the last entry is the newest (likely current) room. If the
 * provided room is not found, this returns an empty list. This works in
 * both directions, looking for older and newer rooms of the given room.
 * @param {string} roomId The room ID to search from
 * @param {boolean} verifyLinks If true, the function will only return rooms
 * which can be proven to be linked. For example, rooms which have a create
 * event pointing to an old room which the client is not aware of or doesn't
 * have a matching tombstone would not be returned.
 * @return {Room[]} An array of rooms representing the upgrade
 * history.
 */


MatrixClient.prototype.getRoomUpgradeHistory = function (roomId) {
  let verifyLinks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  let currentRoom = this.getRoom(roomId);
  if (!currentRoom) return [];
  const upgradeHistory = [currentRoom]; // Work backwards first, looking at create events.

  let createEvent = currentRoom.currentState.getStateEvents("m.room.create", "");

  while (createEvent) {
    _logger.logger.log(`Looking at ${createEvent.getId()}`);

    const predecessor = createEvent.getContent()['predecessor'];

    if (predecessor && predecessor['room_id']) {
      _logger.logger.log(`Looking at predecessor ${predecessor['room_id']}`);

      const refRoom = this.getRoom(predecessor['room_id']);
      if (!refRoom) break; // end of the chain

      if (verifyLinks) {
        const tombstone = refRoom.currentState.getStateEvents("m.room.tombstone", "");

        if (!tombstone || tombstone.getContent()['replacement_room'] !== refRoom.roomId) {
          break;
        }
      } // Insert at the front because we're working backwards from the currentRoom


      upgradeHistory.splice(0, 0, refRoom);
      createEvent = refRoom.currentState.getStateEvents("m.room.create", "");
    } else {
      // No further create events to look at
      break;
    }
  } // Work forwards next, looking at tombstone events


  let tombstoneEvent = currentRoom.currentState.getStateEvents("m.room.tombstone", "");

  while (tombstoneEvent) {
    const refRoom = this.getRoom(tombstoneEvent.getContent()['replacement_room']);
    if (!refRoom) break; // end of the chain

    if (refRoom.roomId === currentRoom.roomId) break; // Tombstone is referencing it's own room

    if (verifyLinks) {
      createEvent = refRoom.currentState.getStateEvents("m.room.create", "");
      if (!createEvent || !createEvent.getContent()['predecessor']) break;
      const predecessor = createEvent.getContent()['predecessor'];
      if (predecessor['room_id'] !== currentRoom.roomId) break;
    } // Push to the end because we're looking forwards


    upgradeHistory.push(refRoom);
    const roomIds = new Set(upgradeHistory.map(ref => ref.roomId));

    if (roomIds.size < upgradeHistory.length) {
      // The last room added to the list introduced a previous roomId
      // To avoid recursion, return the last rooms - 1
      return upgradeHistory.slice(0, upgradeHistory.length - 1);
    } // Set the current room to the reference room so we know where we're at


    currentRoom = refRoom;
    tombstoneEvent = currentRoom.currentState.getStateEvents("m.room.tombstone", "");
  }

  return upgradeHistory;
};
/**
 * @param {string} roomId
 * @param {string} userId
 * @param {module:client.callback} callback Optional.
 * @param {string} reason Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.invite = function (roomId, userId, callback, reason) {
  return _membershipChange(this, roomId, userId, "invite", reason, callback);
};
/**
 * Invite a user to a room based on their email address.
 * @param {string} roomId The room to invite the user to.
 * @param {string} email The email address to invite.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.inviteByEmail = function (roomId, email, callback) {
  return this.inviteByThreePid(roomId, "email", email, callback);
};
/**
 * Invite a user to a room based on a third-party identifier.
 * @param {string} roomId The room to invite the user to.
 * @param {string} medium The medium to invite the user e.g. "email".
 * @param {string} address The address for the specified medium.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.inviteByThreePid = /*#__PURE__*/function () {
  var _ref21 = _asyncToGenerator(function* (roomId, medium, address, callback) {
    const path = utils.encodeUri("/rooms/$roomId/invite", {
      $roomId: roomId
    });
    const identityServerUrl = this.getIdentityServerUrl(true);

    if (!identityServerUrl) {
      return Promise.reject(new _httpApi.MatrixError({
        error: "No supplied identity server URL",
        errcode: "ORG.MATRIX.JSSDK_MISSING_PARAM"
      }));
    }

    const params = {
      id_server: identityServerUrl,
      medium: medium,
      address: address
    };

    if (this.identityServer && this.identityServer.getAccessToken && (yield this.doesServerAcceptIdentityAccessToken())) {
      const identityAccessToken = yield this.identityServer.getAccessToken();

      if (identityAccessToken) {
        params.id_access_token = identityAccessToken;
      }
    }

    return this._http.authedRequest(callback, "POST", path, undefined, params);
  });

  return function (_x37, _x38, _x39, _x40) {
    return _ref21.apply(this, arguments);
  };
}();
/**
 * @param {string} roomId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.leave = function (roomId, callback) {
  return _membershipChange(this, roomId, undefined, "leave", undefined, callback);
};
/**
 * Leaves all rooms in the chain of room upgrades based on the given room. By
 * default, this will leave all the previous and upgraded rooms, including the
 * given room. To only leave the given room and any previous rooms, keeping the
 * upgraded (modern) rooms untouched supply `false` to `includeFuture`.
 * @param {string} roomId The room ID to start leaving at
 * @param {boolean} includeFuture If true, the whole chain (past and future) of
 * upgraded rooms will be left.
 * @return {Promise} Resolves when completed with an object keyed
 * by room ID and value of the error encountered when leaving or null.
 */


MatrixClient.prototype.leaveRoomChain = function (roomId) {
  let includeFuture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  const upgradeHistory = this.getRoomUpgradeHistory(roomId);
  let eligibleToLeave = upgradeHistory;

  if (!includeFuture) {
    eligibleToLeave = [];

    for (const room of upgradeHistory) {
      eligibleToLeave.push(room);

      if (room.roomId === roomId) {
        break;
      }
    }
  }

  const populationResults = {}; // {roomId: Error}

  const promises = [];

  const doLeave = roomId => {
    return this.leave(roomId).then(() => {
      populationResults[roomId] = null;
    }).catch(err => {
      populationResults[roomId] = err;
      return null; // suppress error
    });
  };

  for (const room of eligibleToLeave) {
    promises.push(doLeave(room.roomId));
  }

  return Promise.all(promises).then(() => populationResults);
};
/**
 * @param {string} roomId
 * @param {string} userId
 * @param {string} reason Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.ban = function (roomId, userId, reason, callback) {
  return _membershipChange(this, roomId, userId, "ban", reason, callback);
};
/**
 * @param {string} roomId
 * @param {boolean} deleteRoom True to delete the room from the store on success.
 * Default: true.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.forget = function (roomId, deleteRoom, callback) {
  if (deleteRoom === undefined) {
    deleteRoom = true;
  }

  const promise = _membershipChange(this, roomId, undefined, "forget", undefined, callback);

  if (!deleteRoom) {
    return promise;
  }

  const self = this;
  return promise.then(function (response) {
    self.store.removeRoom(roomId);
    self.emit("deleteRoom", roomId);
    return response;
  });
};
/**
 * @param {string} roomId
 * @param {string} userId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Object (currently empty)
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.unban = function (roomId, userId, callback) {
  // unbanning != set their state to leave: this used to be
  // the case, but was then changed so that leaving was always
  // a revoking of priviledge, otherwise two people racing to
  // kick / ban someone could end up banning and then un-banning
  // them.
  const path = utils.encodeUri("/rooms/$roomId/unban", {
    $roomId: roomId
  });
  const data = {
    user_id: userId
  };
  return this._http.authedRequest(callback, "POST", path, undefined, data);
};
/**
 * @param {string} roomId
 * @param {string} userId
 * @param {string} reason Optional.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.kick = function (roomId, userId, reason, callback) {
  return _setMembershipState(this, roomId, userId, "leave", reason, callback);
};
/**
 * This is an internal method.
 * @param {MatrixClient} client
 * @param {string} roomId
 * @param {string} userId
 * @param {string} membershipValue
 * @param {string} reason
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


function _setMembershipState(client, roomId, userId, membershipValue, reason, callback) {
  if (utils.isFunction(reason)) {
    callback = reason;
    reason = undefined;
  }

  const path = utils.encodeUri("/rooms/$roomId/state/m.room.member/$userId", {
    $roomId: roomId,
    $userId: userId
  });
  return client._http.authedRequest(callback, "PUT", path, undefined, {
    membership: membershipValue,
    reason: reason
  });
}
/**
 * This is an internal method.
 * @param {MatrixClient} client
 * @param {string} roomId
 * @param {string} userId
 * @param {string} membership
 * @param {string} reason
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


function _membershipChange(client, roomId, userId, membership, reason, callback) {
  if (utils.isFunction(reason)) {
    callback = reason;
    reason = undefined;
  }

  const path = utils.encodeUri("/rooms/$room_id/$membership", {
    $room_id: roomId,
    $membership: membership
  });
  return client._http.authedRequest(callback, "POST", path, undefined, {
    user_id: userId,
    // may be undefined e.g. on leave
    reason: reason
  });
}
/**
 * Obtain a dict of actions which should be performed for this event according
 * to the push rules for this user.  Caches the dict on the event.
 * @param {MatrixEvent} event The event to get push actions for.
 * @return {module:pushprocessor~PushAction} A dict of actions to perform.
 */


MatrixClient.prototype.getPushActionsForEvent = function (event) {
  if (!event.getPushActions()) {
    event.setPushActions(this._pushProcessor.actionsForEvent(event));
  }

  return event.getPushActions();
}; // Profile operations
// ==================

/**
 * @param {string} info The kind of info to set (e.g. 'avatar_url')
 * @param {Object} data The JSON object to set.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setProfileInfo = function (info, data, callback) {
  const path = utils.encodeUri("/profile/$userId/$info", {
    $userId: this.credentials.userId,
    $info: info
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, data);
};
/**
 * @param {string} name
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: {} an empty object.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setDisplayName = /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator(function* (name, callback) {
    const prom = yield this.setProfileInfo("displayname", {
      displayname: name
    }, callback); // XXX: synthesise a profile update for ourselves because Synapse is broken and won't

    const user = this.getUser(this.getUserId());

    if (user) {
      user.displayName = name;
      user.emit("User.displayName", user.events.presence, user);
    }

    return prom;
  });

  return function (_x41, _x42) {
    return _ref22.apply(this, arguments);
  };
}();
/**
 * @param {string} url
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: {} an empty object.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setAvatarUrl = /*#__PURE__*/function () {
  var _ref23 = _asyncToGenerator(function* (url, callback) {
    const prom = yield this.setProfileInfo("avatar_url", {
      avatar_url: url
    }, callback); // XXX: synthesise a profile update for ourselves because Synapse is broken and won't

    const user = this.getUser(this.getUserId());

    if (user) {
      user.avatarUrl = url;
      user.emit("User.avatarUrl", user.events.presence, user);
    }

    return prom;
  });

  return function (_x43, _x44) {
    return _ref23.apply(this, arguments);
  };
}();
/**
 * Turn an MXC URL into an HTTP one. <strong>This method is experimental and
 * may change.</strong>
 * @param {string} mxcUrl The MXC URL
 * @param {Number} width The desired width of the thumbnail.
 * @param {Number} height The desired height of the thumbnail.
 * @param {string} resizeMethod The thumbnail resize method to use, either
 * "crop" or "scale".
 * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs
 * directly. Fetching such URLs will leak information about the user to
 * anyone they share a room with. If false, will return null for such URLs.
 * @return {?string} the avatar URL or null.
 */


MatrixClient.prototype.mxcUrlToHttp = function (mxcUrl, width, height, resizeMethod, allowDirectLinks) {
  return (0, _contentRepo.getHttpUriForMxc)(this.baseUrl, mxcUrl, width, height, resizeMethod, allowDirectLinks);
};
/**
 * Sets a new status message for the user. The message may be null/falsey
 * to clear the message.
 * @param {string} newMessage The new message to set.
 * @return {Promise} Resolves: to nothing
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype._unstable_setStatusMessage = function (newMessage) {
  const type = "im.vector.user_status";
  return Promise.all(this.getRooms().map(room => {
    const isJoined = room.getMyMembership() === "join";
    const looksLikeDm = room.getInvitedAndJoinedMemberCount() === 2;

    if (!isJoined || !looksLikeDm) {
      return Promise.resolve();
    } // Check power level separately as it's a bit more expensive.


    const maySend = room.currentState.mayClientSendStateEvent(type, this);

    if (!maySend) {
      return Promise.resolve();
    }

    return this.sendStateEvent(room.roomId, type, {
      status: newMessage
    }, this.getUserId());
  }));
};
/**
 * @param {Object} opts Options to apply
 * @param {string} opts.presence One of "online", "offline" or "unavailable"
 * @param {string} opts.status_msg The status message to attach.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 * @throws If 'presence' isn't a valid presence enum value.
 */


MatrixClient.prototype.setPresence = function (opts, callback) {
  const path = utils.encodeUri("/presence/$userId/status", {
    $userId: this.credentials.userId
  });

  if (typeof opts === "string") {
    opts = {
      presence: opts
    };
  }

  const validStates = ["offline", "online", "unavailable"];

  if (validStates.indexOf(opts.presence) == -1) {
    throw new Error("Bad presence value: " + opts.presence);
  }

  return this._http.authedRequest(callback, "PUT", path, undefined, opts);
};
/**
 * @param {string} userId The user to get presence for
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: The presence state for this user.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getPresence = function (userId, callback) {
  const path = utils.encodeUri("/presence/$userId/status", {
    $userId: userId
  });
  return this._http.authedRequest(callback, "GET", path, undefined, undefined);
};
/**
 * Retrieve older messages from the given room and put them in the timeline.
 *
 * If this is called multiple times whilst a request is ongoing, the <i>same</i>
 * Promise will be returned. If there was a problem requesting scrollback, there
 * will be a small delay before another request can be made (to prevent tight-looping
 * when there is no connection).
 *
 * @param {Room} room The room to get older messages in.
 * @param {Integer} limit Optional. The maximum number of previous events to
 * pull in. Default: 30.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Room. If you are at the beginning
 * of the timeline, <code>Room.oldState.paginationToken</code> will be
 * <code>null</code>.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.scrollback = function (room, limit, callback) {
  if (utils.isFunction(limit)) {
    callback = limit;
    limit = undefined;
  }

  limit = limit || 30;
  let timeToWaitMs = 0;
  let info = this._ongoingScrollbacks[room.roomId] || {};

  if (info.promise) {
    return info.promise;
  } else if (info.errorTs) {
    const timeWaitedMs = Date.now() - info.errorTs;
    timeToWaitMs = Math.max(SCROLLBACK_DELAY_MS - timeWaitedMs, 0);
  }

  if (room.oldState.paginationToken === null) {
    return Promise.resolve(room); // already at the start.
  } // attempt to grab more events from the store first


  const numAdded = this.store.scrollback(room, limit).length;

  if (numAdded === limit) {
    // store contained everything we needed.
    return Promise.resolve(room);
  } // reduce the required number of events appropriately


  limit = limit - numAdded;
  const self = this;
  const prom = new Promise((resolve, reject) => {
    // wait for a time before doing this request
    // (which may be 0 in order not to special case the code paths)
    (0, utils.sleep)(timeToWaitMs).then(function () {
      return self._createMessagesRequest(room.roomId, room.oldState.paginationToken, limit, 'b');
    }).then(function (res) {
      const matrixEvents = utils.map(res.chunk, _PojoToMatrixEventMapper(self));

      if (res.state) {
        const stateEvents = utils.map(res.state, _PojoToMatrixEventMapper(self));
        room.currentState.setUnknownStateEvents(stateEvents);
      }

      room.addEventsToTimeline(matrixEvents, true, room.getLiveTimeline());
      room.oldState.paginationToken = res.end;

      if (res.chunk.length === 0) {
        room.oldState.paginationToken = null;
      }

      self.store.storeEvents(room, matrixEvents, res.end, true);
      self._ongoingScrollbacks[room.roomId] = null;

      _resolve(callback, resolve, room);
    }, function (err) {
      self._ongoingScrollbacks[room.roomId] = {
        errorTs: Date.now()
      };

      _reject(callback, reject, err);
    });
  });
  info = {
    promise: prom,
    errorTs: null
  };
  this._ongoingScrollbacks[room.roomId] = info;
  return prom;
};
/**
 * Get an EventTimeline for the given event
 *
 * <p>If the EventTimelineSet object already has the given event in its store, the
 * corresponding timeline will be returned. Otherwise, a /context request is
 * made, and used to construct an EventTimeline.
 *
 * @param {EventTimelineSet} timelineSet  The timelineSet to look for the event in
 * @param {string} eventId  The ID of the event to look for
 *
 * @return {Promise} Resolves:
 *    {@link module:models/event-timeline~EventTimeline} including the given
 *    event
 */


MatrixClient.prototype.getEventTimeline = function (timelineSet, eventId) {
  // don't allow any timeline support unless it's been enabled.
  if (!this.timelineSupport) {
    throw new Error("timeline support is disabled. Set the 'timelineSupport'" + " parameter to true when creating MatrixClient to enable" + " it.");
  }

  if (timelineSet.getTimelineForEvent(eventId)) {
    return Promise.resolve(timelineSet.getTimelineForEvent(eventId));
  }

  const path = utils.encodeUri("/rooms/$roomId/context/$eventId", {
    $roomId: timelineSet.room.roomId,
    $eventId: eventId
  });
  let params = undefined;

  if (this._clientOpts.lazyLoadMembers) {
    params = {
      filter: JSON.stringify(_filter.Filter.LAZY_LOADING_MESSAGES_FILTER)
    };
  } // TODO: we should implement a backoff (as per scrollback()) to deal more
  // nicely with HTTP errors.


  const self = this;

  const promise = self._http.authedRequest(undefined, "GET", path, params).then(function (res) {
    if (!res.event) {
      throw new Error("'event' not in '/context' result - homeserver too old?");
    } // by the time the request completes, the event might have ended up in
    // the timeline.


    if (timelineSet.getTimelineForEvent(eventId)) {
      return timelineSet.getTimelineForEvent(eventId);
    } // we start with the last event, since that's the point at which we
    // have known state.
    // events_after is already backwards; events_before is forwards.


    res.events_after.reverse();
    const events = res.events_after.concat([res.event]).concat(res.events_before);
    const matrixEvents = utils.map(events, self.getEventMapper());
    let timeline = timelineSet.getTimelineForEvent(matrixEvents[0].getId());

    if (!timeline) {
      timeline = timelineSet.addTimeline();
      timeline.initialiseState(utils.map(res.state, self.getEventMapper()));
      timeline.getState(_eventTimeline.EventTimeline.FORWARDS).paginationToken = res.end;
    } else {
      const stateEvents = utils.map(res.state, self.getEventMapper());
      timeline.getState(_eventTimeline.EventTimeline.BACKWARDS).setUnknownStateEvents(stateEvents);
    }

    timelineSet.addEventsToTimeline(matrixEvents, true, timeline, res.start); // there is no guarantee that the event ended up in "timeline" (we
    // might have switched to a neighbouring timeline) - so check the
    // room's index again. On the other hand, there's no guarantee the
    // event ended up anywhere, if it was later redacted, so we just
    // return the timeline we first thought of.

    const tl = timelineSet.getTimelineForEvent(eventId) || timeline;
    return tl;
  });

  return promise;
};
/**
 * Makes a request to /messages with the appropriate lazy loading filter set.
 * XXX: if we do get rid of scrollback (as it's not used at the moment),
 * we could inline this method again in paginateEventTimeline as that would
 * then be the only call-site
 * @param {string} roomId
 * @param {string} fromToken
 * @param {number} limit the maximum amount of events the retrieve
 * @param {string} dir 'f' or 'b'
 * @param {Filter} timelineFilter the timeline filter to pass
 * @return {Promise}
 */


MatrixClient.prototype._createMessagesRequest = function (roomId, fromToken, limit, dir) {
  let timelineFilter = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  const path = utils.encodeUri("/rooms/$roomId/messages", {
    $roomId: roomId
  });

  if (limit === undefined) {
    limit = 30;
  }

  const params = {
    from: fromToken,
    limit: limit,
    dir: dir
  };
  let filter = null;

  if (this._clientOpts.lazyLoadMembers) {
    // create a shallow copy of LAZY_LOADING_MESSAGES_FILTER,
    // so the timelineFilter doesn't get written into it below
    filter = Object.assign({}, _filter.Filter.LAZY_LOADING_MESSAGES_FILTER);
  }

  if (timelineFilter) {
    // XXX: it's horrific that /messages' filter parameter doesn't match
    // /sync's one - see https://matrix.org/jira/browse/SPEC-451
    filter = filter || {};
    Object.assign(filter, timelineFilter.getRoomTimelineFilterComponent());
  }

  if (filter) {
    params.filter = JSON.stringify(filter);
  }

  return this._http.authedRequest(undefined, "GET", path, params);
};
/**
 * Take an EventTimeline, and back/forward-fill results.
 *
 * @param {module:models/event-timeline~EventTimeline} eventTimeline timeline
 *    object to be updated
 * @param {Object}   [opts]
 * @param {bool}     [opts.backwards = false]  true to fill backwards,
 *    false to go forwards
 * @param {number}   [opts.limit = 30]         number of events to request
 *
 * @return {Promise} Resolves to a boolean: false if there are no
 *    events and we reached either end of the timeline; else true.
 */


MatrixClient.prototype.paginateEventTimeline = function (eventTimeline, opts) {
  const isNotifTimeline = eventTimeline.getTimelineSet() === this._notifTimelineSet; // TODO: we should implement a backoff (as per scrollback()) to deal more
  // nicely with HTTP errors.


  opts = opts || {};
  const backwards = opts.backwards || false;

  if (isNotifTimeline) {
    if (!backwards) {
      throw new Error("paginateNotifTimeline can only paginate backwards");
    }
  }

  const dir = backwards ? _eventTimeline.EventTimeline.BACKWARDS : _eventTimeline.EventTimeline.FORWARDS;
  const token = eventTimeline.getPaginationToken(dir);

  if (!token) {
    // no token - no results.
    return Promise.resolve(false);
  }

  const pendingRequest = eventTimeline._paginationRequests[dir];

  if (pendingRequest) {
    // already a request in progress - return the existing promise
    return pendingRequest;
  }

  let path;
  let params;
  let promise;
  const self = this;

  if (isNotifTimeline) {
    path = "/notifications";
    params = {
      limit: 'limit' in opts ? opts.limit : 30,
      only: 'highlight'
    };

    if (token && token !== "end") {
      params.from = token;
    }

    promise = this._http.authedRequest(undefined, "GET", path, params, undefined).then(function (res) {
      const token = res.next_token;
      const matrixEvents = [];

      for (let i = 0; i < res.notifications.length; i++) {
        const notification = res.notifications[i];
        const event = self.getEventMapper()(notification.event);
        event.setPushActions(_pushprocessor.PushProcessor.actionListToActionsObject(notification.actions));
        event.event.room_id = notification.room_id; // XXX: gutwrenching

        matrixEvents[i] = event;
      }

      eventTimeline.getTimelineSet().addEventsToTimeline(matrixEvents, backwards, eventTimeline, token); // if we've hit the end of the timeline, we need to stop trying to
      // paginate. We need to keep the 'forwards' token though, to make sure
      // we can recover from gappy syncs.

      if (backwards && !res.next_token) {
        eventTimeline.setPaginationToken(null, dir);
      }

      return res.next_token ? true : false;
    }).finally(function () {
      eventTimeline._paginationRequests[dir] = null;
    });
    eventTimeline._paginationRequests[dir] = promise;
  } else {
    const room = this.getRoom(eventTimeline.getRoomId());

    if (!room) {
      throw new Error("Unknown room " + eventTimeline.getRoomId());
    }

    promise = this._createMessagesRequest(eventTimeline.getRoomId(), token, opts.limit, dir, eventTimeline.getFilter());
    promise.then(function (res) {
      if (res.state) {
        const roomState = eventTimeline.getState(dir);
        const stateEvents = utils.map(res.state, self.getEventMapper());
        roomState.setUnknownStateEvents(stateEvents);
      }

      const token = res.end;
      const matrixEvents = utils.map(res.chunk, self.getEventMapper());
      eventTimeline.getTimelineSet().addEventsToTimeline(matrixEvents, backwards, eventTimeline, token); // if we've hit the end of the timeline, we need to stop trying to
      // paginate. We need to keep the 'forwards' token though, to make sure
      // we can recover from gappy syncs.

      if (backwards && res.end == res.start) {
        eventTimeline.setPaginationToken(null, dir);
      }

      return res.end != res.start;
    }).finally(function () {
      eventTimeline._paginationRequests[dir] = null;
    });
    eventTimeline._paginationRequests[dir] = promise;
  }

  return promise;
};
/**
 * Reset the notifTimelineSet entirely, paginating in some historical notifs as
 * a starting point for subsequent pagination.
 */


MatrixClient.prototype.resetNotifTimelineSet = function () {
  if (!this._notifTimelineSet) {
    return;
  } // FIXME: This thing is a total hack, and results in duplicate events being
  // added to the timeline both from /sync and /notifications, and lots of
  // slow and wasteful processing and pagination.  The correct solution is to
  // extend /messages or /search or something to filter on notifications.
  // use the fictitious token 'end'. in practice we would ideally give it
  // the oldest backwards pagination token from /sync, but /sync doesn't
  // know about /notifications, so we have no choice but to start paginating
  // from the current point in time.  This may well overlap with historical
  // notifs which are then inserted into the timeline by /sync responses.


  this._notifTimelineSet.resetLiveTimeline('end', null); // we could try to paginate a single event at this point in order to get
  // a more valid pagination token, but it just ends up with an out of order
  // timeline. given what a mess this is and given we're going to have duplicate
  // events anyway, just leave it with the dummy token for now.

  /*
  this.paginateNotifTimeline(this._notifTimelineSet.getLiveTimeline(), {
      backwards: true,
      limit: 1
  });
  */

};
/**
 * Peek into a room and receive updates about the room. This only works if the
 * history visibility for the room is world_readable.
 * @param {String} roomId The room to attempt to peek into.
 * @return {Promise} Resolves: Room object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.peekInRoom = function (roomId) {
  if (this._peekSync) {
    this._peekSync.stopPeeking();
  }

  this._peekSync = new _sync.SyncApi(this, this._clientOpts);
  return this._peekSync.peek(roomId);
};
/**
 * Stop any ongoing room peeking.
 */


MatrixClient.prototype.stopPeeking = function () {
  if (this._peekSync) {
    this._peekSync.stopPeeking();

    this._peekSync = null;
  }
};
/**
 * Set r/w flags for guest access in a room.
 * @param {string} roomId The room to configure guest access in.
 * @param {Object} opts Options
 * @param {boolean} opts.allowJoin True to allow guests to join this room. This
 * implicitly gives guests write access. If false or not given, guests are
 * explicitly forbidden from joining the room.
 * @param {boolean} opts.allowRead True to set history visibility to
 * be world_readable. This gives guests read access *from this point forward*.
 * If false or not given, history visibility is not modified.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setGuestAccess = function (roomId, opts) {
  const writePromise = this.sendStateEvent(roomId, "m.room.guest_access", {
    guest_access: opts.allowJoin ? "can_join" : "forbidden"
  });
  let readPromise = Promise.resolve();

  if (opts.allowRead) {
    readPromise = this.sendStateEvent(roomId, "m.room.history_visibility", {
      history_visibility: "world_readable"
    });
  }

  return Promise.all([readPromise, writePromise]);
}; // Registration/Login operations
// =============================

/**
 * Requests an email verification token for the purposes of registration.
 * This API requests a token from the homeserver.
 * The doesServerRequireIdServerParam() method can be used to determine if
 * the server requires the id_server parameter to be provided.
 *
 * Parameters and return value are as for requestEmailToken

 * @param {string} email As requestEmailToken
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestRegisterEmailToken = function (email, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/register/email/requestToken", {
    email: email,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Requests a text message verification token for the purposes of registration.
 * This API requests a token from the homeserver.
 * The doesServerRequireIdServerParam() method can be used to determine if
 * the server requires the id_server parameter to be provided.
 *
 * @param {string} phoneCountry The ISO 3166-1 alpha-2 code for the country in which
 *    phoneNumber should be parsed relative to.
 * @param {string} phoneNumber The phone number, in national or international format
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestRegisterMsisdnToken = function (phoneCountry, phoneNumber, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/register/msisdn/requestToken", {
    country: phoneCountry,
    phone_number: phoneNumber,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Requests an email verification token for the purposes of adding a
 * third party identifier to an account.
 * This API requests a token from the homeserver.
 * The doesServerRequireIdServerParam() method can be used to determine if
 * the server requires the id_server parameter to be provided.
 * If an account with the given email address already exists and is
 * associated with an account other than the one the user is authed as,
 * it will either send an email to the address informing them of this
 * or return M_THREEPID_IN_USE (which one is up to the Home Server).
 *
 * @param {string} email As requestEmailToken
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestAdd3pidEmailToken = function (email, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/account/3pid/email/requestToken", {
    email: email,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Requests a text message verification token for the purposes of adding a
 * third party identifier to an account.
 * This API proxies the Identity Server /validate/email/requestToken API,
 * adding specific behaviour for the addition of phone numbers to an
 * account, as requestAdd3pidEmailToken.
 *
 * @param {string} phoneCountry As requestRegisterMsisdnToken
 * @param {string} phoneNumber As requestRegisterMsisdnToken
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestAdd3pidMsisdnToken = function (phoneCountry, phoneNumber, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/account/3pid/msisdn/requestToken", {
    country: phoneCountry,
    phone_number: phoneNumber,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Requests an email verification token for the purposes of resetting
 * the password on an account.
 * This API proxies the Identity Server /validate/email/requestToken API,
 * adding specific behaviour for the password resetting. Specifically,
 * if no account with the given email address exists, it may either
 * return M_THREEPID_NOT_FOUND or send an email
 * to the address informing them of this (which one is up to the Home Server).
 *
 * requestEmailToken calls the equivalent API directly on the ID server,
 * therefore bypassing the password reset specific logic.
 *
 * @param {string} email As requestEmailToken
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @param {module:client.callback} callback Optional. As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestPasswordEmailToken = function (email, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/account/password/email/requestToken", {
    email: email,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Requests a text message verification token for the purposes of resetting
 * the password on an account.
 * This API proxies the Identity Server /validate/email/requestToken API,
 * adding specific behaviour for the password resetting, as requestPasswordEmailToken.
 *
 * @param {string} phoneCountry As requestRegisterMsisdnToken
 * @param {string} phoneNumber As requestRegisterMsisdnToken
 * @param {string} clientSecret As requestEmailToken
 * @param {number} sendAttempt As requestEmailToken
 * @param {string} nextLink As requestEmailToken
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype.requestPasswordMsisdnToken = function (phoneCountry, phoneNumber, clientSecret, sendAttempt, nextLink) {
  return this._requestTokenFromEndpoint("/account/password/msisdn/requestToken", {
    country: phoneCountry,
    phone_number: phoneNumber,
    client_secret: clientSecret,
    send_attempt: sendAttempt,
    next_link: nextLink
  });
};
/**
 * Internal utility function for requesting validation tokens from usage-specific
 * requestToken endpoints.
 *
 * @param {string} endpoint The endpoint to send the request to
 * @param {object} params Parameters for the POST request
 * @return {Promise} Resolves: As requestEmailToken
 */


MatrixClient.prototype._requestTokenFromEndpoint = /*#__PURE__*/function () {
  var _ref24 = _asyncToGenerator(function* (endpoint, params) {
    const postParams = Object.assign({}, params); // If the HS supports separate add and bind, then requestToken endpoints
    // don't need an IS as they are all validated by the HS directly.

    if (!(yield this.doesServerSupportSeparateAddAndBind()) && this.idBaseUrl) {
      const idServerUrl = _url.default.parse(this.idBaseUrl);

      if (!idServerUrl.host) {
        throw new Error("Invalid ID server URL: " + this.idBaseUrl);
      }

      postParams.id_server = idServerUrl.host;

      if (this.identityServer && this.identityServer.getAccessToken && (yield this.doesServerAcceptIdentityAccessToken())) {
        const identityAccessToken = yield this.identityServer.getAccessToken();

        if (identityAccessToken) {
          postParams.id_access_token = identityAccessToken;
        }
      }
    }

    return this._http.request(undefined, "POST", endpoint, undefined, postParams);
  });

  return function (_x45, _x46) {
    return _ref24.apply(this, arguments);
  };
}(); // Push operations
// ===============

/**
 * Get the room-kind push rule associated with a room.
 * @param {string} scope "global" or device-specific.
 * @param {string} roomId the id of the room.
 * @return {object} the rule or undefined.
 */


MatrixClient.prototype.getRoomPushRule = function (scope, roomId) {
  // There can be only room-kind push rule per room
  // and its id is the room id.
  if (this.pushRules) {
    for (let i = 0; i < this.pushRules[scope].room.length; i++) {
      const rule = this.pushRules[scope].room[i];

      if (rule.rule_id === roomId) {
        return rule;
      }
    }
  } else {
    throw new Error("SyncApi.sync() must be done before accessing to push rules.");
  }
};
/**
 * Set a room-kind muting push rule in a room.
 * The operation also updates MatrixClient.pushRules at the end.
 * @param {string} scope "global" or device-specific.
 * @param {string} roomId the id of the room.
 * @param {string} mute the mute state.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.setRoomMutePushRule = function (scope, roomId, mute) {
  const self = this;
  let deferred;
  let hasDontNotifyRule; // Get the existing room-kind push rule if any

  const roomPushRule = this.getRoomPushRule(scope, roomId);

  if (roomPushRule) {
    if (0 <= roomPushRule.actions.indexOf("dont_notify")) {
      hasDontNotifyRule = true;
    }
  }

  if (!mute) {
    // Remove the rule only if it is a muting rule
    if (hasDontNotifyRule) {
      deferred = this.deletePushRule(scope, "room", roomPushRule.rule_id);
    }
  } else {
    if (!roomPushRule) {
      deferred = this.addPushRule(scope, "room", roomId, {
        actions: ["dont_notify"]
      });
    } else if (!hasDontNotifyRule) {
      // Remove the existing one before setting the mute push rule
      // This is a workaround to SYN-590 (Push rule update fails)
      deferred = utils.defer();
      this.deletePushRule(scope, "room", roomPushRule.rule_id).then(function () {
        self.addPushRule(scope, "room", roomId, {
          actions: ["dont_notify"]
        }).then(function () {
          deferred.resolve();
        }, function (err) {
          deferred.reject(err);
        });
      }, function (err) {
        deferred.reject(err);
      });
      deferred = deferred.promise;
    }
  }

  if (deferred) {
    return new Promise((resolve, reject) => {
      // Update this.pushRules when the operation completes
      deferred.then(function () {
        self.getPushRules().then(function (result) {
          self.pushRules = result;
          resolve();
        }, function (err) {
          reject(err);
        });
      }, function (err) {
        // Update it even if the previous operation fails. This can help the
        // app to recover when push settings has been modifed from another client
        self.getPushRules().then(function (result) {
          self.pushRules = result;
          reject(err);
        }, function (err2) {
          reject(err);
        });
      });
    });
  }
}; // Search
// ======

/**
 * Perform a server-side search for messages containing the given text.
 * @param {Object} opts Options for the search.
 * @param {string} opts.query The text to query.
 * @param {string=} opts.keys The keys to search on. Defaults to all keys. One
 * of "content.body", "content.name", "content.topic".
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.searchMessageText = function (opts, callback) {
  const roomEvents = {
    search_term: opts.query
  };

  if ('keys' in opts) {
    roomEvents.keys = opts.keys;
  }

  return this.search({
    body: {
      search_categories: {
        room_events: roomEvents
      }
    }
  }, callback);
};
/**
 * Perform a server-side search for room events.
 *
 * The returned promise resolves to an object containing the fields:
 *
 *  * {number}  count:       estimate of the number of results
 *  * {string}  next_batch:  token for back-pagination; if undefined, there are
 *                           no more results
 *  * {Array}   highlights:  a list of words to highlight from the stemming
 *                           algorithm
 *  * {Array}   results:     a list of results
 *
 * Each entry in the results list is a {module:models/search-result.SearchResult}.
 *
 * @param {Object} opts
 * @param {string} opts.term     the term to search for
 * @param {Object} opts.filter   a JSON filter object to pass in the request
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.searchRoomEvents = function (opts) {
  // TODO: support groups
  const body = {
    search_categories: {
      room_events: {
        search_term: opts.term,
        filter: opts.filter,
        order_by: "recent",
        event_context: {
          before_limit: 1,
          after_limit: 1,
          include_profile: true
        }
      }
    }
  };
  const searchResults = {
    _query: body,
    results: [],
    highlights: []
  };
  return this.search({
    body: body
  }).then(this._processRoomEventsSearch.bind(this, searchResults));
};
/**
 * Take a result from an earlier searchRoomEvents call, and backfill results.
 *
 * @param  {object} searchResults  the results object to be updated
 * @return {Promise} Resolves: updated result object
 * @return {Error} Rejects: with an error response.
 */


MatrixClient.prototype.backPaginateRoomEventsSearch = function (searchResults) {
  // TODO: we should implement a backoff (as per scrollback()) to deal more
  // nicely with HTTP errors.
  if (!searchResults.next_batch) {
    return Promise.reject(new Error("Cannot backpaginate event search any further"));
  }

  if (searchResults.pendingRequest) {
    // already a request in progress - return the existing promise
    return searchResults.pendingRequest;
  }

  const searchOpts = {
    body: searchResults._query,
    next_batch: searchResults.next_batch
  };
  const promise = this.search(searchOpts).then(this._processRoomEventsSearch.bind(this, searchResults)).finally(function () {
    searchResults.pendingRequest = null;
  });
  searchResults.pendingRequest = promise;
  return promise;
};
/**
 * helper for searchRoomEvents and backPaginateRoomEventsSearch. Processes the
 * response from the API call and updates the searchResults
 *
 * @param {Object} searchResults
 * @param {Object} response
 * @return {Object} searchResults
 * @private
 */


MatrixClient.prototype._processRoomEventsSearch = function (searchResults, response) {
  const room_events = response.search_categories.room_events;
  searchResults.count = room_events.count;
  searchResults.next_batch = room_events.next_batch; // combine the highlight list with our existing list; build an object
  // to avoid O(N^2) fail

  const highlights = {};
  room_events.highlights.forEach(function (hl) {
    highlights[hl] = 1;
  });
  searchResults.highlights.forEach(function (hl) {
    highlights[hl] = 1;
  }); // turn it back into a list.

  searchResults.highlights = Object.keys(highlights); // append the new results to our existing results

  for (let i = 0; i < room_events.results.length; i++) {
    const sr = _searchResult.SearchResult.fromJson(room_events.results[i], this.getEventMapper());

    searchResults.results.push(sr);
  }

  return searchResults;
};
/**
 * Populate the store with rooms the user has left.
 * @return {Promise} Resolves: TODO - Resolved when the rooms have
 * been added to the data store.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.syncLeftRooms = function () {
  // Guard against multiple calls whilst ongoing and multiple calls post success
  if (this._syncedLeftRooms) {
    return Promise.resolve([]); // don't call syncRooms again if it succeeded.
  }

  if (this._syncLeftRoomsPromise) {
    return this._syncLeftRoomsPromise; // return the ongoing request
  }

  const self = this;
  const syncApi = new _sync.SyncApi(this, this._clientOpts);
  this._syncLeftRoomsPromise = syncApi.syncLeftRooms(); // cleanup locks

  this._syncLeftRoomsPromise.then(function (res) {
    _logger.logger.log("Marking success of sync left room request");

    self._syncedLeftRooms = true; // flip the bit on success
  }).finally(function () {
    self._syncLeftRoomsPromise = null; // cleanup ongoing request state
  });

  return this._syncLeftRoomsPromise;
}; // Filters
// =======

/**
 * Create a new filter.
 * @param {Object} content The HTTP body for the request
 * @return {Filter} Resolves to a Filter object.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.createFilter = function (content) {
  const self = this;
  const path = utils.encodeUri("/user/$userId/filter", {
    $userId: this.credentials.userId
  });
  return this._http.authedRequest(undefined, "POST", path, undefined, content).then(function (response) {
    // persist the filter
    const filter = _filter.Filter.fromJson(self.credentials.userId, response.filter_id, content);

    self.store.storeFilter(filter);
    return filter;
  });
};
/**
 * Retrieve a filter.
 * @param {string} userId The user ID of the filter owner
 * @param {string} filterId The filter ID to retrieve
 * @param {boolean} allowCached True to allow cached filters to be returned.
 * Default: True.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getFilter = function (userId, filterId, allowCached) {
  if (allowCached) {
    const filter = this.store.getFilter(userId, filterId);

    if (filter) {
      return Promise.resolve(filter);
    }
  }

  const self = this;
  const path = utils.encodeUri("/user/$userId/filter/$filterId", {
    $userId: userId,
    $filterId: filterId
  });
  return this._http.authedRequest(undefined, "GET", path, undefined, undefined).then(function (response) {
    // persist the filter
    const filter = _filter.Filter.fromJson(userId, filterId, response);

    self.store.storeFilter(filter);
    return filter;
  });
};
/**
 * @param {string} filterName
 * @param {Filter} filter
 * @return {Promise<String>} Filter ID
 */


MatrixClient.prototype.getOrCreateFilter = /*#__PURE__*/function () {
  var _ref25 = _asyncToGenerator(function* (filterName, filter) {
    const filterId = this.store.getFilterIdByName(filterName);
    let existingId = undefined;

    if (filterId) {
      // check that the existing filter matches our expectations
      try {
        const existingFilter = yield this.getFilter(this.credentials.userId, filterId, true);

        if (existingFilter) {
          const oldDef = existingFilter.getDefinition();
          const newDef = filter.getDefinition();

          if (utils.deepCompare(oldDef, newDef)) {
            // super, just use that.
            // debuglog("Using existing filter ID %s: %s", filterId,
            //          JSON.stringify(oldDef));
            existingId = filterId;
          }
        }
      } catch (error) {
        // Synapse currently returns the following when the filter cannot be found:
        // {
        //     errcode: "M_UNKNOWN",
        //     name: "M_UNKNOWN",
        //     message: "No row found",
        // }
        if (error.errcode !== "M_UNKNOWN" && error.errcode !== "M_NOT_FOUND") {
          throw error;
        }
      } // if the filter doesn't exist anymore on the server, remove from store


      if (!existingId) {
        this.store.setFilterIdByName(filterName, undefined);
      }
    }

    if (existingId) {
      return existingId;
    } // create a new filter


    const createdFilter = yield this.createFilter(filter.getDefinition()); // debuglog("Created new filter ID %s: %s", createdFilter.filterId,
    //          JSON.stringify(createdFilter.getDefinition()));

    this.store.setFilterIdByName(filterName, createdFilter.filterId);
    return createdFilter.filterId;
  });

  return function (_x47, _x48) {
    return _ref25.apply(this, arguments);
  };
}();
/**
 * Gets a bearer token from the Home Server that the user can
 * present to a third party in order to prove their ownership
 * of the Matrix account they are logged into.
 * @return {Promise} Resolves: Token object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.getOpenIdToken = function () {
  const path = utils.encodeUri("/user/$userId/openid/request_token", {
    $userId: this.credentials.userId
  });
  return this._http.authedRequest(undefined, "POST", path, undefined, {});
}; // VoIP operations
// ===============

/**
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype.turnServer = function (callback) {
  return this._http.authedRequest(callback, "GET", "/voip/turnServer");
};
/**
 * Get the TURN servers for this home server.
 * @return {Array<Object>} The servers or an empty list.
 */


MatrixClient.prototype.getTurnServers = function () {
  return this._turnServers || [];
};
/**
 * Get the unix timestamp (in seconds) at which the current
 * TURN credentials (from getTurnServers) expire
 * @return {number} The expiry timestamp, in seconds, or null if no credentials
 */


MatrixClient.prototype.getTurnServersExpiry = function () {
  return this._turnServersExpiry;
};

MatrixClient.prototype._checkTurnServers = /*#__PURE__*/_asyncToGenerator(function* () {
  if (!this._supportsVoip) {
    return;
  }

  let credentialsGood = false;
  const remainingTime = this._turnServersExpiry - Date.now();

  if (remainingTime > TURN_CHECK_INTERVAL) {
    _logger.logger.debug("TURN creds are valid for another " + remainingTime + " ms: not fetching new ones.");

    credentialsGood = true;
  } else {
    _logger.logger.debug("Fetching new TURN credentials");

    try {
      const res = yield this.turnServer();

      if (res.uris) {
        _logger.logger.log("Got TURN URIs: " + res.uris + " refresh in " + res.ttl + " secs"); // map the response to a format that can be fed to RTCPeerConnection


        const servers = {
          urls: res.uris,
          username: res.username,
          credential: res.password
        };
        this._turnServers = [servers]; // The TTL is in seconds but we work in ms

        this._turnServersExpiry = Date.now() + res.ttl * 1000;
        credentialsGood = true;
      }
    } catch (err) {
      _logger.logger.error("Failed to get TURN URIs", err); // If we get a 403, there's no point in looping forever.


      if (err.httpStatus === 403) {
        _logger.logger.info("TURN access unavailable for this account: stopping credentials checks");

        if (this._checkTurnServersIntervalID !== null) global.clearInterval(this._checkTurnServersIntervalID);
        this._checkTurnServersIntervalID = null;
      }
    } // otherwise, if we failed for whatever reason, try again the next time we're called.

  }

  return credentialsGood;
});
/**
 * Set whether to allow a fallback ICE server should be used for negotiating a
 * WebRTC connection if the homeserver doesn't provide any servers. Defaults to
 * false.
 *
 * @param {boolean} allow
 */

MatrixClient.prototype.setFallbackICEServerAllowed = function (allow) {
  this._fallbackICEServerAllowed = allow;
};
/**
 * Get whether to allow a fallback ICE server should be used for negotiating a
 * WebRTC connection if the homeserver doesn't provide any servers. Defaults to
 * false.
 *
 * @returns {boolean}
 */


MatrixClient.prototype.isFallbackICEServerAllowed = function () {
  return this._fallbackICEServerAllowed;
}; // Synapse-specific APIs
// =====================

/**
 * Determines if the current user is an administrator of the Synapse homeserver.
 * Returns false if untrue or the homeserver does not appear to be a Synapse
 * homeserver. <strong>This function is implementation specific and may change
 * as a result.</strong>
 * @return {boolean} true if the user appears to be a Synapse administrator.
 */


MatrixClient.prototype.isSynapseAdministrator = function () {
  const path = utils.encodeUri("/_synapse/admin/v1/users/$userId/admin", {
    $userId: this.getUserId()
  });
  return this._http.authedRequest(undefined, 'GET', path, undefined, undefined, {
    prefix: ''
  }).then(r => r['admin']); // pull out the specific boolean we want
};
/**
 * Performs a whois lookup on a user using Synapse's administrator API.
 * <strong>This function is implementation specific and may change as a
 * result.</strong>
 * @param {string} userId the User ID to look up.
 * @return {object} the whois response - see Synapse docs for information.
 */


MatrixClient.prototype.whoisSynapseUser = function (userId) {
  const path = utils.encodeUri("/_synapse/admin/v1/whois/$userId", {
    $userId: userId
  });
  return this._http.authedRequest(undefined, 'GET', path, undefined, undefined, {
    prefix: ''
  });
};
/**
 * Deactivates a user using Synapse's administrator API. <strong>This
 * function is implementation specific and may change as a result.</strong>
 * @param {string} userId the User ID to deactivate.
 * @return {object} the deactivate response - see Synapse docs for information.
 */


MatrixClient.prototype.deactivateSynapseUser = function (userId) {
  const path = utils.encodeUri("/_synapse/admin/v1/deactivate/$userId", {
    $userId: userId
  });
  return this._http.authedRequest(undefined, 'POST', path, undefined, undefined, {
    prefix: ''
  });
}; // Higher level APIs
// =================
// TODO: stuff to handle:
//   local echo
//   event dup suppression? - apparently we should still be doing this
//   tracking current display name / avatar per-message
//   pagination
//   re-sending (including persisting pending messages to be sent)
//   - Need a nice way to callback the app for arbitrary events like
//     displayname changes
//   due to ambiguity (or should this be on a chat-specific layer)?
//   reconnect after connectivity outages

/**
 * High level helper method to begin syncing and poll for new events. To listen for these
 * events, add a listener for {@link module:client~MatrixClient#event:"event"}
 * via {@link module:client~MatrixClient#on}. Alternatively, listen for specific
 * state change events.
 * @param {Object=} opts Options to apply when syncing.
 * @param {Number=} opts.initialSyncLimit The event <code>limit=</code> to apply
 * to initial sync. Default: 8.
 * @param {Boolean=} opts.includeArchivedRooms True to put <code>archived=true</code>
 * on the <code>/initialSync</code> request. Default: false.
 * @param {Boolean=} opts.resolveInvitesToProfiles True to do /profile requests
 * on every invite event if the displayname/avatar_url is not known for this user ID.
 * Default: false.
 *
 * @param {String=} opts.pendingEventOrdering Controls where pending messages
 * appear in a room's timeline. If "<b>chronological</b>", messages will appear
 * in the timeline when the call to <code>sendEvent</code> was made. If
 * "<b>detached</b>", pending messages will appear in a separate list,
 * accessbile via {@link module:models/room#getPendingEvents}. Default:
 * "chronological".
 *
 * @param {Number=} opts.pollTimeout The number of milliseconds to wait on /sync.
 * Default: 30000 (30 seconds).
 *
 * @param {Filter=} opts.filter The filter to apply to /sync calls. This will override
 * the opts.initialSyncLimit, which would normally result in a timeline limit filter.
 *
 * @param {Boolean=} opts.disablePresence True to perform syncing without automatically
 * updating presence.
 * @param {Boolean=} opts.lazyLoadMembers True to not load all membership events during
 * initial sync but fetch them when needed by calling `loadOutOfBandMembers`
 * This will override the filter option at this moment.
 * @param {Number=} opts.clientWellKnownPollPeriod The number of seconds between polls
 * to /.well-known/matrix/client, undefined to disable. This should be in the order of hours.
 * Default: undefined.
 */


MatrixClient.prototype.startClient = /*#__PURE__*/function () {
  var _ref27 = _asyncToGenerator(function* (opts) {
    if (this.clientRunning) {
      // client is already running.
      return;
    }

    this.clientRunning = true; // backwards compat for when 'opts' was 'historyLen'.

    if (typeof opts === "number") {
      opts = {
        initialSyncLimit: opts
      };
    } // Create our own user object artificially (instead of waiting for sync)
    // so it's always available, even if the user is not in any rooms etc.


    const userId = this.getUserId();

    if (userId) {
      this.store.storeUser(new _user.User(userId));
    }

    if (this._crypto) {
      this._crypto.uploadDeviceKeys();

      this._crypto.start();
    } // periodically poll for turn servers if we support voip


    if (this._supportsVoip) {
      this._checkTurnServersIntervalID = setInterval(() => {
        this._checkTurnServers();
      }, TURN_CHECK_INTERVAL);

      this._checkTurnServers();
    }

    if (this._syncApi) {
      // This shouldn't happen since we thought the client was not running
      _logger.logger.error("Still have sync object whilst not running: stopping old one");

      this._syncApi.stop();
    } // shallow-copy the opts dict before modifying and storing it


    opts = Object.assign({}, opts);
    opts.crypto = this._crypto;

    opts.canResetEntireTimeline = roomId => {
      if (!this._canResetTimelineCallback) {
        return false;
      }

      return this._canResetTimelineCallback(roomId);
    };

    this._clientOpts = opts;
    this._syncApi = new _sync.SyncApi(this, opts);

    this._syncApi.sync();

    if (opts.clientWellKnownPollPeriod !== undefined) {
      this._clientWellKnownIntervalID = setInterval(() => {
        this._fetchClientWellKnown();
      }, 1000 * opts.clientWellKnownPollPeriod);

      this._fetchClientWellKnown();
    }
  });

  return function (_x49) {
    return _ref27.apply(this, arguments);
  };
}();

MatrixClient.prototype._fetchClientWellKnown = /*#__PURE__*/_asyncToGenerator(function* () {
  // `getRawClientConfig` does not throw or reject on network errors, instead
  // it absorbs errors and returns `{}`.
  this._clientWellKnownPromise = _autodiscovery.AutoDiscovery.getRawClientConfig(this.getDomain());
  this._clientWellKnown = yield this._clientWellKnownPromise;
  this.emit("WellKnown.client", this._clientWellKnown);
});

MatrixClient.prototype.getClientWellKnown = function () {
  return this._clientWellKnown;
};

MatrixClient.prototype.waitForClientWellKnown = function () {
  return this._clientWellKnownPromise;
};
/**
 * store client options with boolean/string/numeric values
 * to know in the next session what flags the sync data was
 * created with (e.g. lazy loading)
 * @param {object} opts the complete set of client options
 * @return {Promise} for store operation */


MatrixClient.prototype._storeClientOptions = function () {
  const primTypes = ["boolean", "string", "number"];
  const serializableOpts = Object.entries(this._clientOpts).filter(_ref29 => {
    let [key, value] = _ref29;
    return primTypes.includes(typeof value);
  }).reduce((obj, _ref30) => {
    let [key, value] = _ref30;
    obj[key] = value;
    return obj;
  }, {});
  return this.store.storeClientOptions(serializableOpts);
};
/**
 * Gets a set of room IDs in common with another user
 * @param {string} userId The userId to check.
 * @return {Promise<string[]>} Resolves to a set of rooms
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixClient.prototype._unstable_getSharedRooms = /*#__PURE__*/function () {
  var _ref31 = _asyncToGenerator(function* (userId) {
    if (!(yield this.doesServerSupportUnstableFeature("uk.half-shot.msc2666"))) {
      throw Error('Server does not support shared_rooms API');
    }

    const path = utils.encodeUri("/uk.half-shot.msc2666/user/shared_rooms/$userId", {
      $userId: userId
    });
    const res = yield this._http.authedRequest(undefined, "GET", path, undefined, undefined, {
      prefix: _httpApi.PREFIX_UNSTABLE
    });
    return res.joined;
  });

  return function (_x50) {
    return _ref31.apply(this, arguments);
  };
}();
/**
 * High level helper method to stop the client from polling and allow a
 * clean shutdown.
 */


MatrixClient.prototype.stopClient = function () {
  _logger.logger.log('stopping MatrixClient');

  this.clientRunning = false; // TODO: f.e. Room => self.store.storeRoom(room) ?

  if (this._syncApi) {
    this._syncApi.stop();

    this._syncApi = null;
  }

  if (this._crypto) {
    this._crypto.stop();
  }

  if (this._peekSync) {
    this._peekSync.stopPeeking();
  }

  if (this._callEventHandler) {
    this._callEventHandler.stop();

    this._callEventHandler = null;
  }

  global.clearInterval(this._checkTurnServersIntervalID);

  if (this._clientWellKnownIntervalID !== undefined) {
    global.clearInterval(this._clientWellKnownIntervalID);
  }
};
/**
 * Get the API versions supported by the server, along with any
 * unstable APIs it supports
 * @return {Promise<object>} The server /versions response
 */


MatrixClient.prototype.getVersions = function () {
  if (this._serverVersionsPromise) {
    return this._serverVersionsPromise;
  }

  this._serverVersionsPromise = this._http.request(undefined, // callback
  "GET", "/_matrix/client/versions", undefined, // queryParams
  undefined, // data
  {
    prefix: ''
  }).catch(e => {
    // Need to unset this if it fails, otherwise we'll never retry
    this._serverVersionsPromise = null; // but rethrow the exception to anything that was waiting

    throw e;
  });
  return this._serverVersionsPromise;
};
/**
 * Check if a particular spec version is supported by the server.
 * @param {string} version The spec version (such as "r0.5.0") to check for.
 * @return {Promise<bool>} Whether it is supported
 */


MatrixClient.prototype.isVersionSupported = /*#__PURE__*/function () {
  var _ref32 = _asyncToGenerator(function* (version) {
    const {
      versions
    } = yield this.getVersions();
    return versions && versions.includes(version);
  });

  return function (_x51) {
    return _ref32.apply(this, arguments);
  };
}();
/**
 * Query the server to see if it support members lazy loading
 * @return {Promise<boolean>} true if server supports lazy loading
 */


MatrixClient.prototype.doesServerSupportLazyLoading = /*#__PURE__*/_asyncToGenerator(function* () {
  const response = yield this.getVersions();
  if (!response) return false;
  const versions = response["versions"];
  const unstableFeatures = response["unstable_features"];
  return versions && versions.includes("r0.5.0") || unstableFeatures && unstableFeatures["m.lazy_load_members"];
});
/**
 * Query the server to see if the `id_server` parameter is required
 * when registering with an 3pid, adding a 3pid or resetting password.
 * @return {Promise<boolean>} true if id_server parameter is required
 */

MatrixClient.prototype.doesServerRequireIdServerParam = /*#__PURE__*/_asyncToGenerator(function* () {
  const response = yield this.getVersions();
  if (!response) return true;
  const versions = response["versions"]; // Supporting r0.6.0 is the same as having the flag set to false

  if (versions && versions.includes("r0.6.0")) {
    return false;
  }

  const unstableFeatures = response["unstable_features"];
  if (!unstableFeatures) return true;

  if (unstableFeatures["m.require_identity_server"] === undefined) {
    return true;
  } else {
    return unstableFeatures["m.require_identity_server"];
  }
});
/**
 * Query the server to see if the `id_access_token` parameter can be safely
 * passed to the homeserver. Some homeservers may trigger errors if they are not
 * prepared for the new parameter.
 * @return {Promise<boolean>} true if id_access_token can be sent
 */

MatrixClient.prototype.doesServerAcceptIdentityAccessToken = /*#__PURE__*/_asyncToGenerator(function* () {
  const response = yield this.getVersions();
  if (!response) return false;
  const versions = response["versions"];
  const unstableFeatures = response["unstable_features"];
  return versions && versions.includes("r0.6.0") || unstableFeatures && unstableFeatures["m.id_access_token"];
});
/**
 * Query the server to see if it supports separate 3PID add and bind functions.
 * This affects the sequence of API calls clients should use for these operations,
 * so it's helpful to be able to check for support.
 * @return {Promise<boolean>} true if separate functions are supported
 */

MatrixClient.prototype.doesServerSupportSeparateAddAndBind = /*#__PURE__*/_asyncToGenerator(function* () {
  const response = yield this.getVersions();
  if (!response) return false;
  const versions = response["versions"];
  const unstableFeatures = response["unstable_features"];
  return versions && versions.includes("r0.6.0") || unstableFeatures && unstableFeatures["m.separate_add_and_bind"];
});
/**
 * Query the server to see if it lists support for an unstable feature
 * in the /versions response
 * @param {string} feature the feature name
 * @return {Promise<boolean>} true if the feature is supported
 */

MatrixClient.prototype.doesServerSupportUnstableFeature = /*#__PURE__*/function () {
  var _ref37 = _asyncToGenerator(function* (feature) {
    const response = yield this.getVersions();
    if (!response) return false;
    const unstableFeatures = response["unstable_features"];
    return unstableFeatures && !!unstableFeatures[feature];
  });

  return function (_x52) {
    return _ref37.apply(this, arguments);
  };
}();
/**
 * Query the server to see if it is forcing encryption to be enabled for
 * a given room preset, based on the /versions response.
 * @param {string} presetName The name of the preset to check.
 * @returns {Promise<boolean>} true if the server is forcing encryption
 * for the preset.
 */


MatrixClient.prototype.doesServerForceEncryptionForPreset = /*#__PURE__*/function () {
  var _ref38 = _asyncToGenerator(function* (presetName) {
    const response = yield this.getVersions();
    if (!response) return false;
    const unstableFeatures = response["unstable_features"];
    return unstableFeatures && !!unstableFeatures[`io.element.e2ee_forced.${presetName}`];
  });

  return function (_x53) {
    return _ref38.apply(this, arguments);
  };
}();
/**
 * Get if lazy loading members is being used.
 * @return {boolean} Whether or not members are lazy loaded by this client
 */


MatrixClient.prototype.hasLazyLoadMembersEnabled = function () {
  return !!this._clientOpts.lazyLoadMembers;
};
/**
 * Set a function which is called when /sync returns a 'limited' response.
 * It is called with a room ID and returns a boolean. It should return 'true' if the SDK
 * can SAFELY remove events from this room. It may not be safe to remove events if there
 * are other references to the timelines for this room, e.g because the client is
 * actively viewing events in this room.
 * Default: returns false.
 * @param {Function} cb The callback which will be invoked.
 */


MatrixClient.prototype.setCanResetTimelineCallback = function (cb) {
  this._canResetTimelineCallback = cb;
};
/**
 * Get the callback set via `setCanResetTimelineCallback`.
 * @return {?Function} The callback or null
 */


MatrixClient.prototype.getCanResetTimelineCallback = function () {
  return this._canResetTimelineCallback;
};
/**
 * Returns relations for a given event. Handles encryption transparently,
 * with the caveat that the amount of events returned might be 0, even though you get a nextBatch.
 * When the returned promise resolves, all messages should have finished trying to decrypt.
 * @param {string} roomId the room of the event
 * @param {string} eventId the id of the event
 * @param {string} relationType the rel_type of the relations requested
 * @param {string} eventType the event type of the relations requested
 * @param {Object} opts options with optional values for the request.
 * @param {Object} opts.from the pagination token returned from a previous request as `nextBatch` to return following relations.
 * @return {Object} an object with `events` as `MatrixEvent[]` and optionally `nextBatch` if more relations are available.
 */


MatrixClient.prototype.relations = /*#__PURE__*/function () {
  var _ref39 = _asyncToGenerator(function* (roomId, eventId, relationType, eventType) {
    let opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    const fetchedEventType = _getEncryptedIfNeededEventType(this, roomId, eventType);

    const result = yield this.fetchRelations(roomId, eventId, relationType, fetchedEventType, opts);
    const mapper = this.getEventMapper();
    let originalEvent;

    if (result.original_event) {
      originalEvent = mapper(result.original_event);
    }

    let events = result.chunk.map(mapper);

    if (fetchedEventType === "m.room.encrypted") {
      const allEvents = originalEvent ? events.concat(originalEvent) : events;
      yield Promise.all(allEvents.map(e => {
        return new Promise(resolve => e.once("Event.decrypted", resolve));
      }));
      events = events.filter(e => e.getType() === eventType);
    }

    if (originalEvent && relationType === "m.replace") {
      events = events.filter(e => e.getSender() === originalEvent.getSender());
    }

    return {
      originalEvent,
      events,
      nextBatch: result.next_batch
    };
  });

  return function (_x54, _x55, _x56, _x57) {
    return _ref39.apply(this, arguments);
  };
}();

function _reject(callback, reject, err) {
  if (callback) {
    callback(err);
  }

  reject(err);
}

function _resolve(callback, resolve, res) {
  if (callback) {
    callback(null, res);
  }

  resolve(res);
}

function _PojoToMatrixEventMapper(client, options) {
  const preventReEmit = Boolean(options && options.preventReEmit);

  function mapper(plainOldJsObject) {
    const event = new _event.MatrixEvent(plainOldJsObject);

    if (event.isEncrypted()) {
      if (!preventReEmit) {
        client.reEmitter.reEmit(event, ["Event.decrypted"]);
      }

      event.attemptDecryption(client._crypto);
    }

    if (!preventReEmit) {
      client.reEmitter.reEmit(event, ["Event.replaced"]);
    }

    return event;
  }

  return mapper;
}
/**
 * @param {object} [options]
 * @param {bool} options.preventReEmit don't reemit events emitted on an event mapped by this mapper on the client
 * @return {Function}
 */


MatrixClient.prototype.getEventMapper = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
  return _PojoToMatrixEventMapper(this, options);
};
/**
 * The app may wish to see if we have a key cached without
 * triggering a user interaction.
 * @return {object}
 */


MatrixClient.prototype.getCrossSigningCacheCallbacks = function () {
  return this._crypto && this._crypto._crossSigningInfo.getCacheCallbacks();
}; // Identity Server Operations
// ==========================

/**
 * Generates a random string suitable for use as a client secret. <strong>This
 * method is experimental and may change.</strong>
 * @return {string} A new client secret
 */


MatrixClient.prototype.generateClientSecret = function () {
  return (0, _randomstring.randomString)(32);
}; // MatrixClient Event JSDocs

/**
 * Fires whenever the SDK receives a new event.
 * <p>
 * This is only fired for live events received via /sync - it is not fired for
 * events received over context, search, or pagination APIs.
 *
 * @event module:client~MatrixClient#"event"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @example
 * matrixClient.on("event", function(event){
 *   var sender = event.getSender();
 * });
 */

/**
 * Fires whenever the SDK receives a new to-device event.
 * @event module:client~MatrixClient#"toDeviceEvent"
 * @param {MatrixEvent} event The matrix event which caused this event to fire.
 * @example
 * matrixClient.on("toDeviceEvent", function(event){
 *   var sender = event.getSender();
 * });
 */

/**
 * Fires whenever the SDK's syncing state is updated. The state can be one of:
 * <ul>
 *
 * <li>PREPARED: The client has synced with the server at least once and is
 * ready for methods to be called on it. This will be immediately followed by
 * a state of SYNCING. <i>This is the equivalent of "syncComplete" in the
 * previous API.</i></li>
 *
 * <li>CATCHUP: The client has detected the connection to the server might be
 * available again and will now try to do a sync again. As this sync might take
 * a long time (depending how long ago was last synced, and general server
 * performance) the client is put in this mode so the UI can reflect trying
 * to catch up with the server after losing connection.</li>
 *
 * <li>SYNCING : The client is currently polling for new events from the server.
 * This will be called <i>after</i> processing latest events from a sync.</li>
 *
 * <li>ERROR : The client has had a problem syncing with the server. If this is
 * called <i>before</i> PREPARED then there was a problem performing the initial
 * sync. If this is called <i>after</i> PREPARED then there was a problem polling
 * the server for updates. This may be called multiple times even if the state is
 * already ERROR. <i>This is the equivalent of "syncError" in the previous
 * API.</i></li>
 *
 * <li>RECONNECTING: The sync connection has dropped, but not (yet) in a way that
 * should be considered erroneous.
 * </li>
 *
 * <li>STOPPED: The client has stopped syncing with server due to stopClient
 * being called.
 * </li>
 * </ul>
 * State transition diagram:
 * <pre>
 *                                          +---->STOPPED
 *                                          |
 *              +----->PREPARED -------> SYNCING <--+
 *              |                        ^  |  ^    |
 *              |      CATCHUP ----------+  |  |    |
 *              |        ^                  V  |    |
 *   null ------+        |  +------- RECONNECTING   |
 *              |        V  V                       |
 *              +------->ERROR ---------------------+
 *
 * NB: 'null' will never be emitted by this event.
 *
 * </pre>
 * Transitions:
 * <ul>
 *
 * <li><code>null -> PREPARED</code> : Occurs when the initial sync is completed
 * first time. This involves setting up filters and obtaining push rules.
 *
 * <li><code>null -> ERROR</code> : Occurs when the initial sync failed first time.
 *
 * <li><code>ERROR -> PREPARED</code> : Occurs when the initial sync succeeds
 * after previously failing.
 *
 * <li><code>PREPARED -> SYNCING</code> : Occurs immediately after transitioning
 * to PREPARED. Starts listening for live updates rather than catching up.
 *
 * <li><code>SYNCING -> RECONNECTING</code> : Occurs when the live update fails.
 *
 * <li><code>RECONNECTING -> RECONNECTING</code> : Can occur if the update calls
 * continue to fail, but the keepalive calls (to /versions) succeed.
 *
 * <li><code>RECONNECTING -> ERROR</code> : Occurs when the keepalive call also fails
 *
 * <li><code>ERROR -> SYNCING</code> : Occurs when the client has performed a
 * live update after having previously failed.
 *
 * <li><code>ERROR -> ERROR</code> : Occurs when the client has failed to keepalive
 * for a second time or more.</li>
 *
 * <li><code>SYNCING -> SYNCING</code> : Occurs when the client has performed a live
 * update. This is called <i>after</i> processing.</li>
 *
 * <li><code>* -> STOPPED</code> : Occurs once the client has stopped syncing or
 * trying to sync after stopClient has been called.</li>
 * </ul>
 *
 * @event module:client~MatrixClient#"sync"
 *
 * @param {string} state An enum representing the syncing state. One of "PREPARED",
 * "SYNCING", "ERROR", "STOPPED".
 *
 * @param {?string} prevState An enum representing the previous syncing state.
 * One of "PREPARED", "SYNCING", "ERROR", "STOPPED" <b>or null</b>.
 *
 * @param {?Object} data Data about this transition.
 *
 * @param {MatrixError} data.error The matrix error if <code>state=ERROR</code>.
 *
 * @param {String} data.oldSyncToken The 'since' token passed to /sync.
 *    <code>null</code> for the first successful sync since this client was
 *    started. Only present if <code>state=PREPARED</code> or
 *    <code>state=SYNCING</code>.
 *
 * @param {String} data.nextSyncToken The 'next_batch' result from /sync, which
 *    will become the 'since' token for the next call to /sync. Only present if
 *    <code>state=PREPARED</code> or <code>state=SYNCING</code>.
 *
 * @param {boolean} data.catchingUp True if we are working our way through a
 *    backlog of events after connecting. Only present if <code>state=SYNCING</code>.
 *
 * @example
 * matrixClient.on("sync", function(state, prevState, data) {
 *   switch (state) {
 *     case "ERROR":
 *       // update UI to say "Connection Lost"
 *       break;
 *     case "SYNCING":
 *       // update UI to remove any "Connection Lost" message
 *       break;
 *     case "PREPARED":
 *       // the client instance is ready to be queried.
 *       var rooms = matrixClient.getRooms();
 *       break;
 *   }
 * });
 */

/**
* Fires whenever the sdk learns about a new group. <strong>This event
* is experimental and may change.</strong>
* @event module:client~MatrixClient#"Group"
* @param {Group} group The newly created, fully populated group.
* @example
* matrixClient.on("Group", function(group){
*   var groupId = group.groupId;
* });
*/

/**
* Fires whenever a new Room is added. This will fire when you are invited to a
* room, as well as when you join a room. <strong>This event is experimental and
* may change.</strong>
* @event module:client~MatrixClient#"Room"
* @param {Room} room The newly created, fully populated room.
* @example
* matrixClient.on("Room", function(room){
*   var roomId = room.roomId;
* });
*/

/**
* Fires whenever a Room is removed. This will fire when you forget a room.
* <strong>This event is experimental and may change.</strong>
* @event module:client~MatrixClient#"deleteRoom"
* @param {string} roomId The deleted room ID.
* @example
* matrixClient.on("deleteRoom", function(roomId){
*   // update UI from getRooms()
* });
*/

/**
 * Fires whenever an incoming call arrives.
 * @event module:client~MatrixClient#"Call.incoming"
 * @param {module:webrtc/call~MatrixCall} call The incoming call.
 * @example
 * matrixClient.on("Call.incoming", function(call){
 *   call.answer(); // auto-answer
 * });
 */

/**
 * Fires whenever the login session the JS SDK is using is no
 * longer valid and the user must log in again.
 * NB. This only fires when action is required from the user, not
 * when then login session can be renewed by using a refresh token.
 * @event module:client~MatrixClient#"Session.logged_out"
 * @example
 * matrixClient.on("Session.logged_out", function(errorObj){
 *   // show the login screen
 * });
 */

/**
 * Fires when the JS SDK receives a M_CONSENT_NOT_GIVEN error in response
 * to a HTTP request.
 * @event module:client~MatrixClient#"no_consent"
 * @example
 * matrixClient.on("no_consent", function(message, contentUri) {
 *     console.info(message + ' Go to ' + contentUri);
 * });
 */

/**
 * Fires when a device is marked as verified/unverified/blocked/unblocked by
 * {@link module:client~MatrixClient#setDeviceVerified|MatrixClient.setDeviceVerified} or
 * {@link module:client~MatrixClient#setDeviceBlocked|MatrixClient.setDeviceBlocked}.
 *
 * @event module:client~MatrixClient#"deviceVerificationChanged"
 * @param {string} userId the owner of the verified device
 * @param {string} deviceId the id of the verified device
 * @param {module:crypto/deviceinfo} deviceInfo updated device information
 */

/**
 * Fires when the trust status of a user changes
 * If userId is the userId of the logged in user, this indicated a change
 * in the trust status of the cross-signing data on the account.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @event module:client~MatrixClient#"userTrustStatusChanged"
 * @param {string} userId the userId of the user in question
 * @param {UserTrustLevel} trustLevel The new trust level of the user
 */

/**
 * Fires when the user's cross-signing keys have changed or cross-signing
 * has been enabled/disabled. The client can use getStoredCrossSigningForUser
 * with the user ID of the logged in user to check if cross-signing is
 * enabled on the account. If enabled, it can test whether the current key
 * is trusted using with checkUserTrust with the user ID of the logged
 * in user. The checkOwnCrossSigningTrust function may be used to reconcile
 * the trust in the account key.
 *
 * The cross-signing API is currently UNSTABLE and may change without notice.
 *
 * @event module:client~MatrixClient#"crossSigning.keysChanged"
 */

/**
 * Fires whenever new user-scoped account_data is added.
 * @event module:client~MatrixClient#"accountData"
 * @param {MatrixEvent} event The event describing the account_data just added
 * @param {MatrixEvent} event The previous account data, if known.
 * @example
 * matrixClient.on("accountData", function(event, oldEvent){
 *   myAccountData[event.type] = event.content;
 * });
 */

/**
 * Fires whenever the stored devices for a user have changed
 * @event module:client~MatrixClient#"crypto.devicesUpdated"
 * @param {String[]} users A list of user IDs that were updated
 * @param {bool} initialFetch If true, the store was empty (apart
 *     from our own device) and has been seeded.
 */

/**
 * Fires whenever the stored devices for a user will be updated
 * @event module:client~MatrixClient#"crypto.willUpdateDevices"
 * @param {String[]} users A list of user IDs that will be updated
 * @param {bool} initialFetch If true, the store is empty (apart
 *     from our own device) and is being seeded.
 */

/**
 * Fires whenever the status of e2e key backup changes, as returned by getKeyBackupEnabled()
 * @event module:client~MatrixClient#"crypto.keyBackupStatus"
 * @param {bool} enabled true if key backup has been enabled, otherwise false
 * @example
 * matrixClient.on("crypto.keyBackupStatus", function(enabled){
 *   if (enabled) {
 *     [...]
 *   }
 * });
 */

/**
 * Fires when we want to suggest to the user that they restore their megolm keys
 * from backup or by cross-signing the device.
 *
 * @event module:client~MatrixClient#"crypto.suggestKeyRestore"
 */

/**
 * Fires when a key verification is requested.
 * @event module:client~MatrixClient#"crypto.verification.request"
 * @param {object} data
 * @param {MatrixEvent} data.event the original verification request message
 * @param {Array} data.methods the verification methods that can be used
 * @param {Number} data.timeout the amount of milliseconds that should be waited
 *                 before cancelling the request automatically.
 * @param {Function} data.beginKeyVerification a function to call if a key
 *     verification should be performed.  The function takes one argument: the
 *     name of the key verification method (taken from data.methods) to use.
 * @param {Function} data.cancel a function to call if the key verification is
 *     rejected.
 */

/**
 * Fires when a key verification is requested with an unknown method.
 * @event module:client~MatrixClient#"crypto.verification.request.unknown"
 * @param {string} userId the user ID who requested the key verification
 * @param {Function} cancel a function that will send a cancellation message to
 *     reject the key verification.
 */

/**
 * Fires when a secret request has been cancelled.  If the client is prompting
 * the user to ask whether they want to share a secret, the prompt can be
 * dismissed.
 *
 * The Secure Secret Storage API is currently UNSTABLE and may change without notice.
 *
 * @event module:client~MatrixClient#"crypto.secrets.requestCancelled"
 * @param {object} data
 * @param {string} data.user_id The user ID of the client that had requested the secret.
 * @param {string} data.device_id The device ID of the client that had requested the
 *     secret.
 * @param {string} data.request_id The ID of the original request.
 */

/**
 * Fires when the client .well-known info is fetched.
 *
 * @event module:client~MatrixClient#"WellKnown.client"
 * @param {object} data The JSON object returned by the server
 */
// EventEmitter JSDocs

/**
 * The {@link https://nodejs.org/api/events.html|EventEmitter} class.
 * @external EventEmitter
 * @see {@link https://nodejs.org/api/events.html}
 */

/**
 * Adds a listener to the end of the listeners array for the specified event.
 * No checks are made to see if the listener has already been added. Multiple
 * calls passing the same combination of event and listener will result in the
 * listener being added multiple times.
 * @function external:EventEmitter#on
 * @param {string} event The event to listen for.
 * @param {Function} listener The function to invoke.
 * @return {EventEmitter} for call chaining.
 */

/**
 * Alias for {@link external:EventEmitter#on}.
 * @function external:EventEmitter#addListener
 * @param {string} event The event to listen for.
 * @param {Function} listener The function to invoke.
 * @return {EventEmitter} for call chaining.
 */

/**
 * Adds a <b>one time</b> listener for the event. This listener is invoked only
 * the next time the event is fired, after which it is removed.
 * @function external:EventEmitter#once
 * @param {string} event The event to listen for.
 * @param {Function} listener The function to invoke.
 * @return {EventEmitter} for call chaining.
 */

/**
 * Remove a listener from the listener array for the specified event.
 * <b>Caution:</b> changes array indices in the listener array behind the
 * listener.
 * @function external:EventEmitter#removeListener
 * @param {string} event The event to listen for.
 * @param {Function} listener The function to invoke.
 * @return {EventEmitter} for call chaining.
 */

/**
 * Removes all listeners, or those of the specified event. It's not a good idea
 * to remove listeners that were added elsewhere in the code, especially when
 * it's on an emitter that you didn't create (e.g. sockets or file streams).
 * @function external:EventEmitter#removeAllListeners
 * @param {string} event Optional. The event to remove listeners for.
 * @return {EventEmitter} for call chaining.
 */

/**
 * Execute each of the listeners in order with the supplied arguments.
 * @function external:EventEmitter#emit
 * @param {string} event The event to emit.
 * @param {Function} listener The function to invoke.
 * @return {boolean} true if event had listeners, false otherwise.
 */

/**
 * By default EventEmitters will print a warning if more than 10 listeners are
 * added for a particular event. This is a useful default which helps finding
 * memory leaks. Obviously not all Emitters should be limited to 10. This
 * function allows that to be increased. Set to zero for unlimited.
 * @function external:EventEmitter#setMaxListeners
 * @param {Number} n The max number of listeners.
 * @return {EventEmitter} for call chaining.
 */
// MatrixClient Callback JSDocs

/**
 * The standard MatrixClient callback interface. Functions which accept this
 * will specify 2 return arguments. These arguments map to the 2 parameters
 * specified in this callback.
 * @callback module:client.callback
 * @param {Object} err The error value, the "rejected" value or null.
 * @param {Object} data The data returned, the "resolved" value.
 */
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "9818":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("77ae");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("1d616953", content, shadowRoot)
};

/***/ }),

/***/ "98e6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("3fb5")
var MD5 = __webpack_require__("f576")
var RIPEMD160 = __webpack_require__("b5ca")
var sha = __webpack_require__("69f2")
var Base = __webpack_require__("6430")

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}


/***/ }),

/***/ "994e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6078dda8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f5af");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6078dda8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6078dda8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6078dda8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_6078dda8_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "9a41":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/chats.vue?vue&type=template&id=62a1ab6a&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"page chats",class:{pocketnet: _vm.pocketnet, mobile: _vm.mobile, minimized: _vm.minimized, active: _vm.active, newChat: _vm.newChat}},[_c('topheader',{staticClass:"topheader",attrs:{"share":_vm.share},on:{"newchat":_vm.newchat}}),_c('maincontent',{ref:"maincontent",attrs:{"rbackexp":true},scopedSlots:_vm._u([{key:"content",fn:function(){return [_c('list',{attrs:{"share":_vm.share},on:{"scrolltop":_vm.scrolltop}}),(_vm.newChat && !_vm.hiddenInParent)?_c('modal',{on:{"close":_vm.closeNewChat},scopedSlots:_vm._u([{key:"header",fn:function(){return [_vm._v(_vm._s(_vm.$t("caption.newChat")))]},proxy:true},{key:"body",fn:function(){return [_c('chatcreate',{on:{"completed":_vm.chatcreated}})]},proxy:true},{key:"footer",fn:function(){return undefined},proxy:true}],null,false,1284178828)}):_vm._e()]},proxy:true}])})],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/views/chats.vue?vue&type=template&id=62a1ab6a&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/list/index.vue?vue&type=template&id=57da332f&scoped=true&
var listvue_type_template_id_57da332f_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"chats-list",class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active, empty: _vm.empty}},[(!_vm.unauthorized)?_c('div',[(!_vm.minimized || _vm.active)?_c('div',{staticClass:"work searchWrapperEA"},[_c('search',{attrs:{"minimize":_vm.minimized},on:{"search":_vm.search}})],1):_vm._e(),(!_vm.searchText && this.chats.length <= 2 && _vm.chatsready == true)?_c('teamroom',{on:{"click":_vm.openTeamRoom}}):_vm._e(),(_vm.chatsready !== true)?_c('div',{staticClass:"listChatLoading"},[_c('dummypreviews')],1):_c('div',{staticClass:"Swipes"},[_c('transition',{attrs:{"name":"fade"}},[(_vm.showchatslist)?_c('div',{staticClass:"desktopList"},[(_vm.filteredchats.length || !_vm.searchText)?_c('div',{staticClass:"chatswrapper"},[_c('RecycleScroller',{staticClass:"scroller",attrs:{"page-mode":"","items":_vm.filteredchats,"item-size":_vm.pocketnet ? 60 : 70,"key-field":"roomId","buffer":_vm.pocketnet ? 400 : 700},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var item = ref.item;
var active = ref.active;
return [(item)?_c('div',{ref:"content",staticClass:"card-content",on:{"click":function (e){ return _vm.itemClick(item); }}},[(active)?_c('preview',{attrs:{"chat":item}}):_vm._e()],1):_vm._e()]}}],null,false,127139565)})],1):_c('div',{staticClass:"work"},[_c('div',{staticClass:"chatsearchingempty"},[_c('span',[_vm._v(_vm._s(_vm.$t("caption.chatsearchingempty")))])])])]):_vm._e()])],1)],1):_c('div',{staticClass:"dmdv"})])}
var listvue_type_template_id_57da332f_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/list/index.vue?vue&type=template&id=57da332f&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// EXTERNAL MODULE: ./src/components/chats/dummypreviews/index.vue + 4 modules
var dummypreviews = __webpack_require__("a54c");

// EXTERNAL MODULE: ./src/components/chats/preview/index.vue + 9 modules
var preview = __webpack_require__("087d");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/teamroom/index.vue?vue&type=template&id=9b340a7a&scoped=true&
var teamroomvue_type_template_id_9b340a7a_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active, mobile: _vm.mobile},attrs:{"id":"teamroom"}},[_c('div',{staticClass:"teamChatWrapper",on:{"click":_vm.click}},[_c('div',{staticClass:"iconWrapper"},[_vm._m(0),(_vm.teamNotifications > 0)?_c('div',{staticClass:"unseen"},[_vm._v(" "+_vm._s(_vm.teamNotifications))]):_vm._e()]),_c('div',{staticClass:"infoWrapper"},[_vm._m(1),_c('div',{staticClass:"previewMessage"},[(_vm.pocketteammessages && _vm.pocketteammessages.length > 0)?_c('span',[_vm._v(" "+_vm._s(_vm.pocketteammessages[_vm.pocketteammessages.length - 1].previewText)+" ")]):_vm._e()])])])])}
var teamroomvue_type_template_id_9b340a7a_scoped_true_staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"logo"},[_c('img',{attrs:{"src":"https://pocketnet.app/img/logo20.svg"}})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"infoName"},[_c('span',[_vm._v("Bastyon")])])}]


// CONCATENATED MODULE: ./src/components/teamroom/index.vue?vue&type=template&id=9b340a7a&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/teamroom?vue&type=script&lang=js&

/* harmony default export */ var teamroom_vue_type_script_lang_js_ = ({
  name: 'teamroom',
  props: {},
  data: function () {
    return {};
  },
  created: () => {},
  watch: {},
  computed: Object(vuex_esm["c" /* mapState */])({ ...Object(vuex_esm["c" /* mapState */])(['minimized', 'active', 'pocketnet', 'pocketteammessages', 'readedteammessages']),
    mobile: function () {
      return this.$store.state.mobile;
    },
    teamNotifications: function () {
      var self = this;
      return _.filter(this.pocketteammessages, function (m) {
        return !self.readedteammessages[m.id];
      }).length;
    }
  }),
  methods: {
    click: function () {
      this.$emit('click');
    }
  }
});
// CONCATENATED MODULE: ./src/components/teamroom?vue&type=script&lang=js&
 /* harmony default export */ var components_teamroom_vue_type_script_lang_js_ = (teamroom_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/teamroom/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("f9d6")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  components_teamroom_vue_type_script_lang_js_,
  teamroomvue_type_template_id_9b340a7a_scoped_true_render,
  teamroomvue_type_template_id_9b340a7a_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "9b340a7a",
  null
  ,true
)

/* harmony default export */ var teamroom = (component.exports);
// EXTERNAL MODULE: ./src/application/functions.js
var functions = __webpack_require__("3139");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/chats/list?vue&type=script&lang=js&





/* harmony default export */ var list_vue_type_script_lang_js_ = ({
  name: "list",
  data: function () {
    return {
      loading: false,
      enabled: true,
      page: 0,
      revealed: {},
      lastEventDescription: '',
      blocked: false,
      searchText: ''
    };
  },
  components: {
    preview: preview["a" /* default */],

    /* SwipeOut,*
     SwipeList,*/
    dummypreviews: dummypreviews["a" /* default */],
    teamroom: teamroom
  },
  props: {
    user_data: {
      type: String,
      default: () => {}
    }
  },
  created: () => {},
  watch: {
    topchatid: function () {
      if (this.hmode) {
        this.$emit('scrolltop');
      }
    },
    active: function () {
      this.searchText = '';
    } //$route: 'getdata'

  },

  beforeDestroy() {
    window.removeEventListener('keydown', this.onKeyDown);
    window.removeEventListener('keyup', this.onKeyUp);
  },

  computed: Object(vuex_esm["c" /* mapState */])({
    window: function () {
      return window;
    },
    auth: state => state.auth,
    teamNotifications: function () {
      var self = this;
      return _.filter(this.pocketteammessages, function (m) {
        return !self.readedteammessages[m.id];
      }).length;
    },
    ...Object(vuex_esm["c" /* mapState */])(['minimized', 'active', 'pocketnet', 'chatsready', 'prechats', 'chats', 'unauthorized', 'share', 'pocketteammessages', 'readedteammessages', 'deletedrooms', 'hideOptimization', 'wasunhidden']),
    showchatslist: function () {
      return !this.hideOptimization; // || this.wasunhidden
    },
    rooms: function () {
      return this.core.mtrx.client.getRooms();
    },
    empty: function () {
      return this.core.mtrx.ready && this.chats.length === 0;
    },
    topchatid: function () {
      if (this.chats && this.chats.length) {
        return this.chats[this.chats.length - 1].roomId;
      }
    },
    chats: function (state) {
      var self = this;
      var chats = [];

      _.each(state.chats, chat => {
        if (this.deletedrooms[chat.roomId]) return;
        this.core.mtrx.kit.tetatetchat(this.m_chat);
        var users = this.core.mtrx.chatUsersInfo(chat.roomId, 'anotherChatUsers');

        if (users.length === 1 && users[0] && self.core.mtrx.client.isUserIgnored(functions["a" /* default */].getMatrixIdFull(users[0].id, self.core.domain))) {
          return;
        } else {
          chats.push(chat);
        }
      });

      return _.sortBy(chats, function (o) {
        return o.lastModified;
      }).reverse();
    },
    filteredchats: function () {
      var chats = this.chats;

      if (this.searchText) {
        var mc = _.filter(_.map(chats, c => {
          var users = this.core.mtrx.chatUsersInfo(c.roomId, 'anotherChatUsers');
          var m_chat = this.core.mtrx.client.getRoom(c.roomId);

          var usersnamestring = _.reduce(users, function (m, u) {
            return m + u.name.toLowerCase();
          }, '');

          var chatname = '';

          if (m_chat && m_chat.getJoinRule() === 'public' && m_chat.currentState.getStateEvents('m.room.name').length > 0) {
            chatname = m_chat.currentState.getStateEvents('m.room.name')[0].getContent().name;
          }

          if (!chatname) {
            chatname = m_chat.name;
            if (chatname[0] == '#') chatname = '';
          }

          var sstring = (chatname + usersnamestring).toLowerCase();
          var point = 0;

          if (sstring.indexOf(this.searchText) > -1) {
            point = this.searchText.length / sstring.length;
          }

          return {
            chat: m_chat.summary,
            point
          };
        }), function (cc) {
          return cc.point;
        });

        mc = _.sortBy(mc, function (cc) {
          return cc.point;
        }).reverse();
        chats = _.map(mc, c => {
          return c.chat;
        });
      }

      return chats;
    },
    withoutBlockedChats: function () {
      var self = this;

      if (this.share) {
        _.map(self.chats, function (chat) {});
      }
    },
    activeuser: function () {
      return this.core.user.userinfo;
    },

    hmode() {
      return this.pocketnet && this.minimized && !this.active;
    }

  }),
  methods: {
    search(text) {
      this.searchText = text.toLowerCase();
    },

    invitepnt() {
      this.core.invitepnt();
    },

    generatekeys: function () {},

    moment() {
      return moment();
    },

    dd(v) {},

    revealFirstRight() {
      this.$refs.list.revealRight(0);
    },

    revealFirstLeft() {
      this.$refs.list.revealLeft(0);
    },

    remove(item) {
      this.$set(this.mockSwipeList, this.page, this.mockSwipeList[this.page].filter(i => i !== item));
    },

    setLastEvent(name, _ref) {
      let {
        item,
        index
      } = _ref;
      this.lastEventDescription = {
        name,
        index,
        id: item.id
      };
    },

    itemClick(chat) {
      if (this.hmode) {
        this.$store.commit('active', true);
        this.$store.commit('blockactive', {
          value: true,
          item: 'main'
        });
        this.$store.commit('setiteraction', true);
        /*if (
        	!this.share &&
        	this.$store.state.lastroom &&
        	this.$store.state.lastroom.id == chat.roomId) {
        	this.$router.push('chat?id=' + this.$store.state.lastroom.id)
        }*/
      } else {
        if (this.share) {
          var _share = this.share;
          this.$store.commit('SHARE', null);
          this.$store.commit('icon', {
            icon: 'loading',
            message: "",
            manual: true
          });
          this.core.mtrx.shareInChat(chat.roomId, _share).then(r => {
            this.$store.commit('icon', {
              icon: 'success',
              message: ""
            });
            this.$router.push(_share.route || 'chat?id=' + chat.roomId).catch(e => {});
          }).catch(e => {
            console.error(e);
            this.$store.commit('icon', {
              icon: 'error',
              message: ""
            });

            if (_share.route) {
              this.$router.push(_share.route).catch(e => {});
            }
          });
        } else {
          this.$router.push('chat?id=' + chat.roomId).catch(e => {});
        }
      }
    },

    fbClick(e) {},

    sbClick(e) {},

    openTeamRoom: function () {
      if (this.hmode) {
        this.$store.commit('active', true);
        this.$store.commit('blockactive', {
          value: true,
          item: 'main'
        });
        this.$store.commit('setiteraction', true);
      } else {
        setTimeout(() => {
          this.$store.commit('SET_READEDTEAMMESSAGES', this.pocketteammessages);
          this.$store.commit('ALL_NOTIFICATIONS_COUNT', this.core.mtrx.client.getRooms());
        }, 500);
        this.$router.push('/teamroom').catch(e => {});
      }
    },

    // keyboard
    onKeyDown(e) {
      if (e.keyCode !== 16) return;
      this.enabled = false;
    },

    onKeyUp(e) {
      if (e.keyCode !== 16) return;
      this.enabled = true;
    },

    removeRoom(room) {
      this.$dialog.confirm('Do you really want to leave room?', {
        okText: this.$i18n.t("yes"),
        cancelText: this.$i18n.t("cancel")
      }).then(dialog => {
        this.core.mtrx.client.leave(room).then(r => {
          this.core.mtrx.client.forget(room, true).then(r => {
            return r;
          }).then(r => {
            this.$store.commit('DELETE_ROOM', room);
            this.$router.push({
              path: '/chats'
            }).catch(e => {});
          });
        });
      });
    },

    tetatetchat(room) {
      if (!room) return true;
      var m_ch = this.core.mtrx.client.getRoom(room.roomId);
      if (!m_ch) return true;
      return this.core.mtrx.kit.tetatetchat(this.core.mtrx.client.getRoom(room.roomId));
    }

  },

  mounted() {
    // ideally should be in some global handler/store
    window.addEventListener('keydown', this.onKeyDown);
    window.addEventListener('keyup', this.onKeyUp);

    if (!this.hmode) {
      this.$store.commit('SET_LAST_ROOM', null);
    } else {}
  }

});
// CONCATENATED MODULE: ./src/components/chats/list?vue&type=script&lang=js&
 /* harmony default export */ var chats_list_vue_type_script_lang_js_ = (list_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/chats/list/index.vue



function list_injectStyles (context) {
  
  var style0 = __webpack_require__("191a")
if (style0.__inject__) style0.__inject__(context)
var style1 = __webpack_require__("b551")
if (style1.__inject__) style1.__inject__(context)

}

/* normalize component */

var list_component = Object(componentNormalizer["a" /* default */])(
  chats_list_vue_type_script_lang_js_,
  listvue_type_template_id_57da332f_scoped_true_render,
  listvue_type_template_id_57da332f_scoped_true_staticRenderFns,
  false,
  list_injectStyles,
  "57da332f",
  null
  ,true
)

/* harmony default export */ var list = (list_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/topheader/index.vue?vue&type=template&id=06594ccd&scoped=true&
var topheadervue_type_template_id_06594ccd_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"chatsTopheader"}},[_c('topheader',{scopedSlots:_vm._u([{key:"left",fn:function(){return [(_vm.share)?_c('div',{staticClass:"iconbutton",on:{"click":_vm.cancelShare}},[_c('i',{staticClass:"fas fa-times"})]):_vm._e(),((!_vm.minimized || _vm.active) && _vm.pocketnet && !_vm.share)?_c('div',{staticClass:"iconbutton",on:{"click":_vm.minimizeall}},[_c('i',{staticClass:"fas fa-times"})]):_vm._e(),(!_vm.pocketnet && !_vm.share)?_c('div',{staticClass:"iconbutton",on:{"click":_vm.gotoapp}},[_c('i',{staticClass:"fas fa-angle-left"})]):_vm._e()]},proxy:true},{key:"leftadd",fn:function(){return undefined},proxy:true},{key:"info",fn:function(){return [(!_vm.share)?_c('span',[_vm._v(_vm._s(_vm.$t("caption.chats")))]):_vm._e(),(_vm.share)?_c('span',[_vm._v(_vm._s(_vm.$t("caption.shareWith")))]):_vm._e()]},proxy:true},{key:"rightadd",fn:function(){return [(!_vm.share && _vm.pocketnet)?_c('router-link',{attrs:{"to":"settings"}},[_c('div',{staticClass:"iconbuttonsmall"},[_c('i',{staticClass:"fas fa-cog"})])]):_vm._e()]},proxy:true},{key:"right",fn:function(){return [(!_vm.share && (!_vm.minimized || _vm.active))?_c('div',{staticClass:"iconbutton",on:{"click":_vm.newchat}},[_c('i',{staticClass:"fas fa-plus"})]):_c('div',[(_vm.window.cordova)?_c('div',{staticClass:"iconbutton",on:{"click":_vm.cordovashare}},[_c('i',{staticClass:"fas fa-share-alt"})]):_vm._e()])]},proxy:true}])})],1)}
var topheadervue_type_template_id_06594ccd_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/topheader/index.vue?vue&type=template&id=06594ccd&scoped=true&

// EXTERNAL MODULE: ./src/components/contacts/index.vue + 4 modules
var contacts = __webpack_require__("71da");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/chats/topheader?vue&type=script&lang=js&


/* harmony default export */ var topheader_vue_type_script_lang_js_ = ({
  name: 'chatsTopheader',
  props: {},
  components: {
    contacts: contacts["a" /* default */]
  },
  data: function () {
    return {
      loading: false,
      newchatopened: false,
      createGroup: false,
      contacts: false
    };
  },

  created() {
    this.$store.commit('SET_CURRENT_ROOM', 'all');
  },

  destroyed() {
    this.$store.commit('SET_CURRENT_ROOM', false);
  },

  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    minimized: state => state.minimized,
    pocketnet: state => state.pocketnet,
    active: state => state.active,
    ...Object(vuex_esm["c" /* mapState */])(['share', 'closebybg']),
    window: function () {
      return window;
    }
  }),
  methods: {
    changeCloseByBg: function () {
      this.$store.commit('closebybg', !this.closebybg);
    },
    gotoapp: function () {
      if (this.core.backtoapp) this.core.backtoapp();
    },
    cordovashare: function () {
      var share = this.share;
      var options = {//subject : "Message"
      };
      if (share.messages) options.message = share.messages.join('. ');

      if (share.images || share.files) {
        options.files = [].concat(share.images, share.files);
        options.files = _.filter(options.files, function (f) {
          return f;
        });
      }

      if (window.plugins && window.plugins.socialsharing) {
        window.plugins.socialsharing.shareWithOptions(options);
      }

      this.cancelShare();
    },
    cancelShare: function () {
      if (this.share) {
        if (this.share.route) {
          this.$router.push(this.share.route).catch(e => {});
        }
      }

      this.$store.commit('SHARE', null);
    },
    newchatmenu: function () {
      this.newchatopened = !this.newchatopened;
    },
    minimizeall: function () {
      this.$store.commit('minimize', true);
    },
    newchat: function () {
      this.$emit('newchat');
    }
  }
});
// CONCATENATED MODULE: ./src/components/chats/topheader?vue&type=script&lang=js&
 /* harmony default export */ var chats_topheader_vue_type_script_lang_js_ = (topheader_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/chats/topheader/index.vue



function topheader_injectStyles (context) {
  
  var style0 = __webpack_require__("4cbb")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var topheader_component = Object(componentNormalizer["a" /* default */])(
  chats_topheader_vue_type_script_lang_js_,
  topheadervue_type_template_id_06594ccd_scoped_true_render,
  topheadervue_type_template_id_06594ccd_scoped_true_staticRenderFns,
  false,
  topheader_injectStyles,
  "06594ccd",
  null
  ,true
)

/* harmony default export */ var topheader = (topheader_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chat/create/index.vue?vue&type=template&id=f0734632&scoped=true&
var createvue_type_template_id_f0734632_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"chatcreate"}},[_c('div',{staticClass:"selecttype"},[_c('div',{staticClass:"work"},[(!_vm.type)?_c('div',{staticClass:"types"},_vm._l((_vm.types),function(type){return _c('div',{key:type.id,staticClass:"type",on:{"click":function (e) { return _vm.selecttype(type.id); }}},[_c('div',{staticClass:"icon"},[_c('i',{class:type.icon})]),_c('div',[_c('span',[_vm._v(_vm._s(_vm.$t('type.' + type.id)))])])])}),0):_vm._e(),(_vm.type)?_c('div',{staticClass:"selectedtype"},[_c('div',{staticClass:"icon",on:{"click":_vm.unselecttype}},[_c('i',{staticClass:"fas fa-arrow-left"})]),_c('div',{staticClass:"label"},[_vm._v(" "+_vm._s(_vm.$t('typelabel.' + _vm.type.id))+" ")]),_c('div',{staticClass:"completewrapper"},[_c('button',{staticClass:"button small rounded",class:{orange : _vm.cancomplete, ghost : !_vm.cancomplete},on:{"click":function($event){return _vm.complete()}}},[_vm._v(" "+_vm._s(_vm.$t('caption.create'))+" "),_c('i',{class:_vm.type.icon}),_vm._v(" "),(_vm.selectedLength)?_c('span',[_vm._v(_vm._s(_vm.selectedLength))]):_vm._e()])])]):_vm._e()]),_c('div',{staticClass:"creationbody"},[(_vm.type)?_c('div',{staticClass:"groupsettigns"},[_c('div',{staticClass:"namebuttoncreate"},[_c('div',{staticClass:"groupNameInput"},[_c('label',[_c('input',{directives:[{name:"model",rawName:"v-model",value:(_vm.groupName),expression:"groupName"}],attrs:{"type":"text","placeholder":_vm.type.id === 'privategroup'? this.$i18n.t('caption.addGroupNamePlaceHolder') : this.$i18n.t('caption.addPublicChatName')},domProps:{"value":(_vm.groupName)},on:{"input":function($event){if($event.target.composing){ return; }_vm.groupName=$event.target.value}}})])])])]):_vm._e(),(!_vm.type)?_c('div',{staticClass:"contactswrapper oneonone"},[_c('contacts',{attrs:{"mode":'Select'},on:{"select":_vm.selectoneuser}})],1):_vm._e(),(_vm.type)?_c('div',{staticClass:"contactswrapper"},[_c('contacts',{attrs:{"mode":'Selectmany'},on:{"selectedUsers":_vm.selectedUsers}})],1):_vm._e()])])])}
var createvue_type_template_id_f0734632_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chat/create/index.vue?vue&type=template&id=f0734632&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/chat/create?vue&type=script&lang=js&


/* harmony default export */ var create_vue_type_script_lang_js_ = ({
  name: 'chatcreate',
  props: {},
  components: {
    contacts: contacts["a" /* default */]
  },
  data: function () {
    return {
      loading: false,
      types: {
        privategroup: {
          id: 'privategroup',
          icon: 'fas fa-user-friends',
          value: 'private'
        },
        publicgroup: {
          id: 'publicgroup',
          icon: 'fas fa-users',
          value: 'public'
        }
      },
      type: null,
      groupName: '',
      selected: {}
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    cancomplete: function () {
      if (!this.type) return false;

      if (this.type.id == 'privategroup') {
        return this.selectedLength > 1;
      }

      if (this.type.id == 'publicgroup') {
        if (this.groupName) return true;
        return false;
      }
    },
    selectedLength: function () {
      return _.toArray(this.selected).length;
    }
  }),
  methods: {
    unselecttype: function () {
      this.type = null;
      this.selected = {};
    },
    selecttype: function (id) {
      this.type = this.types[id];
      this.selected = {};
    },
    selectedUsers: function (u) {
      this.selected = u;
    },
    selectoneuser: function (u) {
      var tetatetid = this.core.mtrx.kit.tetatetid(u, this.core.user.userinfo);
      this.$router.push('chat?id=' + tetatetid + '&u=' + u.id).catch(e => {});
    },

    complete() {
      this.createGroupAction(this.selected).then(chat => {
        this.$emit('completed', chat);
        this.$store.commit('icon', {
          icon: 'success',
          message: ""
        });
      }).catch(e => {
        var text = 'An unexpected error occurred';
        if (e == 'cantcomplete') text = 'Please enter a group name and add chat members';
        this.$store.commit('icon', {
          icon: 'error',
          message: text
        });
      });
    },

    createGroupAction(users) {
      if (!this.cancomplete) {
        return Promise.reject('cantcomplete');
      }

      if (!this.type) {
        return Promise.reject('type');
      }

      if (_.isEmpty(users)) {
        return Promise.reject('users');
      }

      const data = this.core.mtrx.kit.groupIdLight(users);
      this.$store.state.globalpreloader = true;
      return this.core.mtrx.client.createRoom({
        //room_alias_name: '#' + data.hash,
        visibility: this.type.value,
        // this.selectedValue === 'Private' ? 'private' : 'public',
        invite: data.idForInviting,
        name: '@' + (this.groupName ? this.groupName : "New Room"),
        initial_state: [{
          "type": "m.room.guest_access",
          "state_key": "",
          "content": {
            "guest_access": "can_join"
          }
        }]
      }).then(chat => {
        this.$store.state.globalpreloader = false;
        return chat;
      }).catch(e => {
        this.$store.state.globalpreloader = false;
        return Promise.reject(e);
      });
    }

  }
});
// CONCATENATED MODULE: ./src/components/chat/create?vue&type=script&lang=js&
 /* harmony default export */ var chat_create_vue_type_script_lang_js_ = (create_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/chat/create/index.vue



function create_injectStyles (context) {
  
  var style0 = __webpack_require__("e8d4")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var create_component = Object(componentNormalizer["a" /* default */])(
  chat_create_vue_type_script_lang_js_,
  createvue_type_template_id_f0734632_scoped_true_render,
  createvue_type_template_id_f0734632_scoped_true_staticRenderFns,
  false,
  create_injectStyles,
  "f0734632",
  null
  ,true
)

/* harmony default export */ var create = (create_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/chats.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//





/* harmony default export */ var chatsvue_type_script_lang_js_ = ({
  name: 'pagechats',
  components: {
    list: list,
    topheader: topheader,
    contacts: contacts["a" /* default */],
    chatcreate: create
  },
  props: {
    share: Object
  },
  data: function () {
    return {
      newChat: false
    };
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active,
    mobile: state => state.mobile,
    hiddenInParent: state => state.hiddenInParent
  }),
  methods: {
    newchat: function () {
      this.newChat = true;
    },
    closeNewChat: function () {
      this.newChat = false;
    },
    chatcreated: function (chat) {
      this.$router.push({
        path: 'chat',
        query: {
          'id': chat.room_id
        }
      }).catch(e => {});
    },
    scrolltop: function () {
      this.$refs['maincontent'].scroll(0);
    }
  },

  mounted() {}

});
// CONCATENATED MODULE: ./src/views/chats.vue?vue&type=script&lang=js&
 /* harmony default export */ var views_chatsvue_type_script_lang_js_ = (chatsvue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/views/chats.vue



function chats_injectStyles (context) {
  
  var style0 = __webpack_require__("b051")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var chats_component = Object(componentNormalizer["a" /* default */])(
  views_chatsvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  chats_injectStyles,
  "62a1ab6a",
  null
  ,true
)

/* harmony default export */ var views_chats = __webpack_exports__["default"] = (chats_component.exports);

/***/ }),

/***/ "9a55":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("79bb");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("2f2118a6", content, shadowRoot)
};

/***/ }),

/***/ "9b54":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__("f60b").Buffer;
var util = __webpack_require__(3);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "9bed":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016-2017 Tony Arcieri, Dmitry Chestnykh
// MIT License. See LICENSE file for details.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = __webpack_require__("69fc");
const constant_time_1 = __webpack_require__("b8d8");
const ctz_1 = __webpack_require__("3dc0");
const xor_1 = __webpack_require__("bbd4");
// Number of L blocks to precompute (i.e. µ in the PMAC paper)
// TODO: dynamically compute these as needed
const PRECOMPUTED_BLOCKS = 31;
/**
 * Polyfill for the AES-PMAC message authentication code
 *
 * Uses a non-constant-time (lookup table-based) AES polyfill.
 * See polyfill/aes.ts for more information on the security impact.
 */
class PMAC {
    constructor(cipher, l, lInv) {
        /**
         * finished is set true when we are done processing a message, and forbids
         * any subsequent writes until we reset the internal state
         */
        this._finished = false;
        this._cipher = cipher;
        this._L = l;
        this._LInv = lInv;
        this._buffer = new block_1.default();
        this._bufferPos = 0;
        this._counter = 0;
        this._offset = new block_1.default();
        this._tag = new block_1.default();
    }
    /** Create a new CMAC instance from the given key */
    static importKey(provider, keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            const cipher = yield provider.importBlockCipherKey(keyData);
            /**
             * L is defined as follows (quoted from the PMAC paper):
             *
             * Equation 1:
             *
             *     a · x =
             *         a<<1 if firstbit(a)=0
             *         (a<<1) ⊕ 0¹²⁰10000111 if firstbit(a)=1
             *
             * Equation 2:
             *
             *     a · x⁻¹ =
             *         a>>1 if lastbit(a)=0
             *         (a>>1) ⊕ 10¹²⁰1000011 if lastbit(a)=1
             *
             * Let L(0) ← L. For i ∈ [1..µ], compute L(i) ← L(i − 1) · x by
             * Equation (1) using a shift and a conditional xor.
             *
             * Compute L(−1) ← L · x⁻¹ by Equation (2), using a shift and a
             * conditional xor.
             *
             * Save the values L(−1), L(0), L(1), L(2), ..., L(µ) in a table.
             * (Alternatively, [ed: as we have done in this codebase] defer computing
             * some or  all of these L(i) values until the value is actually needed.)
             */
            const tmp = new block_1.default();
            yield cipher.encryptBlock(tmp);
            const l = new Array(PRECOMPUTED_BLOCKS);
            for (let i = 0; i < PRECOMPUTED_BLOCKS; i++) {
                l[i] = tmp.clone();
                tmp.dbl();
            }
            /**
             * Compute L(−1) ← L · x⁻¹:
             *
             *     a>>1 if lastbit(a)=0
             *     (a>>1) ⊕ 10¹²⁰1000011 if lastbit(a)=1
             */
            const lInv = l[0].clone();
            const lastBit = lInv.data[block_1.default.SIZE - 1] & 0x01;
            for (let i = block_1.default.SIZE - 1; i > 0; i--) {
                const carry = constant_time_1.select(lInv.data[i - 1] & 1, 0x80, 0);
                lInv.data[i] = (lInv.data[i] >>> 1) | carry;
            }
            lInv.data[0] >>>= 1;
            lInv.data[0] ^= constant_time_1.select(lastBit, 0x80, 0);
            lInv.data[block_1.default.SIZE - 1] ^= constant_time_1.select(lastBit, block_1.default.R >>> 1, 0);
            return new PMAC(cipher, l, lInv);
        });
    }
    reset() {
        this._buffer.clear();
        this._bufferPos = 0;
        this._counter = 0;
        this._offset.clear();
        this._tag.clear();
        this._finished = false;
        return this;
    }
    clear() {
        this.reset();
        this._cipher.clear();
    }
    update(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._finished) {
                throw new Error("pmac: already finished");
            }
            const left = block_1.default.SIZE - this._bufferPos;
            let dataPos = 0;
            let dataLength = data.length;
            // Finish filling the internal buf with the message
            if (dataLength > left) {
                this._buffer.data.set(data.slice(0, left), this._bufferPos);
                dataPos += left;
                dataLength -= left;
                yield this._processBuffer();
            }
            // So long as we have more than a blocks worth of data, compute
            // whole-sized blocks at a time.
            while (dataLength > block_1.default.SIZE) {
                this._buffer.data.set(data.slice(dataPos, dataPos + block_1.default.SIZE));
                dataPos += block_1.default.SIZE;
                dataLength -= block_1.default.SIZE;
                yield this._processBuffer();
            }
            if (dataLength > 0) {
                this._buffer.data.set(data.slice(dataPos, dataPos + dataLength), this._bufferPos);
                this._bufferPos += dataLength;
            }
            return this;
        });
    }
    finish() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._finished) {
                throw new Error("pmac: already finished");
            }
            if (this._bufferPos === block_1.default.SIZE) {
                xor_1.xor(this._tag.data, this._buffer.data);
                xor_1.xor(this._tag.data, this._LInv.data);
            }
            else {
                xor_1.xor(this._tag.data, this._buffer.data.slice(0, this._bufferPos));
                this._tag.data[this._bufferPos] ^= 0x80;
            }
            yield this._cipher.encryptBlock(this._tag);
            this._finished = true;
            return this._tag.clone().data;
        });
    }
    // Update the internal tag state based on the buffer contents
    _processBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            xor_1.xor(this._offset.data, this._L[ctz_1.ctz(this._counter + 1)].data);
            xor_1.xor(this._buffer.data, this._offset.data);
            this._counter++;
            yield this._cipher.encryptBlock(this._buffer);
            xor_1.xor(this._tag.data, this._buffer.data);
            this._bufferPos = 0;
        });
    }
}
exports.PMAC = PMAC;


/***/ }),

/***/ "9bf2":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var IE8_DOM_DEFINE = __webpack_require__("0cfb");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__("aed9");
var anObject = __webpack_require__("825a");
var toPropertyKey = __webpack_require__("a04b");

var $TypeError = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "9c0e":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__("903c");

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "9c21":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("1da1");
/* harmony import */ var core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("907a");
/* harmony import */ var core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_typed_array_at_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("d9e2");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _application_functions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("3139");
/* harmony import */ var _chatstorage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("6129");
/* harmony import */ var miscreant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("3db6");
/* harmony import */ var miscreant__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(miscreant__WEBPACK_IMPORTED_MODULE_5__);






const BN = __webpack_require__("399f");



var pbkdf2 = __webpack_require__("a099"); //import cryptoRandomString from 'crypto-random-string';
//var ncrypto = require('crypto')


var salt = 'PR7srzZt4EfcNb3s27grgmiG8aB9vYNV82';
var secp256k1CurveN = null;
/**
 * PcryptoStorage annotations:
 *
 * 1. New IndexedDB structure must be handled
 *    if there are any in new release inside of
 *    onupgradeneeded listener.
 *
 * 2. New version number must be assigned on
 *    new releases of this object.
 */

var PcryptoRoom = /*#__PURE__*/function () {
  var _ref = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (pcrypto, chat, _ref2) {
    let {
      ls,
      lse
    } = _ref2;
    var self = this;
    this.configurable = false;
    var hashes = {};
    var users = {};
    var m = 12;
    var usersinfo = {};
    var usershistory = [];
    var pcryptoFile = new PcryptoFile();
    chat.pcrypto = self;

    self.clear = function () {
      hashes = {};
      usersinfo = {};
      usershistory = [];
      users = {};
    };

    var lcachekey = 'pcrypto5_' + chat.roomId + '_';
    var ecachekey = 'e_pcrypto5_';
    var cache = {};

    self.preparedUsers = function (time) {
      return _.filter(getusersinfobytime(time), function (ui) {
        return ui.keys && ui.keys.length >= m;
      });
    };

    self.cantchat = function () {
      var pu = self.preparedUsers();

      if (pcrypto.core.mtrx.kit.tetatetchat(chat) && pu.length && pu.length < 2) {
        return true;
      }

      return false;
    };

    self.canBeEncrypt = function (time) {
      var usersinfoArray = _.toArray(usersinfo);

      var publicChat = pcrypto.core.mtrx.kit.chatIsPublic(chat); // console.log('publicChat', time, publicChat, usersinfoArray.length, self.preparedUsers(time).length)

      if (!publicChat && pcrypto.user && pcrypto.user.private && pcrypto.user.private.length == 12 && users[pcrypto.user.userinfo.id] && pcrypto.core.mtrx.kit.tetatetchat(chat) && usersinfoArray.length > 1 && usersinfoArray.length < 50 && self.preparedUsers(time).length / usersinfoArray.length > 0.6) {
        return true;
      }

      return false;
    };

    self.userschanded = function () {
      if (!self.cantchat()) {
        return Promise.resolve();
      }

      self.clear();
      return self.prepare();
    };

    var getusersinfo = function () {
      var us = _.map(users, function (uh) {
        return uh.id;
      }); /////////////////// FAIL


      return pcrypto.core.user.usersInfo(us).then(_usersinfo => {
        usersinfo = {};

        _.each(_usersinfo, function (ui) {
          usersinfo[ui.id] = ui;
        });

        return Promise.resolve();
      });
    };

    var getuserseventshistory = function () {
      var tetatet = pcrypto.core.mtrx.kit.tetatetchat(chat);

      var history = _.filter(_.map(chat.currentState.getStateEvents("m.room.member"), function (ue) {
        var event = ue.event;
        var membership = event.content.membership;

        if (membership == 'join' || membership == 'leave' && !tetatet || tetatet && membership == 'invite') {
          return {
            time: event.origin_server_ts || 1,
            membership: membership,
            id: membership == 'invite' ? _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getmatrixid(event.state_key) : _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getmatrixid(event.sender)
          };
        }

        return null;
      }), function (h) {
        return h;
      });

      history = _.sortBy(history, function (ui) {
        return ui.time;
      });
      return history;
    };

    var period = function (time) {
      var period = 0;
      var h = getuserseventshistory();

      for (var i = h.length - 1; i >= 0; i--) {
        if (h[i].time < time && !period) {
          period = i;
        }
      }

      return period;
    };

    var getusershistory = function () {
      var history = getuserseventshistory();
      var tetatet = pcrypto.core.mtrx.kit.tetatetchat(chat);

      _.each(history, function (ui) {
        if (!users[ui.id]) {
          users[ui.id] = {
            id: ui.id,
            life: []
          };
        }

        var l = users[ui.id].life;

        if (ui.membership && (ui.membership == 'join' || ui.membership == 'invite' && tetatet)) {
          l.push({
            start: tetatet ? 1 : ui.time
          });
        } else {
          if (l.length && ui.membership == 'leave' && !tetatet) {
            var last = l[l.length - 1];
            last.end = ui.time;
          }
        }
      });
    };

    var getusersinfobytime = function (time) {
      var us = getusersbytime(time);
      return _.filter(_.map(us, function (u) {
        return usersinfo[u.id];
      }), function (u) {
        return u;
      });
    };

    var getusersbytime = function (time) {
      return _.filter(users, function (ui) {
        var l = _.find(ui.life, function (l) {
          if (!time) {
            if (l.start && !l.end) return true;
          } else {
            if (l.start < time && (!l.end || l.end > time)) return true;
          }
        });

        if (l) return true;
      });
    }; //self.users = users


    self.getusersinfobytime = getusersinfobytime;

    self.prepare = function () {
      getusershistory();
      /*if(!pcrypto.core.mtrx.kit.tetatetchat(chat)){
          m = 2
      }*/

      return getusersinfo().then(r => {
        return self;
      });
    };

    var convert = {
      aeskeys: {
        inp: function (k) {
          var kr = {};

          _.each(k, function (v, i) {
            kr[i] = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._arrayBufferToBase64(v);
          });

          return kr;
        },
        out: function (k) {
          var kr = {};

          _.each(k, function (v, i) {
            kr[i] = new Uint8Array(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._base64ToArrayBuffer(v));
          });

          return kr;
        }
      }
    };
    var eaac = {
      aeskeysls: function (time, block) {
        if (!time) time = 0;
        if (!block) block = pcrypto.currentblock.height;

        if (!pcrypto.core.mtrx.kit.tetatetchat(chat)) {
          block = 10;
        }

        var k = period(time) + '-' + block;
        return ls.get(`${lcachekey + pcrypto.user.userinfo.id}-${k}`).then(keys => {
          const keysPrepared = convert.aeskeys.out(keys);
          return {
            keys: keysPrepared,
            k
          };
        }).catch( /*#__PURE__*/function () {
          var _ref3 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (e) {
            const keysPrepared = eaac.aeskeys(time, block);

            if (self.preparedUsers(time).length > 1) {
              const itemId = `${lcachekey + pcrypto.user.userinfo.id}-${k}`;
              yield ls.set(itemId, convert.aeskeys.inp(keysPrepared)).catch(() => {});
            }

            return {
              keys: keysPrepared,
              k
            };
          });

          return function (_x4) {
            return _ref3.apply(this, arguments);
          };
        }());
      },
      aeskeys: function (time, block) {
        if (!time) time = 0;
        if (!block) block = pcrypto.currentblock.height;
        return eaa.aeskeys(time, block);
      }
    };
    var eaa = {
      cuhash: function (users, num, block) {
        return pbkdf2.pbkdf2Sync(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].sha224(_.map(users, function (u) {
          return u.keys[num];
        }).join('') + (block || pcrypto.currentblock.height)).toString('hex'), salt, 1, 32, 'sha256');
      },
      userspublics: function (time, block) {
        var users = self.preparedUsers(time);
        var sum = {};

        _.each(users, function (user) {
          if (user.id == pcrypto.user.userinfo.id && users.length > 1) {
            return;
          }

          var publics = _.map(user.keys, function (key) {
            return Buffer.from(key, 'hex');
          });

          sum[user.id] = eaa.points(time, block, publics);
        });

        return sum;
      },
      current: function (time, block) {
        var privates = _.map(pcrypto.user.private, function (key) {
          return key.private;
        });

        var buf = Buffer.allocUnsafe(32);
        var sc = eaa.scalars(time, block, privates).toBuffer();
        sc.copy(buf, 32 - sc.length);
        return buf;
      },
      scalars: function (time, block, scalars) {
        var users = self.preparedUsers(time);
        var sum = null;

        for (var i = 0; i < m; i++) {
          var ch = new BN(this.cuhash(users, i, block));
          var a = new BN(scalars[i], 16);
          var mul = a.mul(ch).umod(secp256k1CurveN);

          if (!i) {
            sum = mul;
          } else {
            sum = sum.add(mul).umod(secp256k1CurveN);
          }
        }

        return sum;
      },
      points: function (time, block, points) {
        var users = self.preparedUsers(time);
        var sum = null;

        for (var i = 0; i < m; i++) {
          var ch = this.cuhash(users, i, block);
          var mul = bitcoin.ecc.pointMultiply(points[i], ch, undefined, true);

          if (!i) {
            sum = mul;
          } else {
            sum = bitcoin.ecc.pointAdd(sum, mul, undefined, true);
          }
        }

        return sum;
      },
      aeskeys: function (time, block) {
        var us = eaa.userspublics(time, block);
        var c = eaa.current(time, block);
        var su = {};

        _.each(us, function (s, id) {
          if (id != pcrypto.user.userinfo.id) {
            su[id] = bitcoin.ecc.pointMultiply(s, c, undefined, true);
            su[id] = pbkdf2.pbkdf2Sync(su[id].toString('hex'), salt, 64, 32, 'sha512');
          }
        });

        return su;
      }
    };

    self.decrypt = /*#__PURE__*/function () {
      var _ref4 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (userid, _ref5, time, block) {
        let {
          encrypted,
          nonce
        } = _ref5;
        let {
          keys,
          k
        } = yield eaac.aeskeysls(time, block);
        var error = null;

        if (keys[userid]) {
          try {
            return yield decrypt(keys[userid], {
              encrypted,
              nonce
            });
          } catch (e) {
            error = e;
          }
        } else {
          error = 'emptykey';
        }

        yield ls.clear(`${lcachekey + pcrypto.user.userinfo.id}-${k}`).catch(err => {
          console.error('Error clearing item on LS.CLEAR');
        });
        throw new Error(error);
      });

      return function (_x5, _x6, _x7, _x8) {
        return _ref4.apply(this, arguments);
      };
    }();

    self.encrypt = /*#__PURE__*/function () {
      var _ref6 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (userid, text) {
        let {
          keys
        } = yield eaac.aeskeysls();

        if (keys[userid]) {
          return yield encrypt(text, keys[userid]);
        }

        throw new Error('emptykey');
      });

      return function (_x9, _x10) {
        return _ref6.apply(this, arguments);
      };
    }();

    self.decryptEvent = /*#__PURE__*/function () {
      var _ref7 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (event) {
        if (event.content.hash) return self.decryptEventGroup(event);

        if (!pcrypto.user.userinfo) {
          throw new Error('userinfo');
        }

        if (event.decrypting) {
          return event.decrypting;
        }

        var k = `${ecachekey + pcrypto.user.userinfo.id}-${event.event_id}`;
        var dpromise = lse.get(k).then(stored => {
          var parsed = null;

          try {
            parsed = JSON.parse(stored);
          } catch (e) {}

          if (!parsed) return Promise.reject();
          return Promise.resolve(parsed);
        }).catch( /*#__PURE__*/function () {
          var _ref8 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (err) {
            const sender = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getmatrixid(event.sender);
            const me = pcrypto.user.userinfo.id;
            let keyindex, bodyindex;
            const body = JSON.parse(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].Base64.decode(event.content.body));
            const time = event.origin_server_ts || 1;
            const block = event.content.block;

            if (sender == me) {
              _.find(body, function (s, i) {
                if (i != me) {
                  keyindex = i;
                  bodyindex = i;
                  return true;
                }
              });
            } else {
              bodyindex = me;
              keyindex = sender;
            }

            if (!body[bodyindex]) {
              throw new Error('emptyforme');
            }

            return self.decrypt(keyindex, body[bodyindex], time, block).then(decrypted => {
              var data = {
                body: decrypted,
                msgtype: 'm.text'
              };
              lse.set(k, JSON.stringify(data));
              return data;
            });
          });

          return function (_x12) {
            return _ref8.apply(this, arguments);
          };
        }()).finally(() => {
          delete event.decrypting;
        });
        event.decrypting = dpromise;
        return dpromise;
      });

      return function (_x11) {
        return _ref7.apply(this, arguments);
      };
    }();

    self.encryptFile = /*#__PURE__*/function () {
      var _ref9 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (file, p) {
        var secret = yield pcryptoFile.randomkey();
        var secrets = yield self.encryptKey(secret);
        var result = {
          file: null,
          secrets: secrets
        };
        return pcryptoFile.encryptFile(file, secret, p).then(file => {
          result.file = file;
          return Promise.resolve(result);
        }).catch(e => {
          console.error(e);
          return Promise.reject(e);
        });
      });

      return function (_x13, _x14) {
        return _ref9.apply(this, arguments);
      };
    }();

    self.decryptFile = /*#__PURE__*/function () {
      var _ref10 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (file, secret, p) {
        return pcryptoFile.decryptFile(file, secret, p).then(file => {
          return Promise.resolve(file);
        });
      });

      return function (_x15, _x16, _x17) {
        return _ref10.apply(this, arguments);
      };
    }();

    self.encryptKey = /*#__PURE__*/function () {
      var _ref11 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (key) {
        var users = self.preparedUsers();
        var block = pcrypto.currentblock.height;
        if (!pcrypto.core.mtrx.kit.tetatetchat(chat)) block = 10;
        var encrypted = {
          block: block,
          keys: {}
        };

        for (var i = 0; i < users.length; i++) {
          var user = users[i];

          if (user.id != pcrypto.user.userinfo.id || users.length <= 1) {
            encrypted.keys[user.id] = yield self.encrypt(user.id, key);
          }
        }

        encrypted.keys = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].Base64.encode(JSON.stringify(encrypted.keys));
        return encrypted;
      });

      return function (_x18) {
        return _ref11.apply(this, arguments);
      };
    }();

    self.decryptKey = /*#__PURE__*/function () {
      var _ref12 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (event) {
        if (!pcrypto.user.userinfo) {
          throw new Error('userinfo');
        }

        var secrets = '';
        var block = '';

        if (event.type == 'm.room.encryption') {
          secrets = event.content.keys;
          block = event.content.block;
        } else {
          secrets = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].deep(event, 'content.info.secrets.keys') || _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].deep(event, 'content.pbody.secrets.keys');
          block = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].deep(event, 'content.info.secrets.block') || _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].deep(event, 'content.pbody.secrets.block');
        }

        if (!secrets) throw new Error('secrets');
        if (!block) throw new Error('block');
        var sender = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getmatrixid(event.sender);
        var me = pcrypto.user.userinfo.id;
        var keyindex = null,
            bodyindex = null;
        var body = JSON.parse(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].Base64.decode(secrets));
        var time = event.origin_server_ts || 1;

        if (sender == me) {
          _.find(body, function (s, i) {
            if (i != me) {
              keyindex = i;
              bodyindex = i;
              return true;
            }
          });
        } else {
          bodyindex = me;
          keyindex = sender;
        }

        if (!body[bodyindex]) throw new Error('emptyforme');
        var decryptedKey = yield self.decrypt(keyindex, body[bodyindex], time, block);
        return decryptedKey;
      });

      return function (_x19) {
        return _ref12.apply(this, arguments);
      };
    }();

    self.encryptEvent = /*#__PURE__*/function () {
      var _ref13 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (text) {
        var users = self.preparedUsers();

        if (!pcrypto.core.mtrx.kit.tetatetchat(chat)) {
          return self.encryptEventGroup(text);
        }

        var encryptedEvent = {
          block: pcrypto.currentblock.height,
          msgtype: 'm.encrypted',
          body: {}
        };

        for (var i = 0; i < users.length; i++) {
          var user = users[i];

          if (user.id != pcrypto.user.userinfo.id || users.length <= 1) {
            encryptedEvent.body[user.id] = yield self.encrypt(user.id, text);
          }
        }

        encryptedEvent.body = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].Base64.encode(JSON.stringify(encryptedEvent.body));
        return encryptedEvent;
      });

      return function (_x20) {
        return _ref13.apply(this, arguments);
      };
    }();

    var usershash = function () {
      var users = self.preparedUsers();
      var hash = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].md5(_.filter(_.map(users, user => {
        return user.id;
      }), uid => {
        return uid && uid != pcrypto.user.userinfo.id;
      }).join('') + '_v4');
      return hash;
    };

    self.sendCommonKey = function () {
      return self.createMyCommonKey().then(result => {
        //return Promise.reject("HI")
        return pcrypto.core.mtrx.client.sendStateEvent(chat.roomId, "m.room.encryption", result.export, "pcrypto." + pcrypto.user.userinfo.id + "." + result.export.hash);
      }).then(r => {
        return self.getCommonKey();
      }).catch(e => {
        console.error(e);
        return Promise.reject(e);
      });
    };

    var getCommonKeyEvent = function (userid, _hash) {
      var hash = _hash || usershash();

      if (!userid) userid = pcrypto.user.userinfo.id;
      var state_key = "pcrypto." + userid + '.' + hash;
      var events = chat.currentState.getStateEvents("m.room.encryption");

      var event = _.find(events, e => {
        return e.event.state_key == state_key;
      });

      if (event) {
        return event;
      }
    };

    self.getCommonKey = function (userid, _hash) {
      return _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].pretry(() => {
        var e = getCommonKeyEvent(userid, _hash);
        return e;
      }, 50, 5000).then(() => {
        var e = getCommonKeyEvent(userid, _hash);

        if (!e) {
          Promise.reject('m.room.encryption event not found');
        }

        return Promise.resolve(e.event);
      });
    };

    self.getOrCreateCommonKey = function () {
      var _e = null;
      var ce = getCommonKeyEvent();
      var promise = null;

      if (ce) {
        promise = Promise.resolve(ce.event);
      } else {
        promise = self.sendCommonKey();
      }

      return promise.then(event => {
        _e = event;
        return self.decryptKey(event);
      }).then(key => {
        return {
          key,
          hash: _e.content.hash,
          block: _e.content.block
        };
      });
    };

    self.createMyCommonKey = function () {
      var hash = usershash();
      var result = {
        private: {},
        export: {}
      };
      return pcryptoFile.randomkey().then(key => {
        result.private.secret = key;
        return pcryptoFile.key(key);
      }).then(key => {
        result.private.key = key;
        result.private.hash = hash;
        result.export.hash = hash;
        return self.encryptKey(result.private.secret);
      }).then(encrypted => {
        result.export.keys = encrypted.keys;
        result.export.block = encrypted.block;
        return result;
      });
    };

    self.decryptEventGroup = function (event) {
      if (!pcrypto.user.userinfo) {
        throw new Error('userinfo');
      }

      if (event.decrypting) {
        return event.decrypting;
      }

      var hash = event.content.hash;
      var sender = _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].getmatrixid(event.sender);
      var block = event.content.block;
      var dpromise = self.getCommonKey(sender, hash).then(event => {
        return self.decryptKey(event);
      }).then(key => {
        return pcryptoFile.decrypt(Buffer.from(event.content.body, 'hex'), key).then(decrypted => {
          var dec = new TextDecoder();
          var data = {
            body: dec.decode(new Uint8Array(decrypted)),
            msgtype: 'm.text'
          };
          return Promise.resolve(data);
        });
      }).finally(() => {
        delete event.decrypting;
      });
      event.decrypting = dpromise;
      return dpromise;
    };

    self.encryptEventGroup = /*#__PURE__*/function () {
      var _ref14 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (text) {
        var encryptedEvent = {
          msgtype: 'm.encrypted',
          body: {}
        };
        return self.getOrCreateCommonKey().then(info => {
          encryptedEvent.block = info.block;
          encryptedEvent.hash = info.hash;
          let utf8Encode = new TextEncoder();
          return pcryptoFile.encrypt(utf8Encode.encode(text), info.key).then(encrypted => {
            encryptedEvent.body = Buffer.from(encrypted).toString("hex");
            return Promise.resolve(encryptedEvent);
          });
        });
      });

      return function (_x21) {
        return _ref14.apply(this, arguments);
      };
    }();

    var decrypt = /*#__PURE__*/function () {
      var _ref15 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (keyData, _ref16) {
        let {
          encrypted,
          nonce
        } = _ref16;
        var key = yield miscreant__WEBPACK_IMPORTED_MODULE_5__["SIV"].importKey(keyData, "AES-SIV");

        var _encrypted = new Uint8Array(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._base64ToArrayBuffer(encrypted));

        var _nonce = new Uint8Array(_application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._base64ToArrayBuffer(nonce));

        var k = yield key.open(_encrypted, _nonce);
        var decrypted = yield new TextDecoder().decode(k);
        return decrypted;
      });

      return function decrypt(_x22, _x23) {
        return _ref15.apply(this, arguments);
      };
    }();

    var encrypt = /*#__PURE__*/function () {
      var _ref17 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (text, keyData) {
        let key = yield miscreant__WEBPACK_IMPORTED_MODULE_5__["SIV"].importKey(keyData, "AES-SIV");
        let plaintext = new Uint8Array(new TextEncoder().encode(text));
        let nonce = new Uint8Array(32);
        window.crypto.getRandomValues(nonce);
        let ciphertext = yield key.seal(plaintext, nonce);
        let encrypted = {
          encrypted: _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._arrayBufferToBase64(ciphertext.buffer),
          nonce: _application_functions__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]._arrayBufferToBase64(nonce.buffer)
        };
        return encrypted;
      });

      return function encrypt(_x24, _x25) {
        return _ref17.apply(this, arguments);
      };
    }();

    return self;
  });

  return function PcryptoRoom(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var PcryptoFile = function () {
  var self = this;
  var iv = [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34];

  var readFile = function (file) {
    let reader = new FileReader();
    if (window.cordova) reader = reader._realReader;
    reader.readAsArrayBuffer(file);
    return new Promise((resolve, reject) => {
      reader.onloadend = function (evt) {
        resolve(reader.result);
      };

      reader.onerror = function () {
        reject(reader.error);
      };
    });
  };

  var convertFile = function (blob, file) {
    return new (window.wFile || window.File)([blob], "encrypted", {
      type: "encrypted/" + file.type,
      name: file.name
    });
  };

  var convertDecryptedFile = function (blob, file) {
    return new (window.wFile || window.File)([blob], "decrypted", {
      type: (file.type || "").replace('encrypted/', ''),
      name: 'Unnamed'
    });
  };

  self.randomkey = function () {
    return new Promise(resolve => {
      var array = new Uint32Array(24);
      var token = window.crypto.getRandomValues(array).toString('hex');
      resolve(token);
    });
  };

  self.key = function (str) {
    let enc = new TextEncoder();

    function getKeyMaterial() {
      return window.crypto.subtle.importKey("raw", enc.encode(str), "PBKDF2", false, ["deriveBits", "deriveKey"]);
    }

    return getKeyMaterial().then(key => {
      return window.crypto.subtle.deriveKey({
        "name": "PBKDF2",
        salt: enc.encode('matrix.pocketnet'),
        "iterations": 10000,
        "hash": "SHA-256"
      }, key, {
        "name": "AES-CBC",
        "length": 256
      }, true, ["encrypt", "decrypt"]);
    });
  };

  self.encryptFile = function (file, secret, p) {
    return readFile(file).then(r => {
      return self.encrypt(r, secret, p);
    }).then(encrypted => {
      return Promise.resolve(convertFile(encrypted, file));
    });
  };

  self.decryptFile = function (file, secret, p) {
    return readFile(file).then(r => {
      return self.decrypt(r, secret, p);
    }).then(decrypted => {
      return Promise.resolve(convertDecryptedFile(decrypted, file));
    });
  };

  self.encrypt = function (strBytes, secret, p) {
    if (!strBytes || !secret) return Promise.reject('data');
    if (!p) p = {};
    p.charsetEnc = p.charsetEnc || 'utf8';
    p.charsetDec = p.charsetDec || 'hex';
    return self.key(secret).then(key => {
      return crypto.subtle.encrypt({
        name: "AES-CBC",
        iv: new Uint8Array(iv)
      }, key, strBytes);
    }).then(function (encrypted) {
      return encrypted;
    });
  };

  self.decrypt = function (encryptedBytes, secret, p) {
    if (!encryptedBytes || !secret) return Promise.reject('data');
    if (!p) p = {};
    p.charsetEnc = p.charsetEnc || 'utf8';
    p.charsetDec = p.charsetDec || 'hex';
    return self.key(secret).then(key => {
      if (!crypto.subtle) return Promise.reject('crypto.subtle');
      return crypto.subtle.decrypt({
        name: "AES-CBC",
        iv: new Uint8Array(iv)
      }, key, encryptedBytes);
    }).then(function (decrypted) {
      return decrypted;
    }).catch(e => {
      console.error(e);
      return Promise.reject(e);
    });
  };

  return self;
};

var Pcrypto = function (core, p) {
  //const EC = require('elliptic').ec
  secp256k1CurveN = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16); ///// 
  //console.log('secp256k1CurveN', secp256k1CurveN, secp256k1CurveN.toJSON())
  //console.log('bbn', bbn, bbn.toJSON())

  var self = this;
  var ls, lse;
  self.core = core;

  self.clearStorage = function () {
    self.core.mtrx.clearstorage('pcrypto');
  };

  self.currentblock = {
    height: 1
  };
  self.blocks = {};
  self.user = null;
  self.rooms = {};

  self.init = function (user) {
    self.user = user;
  };

  self.destroy = function () {
    _.each(self.rooms, function (r) {
      r.clear();
    });

    self.rooms = {};
    /*self.user = null*/
  };

  self.addroom = function (chat) {
    return pretry(() => {
      return core.user.private && core.user.private.length == 12;
    }).then( /*#__PURE__*/function () {
      var _ref18 = Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(function* (r) {
        if (self.rooms[chat.roomId]) {
          return self.rooms[chat.roomId].prepare();
        }

        var room = yield new PcryptoRoom(self, chat, {
          ls,
          lse
        });
        self.rooms[chat.roomId] = room;
        return room.prepare();
      });

      return function (_x26) {
        return _ref18.apply(this, arguments);
      };
    }());
  };

  self.set = {
    block: function (block) {
      if (block && block.height > self.currentblock.height) {
        self.currentblock = block;
      }

      if (block.height) {
        self.blocks[block.height] = block;
      }
    }
  };
  self.helpers = {
    checkuser: function () {
      if (core.user && core.user.private && core.user.private.length == 12 && core.user.userinfo && core.user.userinfo.keys && core.user.userinfo.keys.length) {
        var pk = core.user.userinfo.keys.join(',');

        var pk2 = _.map(core.user.private, function (p) {
          return p.public;
        }).join(',');

        return pk == pk2;
      }

      return false;
    }
    /*alternativeKeys : function(){
        if(core.user && core.user.private){
              var pk2 = _.map(core.user.private, function(p){
                return p.public
            })
              return pk2
          }
          return []
    }*/

  };

  self.prepare = function () {
    return Promise.all([Object(_chatstorage__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])('messages', 1), Object(_chatstorage__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])('events', 1)]).then(r => {
      ls = r[0];
      lse = r[1];
      return Promise.resolve();
    });
  };

  return self;
};

/* harmony default export */ __webpack_exports__["a"] = (Pcrypto);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("b639").Buffer))

/***/ }),

/***/ "9dd7":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".actions[data-v-16157ecb]{padding-top:9em}.connect[data-v-16157ecb]{padding-top:2em}.connect[data-v-16157ecb] .previewWrapper{display:block;max-width:70%;margin:0 auto;padding:2em 0}.connect[data-v-16157ecb] .iconWrapper{margin:0 auto}.connect[data-v-16157ecb] .infoWrapper{padding:0}.connect .connectCaption[data-v-16157ecb]{max-width:70%;margin:0 auto}.connect .connectCaption span[data-v-16157ecb]{font-size:.8em}#userUnauthorized[data-v-16157ecb]{height:100%}#userUnauthorized.bin[data-v-16157ecb]{transition:.3s}#userUnauthorized.bin.minimized .wrapper[data-v-16157ecb]{top:60px;bottom:100px}#userUnauthorized.bin.minimized[data-v-16157ecb]:not(.active){width:44px}#userUnauthorized.bin.minimized:not(.active) .actions[data-v-16157ecb]{display:none}#userUnauthorized.bin.active .wrapper[data-v-16157ecb]{width:344px;transform:translateX(-300px)}.table[data-v-16157ecb]{height:100%}.table .cell[data-v-16157ecb]{vertical-align:middle}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "9e54":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalIndexedDBStoreBackend = LocalIndexedDBStoreBackend;

var _syncAccumulator = __webpack_require__("2d78");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var IndexedDBHelpers = _interopRequireWildcard(__webpack_require__("6146"));

var _logger = __webpack_require__("63c7");
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


const VERSION = 3;

function createDatabase(db) {
  // Make user store, clobber based on user ID. (userId property of User objects)
  db.createObjectStore("users", {
    keyPath: ["userId"]
  }); // Make account data store, clobber based on event type.
  // (event.type property of MatrixEvent objects)

  db.createObjectStore("accountData", {
    keyPath: ["type"]
  }); // Make /sync store (sync tokens, room data, etc), always clobber (const key).

  db.createObjectStore("sync", {
    keyPath: ["clobber"]
  });
}

function upgradeSchemaV2(db) {
  const oobMembersStore = db.createObjectStore("oob_membership_events", {
    keyPath: ["room_id", "state_key"]
  });
  oobMembersStore.createIndex("room", "room_id");
}

function upgradeSchemaV3(db) {
  db.createObjectStore("client_options", {
    keyPath: ["clobber"]
  });
}
/**
 * Helper method to collect results from a Cursor and promiseify it.
 * @param {ObjectStore|Index} store The store to perform openCursor on.
 * @param {IDBKeyRange=} keyRange Optional key range to apply on the cursor.
 * @param {Function} resultMapper A function which is repeatedly called with a
 * Cursor.
 * Return the data you want to keep.
 * @return {Promise<T[]>} Resolves to an array of whatever you returned from
 * resultMapper.
 */


function selectQuery(store, keyRange, resultMapper) {
  const query = store.openCursor(keyRange);
  return new Promise((resolve, reject) => {
    const results = [];

    query.onerror = event => {
      reject(new Error("Query failed: " + event.target.errorCode));
    }; // collect results


    query.onsuccess = event => {
      const cursor = event.target.result;

      if (!cursor) {
        resolve(results);
        return; // end of results
      }

      results.push(resultMapper(cursor));
      cursor.continue();
    };
  });
}

function txnAsPromise(txn) {
  return new Promise((resolve, reject) => {
    txn.oncomplete = function (event) {
      resolve(event);
    };

    txn.onerror = function (event) {
      reject(event.target.error);
    };
  });
}

function reqAsEventPromise(req) {
  return new Promise((resolve, reject) => {
    req.onsuccess = function (event) {
      resolve(event);
    };

    req.onerror = function (event) {
      reject(event.target.error);
    };
  });
}

function reqAsPromise(req) {
  return new Promise((resolve, reject) => {
    req.onsuccess = () => resolve(req);

    req.onerror = err => reject(err);
  });
}

function reqAsCursorPromise(req) {
  return reqAsEventPromise(req).then(event => event.target.result);
}
/**
 * Does the actual reading from and writing to the indexeddb
 *
 * Construct a new Indexed Database store backend. This requires a call to
 * <code>connect()</code> before this store can be used.
 * @constructor
 * @param {Object} indexedDBInterface The Indexed DB interface e.g
 * <code>window.indexedDB</code>
 * @param {string=} dbName Optional database name. The same name must be used
 * to open the same database.
 */


function LocalIndexedDBStoreBackend(indexedDBInterface, dbName) {
  this.indexedDB = indexedDBInterface;
  this._dbName = "matrix-js-sdk:" + (dbName || "default");
  this.db = null;
  this._disconnected = true;
  this._syncAccumulator = new _syncAccumulator.SyncAccumulator();
  this._isNewlyCreated = false;
}

LocalIndexedDBStoreBackend.exists = function (indexedDB, dbName) {
  dbName = "matrix-js-sdk:" + (dbName || "default");
  return IndexedDBHelpers.exists(indexedDB, dbName);
};

LocalIndexedDBStoreBackend.prototype = {
  /**
   * Attempt to connect to the database. This can fail if the user does not
   * grant permission.
   * @return {Promise} Resolves if successfully connected.
   */
  connect: function () {
    if (!this._disconnected) {
      _logger.logger.log(`LocalIndexedDBStoreBackend.connect: already connected or connecting`);

      return Promise.resolve();
    }

    this._disconnected = false;

    _logger.logger.log(`LocalIndexedDBStoreBackend.connect: connecting...`);

    const req = this.indexedDB.open(this._dbName, VERSION);

    req.onupgradeneeded = ev => {
      const db = ev.target.result;
      const oldVersion = ev.oldVersion;

      _logger.logger.log(`LocalIndexedDBStoreBackend.connect: upgrading from ${oldVersion}`);

      if (oldVersion < 1) {
        // The database did not previously exist.
        this._isNewlyCreated = true;
        createDatabase(db);
      }

      if (oldVersion < 2) {
        upgradeSchemaV2(db);
      }

      if (oldVersion < 3) {
        upgradeSchemaV3(db);
      } // Expand as needed.

    };

    req.onblocked = () => {
      _logger.logger.log(`can't yet open LocalIndexedDBStoreBackend because it is open elsewhere`);
    };

    _logger.logger.log(`LocalIndexedDBStoreBackend.connect: awaiting connection...`);

    return reqAsEventPromise(req).then(ev => {
      _logger.logger.log(`LocalIndexedDBStoreBackend.connect: connected`);

      this.db = ev.target.result; // add a poorly-named listener for when deleteDatabase is called
      // so we can close our db connections.

      this.db.onversionchange = () => {
        this.db.close();
      };

      return this._init();
    });
  },

  /** @return {bool} whether or not the database was newly created in this session. */
  isNewlyCreated: function () {
    return Promise.resolve(this._isNewlyCreated);
  },

  /**
   * Having connected, load initial data from the database and prepare for use
   * @return {Promise} Resolves on success
   */
  _init: function () {
    return Promise.all([this._loadAccountData(), this._loadSyncData()]).then(_ref => {
      let [accountData, syncData] = _ref;

      _logger.logger.log(`LocalIndexedDBStoreBackend: loaded initial data`);

      this._syncAccumulator.accumulate({
        next_batch: syncData.nextBatch,
        rooms: syncData.roomsData,
        groups: syncData.groupsData,
        account_data: {
          events: accountData
        }
      }, true);
    });
  },

  /**
   * Returns the out-of-band membership events for this room that
   * were previously loaded.
   * @param {string} roomId
   * @returns {Promise<event[]>} the events, potentially an empty array if OOB loading didn't yield any new members
   * @returns {null} in case the members for this room haven't been stored yet
   */
  getOutOfBandMembers: function (roomId) {
    return new Promise((resolve, reject) => {
      const tx = this.db.transaction(["oob_membership_events"], "readonly");
      const store = tx.objectStore("oob_membership_events");
      const roomIndex = store.index("room");
      const range = IDBKeyRange.only(roomId);
      const request = roomIndex.openCursor(range);
      const membershipEvents = []; // did we encounter the oob_written marker object
      // amongst the results? That means OOB member
      // loading already happened for this room
      // but there were no members to persist as they
      // were all known already

      let oobWritten = false;

      request.onsuccess = event => {
        const cursor = event.target.result;

        if (!cursor) {
          // Unknown room
          if (!membershipEvents.length && !oobWritten) {
            return resolve(null);
          }

          return resolve(membershipEvents);
        }

        const record = cursor.value;

        if (record.oob_written) {
          oobWritten = true;
        } else {
          membershipEvents.push(record);
        }

        cursor.continue();
      };

      request.onerror = err => {
        reject(err);
      };
    }).then(events => {
      _logger.logger.log(`LL: got ${events && events.length}` + ` membershipEvents from storage for room ${roomId} ...`);

      return events;
    });
  },

  /**
   * Stores the out-of-band membership events for this room. Note that
   * it still makes sense to store an empty array as the OOB status for the room is
   * marked as fetched, and getOutOfBandMembers will return an empty array instead of null
   * @param {string} roomId
   * @param {event[]} membershipEvents the membership events to store
   */
  setOutOfBandMembers: function () {
    var _ref2 = _asyncToGenerator(function* (roomId, membershipEvents) {
      _logger.logger.log(`LL: backend about to store ${membershipEvents.length}` + ` members for ${roomId}`);

      const tx = this.db.transaction(["oob_membership_events"], "readwrite");
      const store = tx.objectStore("oob_membership_events");
      membershipEvents.forEach(e => {
        store.put(e);
      }); // aside from all the events, we also write a marker object to the store
      // to mark the fact that OOB members have been written for this room.
      // It's possible that 0 members need to be written as all where previously know
      // but we still need to know whether to return null or [] from getOutOfBandMembers
      // where null means out of band members haven't been stored yet for this room

      const markerObject = {
        room_id: roomId,
        oob_written: true,
        state_key: 0
      };
      store.put(markerObject);
      yield txnAsPromise(tx);

      _logger.logger.log(`LL: backend done storing for ${roomId}!`);
    });

    return function setOutOfBandMembers(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(),
  clearOutOfBandMembers: function () {
    var _ref3 = _asyncToGenerator(function* (roomId) {
      // the approach to delete all members for a room
      // is to get the min and max state key from the index
      // for that room, and then delete between those
      // keys in the store.
      // this should be way faster than deleting every member
      // individually for a large room.
      const readTx = this.db.transaction(["oob_membership_events"], "readonly");
      const store = readTx.objectStore("oob_membership_events");
      const roomIndex = store.index("room");
      const roomRange = IDBKeyRange.only(roomId);
      const minStateKeyProm = reqAsCursorPromise(roomIndex.openKeyCursor(roomRange, "next")).then(cursor => cursor && cursor.primaryKey[1]);
      const maxStateKeyProm = reqAsCursorPromise(roomIndex.openKeyCursor(roomRange, "prev")).then(cursor => cursor && cursor.primaryKey[1]);
      const [minStateKey, maxStateKey] = yield Promise.all([minStateKeyProm, maxStateKeyProm]);
      const writeTx = this.db.transaction(["oob_membership_events"], "readwrite");
      const writeStore = writeTx.objectStore("oob_membership_events");
      const membersKeyRange = IDBKeyRange.bound([roomId, minStateKey], [roomId, maxStateKey]);

      _logger.logger.log(`LL: Deleting all users + marker in storage for ` + `room ${roomId}, with key range:`, [roomId, minStateKey], [roomId, maxStateKey]);

      yield reqAsPromise(writeStore.delete(membersKeyRange));
    });

    return function clearOutOfBandMembers(_x3) {
      return _ref3.apply(this, arguments);
    };
  }(),

  /**
   * Clear the entire database. This should be used when logging out of a client
   * to prevent mixing data between accounts.
   * @return {Promise} Resolved when the database is cleared.
   */
  clearDatabase: function () {
    return new Promise((resolve, reject) => {
      _logger.logger.log(`Removing indexeddb instance: ${this._dbName}`);

      const req = this.indexedDB.deleteDatabase(this._dbName);

      req.onblocked = () => {
        _logger.logger.log(`can't yet delete indexeddb ${this._dbName}` + ` because it is open elsewhere`);
      };

      req.onerror = ev => {
        // in firefox, with indexedDB disabled, this fails with a
        // DOMError. We treat this as non-fatal, so that we can still
        // use the app.
        _logger.logger.warn(`unable to delete js-sdk store indexeddb: ${ev.target.error}`);

        resolve();
      };

      req.onsuccess = () => {
        _logger.logger.log(`Removed indexeddb instance: ${this._dbName}`);

        resolve();
      };
    });
  },

  /**
   * @param {boolean=} copy If false, the data returned is from internal
   * buffers and must not be mutated. Otherwise, a copy is made before
   * returning such that the data can be safely mutated. Default: true.
   *
   * @return {Promise} Resolves with a sync response to restore the
   * client state to where it was at the last save, or null if there
   * is no saved sync data.
   */
  getSavedSync: function (copy) {
    if (copy === undefined) copy = true;

    const data = this._syncAccumulator.getJSON();

    if (!data.nextBatch) return Promise.resolve(null);

    if (copy) {
      // We must deep copy the stored data so that the /sync processing code doesn't
      // corrupt the internal state of the sync accumulator (it adds non-clonable keys)
      return Promise.resolve(utils.deepCopy(data));
    } else {
      return Promise.resolve(data);
    }
  },
  getNextBatchToken: function () {
    return Promise.resolve(this._syncAccumulator.getNextBatchToken());
  },
  setSyncData: function (syncData) {
    return Promise.resolve().then(() => {
      this._syncAccumulator.accumulate(syncData);
    });
  },
  syncToDatabase: function (userTuples) {
    const syncData = this._syncAccumulator.getJSON(true);

    return Promise.all([this._persistUserPresenceEvents(userTuples), this._persistAccountData(syncData.accountData), this._persistSyncData(syncData.nextBatch, syncData.roomsData, syncData.groupsData)]);
  },

  /**
   * Persist rooms /sync data along with the next batch token.
   * @param {string} nextBatch The next_batch /sync value.
   * @param {Object} roomsData The 'rooms' /sync data from a SyncAccumulator
   * @param {Object} groupsData The 'groups' /sync data from a SyncAccumulator
   * @return {Promise} Resolves if the data was persisted.
   */
  _persistSyncData: function (nextBatch, roomsData, groupsData) {
    _logger.logger.log("Persisting sync data up to", nextBatch);

    return utils.promiseTry(() => {
      const txn = this.db.transaction(["sync"], "readwrite");
      const store = txn.objectStore("sync");
      store.put({
        clobber: "-",
        // constant key so will always clobber
        nextBatch: nextBatch,
        roomsData: roomsData,
        groupsData: groupsData
      }); // put == UPSERT

      return txnAsPromise(txn);
    });
  },

  /**
   * Persist a list of account data events. Events with the same 'type' will
   * be replaced.
   * @param {Object[]} accountData An array of raw user-scoped account data events
   * @return {Promise} Resolves if the events were persisted.
   */
  _persistAccountData: function (accountData) {
    return utils.promiseTry(() => {
      const txn = this.db.transaction(["accountData"], "readwrite");
      const store = txn.objectStore("accountData");

      for (let i = 0; i < accountData.length; i++) {
        store.put(accountData[i]); // put == UPSERT
      }

      return txnAsPromise(txn);
    });
  },

  /**
   * Persist a list of [user id, presence event] they are for.
   * Users with the same 'userId' will be replaced.
   * Presence events should be the event in its raw form (not the Event
   * object)
   * @param {Object[]} tuples An array of [userid, event] tuples
   * @return {Promise} Resolves if the users were persisted.
   */
  _persistUserPresenceEvents: function (tuples) {
    return utils.promiseTry(() => {
      const txn = this.db.transaction(["users"], "readwrite");
      const store = txn.objectStore("users");

      for (const tuple of tuples) {
        store.put({
          userId: tuple[0],
          event: tuple[1]
        }); // put == UPSERT
      }

      return txnAsPromise(txn);
    });
  },

  /**
   * Load all user presence events from the database. This is not cached.
   * FIXME: It would probably be more sensible to store the events in the
   * sync.
   * @return {Promise<Object[]>} A list of presence events in their raw form.
   */
  getUserPresenceEvents: function () {
    return utils.promiseTry(() => {
      const txn = this.db.transaction(["users"], "readonly");
      const store = txn.objectStore("users");
      return selectQuery(store, undefined, cursor => {
        return [cursor.value.userId, cursor.value.event];
      });
    });
  },

  /**
   * Load all the account data events from the database. This is not cached.
   * @return {Promise<Object[]>} A list of raw global account events.
   */
  _loadAccountData: function () {
    _logger.logger.log(`LocalIndexedDBStoreBackend: loading account data...`);

    return utils.promiseTry(() => {
      const txn = this.db.transaction(["accountData"], "readonly");
      const store = txn.objectStore("accountData");
      return selectQuery(store, undefined, cursor => {
        return cursor.value;
      }).then(result => {
        _logger.logger.log(`LocalIndexedDBStoreBackend: loaded account data`);

        return result;
      });
    });
  },

  /**
   * Load the sync data from the database.
   * @return {Promise<Object>} An object with "roomsData" and "nextBatch" keys.
   */
  _loadSyncData: function () {
    _logger.logger.log(`LocalIndexedDBStoreBackend: loading sync data...`);

    return utils.promiseTry(() => {
      const txn = this.db.transaction(["sync"], "readonly");
      const store = txn.objectStore("sync");
      return selectQuery(store, undefined, cursor => {
        return cursor.value;
      }).then(results => {
        _logger.logger.log(`LocalIndexedDBStoreBackend: loaded sync data`);

        if (results.length > 1) {
          _logger.logger.warn("loadSyncData: More than 1 sync row found.");
        }

        return results.length > 0 ? results[0] : {};
      });
    });
  },
  getClientOptions: function () {
    return Promise.resolve().then(() => {
      const txn = this.db.transaction(["client_options"], "readonly");
      const store = txn.objectStore("client_options");
      return selectQuery(store, undefined, cursor => {
        if (cursor.value && cursor.value && cursor.value.options) {
          return cursor.value.options;
        }
      }).then(results => results[0]);
    });
  },
  storeClientOptions: function () {
    var _ref4 = _asyncToGenerator(function* (options) {
      const txn = this.db.transaction(["client_options"], "readwrite");
      const store = txn.objectStore("client_options");
      store.put({
        clobber: "-",
        // constant key so will always clobber
        options: options
      }); // put == UPSERT

      yield txnAsPromise(txn);
    });

    return function storeClientOptions(_x4) {
      return _ref4.apply(this, arguments);
    };
  }()
};

/***/ }),

/***/ "9e6a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("d233");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
};

var interpretNumericEntities = function (str) {
    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};

var parseArrayValue = function (val, options) {
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
        return val.split(',');
    }

    return val;
};

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) {
        for (i = 0; i < parts.length; ++i) {
            if (parts[i].indexOf('utf8=') === 0) {
                if (parts[i] === charsetSentinel) {
                    charset = 'utf-8';
                } else if (parts[i] === isoSentinel) {
                    charset = 'iso-8859-1';
                }
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            }
        }
    }

    for (i = 0; i < parts.length; ++i) {
        if (i === skipIndex) {
            continue;
        }
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
            val = utils.maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function (encodedVal) {
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                }
            );
        }

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
            val = interpretNumericEntities(val);
        }

        if (part.indexOf('[]=') > -1) {
            val = isArray(val) ? [val] : val;
        }

        if (has.call(obj, key)) {
            obj[key] = utils.combine(obj[key], val);
        } else {
            obj[key] = val;
        }
    }

    return obj;
};

var parseObject = function (chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) {
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) {
            obj = [].concat(leaf);
        } else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') {
                obj = { 0: leaf };
            } else if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) {
                obj = [];
                obj[index] = leaf;
            } else if (cleanRoot !== '__proto__') {
                obj[cleanRoot] = leaf;
            }
        }

        leaf = obj;
    }

    return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
        return;
    }

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) {
                return;
            }
        }

        keys.push(parent);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) {
                return;
            }
        }
        keys.push(segment[1]);
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return parseObject(keys, val, options, valuesParsed);
};

var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
        return defaults;
    }

    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
        throw new TypeError('Decoder has to be a function.');
    }

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    }
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    return {
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    };
};

module.exports = function (str, opts) {
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') {
        return options.plainObjects ? Object.create(null) : {};
    }

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    }

    if (options.allowSparse === true) {
        return obj;
    }

    return utils.compact(obj);
};


/***/ }),

/***/ "9e80":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_517e1e1f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("5a2d");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_517e1e1f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_517e1e1f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_517e1e1f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_517e1e1f_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "9f9d":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba"), __webpack_require__("4362")))

/***/ }),

/***/ "a026":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "production" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "production" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (false) { var repeat, classify, classifyRE, hasConsole; }

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (false) {}
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (false) {}
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (false) {}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       false && false;

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     false && false;
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (false) {}
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "production" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (false) {}
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (false) {}
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (false) {}
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (false) {}

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (false) {}
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    false
  ) {}
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (false) {}
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
  if (!valid && haveExpectedTypes) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType (value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

var functionTypeCheckRE = /^\s*function (\w+)/;

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  // check if we need to specify expected value
  if (
    expectedTypes.length === 1 &&
    isExplicable(expectedType) &&
    isExplicable(typeof value) &&
    !isBoolean(expectedType, receivedType)
  ) {
    message += " with value " + (styleValue(value, expectedType));
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + (styleValue(value, receivedType)) + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
function isExplicable (value) {
  return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (false) {}
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

if (false) { var perf; }

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       false && false;
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (false) { var keyInLowerCase; }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (false) {} else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (false) {}
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (
      !vnode ||
      (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallbackRender,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if (false) {}
      props = extend(extend({}, bindObject), props);
    }
    nodes =
      scopedSlotFn(props) ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes =
      this.$slots[name] ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
  return eventKeyCode === undefined
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       false && false;
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       false && false;
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (false) {}
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (false) {}
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (false) {}
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  // we know it's MountedComponentVNode but flow doesn't
  vnode,
  // activeInstance in lifecycle state
  parent
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     false && false;
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (false
  ) {}
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (false) {}
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (false) {} else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (false) {} else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (false) {}
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       false && false;
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 false
                  ? (undefined)
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (false) { var lowerCaseEvent; }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (false) {}
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (false) {} else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (false) {}

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
    (!newScopedSlots && vm.$scopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (false) {}
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (false) {}
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (false) {}
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (false) {}
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  false
    ? undefined
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       false && false;
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        var info = "callback for watcher \"" + (this.expression) + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (false) { var hyphenatedKey; } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     false && false;
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (false) {}
    if (props && hasOwn(props, key)) {
       false && false;
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (false) {}

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (false) {}
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (false) {}
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (false) {}
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (false) {}
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (false) {}

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (false) {} else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (false) {}

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (false
  ) {}
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (false) {}

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (false) {}
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */





function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;
      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance,
        };
        keys.push(keyToCache);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  updated: function updated () {
    this.cacheVNode();
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (false) {}
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.14';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
       false && false;
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.asyncFactory === b.asyncFactory && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (false) {}

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (false) {}
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (false) {}
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (false) {}

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (false) {}
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (false) {}
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (false) {}
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    false
  ) {}

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (false) {}

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (false) {}

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  if (false) { var binding, typeBinding, value$1; }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (false) {}

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (false) {}

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
     false && false;
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (false) {}

    var mode = this.mode;

    // warn invalid mode
    if (false
    ) {}

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (false) { var name, opts; }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        false
      ) {}
    }
    if (false
    ) {}
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (false) { var res; }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (false) { var res; }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (false) {}
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (false) {}
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (false
        ) {}
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:|^#/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /[ \f\t\r\n]+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!(
    el.component ||
    el.attrsMap[':is'] ||
    el.attrsMap['v-bind:is'] ||
    !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag))
  ); };
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        if (false) {}
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else if (false) {}
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      if (false) {}

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
         false && false;
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        if (false) {}
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (false) {}
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        if (false) {}
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (false) {}
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anything as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (false) {}
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if (false) { var parent, iterator; }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else if (false) {}
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (false) {}
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (false) {}
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (false) {}
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (false) {}
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        if (false) {}
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        if (false) {}
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else if (false) {}
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (false) {}
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          false
        ) {}
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (false) {}
      }
    } else {
      // literal attribute
      if (false) { var res; }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      false
    ) {}
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + ".apply(null, arguments)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ").apply(null, arguments)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (false) {}
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  // fix #11483, Root level <script> tags should not be rendered.
  var code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
       false && false;
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (false
  ) {}

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (false) {}
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? (",function(){return " + children + "}") : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (name === 'v-slot' || name[0] === '#') {
            checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stripped = exp.replace(stripStringRE, '');
  var keywordMatch = stripped.match(unaryOperatorsRE);
  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

function checkFunctionParameterExpression (exp, text, warn, range) {
  try {
    new Function(exp, '');
  } catch (e) {
    warn(
      "invalid function parameter expression: " + (e.message) + " in\n\n" +
      "    " + exp + "\n\n" +
      "  Raw expression: " + (text.trim()) + "\n",
      range
    );
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    if (false) {}

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (false) {}

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (false) {}

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (false) { var leadingSpaceLength; }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      if (false) {}
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
     false && false;
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (false) {}
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (false) {}
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (false) {}

      var ref = compileToFunctions(template, {
        outputSourceRange: "production" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (false) {}
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "a04b":
/***/ (function(module, exports, __webpack_require__) {

var toPrimitive = __webpack_require__("c04e");
var isSymbol = __webpack_require__("d9b5");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "a071":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_332740e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("40af");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_332740e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_332740e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_332740e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_icon_vue_vue_type_style_index_0_id_332740e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "a099":
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__("206d")
exports.pbkdf2Sync = __webpack_require__("e07b")


/***/ }),

/***/ "a0d3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("0f7c");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "a120":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixEvent = exports.EventStatus = void 0;

var _events = __webpack_require__("faa1");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. See {@link MatrixEvent} and {@link RoomEvent} for
 * the public classes.
 * @module models/event
 */

/**
 * Enum for event statuses.
 * @readonly
 * @enum {string}
 */


const EventStatus = {
  /** The event was not sent and will no longer be retried. */
  NOT_SENT: "not_sent",

  /** The message is being encrypted */
  ENCRYPTING: "encrypting",

  /** The event is in the process of being sent. */
  SENDING: "sending",

  /** The event is in a queue waiting to be sent. */
  QUEUED: "queued",

  /** The event has been sent to the server, but we have not yet received the
   * echo. */
  SENT: "sent",

  /** The event was cancelled before it was successfully sent. */
  CANCELLED: "cancelled"
};
exports.EventStatus = EventStatus;
const interns = {};

function intern(str) {
  if (!interns[str]) {
    interns[str] = str;
  }

  return interns[str];
}
/**
 * Construct a Matrix Event object
 * @constructor
 *
 * @param {Object} event The raw event to be wrapped in this DAO
 *
 * @prop {Object} event The raw (possibly encrypted) event. <b>Do not access
 * this property</b> directly unless you absolutely have to. Prefer the getter
 * methods defined on this class. Using the getter methods shields your app
 * from changes to event JSON between Matrix versions.
 *
 * @prop {RoomMember} sender The room member who sent this event, or null e.g.
 * this is a presence event. This is only guaranteed to be set for events that
 * appear in a timeline, ie. do not guarantee that it will be set on state
 * events.
 * @prop {RoomMember} target The room member who is the target of this event, e.g.
 * the invitee, the person being banned, etc.
 * @prop {EventStatus} status The sending status of the event.
 * @prop {Error} error most recent error associated with sending the event, if any
 * @prop {boolean} forwardLooking True if this event is 'forward looking', meaning
 * that getDirectionalContent() will return event.content and not event.prev_content.
 * Default: true. <strong>This property is experimental and may change.</strong>
 */


const MatrixEvent = function (event) {
  // intern the values of matrix events to force share strings and reduce the
  // amount of needless string duplication. This can save moderate amounts of
  // memory (~10% on a 350MB heap).
  // 'membership' at the event level (rather than the content level) is a legacy
  // field that Element never otherwise looks at, but it will still take up a lot
  // of space if we don't intern it.
  ["state_key", "type", "sender", "room_id", "membership"].forEach(prop => {
    if (!event[prop]) {
      return;
    }

    event[prop] = intern(event[prop]);
  });
  ["membership", "avatar_url", "displayname"].forEach(prop => {
    if (!event.content || !event.content[prop]) {
      return;
    }

    event.content[prop] = intern(event.content[prop]);
  });
  ["rel_type"].forEach(prop => {
    if (!event.content || !event.content["m.relates_to"] || !event.content["m.relates_to"][prop]) {
      return;
    }

    event.content["m.relates_to"][prop] = intern(event.content["m.relates_to"][prop]);
  });
  this.event = event || {};
  this.sender = null;
  this.target = null;
  this.status = null;
  this.error = null;
  this.forwardLooking = true;
  this._pushActions = null;
  this._replacingEvent = null;
  this._localRedactionEvent = null;
  this._isCancelled = false;
  this._clearEvent = {};
  /* curve25519 key which we believe belongs to the sender of the event. See
   * getSenderKey()
   */

  this._senderCurve25519Key = null;
  /* ed25519 key which the sender of this event (for olm) or the creator of
   * the megolm session (for megolm) claims to own. See getClaimedEd25519Key()
   */

  this._claimedEd25519Key = null;
  /* curve25519 keys of devices involved in telling us about the
   * _senderCurve25519Key and _claimedEd25519Key.
   * See getForwardingCurve25519KeyChain().
   */

  this._forwardingCurve25519KeyChain = [];
  /* where the decryption key is untrusted
   */

  this._untrusted = null;
  /* if we have a process decrypting this event, a Promise which resolves
   * when it is finished. Normally null.
   */

  this._decryptionPromise = null;
  /* flag to indicate if we should retry decrypting this event after the
   * first attempt (eg, we have received new data which means that a second
   * attempt may succeed)
   */

  this._retryDecryption = false;
  /* If the event is a `m.key.verification.request` (or to_device `m.key.verification.start`) event,
   * `Crypto` will set this the `VerificationRequest` for the event
   * so it can be easily accessed from the timeline.
   */

  this.verificationRequest = null;
  /* The txnId with which this event was sent if it was during this session,
     allows for a unique ID which does not change when the event comes back down sync.
   */

  this._txnId = event.txn_id || null;
  /* Set an approximate timestamp for the event relative the local clock.
   * This will inherently be approximate because it doesn't take into account
   * the time between the server putting the 'age' field on the event as it sent
   * it to us and the time we're now constructing this event, but that's better
   * than assuming the local clock is in sync with the origin HS's clock.
   */

  this._localTimestamp = Date.now() - this.getAge();
};

exports.MatrixEvent = MatrixEvent;
utils.inherits(MatrixEvent, _events.EventEmitter);
utils.extend(MatrixEvent.prototype, {
  /**
   * Get the event_id for this event.
   * @return {string} The event ID, e.g. <code>$143350589368169JsLZx:localhost
   * </code>
   */
  getId: function () {
    return this.event.event_id;
  },

  /**
   * Get the user_id for this event.
   * @return {string} The user ID, e.g. <code>@alice:matrix.org</code>
   */
  getSender: function () {
    return this.event.sender || this.event.user_id; // v2 / v1
  },

  /**
   * Get the (decrypted, if necessary) type of event.
   *
   * @return {string} The event type, e.g. <code>m.room.message</code>
   */
  getType: function () {
    return this._clearEvent.type || this.event.type;
  },

  /**
   * Get the (possibly encrypted) type of the event that will be sent to the
   * homeserver.
   *
   * @return {string} The event type.
   */
  getWireType: function () {
    return this.event.type;
  },

  /**
   * Get the room_id for this event. This will return <code>undefined</code>
   * for <code>m.presence</code> events.
   * @return {string} The room ID, e.g. <code>!cURbafjkfsMDVwdRDQ:matrix.org
   * </code>
   */
  getRoomId: function () {
    return this.event.room_id;
  },

  /**
   * Get the timestamp of this event.
   * @return {Number} The event timestamp, e.g. <code>1433502692297</code>
   */
  getTs: function () {
    return this.event.origin_server_ts;
  },

  /**
   * Get the timestamp of this event, as a Date object.
   * @return {Date} The event date, e.g. <code>new Date(1433502692297)</code>
   */
  getDate: function () {
    return this.event.origin_server_ts ? new Date(this.event.origin_server_ts) : null;
  },

  /**
   * Get the (decrypted, if necessary) event content JSON, even if the event
   * was replaced by another event.
   *
   * @return {Object} The event content JSON, or an empty object.
   */
  getOriginalContent: function () {
    if (this._localRedactionEvent) {
      return {};
    }

    return this._clearEvent.content || this.event.content || {};
  },

  /**
   * Get the (decrypted, if necessary) event content JSON,
   * or the content from the replacing event, if any.
   * See `makeReplaced`.
   *
   * @return {Object} The event content JSON, or an empty object.
   */
  getContent: function () {
    if (this._localRedactionEvent) {
      return {};
    } else if (this._replacingEvent) {
      return this._replacingEvent.getContent()["m.new_content"] || {};
    } else {
      return this.getOriginalContent();
    }
  },

  /**
   * Get the (possibly encrypted) event content JSON that will be sent to the
   * homeserver.
   *
   * @return {Object} The event content JSON, or an empty object.
   */
  getWireContent: function () {
    return this.event.content || {};
  },

  /**
   * Get the previous event content JSON. This will only return something for
   * state events which exist in the timeline.
   * @return {Object} The previous event content JSON, or an empty object.
   */
  getPrevContent: function () {
    // v2 then v1 then default
    return this.getUnsigned().prev_content || this.event.prev_content || {};
  },

  /**
   * Get either 'content' or 'prev_content' depending on if this event is
   * 'forward-looking' or not. This can be modified via event.forwardLooking.
   * In practice, this means we get the chronologically earlier content value
   * for this event (this method should surely be called getEarlierContent)
   * <strong>This method is experimental and may change.</strong>
   * @return {Object} event.content if this event is forward-looking, else
   * event.prev_content.
   */
  getDirectionalContent: function () {
    return this.forwardLooking ? this.getContent() : this.getPrevContent();
  },

  /**
   * Get the age of this event. This represents the age of the event when the
   * event arrived at the device, and not the age of the event when this
   * function was called.
   * @return {Number} The age of this event in milliseconds.
   */
  getAge: function () {
    return this.getUnsigned().age || this.event.age; // v2 / v1
  },

  /**
   * Get the age of the event when this function was called.
   * This is the 'age' field adjusted according to how long this client has
   * had the event.
   * @return {Number} The age of this event in milliseconds.
   */
  getLocalAge: function () {
    return Date.now() - this._localTimestamp;
  },

  /**
   * Get the event state_key if it has one. This will return <code>undefined
   * </code> for message events.
   * @return {string} The event's <code>state_key</code>.
   */
  getStateKey: function () {
    return this.event.state_key;
  },

  /**
   * Check if this event is a state event.
   * @return {boolean} True if this is a state event.
   */
  isState: function () {
    return this.event.state_key !== undefined;
  },

  /**
   * Replace the content of this event with encrypted versions.
   * (This is used when sending an event; it should not be used by applications).
   *
   * @internal
   *
   * @param {string} crypto_type type of the encrypted event - typically
   * <tt>"m.room.encrypted"</tt>
   *
   * @param {object} crypto_content raw 'content' for the encrypted event.
   *
   * @param {string} senderCurve25519Key curve25519 key to record for the
   *   sender of this event.
   *   See {@link module:models/event.MatrixEvent#getSenderKey}.
   *
   * @param {string} claimedEd25519Key claimed ed25519 key to record for the
   *   sender if this event.
   *   See {@link module:models/event.MatrixEvent#getClaimedEd25519Key}
   */
  makeEncrypted: function (crypto_type, crypto_content, senderCurve25519Key, claimedEd25519Key) {
    // keep the plain-text data for 'view source'
    this._clearEvent = {
      type: this.event.type,
      content: this.event.content
    };
    this.event.type = crypto_type;
    this.event.content = crypto_content;
    this._senderCurve25519Key = senderCurve25519Key;
    this._claimedEd25519Key = claimedEd25519Key;
  },

  /**
   * Check if this event is currently being decrypted.
   *
   * @return {boolean} True if this event is currently being decrypted, else false.
   */
  isBeingDecrypted: function () {
    return this._decryptionPromise != null;
  },

  /**
   * Check if this event is an encrypted event which we failed to decrypt
   *
   * (This implies that we might retry decryption at some point in the future)
   *
   * @return {boolean} True if this event is an encrypted event which we
   *     couldn't decrypt.
   */
  isDecryptionFailure: function () {
    return this._clearEvent && this._clearEvent.content && this._clearEvent.content.msgtype === "m.bad.encrypted";
  },

  /**
   * Start the process of trying to decrypt this event.
   *
   * (This is used within the SDK: it isn't intended for use by applications)
   *
   * @internal
   *
   * @param {module:crypto} crypto crypto module
   * @param {bool} isRetry True if this is a retry (enables more logging)
   *
   * @returns {Promise} promise which resolves (to undefined) when the decryption
   * attempt is completed.
   */
  attemptDecryption: function () {
    var _ref = _asyncToGenerator(function* (crypto, isRetry) {
      // start with a couple of sanity checks.
      if (!this.isEncrypted()) {
        throw new Error("Attempt to decrypt event which isn't encrypted");
      }

      if (this._clearEvent && this._clearEvent.content && this._clearEvent.content.msgtype !== "m.bad.encrypted") {
        // we may want to just ignore this? let's start with rejecting it.
        throw new Error("Attempt to decrypt event which has already been decrypted");
      } // if we already have a decryption attempt in progress, then it may
      // fail because it was using outdated info. We now have reason to
      // succeed where it failed before, but we don't want to have multiple
      // attempts going at the same time, so just set a flag that says we have
      // new info.
      //


      if (this._decryptionPromise) {
        _logger.logger.log(`Event ${this.getId()} already being decrypted; queueing a retry`);

        this._retryDecryption = true;
        return this._decryptionPromise;
      }

      this._decryptionPromise = this._decryptionLoop(crypto, isRetry);
      return this._decryptionPromise;
    });

    return function attemptDecryption(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(),

  /**
   * Cancel any room key request for this event and resend another.
   *
   * @param {module:crypto} crypto crypto module
   * @param {string} userId the user who received this event
   *
   * @returns {Promise} a promise that resolves when the request is queued
   */
  cancelAndResendKeyRequest: function (crypto, userId) {
    const wireContent = this.getWireContent();
    return crypto.requestRoomKey({
      algorithm: wireContent.algorithm,
      room_id: this.getRoomId(),
      session_id: wireContent.session_id,
      sender_key: wireContent.sender_key
    }, this.getKeyRequestRecipients(userId), true);
  },

  /**
   * Calculate the recipients for keyshare requests.
   *
   * @param {string} userId the user who received this event.
   *
   * @returns {Array} array of recipients
   */
  getKeyRequestRecipients: function (userId) {
    // send the request to all of our own devices, and the
    // original sending device if it wasn't us.
    const wireContent = this.getWireContent();
    const recipients = [{
      userId,
      deviceId: '*'
    }];
    const sender = this.getSender();

    if (sender !== userId) {
      recipients.push({
        userId: sender,
        deviceId: wireContent.device_id
      });
    }

    return recipients;
  },
  _decryptionLoop: function () {
    var _ref2 = _asyncToGenerator(function* (crypto, isRetry) {
      // make sure that this method never runs completely synchronously.
      // (doing so would mean that we would clear _decryptionPromise *before*
      // it is set in attemptDecryption - and hence end up with a stuck
      // `_decryptionPromise`).
      yield Promise.resolve();

      while (true) {
        this._retryDecryption = false;
        let res;
        let err;

        try {
          if (!crypto) {
            res = this._badEncryptedMessage("Encryption not enabled");
          } else {
            res = yield crypto.decryptEvent(this);

            if (isRetry) {
              _logger.logger.info(`Decrypted event on retry (id=${this.getId()})`);
            }
          }
        } catch (e) {
          if (e.name !== "DecryptionError") {
            // not a decryption error: log the whole exception as an error
            // (and don't bother with a retry)
            const re = isRetry ? 're' : '';

            _logger.logger.error(`Error ${re}decrypting event ` + `(id=${this.getId()}): ${e.stack || e}`);

            this._decryptionPromise = null;
            this._retryDecryption = false;
            return;
          }

          err = e; // see if we have a retry queued.
          //
          // NB: make sure to keep this check in the same tick of the
          //   event loop as `_decryptionPromise = null` below - otherwise we
          //   risk a race:
          //
          //   * A: we check _retryDecryption here and see that it is
          //        false
          //   * B: we get a second call to attemptDecryption, which sees
          //        that _decryptionPromise is set so sets
          //        _retryDecryption
          //   * A: we continue below, clear _decryptionPromise, and
          //        never do the retry.
          //

          if (this._retryDecryption) {
            // decryption error, but we have a retry queued.
            _logger.logger.log(`Got error decrypting event (id=${this.getId()}: ` + `${e}), but retrying`);

            continue;
          } // decryption error, no retries queued. Warn about the error and
          // set it to m.bad.encrypted.


          _logger.logger.warn(`Error decrypting event (id=${this.getId()}): ${e.detailedString}`);

          res = this._badEncryptedMessage(e.message);
        } // at this point, we've either successfully decrypted the event, or have given up
        // (and set res to a 'badEncryptedMessage'). Either way, we can now set the
        // cleartext of the event and raise Event.decrypted.
        //
        // make sure we clear '_decryptionPromise' before sending the 'Event.decrypted' event,
        // otherwise the app will be confused to see `isBeingDecrypted` still set when
        // there isn't an `Event.decrypted` on the way.
        //
        // see also notes on _retryDecryption above.
        //


        this._decryptionPromise = null;
        this._retryDecryption = false;

        this._setClearData(res); // Before we emit the event, clear the push actions so that they can be recalculated
        // by relevant code. We do this because the clear event has now changed, making it
        // so that existing rules can be re-run over the applicable properties. Stuff like
        // highlighting when the user's name is mentioned rely on this happening. We also want
        // to set the push actions before emitting so that any notification listeners don't
        // pick up the wrong contents.


        this.setPushActions(null);
        this.emit("Event.decrypted", this, err);
        return;
      }
    });

    return function _decryptionLoop(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }(),
  _badEncryptedMessage: function (reason) {
    return {
      clearEvent: {
        type: "m.room.message",
        content: {
          msgtype: "m.bad.encrypted",
          body: "** Unable to decrypt: " + reason + " **"
        }
      }
    };
  },

  /**
   * Update the cleartext data on this event.
   *
   * (This is used after decrypting an event; it should not be used by applications).
   *
   * @internal
   *
   * @fires module:models/event.MatrixEvent#"Event.decrypted"
   *
   * @param {module:crypto~EventDecryptionResult} decryptionResult
   *     the decryption result, including the plaintext and some key info
   */
  _setClearData: function (decryptionResult) {
    this._clearEvent = decryptionResult.clearEvent;
    this._senderCurve25519Key = decryptionResult.senderCurve25519Key || null;
    this._claimedEd25519Key = decryptionResult.claimedEd25519Key || null;
    this._forwardingCurve25519KeyChain = decryptionResult.forwardingCurve25519KeyChain || [];
    this._untrusted = decryptionResult.untrusted || false;
  },

  /**
   * Gets the cleartext content for this event. If the event is not encrypted,
   * or encryption has not been completed, this will return null.
   *
   * @returns {Object} The cleartext (decrypted) content for the event
   */
  getClearContent: function () {
    const ev = this._clearEvent;
    return ev && ev.content ? ev.content : null;
  },

  /**
   * Check if the event is encrypted.
   * @return {boolean} True if this event is encrypted.
   */
  isEncrypted: function () {
    return !this.isState() && this.event.type === "m.room.encrypted";
  },

  /**
   * The curve25519 key for the device that we think sent this event
   *
   * For an Olm-encrypted event, this is inferred directly from the DH
   * exchange at the start of the session: the curve25519 key is involved in
   * the DH exchange, so only a device which holds the private part of that
   * key can establish such a session.
   *
   * For a megolm-encrypted event, it is inferred from the Olm message which
   * established the megolm session
   *
   * @return {string}
   */
  getSenderKey: function () {
    return this._senderCurve25519Key;
  },

  /**
   * The additional keys the sender of this encrypted event claims to possess.
   *
   * Just a wrapper for #getClaimedEd25519Key (q.v.)
   *
   * @return {Object<string, string>}
   */
  getKeysClaimed: function () {
    return {
      ed25519: this._claimedEd25519Key
    };
  },

  /**
   * Get the ed25519 the sender of this event claims to own.
   *
   * For Olm messages, this claim is encoded directly in the plaintext of the
   * event itself. For megolm messages, it is implied by the m.room_key event
   * which established the megolm session.
   *
   * Until we download the device list of the sender, it's just a claim: the
   * device list gives a proof that the owner of the curve25519 key used for
   * this event (and returned by #getSenderKey) also owns the ed25519 key by
   * signing the public curve25519 key with the ed25519 key.
   *
   * In general, applications should not use this method directly, but should
   * instead use MatrixClient.getEventSenderDeviceInfo.
   *
   * @return {string}
   */
  getClaimedEd25519Key: function () {
    return this._claimedEd25519Key;
  },

  /**
   * Get the curve25519 keys of the devices which were involved in telling us
   * about the claimedEd25519Key and sender curve25519 key.
   *
   * Normally this will be empty, but in the case of a forwarded megolm
   * session, the sender keys are sent to us by another device (the forwarding
   * device), which we need to trust to do this. In that case, the result will
   * be a list consisting of one entry.
   *
   * If the device that sent us the key (A) got it from another device which
   * it wasn't prepared to vouch for (B), the result will be [A, B]. And so on.
   *
   * @return {string[]} base64-encoded curve25519 keys, from oldest to newest.
   */
  getForwardingCurve25519KeyChain: function () {
    return this._forwardingCurve25519KeyChain;
  },

  /**
   * Whether the decryption key was obtained from an untrusted source. If so,
   * we cannot verify the authenticity of the message.
   *
   * @return {boolean}
   */
  isKeySourceUntrusted: function () {
    return this._untrusted;
  },
  getUnsigned: function () {
    return this.event.unsigned || {};
  },
  unmarkLocallyRedacted: function () {
    const value = this._localRedactionEvent;
    this._localRedactionEvent = null;

    if (this.event.unsigned) {
      this.event.unsigned.redacted_because = null;
    }

    return !!value;
  },
  markLocallyRedacted: function (redactionEvent) {
    if (this._localRedactionEvent) {
      return;
    }

    this.emit("Event.beforeRedaction", this, redactionEvent);
    this._localRedactionEvent = redactionEvent;

    if (!this.event.unsigned) {
      this.event.unsigned = {};
    }

    this.event.unsigned.redacted_because = redactionEvent.event;
  },

  /**
   * Update the content of an event in the same way it would be by the server
   * if it were redacted before it was sent to us
   *
   * @param {module:models/event.MatrixEvent} redaction_event
   *     event causing the redaction
   */
  makeRedacted: function (redaction_event) {
    // quick sanity-check
    if (!redaction_event.event) {
      throw new Error("invalid redaction_event in makeRedacted");
    }

    this._localRedactionEvent = null;
    this.emit("Event.beforeRedaction", this, redaction_event);
    this._replacingEvent = null; // we attempt to replicate what we would see from the server if
    // the event had been redacted before we saw it.
    //
    // The server removes (most of) the content of the event, and adds a
    // "redacted_because" key to the unsigned section containing the
    // redacted event.

    if (!this.event.unsigned) {
      this.event.unsigned = {};
    }

    this.event.unsigned.redacted_because = redaction_event.event;
    let key;

    for (key in this.event) {
      if (!this.event.hasOwnProperty(key)) {
        continue;
      }

      if (!_REDACT_KEEP_KEY_MAP[key]) {
        delete this.event[key];
      }
    }

    const keeps = _REDACT_KEEP_CONTENT_MAP[this.getType()] || {};
    const content = this.getContent();

    for (key in content) {
      if (!content.hasOwnProperty(key)) {
        continue;
      }

      if (!keeps[key]) {
        delete content[key];
      }
    }
  },

  /**
   * Check if this event has been redacted
   *
   * @return {boolean} True if this event has been redacted
   */
  isRedacted: function () {
    return Boolean(this.getUnsigned().redacted_because);
  },

  /**
   * Check if this event is a redaction of another event
   *
   * @return {boolean} True if this event is a redaction
   */
  isRedaction: function () {
    return this.getType() === "m.room.redaction";
  },

  /**
   * Get the (decrypted, if necessary) redaction event JSON
   * if event was redacted
   *
   * @returns {object} The redaction event JSON, or an empty object
   */
  getRedactionEvent: function () {
    if (!this.isRedacted()) return null;

    if (this._clearEvent.unsigned) {
      return this._clearEvent.unsigned.redacted_because;
    } else if (this.event.unsigned.redacted_because) {
      return this.event.unsigned.redacted_because;
    } else {
      return {};
    }
  },

  /**
   * Get the push actions, if known, for this event
   *
   * @return {?Object} push actions
   */
  getPushActions: function () {
    return this._pushActions;
  },

  /**
   * Set the push actions for this event.
   *
   * @param {Object} pushActions push actions
   */
  setPushActions: function (pushActions) {
    this._pushActions = pushActions;
  },

  /**
   * Replace the `event` property and recalculate any properties based on it.
   * @param {Object} event the object to assign to the `event` property
   */
  handleRemoteEcho: function (event) {
    const oldUnsigned = this.getUnsigned();
    const oldId = this.getId();
    this.event = event; // if this event was redacted before it was sent, it's locally marked as redacted.
    // At this point, we've received the remote echo for the event, but not yet for
    // the redaction that we are sending ourselves. Preserve the locally redacted
    // state by copying over redacted_because so we don't get a flash of
    // redacted, not-redacted, redacted as remote echos come in

    if (oldUnsigned.redacted_because) {
      if (!this.event.unsigned) {
        this.event.unsigned = {};
      }

      this.event.unsigned.redacted_because = oldUnsigned.redacted_because;
    } // successfully sent.


    this.setStatus(null);

    if (this.getId() !== oldId) {
      // emit the event if it changed
      this.emit("Event.localEventIdReplaced", this);
    }
  },

  /**
   * Whether the event is in any phase of sending, send failure, waiting for
   * remote echo, etc.
   *
   * @return {boolean}
   */
  isSending() {
    return !!this.status;
  },

  /**
   * Update the event's sending status and emit an event as well.
   *
   * @param {String} status The new status
   */
  setStatus(status) {
    this.status = status;
    this.emit("Event.status", this, status);
  },

  replaceLocalEventId(eventId) {
    this.event.event_id = eventId;
    this.emit("Event.localEventIdReplaced", this);
  },

  /**
   * Get whether the event is a relation event, and of a given type if
   * `relType` is passed in.
   *
   * @param {string?} relType if given, checks that the relation is of the
   * given type
   * @return {boolean}
   */
  isRelation() {
    let relType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    // Relation info is lifted out of the encrypted content when sent to
    // encrypted rooms, so we have to check `getWireContent` for this.
    const content = this.getWireContent();
    const relation = content && content["m.relates_to"];
    return relation && relation.rel_type && relation.event_id && (relType && relation.rel_type === relType || !relType);
  },

  /**
   * Get relation info for the event, if any.
   *
   * @return {Object}
   */
  getRelation() {
    if (!this.isRelation()) {
      return null;
    }

    return this.getWireContent()["m.relates_to"];
  },

  /**
   * Set an event that replaces the content of this event, through an m.replace relation.
   *
   * @fires module:models/event.MatrixEvent#"Event.replaced"
   *
   * @param {MatrixEvent?} newEvent the event with the replacing content, if any.
   */
  makeReplaced(newEvent) {
    // don't allow redacted events to be replaced.
    // if newEvent is null we allow to go through though,
    // as with local redaction, the replacing event might get
    // cancelled, which should be reflected on the target event.
    if (this.isRedacted() && newEvent) {
      return;
    }

    if (this._replacingEvent !== newEvent) {
      this._replacingEvent = newEvent;
      this.emit("Event.replaced", this);
    }
  },

  /**
   * Returns the status of any associated edit or redaction
   * (not for reactions/annotations as their local echo doesn't affect the orignal event),
   * or else the status of the event.
   *
   * @return {EventStatus}
   */
  getAssociatedStatus() {
    if (this._replacingEvent) {
      return this._replacingEvent.status;
    } else if (this._localRedactionEvent) {
      return this._localRedactionEvent.status;
    }

    return this.status;
  },

  getServerAggregatedRelation(relType) {
    const relations = this.getUnsigned()["m.relations"];

    if (relations) {
      return relations[relType];
    }
  },

  /**
   * Returns the event ID of the event replacing the content of this event, if any.
   *
   * @return {string?}
   */
  replacingEventId() {
    const replaceRelation = this.getServerAggregatedRelation("m.replace");

    if (replaceRelation) {
      return replaceRelation.event_id;
    } else if (this._replacingEvent) {
      return this._replacingEvent.getId();
    }
  },

  /**
   * Returns the event replacing the content of this event, if any.
   * Replacements are aggregated on the server, so this would only
   * return an event in case it came down the sync, or for local echo of edits.
   *
   * @return {MatrixEvent?}
   */
  replacingEvent() {
    return this._replacingEvent;
  },

  /**
   * Returns the origin_server_ts of the event replacing the content of this event, if any.
   *
   * @return {Date?}
   */
  replacingEventDate() {
    const replaceRelation = this.getServerAggregatedRelation("m.replace");

    if (replaceRelation) {
      const ts = replaceRelation.origin_server_ts;

      if (Number.isFinite(ts)) {
        return new Date(ts);
      }
    } else if (this._replacingEvent) {
      return this._replacingEvent.getDate();
    }
  },

  /**
   * Returns the event that wants to redact this event, but hasn't been sent yet.
   * @return {MatrixEvent} the event
   */
  localRedactionEvent() {
    return this._localRedactionEvent;
  },

  /**
   * For relations and redactions, returns the event_id this event is referring to.
   *
   * @return {string?}
   */
  getAssociatedId() {
    const relation = this.getRelation();

    if (relation) {
      return relation.event_id;
    } else if (this.isRedaction()) {
      return this.event.redacts;
    }
  },

  /**
   * Checks if this event is associated with another event. See `getAssociatedId`.
   *
   * @return {bool}
   */
  hasAssocation() {
    return !!this.getAssociatedId();
  },

  /**
   * Update the related id with a new one.
   *
   * Used to replace a local id with remote one before sending
   * an event with a related id.
   *
   * @param {string} eventId the new event id
   */
  updateAssociatedId(eventId) {
    const relation = this.getRelation();

    if (relation) {
      relation.event_id = eventId;
    } else if (this.isRedaction()) {
      this.event.redacts = eventId;
    }
  },

  /**
   * Flags an event as cancelled due to future conditions. For example, a verification
   * request event in the same sync transaction may be flagged as cancelled to warn
   * listeners that a cancellation event is coming down the same pipe shortly.
   * @param {boolean} cancelled Whether the event is to be cancelled or not.
   */
  flagCancelled() {
    let cancelled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    this._isCancelled = cancelled;
  },

  /**
   * Gets whether or not the event is flagged as cancelled. See flagCancelled() for
   * more information.
   * @returns {boolean} True if the event is cancelled, false otherwise.
   */
  isCancelled() {
    return this._isCancelled;
  },

  /**
   * Summarise the event as JSON for debugging. If encrypted, include both the
   * decrypted and encrypted view of the event. This is named `toJSON` for use
   * with `JSON.stringify` which checks objects for functions named `toJSON`
   * and will call them to customise the output if they are defined.
   *
   * @return {Object}
   */
  toJSON() {
    const event = {
      type: this.getType(),
      sender: this.getSender(),
      content: this.getContent(),
      event_id: this.getId(),
      origin_server_ts: this.getTs(),
      unsigned: this.getUnsigned(),
      room_id: this.getRoomId()
    }; // if this is a redaction then attach the redacts key

    if (this.isRedaction()) {
      event.redacts = this.event.redacts;
    }

    if (!this.isEncrypted()) {
      return event;
    }

    return {
      decrypted: event,
      encrypted: this.event
    };
  },

  setVerificationRequest: function (request) {
    this.verificationRequest = request;
  },

  setTxnId(txnId) {
    this._txnId = txnId;
  },

  getTxnId() {
    return this._txnId;
  }

});
/* _REDACT_KEEP_KEY_MAP gives the keys we keep when an event is redacted
 *
 * This is specified here:
 *  http://matrix.org/speculator/spec/HEAD/client_server/latest.html#redactions
 *
 * Also:
 *  - We keep 'unsigned' since that is created by the local server
 *  - We keep user_id for backwards-compat with v1
 */

const _REDACT_KEEP_KEY_MAP = ['event_id', 'type', 'room_id', 'user_id', 'sender', 'state_key', 'prev_state', 'content', 'unsigned', 'origin_server_ts'].reduce(function (ret, val) {
  ret[val] = 1;
  return ret;
}, {}); // a map from event type to the .content keys we keep when an event is redacted


const _REDACT_KEEP_CONTENT_MAP = {
  'm.room.member': {
    'membership': 1
  },
  'm.room.create': {
    'creator': 1
  },
  'm.room.join_rules': {
    'join_rule': 1
  },
  'm.room.power_levels': {
    'ban': 1,
    'events': 1,
    'events_default': 1,
    'kick': 1,
    'redact': 1,
    'state_default': 1,
    'users': 1,
    'users_default': 1
  },
  'm.room.aliases': {
    'aliases': 1
  }
};
/**
 * Fires when an event is decrypted
 *
 * @event module:models/event.MatrixEvent#"Event.decrypted"
 *
 * @param {module:models/event.MatrixEvent} event
 *    The matrix event which has been decrypted
 * @param {module:crypto/algorithms/base.DecryptionError?} err
 *    The error that occured during decryption, or `undefined` if no
 *    error occured.
 */

/***/ }),

/***/ "a14c":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("12a8");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("57a2b51c", content, shadowRoot)
};

/***/ }),

/***/ "a255":
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__("3fb5")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ "a279":
/***/ (function(module, exports, __webpack_require__) {

var conversions = __webpack_require__("b753");

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



/***/ }),

/***/ "a306":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addPublicChatName\":\"Add Public Chat Name\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"createPublicChat\":\"Create public chat\",\"publicRoomTitle\":\"Public Room Preview\",\"chatTopic\":\"Topic renamed\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"Subir archivos\",\"header\":\"cabecera\",\"dragAndDropAFile\":\"Arrastrar y soltar archivo\",\"chatInvite\":\"Te han invitado a chatear con:\",\"cantJoin\":\"No puedes unirte al chat con:\",\"chatInviteDecline\":\"Puedes unirte al chat o rechazar la invitación\",\"creatorLeft\":\"Porque el creador dejó la sala\",\"encrypted\":\"Cifrado\",\"noImages\":\"Todavía no hay imágenes en este chat\",\"noFiles\":\"Todavía no hay files en este chat\",\"inviteUser\":\"Invitar a un usuario\",\"invite\":\"Invitar\",\"add\":\"Añadir\",\"mute\":\"Mute\",\"unmute\":\"Unmute\",\"leave\":\"Dejar\",\"Info\":\"Info\",\"new\":\"New\",\"typing\":\"typing\",\"accNotFound\":\"Su registro está en curso, por favor espere...\",\"emptyList\":\"La lista está vacía ( filtrada o simplemente vacía )\",\"welcome\":\"Bienvenido al chat\",\"startNewChat\":\"Iniciar un nuevo chat\",\"chats\":\"Chats\",\"shareWith\":\"Compartir con\",\"newChat\":\"Nuevo chat\",\"moveToChat\":\"Mover al chat\",\"queryNoResults\":\"La consulta no reporta resultados\",\"needMoreCharacters\":\"Necesita más caracteres para el resultado\",\"createGroup\":\"Crear grupo\",\"unabletoDecrypt\":\"* Imposible descifrar\",\"messageDeleted\":\"Mensaje eliminado\",\"sentImage\":\"Imagen enviada\",\"sentVoiceMessage\":\"envió un mensaje de voz\",\"invitationToChat\":\"Invitación al chat\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"abandonó el chat\",\"joined\":\"unido\",\"chatRenamed\":\"Chat renombrado a \",\"recentComment\":\"Comentario reciente:\",\"share\":\"SHARE\",\"followers\":\"Seguidores:\",\"reputation\":\"Reputación:\",\"following\":\"Following:\",\"theme\":\"Tema:\",\"contacts\":\"Contactos\",\"phoneContacts\":\"Contactos telefónicos\",\"chooseInviteMedia\":\"Por favor, elige cómo quieres invitar:\",\"admin\":\"Admin\",\"moderator\":\"Moderador\",\"videocall\":\"Videollamada\",\"call\":\"Llamada\",\"leaveAndDelete\":\"Dejar y borrar\",\"donate\":\"Donar\",\"makeModerator\":\"Hacer Moderador\",\"ban\":\"Ban\",\"kick\":\"Kick\",\"members\":\"Miembros\",\"media\":\"Media\",\"files\":\"Files\",\"contactsList\":\"Lista de contactos\",\"send\":\"send\",\"pageCaption\":\"Título de la página\",\"caption\":\"Caption\",\"text\":\"text\",\"placeholder\":\"placeholder\",\"sendTransactionTo\":\"Enviar transacción a\",\"toBePaidByReceiver\":\"A pagar por el receptor\",\"toBePaidBySender\":\"A pagar por el remitente\",\"source\":\"Fuente\",\"amount\":\"Importe\",\"receiver\":\"Receptor\",\"message\":\"Mensaje\",\"includeFeesInAmount\":\"Incluir tasas en el importe\",\"transactionFees\":\"Tasas de transacción\",\"totalAmount\":\"Importe total\",\"balanceTooLow\":\"Saldo demasiado bajo\",\"transactionError\":\"Error, no se puede realizar la transacción\",\"calculateFees\":\"Calculate Fees\",\"startChatWith\":\"Iniciar chat con\",\"searchResult\":\"Resultado de la búsqueda\",\"joinedInTheChat\":\"unido en el chat\",\"invited\":\"invitado\",\"hasInvited\":\"invitado \",\"inTheChat\":\"en el chat\",\"banned\":\"prohibido\",\"andRoom\":\"y sala\",\"left\":\"izquierda\",\"theChat\":\"el chat\",\"made\":\"made\",\"aModerator\":\" un moderador\",\"editedChatNameTo \":\"editado el nombre del chat a \",\"somebody\":\"alguien\",\"sent\":\"enviado\",\"PKOINto\":\"PKOIN to\",\"response\":\"Respuesta\",\"messagefrom\":\"Mensaje reenviado de\",\"edited\":\"Editado\",\"settings\":\"Ajustes\",\"unauthorized\":\"No autorizado\",\"search\":\"Buscar\",\"replyOnMessage\":\"Respuesta en mensaje\",\"editMessage\":\"Editar mensaje\",\"inviteFriend\":\"Invitar a amigos\",\"emptyContactList\":\"La lista de contactos está vacía\",\"joinApp\":\"Unirse a Pocketnet\",\"hasInvitedToJoin\":\"te ha invitado a unirte a Pocketnet\",\"contactsempty\":\"Todavía no tienes contactos, encuéntralos en la búsqueda\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"Email\",\"refillNamePlaceholder\":\"Refill name\"},\"message\":{},\"button\":{\"starChatButton\":\"Iniciar chat\",\"decline\":\"Declinar\",\"declineandignore\":\"Ignorar usuario\",\"join\":\"Unase\",\"ok\":\"Ok\",\"save\":\"ahorrar\",\"copy\":\"Copiar\",\"forward\":\"Adelante\",\"delete\":\"Borrar\",\"reply\":\"Responder\",\"share\":\"Compartir\",\"download\":\"Descargar\",\"downloaded\":\"Descargado\",\"goToPocketnetProfile\":\"Ir al perfil de Pocketnet\",\"sendFile\":\"Enviar archivo\",\"takePhotoOrVideo\":\"Enviar imagen\",\"sendCoins\":\"Enviar monedas\",\"edit\":\"Editar\",\"select\":\"Seleccione\",\"block\":\"Bloquear\",\"unblock\":\"Desbloquear\",\"blockUser\":\"Bloquear usuario\"},\"yes\":\"sí\",\"cancel\":\"Cancelar\",\"teamMessages\":{\"1-title\":\"¡Bienvenido al chat privado de Bastyon!\",\"1-list1\":\"Mensajería privada que NO está conectada a tu número de teléfono\",\"1-list2\":\"Cifrado de extremo a extremo de cada conversación 1 a 1 por defecto\",\"1-list3\":\"Todas las imágenes enviadas o recibidas a través del chat se almacenan encriptadas\",\"1-list4\":\"El historial de mensajes se guarda sólo durante 7 días\",\"2-title\":\"¡Un gran anuncio! ¡La aplicación Pocketnet se llama ahora Bastyon!\",\"2-message1\":\"El dominio se trasladará a Bastyon.com. Recientemente hemos lanzado las siguientes actualizaciones importantes:\",\"2-list1\":\"Mensajería privada encriptada no conectada a tu número de teléfono\",\"2-list2\":\"Posibilidad de donar PKOIN a los bloggers\",\"2-list3\":\"Vídeo y transmisión en directo\",\"2-message2\":\"Invita a tus amigos ahora y forma parte del gran futuro de la Internet descentralizada!\",\"2-button\":\"Invitar a los amigos\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "a36f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c44504aa_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b465");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c44504aa_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c44504aa_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c44504aa_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c44504aa_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "a376":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StubStore = StubStore;
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module.
 * @module store/stub
 */

/**
 * Construct a stub store. This does no-ops on most store methods.
 * @constructor
 */

function StubStore() {
  this.fromToken = null;
}

StubStore.prototype = {
  /** @return {Promise<bool>} whether or not the database was newly created in this session. */
  isNewlyCreated: function () {
    return Promise.resolve(true);
  },

  /**
   * Get the sync token.
   * @return {string}
   */
  getSyncToken: function () {
    return this.fromToken;
  },

  /**
   * Set the sync token.
   * @param {string} token
   */
  setSyncToken: function (token) {
    this.fromToken = token;
  },

  /**
   * No-op.
   * @param {Group} group
   */
  storeGroup: function (group) {},

  /**
   * No-op.
   * @param {string} groupId
   * @return {null}
   */
  getGroup: function (groupId) {
    return null;
  },

  /**
   * No-op.
   * @return {Array} An empty array.
   */
  getGroups: function () {
    return [];
  },

  /**
   * No-op.
   * @param {Room} room
   */
  storeRoom: function (room) {},

  /**
   * No-op.
   * @param {string} roomId
   * @return {null}
   */
  getRoom: function (roomId) {
    return null;
  },

  /**
   * No-op.
   * @return {Array} An empty array.
   */
  getRooms: function () {
    return [];
  },

  /**
   * Permanently delete a room.
   * @param {string} roomId
   */
  removeRoom: function (roomId) {
    return;
  },

  /**
   * No-op.
   * @return {Array} An empty array.
   */
  getRoomSummaries: function () {
    return [];
  },

  /**
   * No-op.
   * @param {User} user
   */
  storeUser: function (user) {},

  /**
   * No-op.
   * @param {string} userId
   * @return {null}
   */
  getUser: function (userId) {
    return null;
  },

  /**
   * No-op.
   * @return {User[]}
   */
  getUsers: function () {
    return [];
  },

  /**
   * No-op.
   * @param {Room} room
   * @param {integer} limit
   * @return {Array}
   */
  scrollback: function (room, limit) {
    return [];
  },

  /**
   * Store events for a room.
   * @param {Room} room The room to store events for.
   * @param {Array<MatrixEvent>} events The events to store.
   * @param {string} token The token associated with these events.
   * @param {boolean} toStart True if these are paginated results.
   */
  storeEvents: function (room, events, token, toStart) {},

  /**
   * Store a filter.
   * @param {Filter} filter
   */
  storeFilter: function (filter) {},

  /**
   * Retrieve a filter.
   * @param {string} userId
   * @param {string} filterId
   * @return {?Filter} A filter or null.
   */
  getFilter: function (userId, filterId) {
    return null;
  },

  /**
   * Retrieve a filter ID with the given name.
   * @param {string} filterName The filter name.
   * @return {?string} The filter ID or null.
   */
  getFilterIdByName: function (filterName) {
    return null;
  },

  /**
   * Set a filter name to ID mapping.
   * @param {string} filterName
   * @param {string} filterId
   */
  setFilterIdByName: function (filterName, filterId) {},

  /**
   * Store user-scoped account data events
   * @param {Array<MatrixEvent>} events The events to store.
   */
  storeAccountDataEvents: function (events) {},

  /**
   * Get account data event by event type
   * @param {string} eventType The event type being queried
   */
  getAccountData: function (eventType) {},

  /**
   * setSyncData does nothing as there is no backing data store.
   *
   * @param {Object} syncData The sync data
   * @return {Promise} An immediately resolved promise.
   */
  setSyncData: function (syncData) {
    return Promise.resolve();
  },

  /**
   * We never want to save becase we have nothing to save to.
   *
   * @return {boolean} If the store wants to save
   */
  wantsSave: function () {
    return false;
  },

  /**
   * Save does nothing as there is no backing data store.
   */
  save: function () {},

  /**
   * Startup does nothing.
   * @return {Promise} An immediately resolved promise.
   */
  startup: function () {
    return Promise.resolve();
  },

  /**
   * @return {Promise} Resolves with a sync response to restore the
   * client state to where it was at the last save, or null if there
   * is no saved sync data.
   */
  getSavedSync: function () {
    return Promise.resolve(null);
  },

  /**
   * @return {Promise} If there is a saved sync, the nextBatch token
   * for this sync, otherwise null.
   */
  getSavedSyncToken: function () {
    return Promise.resolve(null);
  },

  /**
   * Delete all data from this store. Does nothing since this store
   * doesn't store anything.
   * @return {Promise} An immediately resolved promise.
   */
  deleteAllData: function () {
    return Promise.resolve();
  },
  getOutOfBandMembers: function () {
    return Promise.resolve(null);
  },
  setOutOfBandMembers: function () {
    return Promise.resolve();
  },
  clearOutOfBandMembers: function () {
    return Promise.resolve();
  },
  getClientOptions: function () {
    return Promise.resolve();
  },
  storeClientOptions: function () {
    return Promise.resolve();
  }
};

/***/ }),

/***/ "a45a":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("1b71");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("354273b2", content, shadowRoot)
};

/***/ }),

/***/ "a54c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/dummypreviews/index.vue?vue&type=template&id=7ed73c7c&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"dummypreviews"}},_vm._l((_vm.a),function(va){return _c('preview',{key:va.id,attrs:{"dummy":true}})}),1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/dummypreviews/index.vue?vue&type=template&id=7ed73c7c&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// EXTERNAL MODULE: ./src/components/chats/preview/index.vue + 9 modules
var preview = __webpack_require__("087d");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/dummypreviews/index.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ var dummypreviewsvue_type_script_lang_js_ = ({
  name: 'dummypreviews',
  data: () => {
    return {
      messagesPreview: false
    };
  },
  props: {
    data: Object
  },
  components: {
    preview: preview["a" /* default */]
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    a: function () {
      if (this.messagesPreview) {
        return [1];
      } else {
        return [1, 2, 3, 4, 5, 6];
      }
    }
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/chats/dummypreviews/index.vue?vue&type=script&lang=js&
 /* harmony default export */ var chats_dummypreviewsvue_type_script_lang_js_ = (dummypreviewsvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/chats/dummypreviews/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("6e9e")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  chats_dummypreviewsvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "7ed73c7c",
  null
  ,true
)

/* harmony default export */ var dummypreviews = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "a593":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("651d");
var isBuffer = __webpack_require__("044b");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "a5cd":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("654a");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("68076bb0", content, shadowRoot)
};

/***/ }),

/***/ "a63f":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("e6a5");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("7cb0bfe6", content, shadowRoot)
};

/***/ }),

/***/ "a981":
/***/ (function(module, exports) {

// eslint-disable-next-line es-x/no-typed-arrays -- safe
module.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';


/***/ }),

/***/ "aa20":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/name.vue?vue&type=template&id=72a9c575&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"nameline"},[(_vm.isShowGroupIcon)?_c('div',{staticClass:"iconGroup"},[_c('i',{staticClass:"fas fa-user-friends"})]):_vm._e(),_c('div',{staticClass:"nameofchat"},[_vm._v(" "+_vm._s(_vm.convertedName)+" ")])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/chats/assets/name.vue?vue&type=template&id=72a9c575&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/chats/assets/name.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var namevue_type_script_lang_js_ = ({
  name: 'chatName',
  props: {
    chat: Object,
    preview: Boolean,
    m_chat: {}
  },
  data: function () {
    return {//convertedName: ''
    };
  },
  computed: {
    users: function () {
      if (!this.chat) return [];
      return this.core.mtrx.anotherChatUsers(this.chat.roomId);
    },
    convertedName: function () {
      if (this.m_chat && this.m_chat.getJoinRule() === 'public' && this.m_chat.currentState.getStateEvents('m.room.name').length > 0) {
        return this.m_chat.currentState.getStateEvents('m.room.name')[0].getContent().name;
      }

      var users = _.filter(this.users, user => {
        return user.userId != this.core.user.userinfo.id;
      });

      var names = _.filter(_.map(users, user => {
        if (this.$store.state.users[user.userId]) return this.$store.state.users[user.userId].name;
      }), function (name) {
        return name;
      });

      if (!names.length) {
        if (this.core.mtrx.chatUsers(this.chat.roomId).length) {
          return 'Empty chat: ' + this.chat.roomId;
        }

        return '-';
      }

      if (this.m_chat.name.indexOf("@") == 0) return this.m_chat.name.replace('@', '');
      return names.join(', ');
    },

    isShowGroupIcon() {
      return this.m_chat.name.slice(0, 1) === '@';
    }

  },
  mounted: function () {}
});
// CONCATENATED MODULE: ./src/components/chats/assets/name.vue?vue&type=script&lang=js&
 /* harmony default export */ var assets_namevue_type_script_lang_js_ = (namevue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/chats/assets/name.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("64a6")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  assets_namevue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "72a9c575",
  null
  ,true
)

/* harmony default export */ var assets_name = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "aa4a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "aa69":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__("dcd0");

/*<replacement>*/
var util = Object.create(__webpack_require__("3a7c"));
util.inherits = __webpack_require__("3fb5");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "ab36":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("861d");
var createNonEnumerableProperty = __webpack_require__("9112");

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};


/***/ }),

/***/ "abac":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".previewWrapper[data-v-691bf714]{height:60px;position:absolute;top:0;width:100%;display:flex;align-items:center;justify-content:flex-start;padding:0;border-bottom:1px solid rgb(var(--background-main))}.previewWrapper .previewContact[data-v-691bf714],.previewWrapper .previewContactSelect[data-v-691bf714]{width:100%}.previewWrapper .previewBox[data-v-691bf714]{width:100%;display:flex;justify-content:space-between;align-items:center}.previewWrapper .previewBox .previewWrapper[data-v-691bf714]{flex-grow:1;width:100%}.previewWrapper .checkBox[data-v-691bf714]{text-align:center;position:absolute;right:12px;top:50%;transform:translateY(-50%)}.previewWrapper[data-v-691bf714]:last-child{border-bottom:0}.contactList[data-v-691bf714]{margin-bottom:8px}.contactList .title[data-v-691bf714]{padding:0 .5em}.contactList.minimized .title[data-v-691bf714]{display:none}.contactList.minimized .previewWrapper[data-v-691bf714]{padding:.5em 0;border-bottom:0;cursor:pointer}.contactList.minimized .previewWrapper[data-v-691bf714]:last-child{border-bottom:0}.contactList.minimized .previewWrapper[data-v-691bf714] .previewWrapper{padding:0}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "abf7":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".matrin[data-v-9d2b1700]{margin:0 auto 0 0!important}.msgAction[data-v-9d2b1700]{position:absolute}.msgAction[data-v-9d2b1700]:before{content:\"\";display:block;width:100%;height:100%;position:fixed;z-index:10;opacity:.9;left:0;right:0;top:0;bottom:0}.msgAction .contentAction[data-v-9d2b1700],.msgAction[data-v-9d2b1700]:before{background-color:rgb(var(--background-main))}.msgAction .contentAction[data-v-9d2b1700]{width:180px;position:relative;z-index:300;border:.1em solid rgb(var(--neutral-grad-0));border-radius:.8em;margin:.6em 0 0 auto}.msgAction .contentAction ul[data-v-9d2b1700]{padding:0;list-style:none;margin:0;display:block;width:100%;height:100%}.msgAction .contentAction ul li[data-v-9d2b1700]{display:flex;justify-content:space-between;padding:.2em .8em;align-items:center;border-top:.1em solid rgb(var(--neutral-grad-1));font-size:1em}.msgAction .contentAction ul li[data-v-9d2b1700]:first-child{border:0}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "ac2a":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".outer-div[data-v-e4f39dca]{line-height:inherit;border-radius:50%}.dropDownIcon[data-v-e4f39dca]{width:35px;height:35px;line-height:35px}.dropDownIcon i[data-v-e4f39dca]{line-height:35px!important}.menuwrapper[data-v-e4f39dca]{padding-left:1em;padding-right:1em;padding-bottom:1em;position:absolute;z-index:100;bottom:0;left:0;right:0}.menuwrapper[data-v-e4f39dca] .items{max-height:500px;overflow-y:auto;border-radius:3px;padding-left:.5em;padding-right:.5em;padding-bottom:.5em}.dropdown[data-v-e4f39dca]{z-index:10000;position:absolute;width:100%;right:0;height:auto;color:rgb(var(--text-color));transition:.3s;bottom:-100em;top:100em}.dropdown .backgr[data-v-e4f39dca]{background:rgba(var(--background-total-theme),.15);backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px);position:fixed;z-index:100;left:0;right:0;top:0;bottom:0;opacity:0;transition:.3s}.dropdown.visible[data-v-e4f39dca]{bottom:0;top:0}.dropdown.visible .backgr[data-v-e4f39dca]{opacity:1}.dropdown[data-v-e4f39dca] .contentWrapper{margin-top:.25em;border-radius:10px;overflow:hidden}.dropdown .contentWrapper[data-v-e4f39dca],.dropdown[data-v-e4f39dca] .contentWrapper{border-top:1px solid rgba(var(--neutral-grad-1),.5);box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}.dropdown .cancelWrapper .menu-item[data-v-e4f39dca]{margin-top:0;box-shadow:none;color:rgb(var(--neutral-grad-3));box-shadow:0 5px 5px -3px rgba(var(--color-shadow-base),.4)}.dropdown .menu-item[data-v-e4f39dca]{padding:.5em;background:rgb(var(--background-total-theme));color:rgb(var(--neutral-grad-3));line-height:44px;margin-top:.25em;display:flex;border-radius:10px;box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}.dropdown .menu-item .title[data-v-e4f39dca]{flex-grow:2;padding-right:44px;text-align:center}.dropdown .menu-item .iconWrapper[data-v-e4f39dca]{width:44px;text-align:center}.dropdown .blocker[data-v-e4f39dca]{position:fixed;top:0;left:0;bottom:0;right:0;content:\" \"}.cancelWrapper[data-v-e4f39dca]{border-radius:3px;padding-left:.5em;padding-right:.5em;color:rgb(var(--neutral-grad-3))}.small[data-v-e4f39dca]{font-size:.85em}.outer-div.mobile .menuwrapper[data-v-e4f39dca]{position:fixed}.outer-div.minimized[data-v-e4f39dca]{position:static}.outer-div.minimized .backgr[data-v-e4f39dca]{border-radius:4px;height:1000px;bottom:0;top:auto;background:transparent;position:absolute}.outer-div.minimized .dropdown[data-v-e4f39dca]{z-index:10000;right:0}.outer-div.minimized .menuwrapper[data-v-e4f39dca]{border-radius:4px;padding-top:.5em}.outer-div.minimized .menuwrapper[data-v-e4f39dca] .menu-item{margin-top:.25em;border-radius:5px;background:rgba(var(--background-total-theme),.95)}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "ad71":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__("faa1").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__("429b");
/*</replacement>*/


var Buffer = __webpack_require__("b639").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(0);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__("c6ae");

var destroyImpl = __webpack_require__("4681");

var _require = __webpack_require__("0db6"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__("c9b8").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__("3fb5")(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__("b19a");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__("7d72").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__("b19a");
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__("7d72").StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__("9c0e");
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__("07c6");
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba"), __webpack_require__("4362")))

/***/ }),

/***/ "ad9d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "ade3":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _defineProperty; });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "aeb0":
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__("9bf2").f;

module.exports = function (Target, Source, key) {
  key in Target || defineProperty(Target, key, {
    configurable: true,
    get: function () { return Source[key]; },
    set: function (it) { Source[key] = it; }
  });
};


/***/ }),

/***/ "aed9":
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__("83ab");
var fails = __webpack_require__("d039");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "af7e":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("6ffa");


/***/ }),

/***/ "b051":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_chats_vue_vue_type_style_index_0_id_62a1ab6a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a5cd");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_chats_vue_vue_type_style_index_0_id_62a1ab6a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_chats_vue_vue_type_style_index_0_id_62a1ab6a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_chats_vue_vue_type_style_index_0_id_62a1ab6a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_chats_vue_vue_type_style_index_0_id_62a1ab6a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "b07c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const aes_1 = __webpack_require__("e7e1");
const aes_ctr_1 = __webpack_require__("bde4");
/**
 * Pure JavaScript cryptography implementations
 *
 * WARNING: Not constant time! May leak keys or have other security issues.
 */
class PolyfillCryptoProvider {
    constructor() {
        // This class doesn't do anything, it just signals that polyfill impls should be used
    }
    importBlockCipherKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            return new aes_1.default(keyData);
        });
    }
    importCTRKey(keyData) {
        return __awaiter(this, void 0, void 0, function* () {
            return new aes_ctr_1.default(new aes_1.default(keyData));
        });
    }
}
exports.PolyfillCryptoProvider = PolyfillCryptoProvider;


/***/ }),

/***/ "b0a4":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("b466");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("55290954", content, shadowRoot)
};

/***/ }),

/***/ "b0be":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "[data-v-7ed73c7c] .infoWrapper{display:flex;align-items:center}[data-v-7ed73c7c] .infoWrapper .eventsLine{width:100%}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "b19a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__("ad71");

var Writable = __webpack_require__("dc14");

__webpack_require__("3fb5")(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "b1e0":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("4072");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("62dc1abb", content, shadowRoot)
};

/***/ }),

/***/ "b215":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7e97eec1_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8183");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7e97eec1_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7e97eec1_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7e97eec1_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_7e97eec1_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "b2ca":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalStorageCryptoStore = void 0;

var _logger = __webpack_require__("63c7");

var _memoryCryptoStore = __webpack_require__("4df7");
/*
Copyright 2017, 2018 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Internal module. Partial localStorage backed storage for e2e.
 * This is not a full crypto store, just the in-memory store with
 * some things backed by localStorage. It exists because indexedDB
 * is broken in Firefox private mode or set to, "will not remember
 * history".
 *
 * @module
 */


const E2E_PREFIX = "crypto.";
const KEY_END_TO_END_ACCOUNT = E2E_PREFIX + "account";
const KEY_CROSS_SIGNING_KEYS = E2E_PREFIX + "cross_signing_keys";
const KEY_NOTIFIED_ERROR_DEVICES = E2E_PREFIX + "notified_error_devices";
const KEY_DEVICE_DATA = E2E_PREFIX + "device_data";
const KEY_INBOUND_SESSION_PREFIX = E2E_PREFIX + "inboundgroupsessions/";
const KEY_INBOUND_SESSION_WITHHELD_PREFIX = E2E_PREFIX + "inboundgroupsessions.withheld/";
const KEY_ROOMS_PREFIX = E2E_PREFIX + "rooms/";
const KEY_SESSIONS_NEEDING_BACKUP = E2E_PREFIX + "sessionsneedingbackup";

function keyEndToEndSessions(deviceKey) {
  return E2E_PREFIX + "sessions/" + deviceKey;
}

function keyEndToEndSessionProblems(deviceKey) {
  return E2E_PREFIX + "session.problems/" + deviceKey;
}

function keyEndToEndInboundGroupSession(senderKey, sessionId) {
  return KEY_INBOUND_SESSION_PREFIX + senderKey + "/" + sessionId;
}

function keyEndToEndInboundGroupSessionWithheld(senderKey, sessionId) {
  return KEY_INBOUND_SESSION_WITHHELD_PREFIX + senderKey + "/" + sessionId;
}

function keyEndToEndRoomsPrefix(roomId) {
  return KEY_ROOMS_PREFIX + roomId;
}
/**
 * @implements {module:crypto/store/base~CryptoStore}
 */


class LocalStorageCryptoStore extends _memoryCryptoStore.MemoryCryptoStore {
  constructor(webStore) {
    super();
    this.store = webStore;
  }

  static exists(webStore) {
    const length = webStore.length;

    for (let i = 0; i < length; i++) {
      if (webStore.key(i).startsWith(E2E_PREFIX)) {
        return true;
      }
    }

    return false;
  } // Olm Sessions


  countEndToEndSessions(txn, func) {
    let count = 0;

    for (let i = 0; i < this.store.length; ++i) {
      if (this.store.key(i).startsWith(keyEndToEndSessions(''))) ++count;
    }

    func(count);
  }

  _getEndToEndSessions(deviceKey, txn, func) {
    const sessions = getJsonItem(this.store, keyEndToEndSessions(deviceKey));
    const fixedSessions = {}; // fix up any old sessions to be objects rather than just the base64 pickle

    for (const [sid, val] of Object.entries(sessions || {})) {
      if (typeof val === 'string') {
        fixedSessions[sid] = {
          session: val
        };
      } else {
        fixedSessions[sid] = val;
      }
    }

    return fixedSessions;
  }

  getEndToEndSession(deviceKey, sessionId, txn, func) {
    const sessions = this._getEndToEndSessions(deviceKey);

    func(sessions[sessionId] || {});
  }

  getEndToEndSessions(deviceKey, txn, func) {
    func(this._getEndToEndSessions(deviceKey) || {});
  }

  getAllEndToEndSessions(txn, func) {
    for (let i = 0; i < this.store.length; ++i) {
      if (this.store.key(i).startsWith(keyEndToEndSessions(''))) {
        const deviceKey = this.store.key(i).split('/')[1];

        for (const sess of Object.values(this._getEndToEndSessions(deviceKey))) {
          func(sess);
        }
      }
    }
  }

  storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn) {
    const sessions = this._getEndToEndSessions(deviceKey) || {};
    sessions[sessionId] = sessionInfo;
    setJsonItem(this.store, keyEndToEndSessions(deviceKey), sessions);
  }

  storeEndToEndSessionProblem(deviceKey, type, fixed) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const key = keyEndToEndSessionProblems(deviceKey);
      const problems = getJsonItem(_this.store, key) || [];
      problems.push({
        type,
        fixed,
        time: Date.now()
      });
      problems.sort((a, b) => {
        return a.time - b.time;
      });
      setJsonItem(_this.store, key, problems);
    })();
  }

  getEndToEndSessionProblem(deviceKey, timestamp) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const key = keyEndToEndSessionProblems(deviceKey);
      const problems = getJsonItem(_this2.store, key) || [];

      if (!problems.length) {
        return null;
      }

      const lastProblem = problems[problems.length - 1];

      for (const problem of problems) {
        if (problem.time > timestamp) {
          return Object.assign({}, problem, {
            fixed: lastProblem.fixed
          });
        }
      }

      if (lastProblem.fixed) {
        return null;
      } else {
        return lastProblem;
      }
    })();
  }

  filterOutNotifiedErrorDevices(devices) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const notifiedErrorDevices = getJsonItem(_this3.store, KEY_NOTIFIED_ERROR_DEVICES) || {};
      const ret = [];

      for (const device of devices) {
        const {
          userId,
          deviceInfo
        } = device;

        if (userId in notifiedErrorDevices) {
          if (!(deviceInfo.deviceId in notifiedErrorDevices[userId])) {
            ret.push(device);
            notifiedErrorDevices[userId][deviceInfo.deviceId] = true;
          }
        } else {
          ret.push(device);
          notifiedErrorDevices[userId] = {
            [deviceInfo.deviceId]: true
          };
        }
      }

      setJsonItem(_this3.store, KEY_NOTIFIED_ERROR_DEVICES, notifiedErrorDevices);
      return ret;
    })();
  } // Inbound Group Sessions


  getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func) {
    func(getJsonItem(this.store, keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId)), getJsonItem(this.store, keyEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId)));
  }

  getAllEndToEndInboundGroupSessions(txn, func) {
    for (let i = 0; i < this.store.length; ++i) {
      const key = this.store.key(i);

      if (key.startsWith(KEY_INBOUND_SESSION_PREFIX)) {
        // we can't use split, as the components we are trying to split out
        // might themselves contain '/' characters. We rely on the
        // senderKey being a (32-byte) curve25519 key, base64-encoded
        // (hence 43 characters long).
        func({
          senderKey: key.substr(KEY_INBOUND_SESSION_PREFIX.length, 43),
          sessionId: key.substr(KEY_INBOUND_SESSION_PREFIX.length + 44),
          sessionData: getJsonItem(this.store, key)
        });
      }
    }

    func(null);
  }

  addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    const existing = getJsonItem(this.store, keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId));

    if (!existing) {
      this.storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn);
    }
  }

  storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    setJsonItem(this.store, keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId), sessionData);
  }

  storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn) {
    setJsonItem(this.store, keyEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId), sessionData);
  }

  getEndToEndDeviceData(txn, func) {
    func(getJsonItem(this.store, KEY_DEVICE_DATA));
  }

  storeEndToEndDeviceData(deviceData, txn) {
    setJsonItem(this.store, KEY_DEVICE_DATA, deviceData);
  }

  storeEndToEndRoom(roomId, roomInfo, txn) {
    setJsonItem(this.store, keyEndToEndRoomsPrefix(roomId), roomInfo);
  }

  getEndToEndRooms(txn, func) {
    const result = {};
    const prefix = keyEndToEndRoomsPrefix('');

    for (let i = 0; i < this.store.length; ++i) {
      const key = this.store.key(i);

      if (key.startsWith(prefix)) {
        const roomId = key.substr(prefix.length);
        result[roomId] = getJsonItem(this.store, key);
      }
    }

    func(result);
  }

  getSessionsNeedingBackup(limit) {
    const sessionsNeedingBackup = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};
    const sessions = [];

    for (const session in sessionsNeedingBackup) {
      if (Object.prototype.hasOwnProperty.call(sessionsNeedingBackup, session)) {
        // see getAllEndToEndInboundGroupSessions for the magic number explanations
        const senderKey = session.substr(0, 43);
        const sessionId = session.substr(44);
        this.getEndToEndInboundGroupSession(senderKey, sessionId, null, sessionData => {
          sessions.push({
            senderKey: senderKey,
            sessionId: sessionId,
            sessionData: sessionData
          });
        });

        if (limit && session.length >= limit) {
          break;
        }
      }
    }

    return Promise.resolve(sessions);
  }

  countSessionsNeedingBackup() {
    const sessionsNeedingBackup = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};
    return Promise.resolve(Object.keys(sessionsNeedingBackup).length);
  }

  unmarkSessionsNeedingBackup(sessions) {
    const sessionsNeedingBackup = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};

    for (const session of sessions) {
      delete sessionsNeedingBackup[session.senderKey + '/' + session.sessionId];
    }

    setJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP, sessionsNeedingBackup);
    return Promise.resolve();
  }

  markSessionsNeedingBackup(sessions) {
    const sessionsNeedingBackup = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};

    for (const session of sessions) {
      sessionsNeedingBackup[session.senderKey + '/' + session.sessionId] = true;
    }

    setJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP, sessionsNeedingBackup);
    return Promise.resolve();
  }
  /**
   * Delete all data from this store.
   *
   * @returns {Promise} Promise which resolves when the store has been cleared.
   */


  deleteAllData() {
    this.store.removeItem(KEY_END_TO_END_ACCOUNT);
    return Promise.resolve();
  } // Olm account


  getAccount(txn, func) {
    const account = getJsonItem(this.store, KEY_END_TO_END_ACCOUNT);
    func(account);
  }

  storeAccount(txn, newData) {
    setJsonItem(this.store, KEY_END_TO_END_ACCOUNT, newData);
  }

  getCrossSigningKeys(txn, func) {
    const keys = getJsonItem(this.store, KEY_CROSS_SIGNING_KEYS);
    func(keys);
  }

  getSecretStorePrivateKey(txn, func, type) {
    const key = getJsonItem(this.store, E2E_PREFIX + `ssss_cache.${type}`);
    func(key);
  }

  storeCrossSigningKeys(txn, keys) {
    setJsonItem(this.store, KEY_CROSS_SIGNING_KEYS, keys);
  }

  storeSecretStorePrivateKey(txn, type, key) {
    setJsonItem(this.store, E2E_PREFIX + `ssss_cache.${type}`, key);
  }

  doTxn(mode, stores, func) {
    return Promise.resolve(func(null));
  }

}

exports.LocalStorageCryptoStore = LocalStorageCryptoStore;

function getJsonItem(store, key) {
  try {
    // if the key is absent, store.getItem() returns null, and
    // JSON.parse(null) === null, so this returns null.
    return JSON.parse(store.getItem(key));
  } catch (e) {
    _logger.logger.log("Error: Failed to get key %s: %s", key, e.stack || e);

    _logger.logger.log(e.stack);
  }

  return null;
}

function setJsonItem(store, key, val) {
  store.setItem(key, JSON.stringify(val));
}

/***/ }),

/***/ "b313":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var Format = {
    RFC1738: 'RFC1738',
    RFC3986: 'RFC3986'
};

module.exports = {
    'default': Format.RFC3986,
    formatters: {
        RFC1738: function (value) {
            return replace.call(value, percentTwenties, '+');
        },
        RFC3986: function (value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};


/***/ }),

/***/ "b383":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__("91dd");
exports.encode = exports.stringify = __webpack_require__("e099");


/***/ }),

/***/ "b40f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */



/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */
var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g
var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/
var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */
var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */
var QUOTE_REGEXP = /([\\"])/g

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */
var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

/**
 * Module exports.
 * @public
 */

exports.format = format
exports.parse = parse

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

function format (obj) {
  if (!obj || typeof obj !== 'object') {
    throw new TypeError('argument obj is required')
  }

  var parameters = obj.parameters
  var type = obj.type

  if (!type || !TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid type')
  }

  var string = type

  // append parameters
  if (parameters && typeof parameters === 'object') {
    var param
    var params = Object.keys(parameters).sort()

    for (var i = 0; i < params.length; i++) {
      param = params[i]

      if (!TOKEN_REGEXP.test(param)) {
        throw new TypeError('invalid parameter name')
      }

      string += '; ' + param + '=' + qstring(parameters[param])
    }
  }

  return string
}

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

function parse (string) {
  if (!string) {
    throw new TypeError('argument string is required')
  }

  // support req/res-like objects as argument
  var header = typeof string === 'object'
    ? getcontenttype(string)
    : string

  if (typeof header !== 'string') {
    throw new TypeError('argument string is required to be a string')
  }

  var index = header.indexOf(';')
  var type = index !== -1
    ? header.substr(0, index).trim()
    : header.trim()

  if (!TYPE_REGEXP.test(type)) {
    throw new TypeError('invalid media type')
  }

  var obj = new ContentType(type.toLowerCase())

  // parse parameters
  if (index !== -1) {
    var key
    var match
    var value

    PARAM_REGEXP.lastIndex = index

    while ((match = PARAM_REGEXP.exec(header))) {
      if (match.index !== index) {
        throw new TypeError('invalid parameter format')
      }

      index += match[0].length
      key = match[1].toLowerCase()
      value = match[2]

      if (value[0] === '"') {
        // remove quotes and escapes
        value = value
          .substr(1, value.length - 2)
          .replace(QESC_REGEXP, '$1')
      }

      obj.parameters[key] = value
    }

    if (index !== header.length) {
      throw new TypeError('invalid parameter format')
    }
  }

  return obj
}

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

function getcontenttype (obj) {
  var header

  if (typeof obj.getHeader === 'function') {
    // res-like
    header = obj.getHeader('content-type')
  } else if (typeof obj.headers === 'object') {
    // req-like
    header = obj.headers && obj.headers['content-type']
  }

  if (typeof header !== 'string') {
    throw new TypeError('content-type header is missing from object')
  }

  return header
}

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

function qstring (val) {
  var str = String(val)

  // no need to quote tokens
  if (TOKEN_REGEXP.test(str)) {
    return str
  }

  if (str.length > 0 && !TEXT_REGEXP.test(str)) {
    throw new TypeError('invalid parameter value')
  }

  return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
}

/**
 * Class to represent a content type.
 * @private
 */
function ContentType (type) {
  this.parameters = Object.create(null)
  this.type = type
}


/***/ }),

/***/ "b42e":
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "b465":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("6b38");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("1c8940c8", content, shadowRoot)
};

/***/ }),

/***/ "b466":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#topheader[data-v-52afd868]{background:rgb(var(--background-total-theme));top:0;padding-top:var(--app-margin-top);left:0;right:0;position:absolute;z-index:4;color:rgb(var(--text-color));border-bottom:1px solid rgb(var(--neutral-grad-0))}#topheader .iconbutton[data-v-52afd868]{cursor:pointer}#topheader .headerLine[data-v-52afd868]{display:flex;align-items:center;padding:0;height:64px}#topheader .headerLine>div[data-v-52afd868]{text-align:center}#topheader .headerLine .iconsmall[data-v-52afd868]{width:22px;min-width:22px}#topheader .headerLine .icon[data-v-52afd868]{color:rgb(var(--color-txt-ac));width:44px;min-width:44px}#topheader .headerLine .rightaddIcons[data-v-52afd868]{margin-right:11px}#topheader .headerLine .leftaddIcon[data-v-52afd868]{margin-left:11px}#topheader .headerLine .infoPart[data-v-52afd868]{flex-grow:1;padding:0 1em;overflow:hidden}#topheader .headerLine .infoPart[data-v-52afd868] span,#topheader .headerLine .infoPart span[data-v-52afd868]{font-size:.9em;font-weight:500}#topheader .rightaddIcons[data-v-52afd868],#topheader .rightIcons[data-v-52afd868]{justify-content:space-between}#topheader.bin[data-v-52afd868]{position:relative}#topheader.minimized[data-v-52afd868]{right:auto;transition:.3s}#topheader.minimized .headerLine[data-v-52afd868]{height:54px}#topheader.minimized.fix[data-v-52afd868]{width:344px;position:absolute;background:transparent;overflow:hidden;will-change:transform;right:0}#topheader.minimized.fix .headerLine[data-v-52afd868]{padding:0}#topheader.minimized.fix .icon[data-v-52afd868]{width:44px;height:44px;line-height:44px;transition:transform .3s}#topheader.minimized.fix .icon .iconbutton[data-v-52afd868]{border-radius:50%;background:rgba(var(--neutral-grad-4),.1);color:rgb(var(--color-txt-ac));cursor:pointer}@media (pointer:fine){#topheader.minimized.fix .icon .iconbutton[data-v-52afd868]:hover{background:rgba(var(--neutral-grad-4),.05)}}#topheader.minimized.fix .infoPart[data-v-52afd868],#topheader.minimized.fix .leftIcon[data-v-52afd868]{display:none}#topheader.minimized.fix.active[data-v-52afd868]{transform:translate3d(-300px,-56px,0);border-radius:8px;border-bottom-left-radius:0;border-bottom-right-radius:0;background:rgb(var(--background-total-theme));border:1px solid rgba(var(--neutral-grad-4),.2);box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}#topheader.minimized.fix.active .infoPart[data-v-52afd868],#topheader.minimized.fix.active .leftIcon[data-v-52afd868]{display:block}#topheader.minimized.fix[data-v-52afd868]:not(.active){border-bottom:0!important}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "b480":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("5609");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("8a42ff40", content, shadowRoot)
};

/***/ }),

/***/ "b4f6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_12492b0b_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8fc3");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_12492b0b_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_12492b0b_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_12492b0b_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_12492b0b_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "b503":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexedDBCryptoStore = void 0;

var _logger = __webpack_require__("63c7");

var _localStorageCryptoStore = __webpack_require__("b2ca");

var _memoryCryptoStore = __webpack_require__("4df7");

var IndexedDBCryptoStoreBackend = _interopRequireWildcard(__webpack_require__("3c2f"));

var _errors = __webpack_require__("0023");

var IndexedDBHelpers = _interopRequireWildcard(__webpack_require__("6146"));
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * Internal module. indexeddb storage for e2e.
 *
 * @module
 */

/**
 * An implementation of CryptoStore, which is normally backed by an indexeddb,
 * but with fallback to MemoryCryptoStore.
 *
 * @implements {module:crypto/store/base~CryptoStore}
 */


class IndexedDBCryptoStore {
  /**
   * Create a new IndexedDBCryptoStore
   *
   * @param {IDBFactory} indexedDB  global indexedDB instance
   * @param {string} dbName   name of db to connect to
   */
  constructor(indexedDB, dbName) {
    this._indexedDB = indexedDB;
    this._dbName = dbName;
    this._backendPromise = null;
    this._backend = null;
  }

  static exists(indexedDB, dbName) {
    return IndexedDBHelpers.exists(indexedDB, dbName);
  }
  /**
   * Ensure the database exists and is up-to-date, or fall back to
   * a local storage or in-memory store.
   *
   * This must be called before the store can be used.
   *
   * @return {Promise} resolves to either an IndexedDBCryptoStoreBackend.Backend,
   * or a MemoryCryptoStore
   */


  startup() {
    if (this._backendPromise) {
      return this._backendPromise;
    }

    this._backendPromise = new Promise((resolve, reject) => {
      if (!this._indexedDB) {
        reject(new Error('no indexeddb support available'));
        return;
      }

      _logger.logger.log(`connecting to indexeddb ${this._dbName}`);

      const req = this._indexedDB.open(this._dbName, IndexedDBCryptoStoreBackend.VERSION);

      req.onupgradeneeded = ev => {
        const db = ev.target.result;
        const oldVersion = ev.oldVersion;
        IndexedDBCryptoStoreBackend.upgradeDatabase(db, oldVersion);
      };

      req.onblocked = () => {
        _logger.logger.log(`can't yet open IndexedDBCryptoStore because it is open elsewhere`);
      };

      req.onerror = ev => {
        _logger.logger.log("Error connecting to indexeddb", ev);

        reject(ev.target.error);
      };

      req.onsuccess = r => {
        const db = r.target.result;

        _logger.logger.log(`connected to indexeddb ${this._dbName}`);

        resolve(new IndexedDBCryptoStoreBackend.Backend(db));
      };
    }).then(backend => {
      // Edge has IndexedDB but doesn't support compund keys which we use fairly extensively.
      // Try a dummy query which will fail if the browser doesn't support compund keys, so
      // we can fall back to a different backend.
      return backend.doTxn('readonly', [IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS, IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD], txn => {
        backend.getEndToEndInboundGroupSession('', '', txn, () => {});
      }).then(() => {
        return backend;
      });
    }).catch(e => {
      if (e.name === 'VersionError') {
        _logger.logger.warn("Crypto DB is too new for us to use!", e); // don't fall back to a different store: the user has crypto data
        // in this db so we should use it or nothing at all.


        throw new _errors.InvalidCryptoStoreError(_errors.InvalidCryptoStoreError.TOO_NEW);
      }

      _logger.logger.warn(`unable to connect to indexeddb ${this._dbName}` + `: falling back to localStorage store: ${e}`);

      try {
        return new _localStorageCryptoStore.LocalStorageCryptoStore(global.localStorage);
      } catch (e) {
        _logger.logger.warn(`unable to open localStorage: falling back to in-memory store: ${e}`);

        return new _memoryCryptoStore.MemoryCryptoStore();
      }
    }).then(backend => {
      this._backend = backend;
    });
    return this._backendPromise;
  }
  /**
   * Delete all data from this store.
   *
   * @returns {Promise} resolves when the store has been cleared.
   */


  deleteAllData() {
    return new Promise((resolve, reject) => {
      if (!this._indexedDB) {
        reject(new Error('no indexeddb support available'));
        return;
      }

      _logger.logger.log(`Removing indexeddb instance: ${this._dbName}`);

      const req = this._indexedDB.deleteDatabase(this._dbName);

      req.onblocked = () => {
        _logger.logger.log(`can't yet delete IndexedDBCryptoStore because it is open elsewhere`);
      };

      req.onerror = ev => {
        _logger.logger.log("Error deleting data from indexeddb", ev);

        reject(ev.target.error);
      };

      req.onsuccess = () => {
        _logger.logger.log(`Removed indexeddb instance: ${this._dbName}`);

        resolve();
      };
    }).catch(e => {
      // in firefox, with indexedDB disabled, this fails with a
      // DOMError. We treat this as non-fatal, so that people can
      // still use the app.
      _logger.logger.warn(`unable to delete IndexedDBCryptoStore: ${e}`);
    });
  }
  /**
   * Look for an existing outgoing room key request, and if none is found,
   * add a new one
   *
   * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the
   *    same instance as passed in, or the existing one.
   */


  getOrAddOutgoingRoomKeyRequest(request) {
    return this._backend.getOrAddOutgoingRoomKeyRequest(request);
  }
  /**
   * Look for an existing room key request
   *
   * @param {module:crypto~RoomKeyRequestBody} requestBody
   *    existing request to look for
   *
   * @return {Promise} resolves to the matching
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    not found
   */


  getOutgoingRoomKeyRequest(requestBody) {
    return this._backend.getOutgoingRoomKeyRequest(requestBody);
  }
  /**
   * Look for room key requests by state
   *
   * @param {Array<Number>} wantedStates list of acceptable states
   *
   * @return {Promise} resolves to the a
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if
   *    there are no pending requests in those states. If there are multiple
   *    requests in those states, an arbitrary one is chosen.
   */


  getOutgoingRoomKeyRequestByState(wantedStates) {
    return this._backend.getOutgoingRoomKeyRequestByState(wantedStates);
  }
  /**
   * Look for room key requests by state –
   * unlike above, return a list of all entries in one state.
   *
   * @param {Number} wantedState
   * @return {Promise<Array<*>>} Returns an array of requests in the given state
   */


  getAllOutgoingRoomKeyRequestsByState(wantedState) {
    return this._backend.getAllOutgoingRoomKeyRequestsByState(wantedState);
  }
  /**
   * Look for room key requests by target device and state
   *
   * @param {string} userId Target user ID
   * @param {string} deviceId Target device ID
   * @param {Array<Number>} wantedStates list of acceptable states
   *
   * @return {Promise} resolves to a list of all the
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}
   */


  getOutgoingRoomKeyRequestsByTarget(userId, deviceId, wantedStates) {
    return this._backend.getOutgoingRoomKeyRequestsByTarget(userId, deviceId, wantedStates);
  }
  /**
   * Look for an existing room key request by id and state, and update it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   * @param {Object} updates        name/value map of updates to apply
   *
   * @returns {Promise} resolves to
   *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}
   *    updated request, or null if no matching row was found
   */


  updateOutgoingRoomKeyRequest(requestId, expectedState, updates) {
    return this._backend.updateOutgoingRoomKeyRequest(requestId, expectedState, updates);
  }
  /**
   * Look for an existing room key request by id and state, and delete it if
   * found
   *
   * @param {string} requestId      ID of request to update
   * @param {number} expectedState  state we expect to find the request in
   *
   * @returns {Promise} resolves once the operation is completed
   */


  deleteOutgoingRoomKeyRequest(requestId, expectedState) {
    return this._backend.deleteOutgoingRoomKeyRequest(requestId, expectedState);
  } // Olm Account

  /*
   * Get the account pickle from the store.
   * This requires an active transaction. See doTxn().
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(string)} func Called with the account pickle
   */


  getAccount(txn, func) {
    this._backend.getAccount(txn, func);
  }
  /**
   * Write the account pickle to the store.
   * This requires an active transaction. See doTxn().
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {string} newData The new account pickle to store.
   */


  storeAccount(txn, newData) {
    this._backend.storeAccount(txn, newData);
  }
  /**
   * Get the public part of the cross-signing keys (eg. self-signing key,
   * user signing key).
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(string)} func Called with the account keys object:
   *        { key_type: base64 encoded seed } where key type = user_signing_key_seed or self_signing_key_seed
   */


  getCrossSigningKeys(txn, func) {
    this._backend.getCrossSigningKeys(txn, func);
  }
  /**
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(string)} func Called with the private key
   * @param {string} type A key type
   */


  getSecretStorePrivateKey(txn, func, type) {
    this._backend.getSecretStorePrivateKey(txn, func, type);
  }
  /**
   * Write the cross-signing keys back to the store
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {string} keys keys object as getCrossSigningKeys()
   */


  storeCrossSigningKeys(txn, keys) {
    this._backend.storeCrossSigningKeys(txn, keys);
  }
  /**
   * Write the cross-signing private keys back to the store
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {string} type The type of cross-signing private key to store
   * @param {string} key keys object as getCrossSigningKeys()
   */


  storeSecretStorePrivateKey(txn, type, key) {
    this._backend.storeSecretStorePrivateKey(txn, type, key);
  } // Olm sessions

  /**
   * Returns the number of end-to-end sessions in the store
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(int)} func Called with the count of sessions
   */


  countEndToEndSessions(txn, func) {
    this._backend.countEndToEndSessions(txn, func);
  }
  /**
   * Retrieve a specific end-to-end session between the logged-in user
   * and another device.
   * @param {string} deviceKey The public key of the other device.
   * @param {string} sessionId The ID of the session to retrieve
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(object)} func Called with A map from sessionId
   *     to session information object with 'session' key being the
   *     Base64 end-to-end session and lastReceivedMessageTs being the
   *     timestamp in milliseconds at which the session last received
   *     a message.
   */


  getEndToEndSession(deviceKey, sessionId, txn, func) {
    this._backend.getEndToEndSession(deviceKey, sessionId, txn, func);
  }
  /**
   * Retrieve the end-to-end sessions between the logged-in user and another
   * device.
   * @param {string} deviceKey The public key of the other device.
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(object)} func Called with A map from sessionId
   *     to session information object with 'session' key being the
   *     Base64 end-to-end session and lastReceivedMessageTs being the
   *     timestamp in milliseconds at which the session last received
   *     a message.
   */


  getEndToEndSessions(deviceKey, txn, func) {
    this._backend.getEndToEndSessions(deviceKey, txn, func);
  }
  /**
   * Retrieve all end-to-end sessions
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(object)} func Called one for each session with
   *     an object with, deviceKey, lastReceivedMessageTs, sessionId
   *     and session keys.
   */


  getAllEndToEndSessions(txn, func) {
    this._backend.getAllEndToEndSessions(txn, func);
  }
  /**
   * Store a session between the logged-in user and another device
   * @param {string} deviceKey The public key of the other device.
   * @param {string} sessionId The ID for this end-to-end session.
   * @param {string} sessionInfo Session information object
   * @param {*} txn An active transaction. See doTxn().
   */


  storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn) {
    this._backend.storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn);
  }

  storeEndToEndSessionProblem(deviceKey, type, fixed) {
    return this._backend.storeEndToEndSessionProblem(deviceKey, type, fixed);
  }

  getEndToEndSessionProblem(deviceKey, timestamp) {
    return this._backend.getEndToEndSessionProblem(deviceKey, timestamp);
  }

  filterOutNotifiedErrorDevices(devices) {
    return this._backend.filterOutNotifiedErrorDevices(devices);
  } // Inbound group sessions

  /**
   * Retrieve the end-to-end inbound group session for a given
   * server key and session ID
   * @param {string} senderCurve25519Key The sender's curve 25519 key
   * @param {string} sessionId The ID of the session
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(object)} func Called with A map from sessionId
   *     to Base64 end-to-end session.
   */


  getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func) {
    this._backend.getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func);
  }
  /**
   * Fetches all inbound group sessions in the store
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(object)} func Called once for each group session
   *     in the store with an object having keys {senderKey, sessionId,
   *     sessionData}, then once with null to indicate the end of the list.
   */


  getAllEndToEndInboundGroupSessions(txn, func) {
    this._backend.getAllEndToEndInboundGroupSessions(txn, func);
  }
  /**
   * Adds an end-to-end inbound group session to the store.
   * If there already exists an inbound group session with the same
   * senderCurve25519Key and sessionID, the session will not be added.
   * @param {string} senderCurve25519Key The sender's curve 25519 key
   * @param {string} sessionId The ID of the session
   * @param {object} sessionData The session data structure
   * @param {*} txn An active transaction. See doTxn().
   */


  addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    this._backend.addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn);
  }
  /**
   * Writes an end-to-end inbound group session to the store.
   * If there already exists an inbound group session with the same
   * senderCurve25519Key and sessionID, it will be overwritten.
   * @param {string} senderCurve25519Key The sender's curve 25519 key
   * @param {string} sessionId The ID of the session
   * @param {object} sessionData The session data structure
   * @param {*} txn An active transaction. See doTxn().
   */


  storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn) {
    this._backend.storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn);
  }

  storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn) {
    this._backend.storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn);
  } // End-to-end device tracking

  /**
   * Store the state of all tracked devices
   * This contains devices for each user, a tracking state for each user
   * and a sync token matching the point in time the snapshot represents.
   * These all need to be written out in full each time such that the snapshot
   * is always consistent, so they are stored in one object.
   *
   * @param {Object} deviceData
   * @param {*} txn An active transaction. See doTxn().
   */


  storeEndToEndDeviceData(deviceData, txn) {
    this._backend.storeEndToEndDeviceData(deviceData, txn);
  }
  /**
   * Get the state of all tracked devices
   *
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(Object)} func Function called with the
   *     device data
   */


  getEndToEndDeviceData(txn, func) {
    this._backend.getEndToEndDeviceData(txn, func);
  } // End to End Rooms

  /**
   * Store the end-to-end state for a room.
   * @param {string} roomId The room's ID.
   * @param {object} roomInfo The end-to-end info for the room.
   * @param {*} txn An active transaction. See doTxn().
   */


  storeEndToEndRoom(roomId, roomInfo, txn) {
    this._backend.storeEndToEndRoom(roomId, roomInfo, txn);
  }
  /**
   * Get an object of roomId->roomInfo for all e2e rooms in the store
   * @param {*} txn An active transaction. See doTxn().
   * @param {function(Object)} func Function called with the end to end encrypted rooms
   */


  getEndToEndRooms(txn, func) {
    this._backend.getEndToEndRooms(txn, func);
  } // session backups

  /**
   * Get the inbound group sessions that need to be backed up.
   * @param {integer} limit The maximum number of sessions to retrieve.  0
   * for no limit.
   * @returns {Promise} resolves to an array of inbound group sessions
   */


  getSessionsNeedingBackup(limit) {
    return this._backend.getSessionsNeedingBackup(limit);
  }
  /**
   * Count the inbound group sessions that need to be backed up.
   * @param {*} txn An active transaction. See doTxn(). (optional)
   * @returns {Promise} resolves to the number of sessions
   */


  countSessionsNeedingBackup(txn) {
    return this._backend.countSessionsNeedingBackup(txn);
  }
  /**
   * Unmark sessions as needing to be backed up.
   * @param {Array<object>} sessions The sessions that need to be backed up.
   * @param {*} txn An active transaction. See doTxn(). (optional)
   * @returns {Promise} resolves when the sessions are unmarked
   */


  unmarkSessionsNeedingBackup(sessions, txn) {
    return this._backend.unmarkSessionsNeedingBackup(sessions, txn);
  }
  /**
   * Mark sessions as needing to be backed up.
   * @param {Array<object>} sessions The sessions that need to be backed up.
   * @param {*} txn An active transaction. See doTxn(). (optional)
   * @returns {Promise} resolves when the sessions are marked
   */


  markSessionsNeedingBackup(sessions, txn) {
    return this._backend.markSessionsNeedingBackup(sessions, txn);
  }
  /**
   * Add a shared-history group session for a room.
   * @param {string} roomId The room that the key belongs to
   * @param {string} senderKey The sender's curve 25519 key
   * @param {string} sessionId The ID of the session
   * @param {*} txn An active transaction. See doTxn(). (optional)
   */


  addSharedHistoryInboundGroupSession(roomId, senderKey, sessionId, txn) {
    this._backend.addSharedHistoryInboundGroupSession(roomId, senderKey, sessionId, txn);
  }
  /**
   * Get the shared-history group session for a room.
   * @param {string} roomId The room that the key belongs to
   * @param {*} txn An active transaction. See doTxn(). (optional)
   * @returns {Promise} Resolves to an array of [senderKey, sessionId]
   */


  getSharedHistoryInboundGroupSessions(roomId, txn) {
    return this._backend.getSharedHistoryInboundGroupSessions(roomId, txn);
  }
  /**
   * Perform a transaction on the crypto store. Any store methods
   * that require a transaction (txn) object to be passed in may
   * only be called within a callback of either this function or
   * one of the store functions operating on the same transaction.
   *
   * @param {string} mode 'readwrite' if you need to call setter
   *     functions with this transaction. Otherwise, 'readonly'.
   * @param {string[]} stores List IndexedDBCryptoStore.STORE_*
   *     options representing all types of object that will be
   *     accessed or written to with this transaction.
   * @param {function(*)} func Function called with the
   *     transaction object: an opaque object that should be passed
   *     to store functions.
   * @param {Logger} [log] A possibly customised log
   * @return {Promise} Promise that resolves with the result of the `func`
   *     when the transaction is complete. If the backend is
   *     async (ie. the indexeddb backend) any of the callback
   *     functions throwing an exception will cause this promise to
   *     reject with that exception. On synchronous backends, the
   *     exception will propagate to the caller of the getFoo method.
   */


  doTxn(mode, stores, func, log) {
    return this._backend.doTxn(mode, stores, func, log);
  }

}

exports.IndexedDBCryptoStore = IndexedDBCryptoStore;
IndexedDBCryptoStore.STORE_ACCOUNT = 'account';
IndexedDBCryptoStore.STORE_SESSIONS = 'sessions';
IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS = 'inbound_group_sessions';
IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD = 'inbound_group_sessions_withheld';
IndexedDBCryptoStore.STORE_SHARED_HISTORY_INBOUND_GROUP_SESSIONS = 'shared_history_inbound_group_sessions';
IndexedDBCryptoStore.STORE_DEVICE_DATA = 'device_data';
IndexedDBCryptoStore.STORE_ROOMS = 'rooms';
IndexedDBCryptoStore.STORE_BACKUP = 'sessions_needing_backup';
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "b50d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var settle = __webpack_require__("467f");
var cookies = __webpack_require__("7aac");
var buildURL = __webpack_require__("30b5");
var buildFullPath = __webpack_require__("83b9");
var parseHeaders = __webpack_require__("c345");
var isURLSameOrigin = __webpack_require__("3934");
var createError = __webpack_require__("2d83");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "b551":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_1_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f6f7");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_1_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_1_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_1_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_1_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "b57f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "b5ca":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var Buffer = __webpack_require__("b639").Buffer
var inherits = __webpack_require__("3fb5")
var HashBase = __webpack_require__("93e6")

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160


/***/ }),

/***/ "b622":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var shared = __webpack_require__("5692");
var hasOwn = __webpack_require__("1a2d");
var uid = __webpack_require__("90e3");
var NATIVE_SYMBOL = __webpack_require__("4930");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "b639":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__("1fb5")
var ieee754 = __webpack_require__("9152")
var isArray = __webpack_require__("e3db")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "b672":
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__("8707").Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "b753":
/***/ (function(module, exports, __webpack_require__) {

/* MIT license */
var cssKeywords = __webpack_require__("4f4d");

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in cssKeywords) {
		if (cssKeywords.hasOwnProperty(keyword)) {
			var value = cssKeywords[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


/***/ }),

/***/ "b79a":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("438e");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("1708abd6", content, shadowRoot)
};

/***/ }),

/***/ "b7d1":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "b7ef":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var getBuiltIn = __webpack_require__("d066");
var createPropertyDescriptor = __webpack_require__("5c6c");
var defineProperty = __webpack_require__("9bf2").f;
var hasOwn = __webpack_require__("1a2d");
var anInstance = __webpack_require__("19aa");
var inheritIfRequired = __webpack_require__("7156");
var normalizeStringArgument = __webpack_require__("e391");
var DOMExceptionConstants = __webpack_require__("cf98");
var clearErrorStack = __webpack_require__("c770");
var DESCRIPTORS = __webpack_require__("83ab");
var IS_PURE = __webpack_require__("c430");

var DOM_EXCEPTION = 'DOMException';
var Error = getBuiltIn('Error');
var NativeDOMException = getBuiltIn(DOM_EXCEPTION);

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var that = new NativeDOMException(message, name);
  var error = Error(message);
  error.name = DOM_EXCEPTION;
  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  inheritIfRequired(that, this, $DOMException);
  return that;
};

var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;

var ERROR_HAS_STACK = 'stack' in Error(DOM_EXCEPTION);
var DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var descriptor = NativeDOMException && DESCRIPTORS && Object.getOwnPropertyDescriptor(global, DOM_EXCEPTION);

// Bun ~ 0.1.1 DOMException have incorrect descriptor and we can't redefine it
// https://github.com/Jarred-Sumner/bun/issues/399
var BUGGY_DESCRIPTOR = !!descriptor && !(descriptor.writable && descriptor.configurable);

var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !BUGGY_DESCRIPTOR && !DOM_EXCEPTION_HAS_STACK;

// `DOMException` constructor patch for `.stack` where it's required
// https://webidl.spec.whatwg.org/#es-DOMException-specialness
$({ global: true, constructor: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, { // TODO: fix export logic
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});

var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
  if (!IS_PURE) {
    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));
  }

  for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {
    var constant = DOMExceptionConstants[key];
    var constantName = constant.s;
    if (!hasOwn(PolyfilledDOMException, constantName)) {
      defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
    }
  }
}


/***/ }),

/***/ "b837":
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__("3fb5")
var SHA512 = __webpack_require__("4fd1")
var Hash = __webpack_require__("b672")
var Buffer = __webpack_require__("8707").Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ "b8d8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NOTE! Due to the inability to guarantee real constant time evaluation of
 * anything in JavaScript VM, this is module is the best effort.
 */
/**
 * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
 *
 * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
 * integers, they'll be converted to them with bitwise operations.
 */
function select(subject, resultIfOne, resultIfZero) {
    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);
}
exports.select = select;
/**
 * Returns 1 if a and b are of equal length and their contents
 * are equal, or 0 otherwise.
 *
 * Note that unlike in equal(), zero-length inputs are considered
 * the same, so this function will return 1.
 */
function compare(a, b) {
    if (a.length !== b.length) {
        return 0;
    }
    let result = 0;
    for (let i = 0; i < a.length; i++) {
        result |= a[i] ^ b[i];
    }
    return (1 & ((result - 1) >>> 8));
}
exports.compare = compare;
/**
 * Returns true if a and b are of equal non-zero length,
 * and their contents are equal, or false otherwise.
 *
 * Note that unlike in compare() zero-length inputs are considered
 * _not_ equal, so this function will return false.
 */
function equal(a, b) {
    if (a.length === 0 || b.length === 0) {
        return false;
    }
    return compare(a, b) !== 0;
}
exports.equal = equal;


/***/ }),

/***/ "b8fa":
/***/ (function(module, exports) {

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};


/***/ }),

/***/ "b93b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_5034d1e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("52ef");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_5034d1e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_5034d1e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_5034d1e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_5034d1e2_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "b980":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");
var createPropertyDescriptor = __webpack_require__("5c6c");

module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es-x/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});


/***/ }),

/***/ "bb15":
/***/ (function(module, exports, __webpack_require__) {

var conversions = __webpack_require__("b753");
var route = __webpack_require__("a279");

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


/***/ }),

/***/ "bb76":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventContext = EventContext;
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/event-context
 */

/**
 * Construct a new EventContext
 *
 * An eventcontext is used for circumstances such as search results, when we
 * have a particular event of interest, and a bunch of events before and after
 * it.
 *
 * It also stores pagination tokens for going backwards and forwards in the
 * timeline.
 *
 * @param {MatrixEvent} ourEvent  the event at the centre of this context
 *
 * @constructor
 */

function EventContext(ourEvent) {
  this._timeline = [ourEvent];
  this._ourEventIndex = 0;
  this._paginateTokens = {
    b: null,
    f: null
  }; // this is used by MatrixClient to keep track of active requests

  this._paginateRequests = {
    b: null,
    f: null
  };
}
/**
 * Get the main event of interest
 *
 * This is a convenience function for getTimeline()[getOurEventIndex()].
 *
 * @return {MatrixEvent} The event at the centre of this context.
 */


EventContext.prototype.getEvent = function () {
  return this._timeline[this._ourEventIndex];
};
/**
 * Get the list of events in this context
 *
 * @return {Array} An array of MatrixEvents
 */


EventContext.prototype.getTimeline = function () {
  return this._timeline;
};
/**
 * Get the index in the timeline of our event
 *
 * @return {Number}
 */


EventContext.prototype.getOurEventIndex = function () {
  return this._ourEventIndex;
};
/**
 * Get a pagination token.
 *
 * @param {boolean} backwards   true to get the pagination token for going
 *                                  backwards in time
 * @return {string}
 */


EventContext.prototype.getPaginateToken = function (backwards) {
  return this._paginateTokens[backwards ? 'b' : 'f'];
};
/**
 * Set a pagination token.
 *
 * Generally this will be used only by the matrix js sdk.
 *
 * @param {string} token        pagination token
 * @param {boolean} backwards   true to set the pagination token for going
 *                                   backwards in time
 */


EventContext.prototype.setPaginateToken = function (token, backwards) {
  this._paginateTokens[backwards ? 'b' : 'f'] = token;
};
/**
 * Add more events to the timeline
 *
 * @param {Array} events      new events, in timeline order
 * @param {boolean} atStart   true to insert new events at the start
 */


EventContext.prototype.addEvents = function (events, atStart) {
  // TODO: should we share logic with Room.addEventsToTimeline?
  // Should Room even use EventContext?
  if (atStart) {
    this._timeline = events.concat(this._timeline);
    this._ourEventIndex += events.length;
  } else {
    this._timeline = this._timeline.concat(events);
  }
};

/***/ }),

/***/ "bbd4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
/** Perform an in-place bitwise XOR operation on two bytestrings */
function xor(a, b) {
    for (let i = 0; i < b.length; i++) {
        a[i] ^= b[i];
    }
}
exports.xor = xor;


/***/ }),

/***/ "bc3a":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("cee4");

/***/ }),

/***/ "bde4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const block_1 = __webpack_require__("69fc");
/**
 * Polyfill for the AES-CTR (counter) mode of operation.
 *
 * Uses a non-constant-time (lookup table-based) AES polyfill.
 * See polyfill/aes.ts for more information on the security impact.
 *
 * Note that CTR mode is malleable and generally should not be used without
 * authentication. Instead, use an authenticated encryption mode, like AES-SIV!
 */
class PolyfillAesCtr {
    constructor(cipher) {
        // Set cipher.
        this._cipher = cipher;
        // Allocate space for counter.
        this._counter = new block_1.default();
        // Allocate buffer for encrypted block.
        this._buffer = new block_1.default();
    }
    clear() {
        this._buffer.clear();
        this._counter.clear();
        this._cipher.clear();
        return this;
    }
    encryptCtr(iv, plaintext) {
        return __awaiter(this, void 0, void 0, function* () {
            if (iv.length !== block_1.default.SIZE) {
                throw new Error("CTR: iv length must be equal to cipher block size");
            }
            // Copy IV to counter, overwriting it.
            this._counter.data.set(iv);
            // Set buffer position to length of buffer
            // so that the first cipher block is generated.
            let bufferPos = block_1.default.SIZE;
            const result = new Uint8Array(plaintext.length);
            for (let i = 0; i < plaintext.length; i++) {
                if (bufferPos === block_1.default.SIZE) {
                    this._buffer.copy(this._counter);
                    this._cipher.encryptBlock(this._buffer);
                    bufferPos = 0;
                    incrementCounter(this._counter);
                }
                result[i] = plaintext[i] ^ this._buffer.data[bufferPos++];
            }
            return result;
        });
    }
}
exports.default = PolyfillAesCtr;
// Increment an AES-CTR mode counter, intentionally wrapping/overflowing
function incrementCounter(counter) {
    let carry = 1;
    for (let i = block_1.default.SIZE - 1; i >= 0; i--) {
        carry += (counter.data[i] & 0xff) | 0;
        counter.data[i] = carry & 0xff;
        carry >>>= 8;
    }
}


/***/ }),

/***/ "be6a":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("306eb");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("57d84a74", content, shadowRoot)
};

/***/ }),

/***/ "bfa8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "c04e":
/***/ (function(module, exports, __webpack_require__) {

var call = __webpack_require__("c65b");
var isObject = __webpack_require__("861d");
var isSymbol = __webpack_require__("d9b5");
var getMethod = __webpack_require__("dc4a");
var ordinaryToPrimitive = __webpack_require__("485a");
var wellKnownSymbol = __webpack_require__("b622");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "c181":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".message[data-v-1cf419f0]{font-weight:400;text-align:center}.message div[data-v-1cf419f0]{margin:0 auto;padding:.5em 1em;background:rgb(var(--background-total-theme));border:1px solid rgba(var(--neutral-grad-1),.3);border-radius:30px;width:200px;font-size:.8em;box-shadow:0 5px 7px -5px rgba(var(--color-shadow-base),.7)}.iconWrapper[data-v-1cf419f0]{transform:scale(.5)}.wrapper[data-v-1cf419f0]{position:absolute;left:0;right:0;top:0;bottom:0;z-index:2900;-webkit-backdrop-filter:blur(5px);backdrop-filter:blur(5px);background:rgba(var(--background-total-theme),.2);transition:.3s}.wrapper .table[data-v-1cf419f0]{height:100%}.wrapper .table>div[data-v-1cf419f0]{vertical-align:middle}#wai-fixedmessageicon[data-v-1cf419f0]{transition:.3s}#wai-fixedmessageicon.minimized .wrapper[data-v-1cf419f0]{top:60px;bottom:100px}#wai-fixedmessageicon.minimized[data-v-1cf419f0]:not(.active){opacity:0}#wai-fixedmessageicon.active .wrapper[data-v-1cf419f0]{width:344px;transform:translateX(-300px)}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "c1af":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addPublicChatName\":\"Add Public Chat Name\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"createPublicChat\":\"Create public chat\",\"chatTopic\":\"Topic renamed\",\"publicRoomTitle\":\"Public Room\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"파일 업로드\",\"header\":\"헤더\",\"dragAndDropAFile\":\"파일 끌어서 놓기\",\"chatInvite\":\"다음과 채팅하도록 초대되었습니다:\",\"cantJoin\":\"다음과 채팅하기 위해 참여할 수 없습니다:\",\"chatInviteDecline\":\"채팅에 참여하거나 초대를 거부할 수 있습니다.\",\"creatorLeft\":\"크리에이터가 방을 나갔기 때문에\",\"encrypted\":\"암호화\",\"noImages\":\"이 채팅에는 아직 이미지가 없습니다\",\"noFiles\":\"There are no files in this chat yet\",\"inviteUser\":\"사용자 초대\",\"invite\":\"초대하다\",\"add\":\"추가\",\"mute\":\"음소거\",\"unmute\":\"음소거 해제\",\"leave\":\"떠나다\",\"Info\":\"정보\",\"new\":\"신규\",\"typing\":\"타자\",\"accNotFound\":\"등록이 진행 중입니다. 잠시만 기다려 주십시오...\",\"emptyList\":\"목록이 비어 있습니다(필터링되었거나 비어 있음)\",\"welcome\":\"포켓넷 채팅에 오신 것을 환영합니다\",\"startNewChat\":\"새 채팅 시작\",\"chats\":\"채팅\",\"shareWith\":\"공유\",\"newChat\":\"새 채팅\",\"moveToChat\":\"채팅으로 이동\",\"queryNoResults\":\"쿼리가 결과를 보고하지 않음\",\"needMoreCharacters\":\"결과에 대해 더 많은 문자가 필요합니다\",\"createGroup\":\"그룹 만들기\",\"unabletoDecrypt\":\"* 해독할 수 없음\",\"messageDeleted\":\"메시지 삭제됨\",\"sentImage\":\"전송된 이미지\",\"sentVoiceMessage\":\"음성 메시지를 보냈다\",\"invitationToChat\":\"채팅 초대\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"채팅에서 나감\",\"joined\":\"가입\",\"chatRenamed\":\"채팅 이름이 (으)로 변경되었습니다 \",\"recentComment\":\"최근 댓글:\",\"share\":\"공유\",\"followers\":\"팔로워:\",\"reputation\":\"평판:\",\"following\":\"팔로잉:\",\"theme\":\"테마:\",\"contacts\":\"연락처\",\"phoneContacts\":\"전화 연락처\",\"chooseInviteMedia\":\"초대 방법을 선택하십시오:\",\"admin\":\"관리자\",\"moderator\":\"진행자\",\"videocall\":\"영상통화\",\"call\":\"전화\",\"leaveAndDelete\":\"나가서 삭제\",\"donate\":\"기부하다\",\"makeModerator\":\"모더레이터 만들기\",\"ban\":\"금지\",\"kick\":\"킥\",\"members\":\"회원\",\"media\":\"미디어\",\"files\":\"파일\",\"contactsList\":\"연락처 목록\",\"send\":\"보내다\",\"pageCaption\":\"페이지 캡션\",\"caption\":\"캡션\",\"text\":\"텍스트\",\"placeholder\":\"자리 표시자\",\"sendTransactionTo\":\"트랜잭션 보내기\",\"toBePaidByReceiver\":\"수취인이 지불함\",\"toBePaidBySender\":\"발신인이 지불함\",\"source\":\"소스\",\"amount\":\"금액\",\"receiver\":\"수신자\",\"message\":\"메시지\",\"includeFeesInAmount\":\"금액에 수수료 포함\",\"transactionFees\":\"거래 수수료\",\"totalAmount\":\"총 금액\",\"balanceTooLow\":\"밸런스가 너무 낮음\",\"transactionError\":\"오류, 거래를 할 수 없습니다\",\"calculateFees\":\"수수료 계산\",\"startChatWith\":\"채팅 시작\",\"searchResult\":\"검색 결과\",\"joinedInTheChat\":\"채팅에 참여했습니다\",\"invited\":\"초대 \",\"hasInvited\":\"초대 \",\"inTheChat\":\" 채팅 중\",\"banned\":\"금지된\",\"andRoom\":\"그리고 방\",\"left\":\"왼쪽\",\"theChat\":\" 채팅 \",\"made\":\"만든 \",\"aModerator\":\" 중재자\",\"editedChatNameTo \":\"편집된 채팅 이름을 \",\"somebody\":\"누군가\",\"sent\":\"보낸\",\"PKOINto\":\" PKOIN to \",\"response\":\"응답\",\"messagefrom\":\"에서 전달된 메시지\",\"edited\":\"편집됨\",\"settings\":\"설정\",\"unauthorized\":\"무단\",\"search\":\"검색\",\"replyOnMessage\":\"메시지에 회신\",\"editMessage\":\"메시지 편집\",\"inviteFriend\":\"친구 초대\",\"emptyContactList\":\"연락처 목록이 비어 있습니다\",\"joinApp\":\"포켓넷 가입\",\"hasInvitedToJoin\":\"Pocketnet에 가입하도록 초대했습니다\",\"contactsempty\":\"아직 연락처가 없습니다. 검색에서 찾으십시오\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"이메일\",\"refillNamePlaceholder\":\"리필 이름\"},\"message\":{},\"button\":{\"starChatButton\":\"채팅 시작\",\"decline\":\"거절\",\"declineandignore\":\"사용자 무시\",\"join\":\"가입\",\"ok\":\"그래\",\"copy\":\"복사\",\"forward\":\"앞으로\",\"delete\":\"삭제\",\"reply\":\"답장\",\"share\":\"공유\",\"save\":\"저장\",\"download\":\"다운로드\",\"downloaded\":\"다운로드\",\"goToPocketnetProfile\":\"Pocketnet 프로필로 이동\",\"sendFile\":\"파일 보내기\",\"takePhotoOrVideo\":\"이미지 보내기\",\"sendCoins\":\"코인 보내기\",\"edit\":\"편집\",\"select\":\"고르다\",\"block\":\"차단\",\"unblock\":\"차단 해제\",\"blockUser\":\"사용자 차단\"},\"yes\":\"예\",\"cancel\":\"취소\",\"teamMessages\":{\"1-title\":\"Bastyon 비공개 채팅에 오신 것을 환영합니다!\",\"1-list1\":\"전화번호와 연결되지 않은 비공개 메신저\",\"1-list2\":\"기본적으로 모든 1:1 대화의 종단 간 암호화\",\"1-list3\":\"채팅을 통해 주고받는 모든 이미지는 암호화되어 저장됩니다\",\"1-list4\":\"메시지 기록은 7일 동안만 저장됩니다\",\"2-title\":\"엄청난 발표! Pocketnet 응용 프로그램은 이제 Bastyon이라고 합니다!\",\"2-message1\":\"도메인이 Bastyon.com으로 이동됩니다. 최근에 다음과 같은 주요 업데이트를 발표했습니다\",\"2-list1\":\"귀하의 전화 번호에 연결되지 않은 개인 암호화 메신저\",\"2-list2\":\"블로거에게 PKOIN 기부 기능\",\"2-list3\":\"비디오 및 라이브 스트리밍\",\"2-message2\":\"지금 친구를 초대하고 탈중앙화 인터넷의 큰 미래의 일부가 되십시오!\",\"2-button\":\"친구를 초대\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "c275":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".emoji-mart,.emoji-mart *{box-sizing:border-box;line-height:1.15}.emoji-mart{font-family:-apple-system,BlinkMacSystemFont,Helvetica Neue,sans-serif;font-size:16px;display:inline-block;color:#222427;border:1px solid #d9d9d9;border-radius:5px;background:#fff}.emoji-mart .emoji-mart-emoji{padding:6px}.emoji-mart-bar{border:0 solid #d9d9d9}.emoji-mart-bar:first-child{border-bottom-width:1px;border-top-left-radius:5px;border-top-right-radius:5px}.emoji-mart-bar:last-child{border-top-width:1px;border-bottom-left-radius:5px;border-bottom-right-radius:5px}.emoji-mart-anchors{display:flex;flex-direction:row;justify-content:space-between;padding:0 6px;color:#858585;line-height:0}.emoji-mart-anchor{position:relative;display:block;flex:1 1 auto;text-align:center;padding:12px 4px;overflow:hidden;transition:color .1s ease-out}.emoji-mart-anchor-selected,.emoji-mart-anchor:hover{color:#464646}.emoji-mart-anchor-selected .emoji-mart-anchor-bar{bottom:0}.emoji-mart-anchor-bar{position:absolute;bottom:-3px;left:0;width:100%;height:3px;background-color:#464646}.emoji-mart-anchors i{display:inline-block;width:100%;max-width:22px}.emoji-mart-anchors svg{fill:currentColor;max-height:18px}.emoji-mart-scroll{overflow-y:scroll;height:270px;padding:0 6px 6px 6px;will-change:transform}.emoji-mart-search{margin-top:6px;padding:0 6px}.emoji-mart-search input{font-size:16px;display:block;width:100%;padding:.2em .6em;border-radius:25px;border:1px solid #d9d9d9;outline:0}.emoji-mart-category .emoji-mart-emoji span{z-index:1;position:relative;text-align:center;cursor:default}.emoji-mart-category .emoji-mart-emoji:hover:before{z-index:0;content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background-color:#f4f4f4;border-radius:100%}.emoji-mart-category-label{z-index:2;position:relative;position:sticky;top:0}.emoji-mart-category-label span{display:block;width:100%;font-weight:500;padding:5px 6px;background-color:#fff;background-color:hsla(0,0%,100%,.95)}.emoji-mart-emoji{position:relative;display:inline-block;font-size:0}.emoji-mart-no-results{font-size:14px;text-align:center;padding-top:70px;color:#858585}.emoji-mart-no-results .emoji-mart-category-label{display:none}.emoji-mart-no-results .emoji-mart-no-results-label{margin-top:.2em}.emoji-mart-no-results .emoji-mart-emoji:hover:before{content:none}.emoji-mart-preview{position:relative;height:70px}.emoji-mart-preview-data,.emoji-mart-preview-emoji,.emoji-mart-preview-skins{position:absolute;top:50%;transform:translateY(-50%)}.emoji-mart-preview-emoji{left:12px}.emoji-mart-preview-data{left:68px;right:12px;word-break:break-all}.emoji-mart-preview-skins{right:30px;text-align:right}.emoji-mart-preview-name{font-size:14px}.emoji-mart-preview-shortname{font-size:12px;color:#888}.emoji-mart-preview-emoticon+.emoji-mart-preview-emoticon,.emoji-mart-preview-shortname+.emoji-mart-preview-emoticon,.emoji-mart-preview-shortname+.emoji-mart-preview-shortname{margin-left:.5em}.emoji-mart-preview-emoticon{font-size:11px;color:#bbb}.emoji-mart-title span{display:inline-block;vertical-align:middle}.emoji-mart-title .emoji-mart-emoji{padding:0}.emoji-mart-title-label{color:#999a9c;font-size:26px;font-weight:300}.emoji-mart-skin-swatches{font-size:0;padding:2px 0;border:1px solid #d9d9d9;border-radius:12px;background-color:#fff}.emoji-mart-skin-swatches-opened .emoji-mart-skin-swatch{width:16px;padding:0 2px}.emoji-mart-skin-swatches-opened .emoji-mart-skin-swatch-selected:after{opacity:.75}.emoji-mart-skin-swatch{display:inline-block;width:0;vertical-align:middle;transition-property:width,padding;transition-duration:.125s;transition-timing-function:ease-out}.emoji-mart-skin-swatch:first-child{transition-delay:0s}.emoji-mart-skin-swatch:nth-child(2){transition-delay:.03s}.emoji-mart-skin-swatch:nth-child(3){transition-delay:.06s}.emoji-mart-skin-swatch:nth-child(4){transition-delay:.09s}.emoji-mart-skin-swatch:nth-child(5){transition-delay:.12s}.emoji-mart-skin-swatch:nth-child(6){transition-delay:.15s}.emoji-mart-skin-swatch-selected{position:relative;width:16px;padding:0 2px}.emoji-mart-skin-swatch-selected:after{content:\"\";position:absolute;top:50%;left:50%;width:4px;height:4px;margin:-2px 0 0 -2px;background-color:#fff;border-radius:100%;pointer-events:none;opacity:0;transition:opacity .2s ease-out}.emoji-mart-skin{display:inline-block;width:100%;padding-top:100%;max-width:12px;border-radius:100%}.emoji-mart-skin-tone-1{background-color:#ffc93a}.emoji-mart-skin-tone-2{background-color:#fadcbc}.emoji-mart-skin-tone-3{background-color:#e0bb95}.emoji-mart-skin-tone-4{background-color:#bf8f68}.emoji-mart-skin-tone-5{background-color:#9b643d}.emoji-mart-skin-tone-6{background-color:#594539}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "c337":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vue_style_loader_index_js_ref_7_oneOf_1_0_css_loader_dist_cjs_js_ref_7_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_7_oneOf_1_2_postcss_loader_src_index_js_ref_7_oneOf_1_3_cache_loader_dist_cjs_js_ref_1_0_vue_loader_lib_index_js_vue_loader_options_ClipLoader_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8b3a");
/* harmony import */ var _vue_style_loader_index_js_ref_7_oneOf_1_0_css_loader_dist_cjs_js_ref_7_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_7_oneOf_1_2_postcss_loader_src_index_js_ref_7_oneOf_1_3_cache_loader_dist_cjs_js_ref_1_0_vue_loader_lib_index_js_vue_loader_options_ClipLoader_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vue_style_loader_index_js_ref_7_oneOf_1_0_css_loader_dist_cjs_js_ref_7_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_7_oneOf_1_2_postcss_loader_src_index_js_ref_7_oneOf_1_3_cache_loader_dist_cjs_js_ref_1_0_vue_loader_lib_index_js_vue_loader_options_ClipLoader_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _vue_style_loader_index_js_ref_7_oneOf_1_0_css_loader_dist_cjs_js_ref_7_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_7_oneOf_1_2_postcss_loader_src_index_js_ref_7_oneOf_1_3_cache_loader_dist_cjs_js_ref_1_0_vue_loader_lib_index_js_vue_loader_options_ClipLoader_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _vue_style_loader_index_js_ref_7_oneOf_1_0_css_loader_dist_cjs_js_ref_7_oneOf_1_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_7_oneOf_1_2_postcss_loader_src_index_js_ref_7_oneOf_1_3_cache_loader_dist_cjs_js_ref_1_0_vue_loader_lib_index_js_vue_loader_options_ClipLoader_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "c345":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "c401":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var defaults = __webpack_require__("2444");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "c412":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_16157ecb_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("51c5");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_16157ecb_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_16157ecb_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_16157ecb_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_16157ecb_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "c430":
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "c4c0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__("966d");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "c532":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("1d2b");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "c566":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("dc31");

/***/ }),

/***/ "c5c5":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("ccdd");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("1e5aa7e0", content, shadowRoot)
};

/***/ }),

/***/ "c65b":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("40d5");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "c6ae":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__("b639"),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(1),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),

/***/ "c6b6":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "c6cd":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var defineGlobalProperty = __webpack_require__("6374");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "c71b":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".swiperWrapper[data-v-71d5e826]{padding-bottom:0;display:flex;overflow-x:scroll;scrollbar-width:none}.swiperWrapper[data-v-71d5e826]::-webkit-scrollbar{width:0!important;height:0!important}.swiperWrapperFlex[data-v-71d5e826]{display:flex;flex-wrap:nowrap;height:100%;align-items:center}.swiperWrapperFlex .imageSwiper[data-v-71d5e826]{width:33px;min-width:33px}.aboutRoomAvatar[data-v-71d5e826]{font-size:.5em}.userwrapper[data-v-71d5e826]{border-radius:50%}.userinfopicwrapper[data-v-71d5e826]{padding-bottom:100%;position:relative;background:none;margin:0 auto;border-radius:50%;overflow:hidden}.userinfopicwrapper .userwrapper[data-v-71d5e826]{width:50%}.threeAvatars .userwrapper[data-v-71d5e826]:first-child{position:absolute;left:50%;top:0;transform:translate(-50%,6.5%)}.threeAvatars .userwrapper[data-v-71d5e826]:nth-child(2){position:absolute;right:0;bottom:0;transform:translateY(-6.5%)}.threeAvatars .userwrapper[data-v-71d5e826]:nth-child(3){position:absolute;left:0;bottom:0;transform:translateY(-6.5%)}.twoAvatars .userwrapper[data-v-71d5e826]:first-child{position:absolute;top:0;left:0;transform:translate(6.5%,6.5%)}.twoAvatars .userwrapper[data-v-71d5e826]:last-child{position:absolute;right:0;bottom:0;transform:translate(-6.5%,-6.5%)}.fourAvatars .userwrapper[data-v-71d5e826]:first-child{position:absolute;top:0;left:0}.fourAvatars .userwrapper[data-v-71d5e826]:nth-child(2){position:absolute;right:0;top:0}.fourAvatars .userwrapper[data-v-71d5e826]:nth-child(3){position:absolute;left:0;bottom:0}.fourAvatars .userwrapper[data-v-71d5e826]:nth-child(4){position:absolute;right:0;bottom:0}.fourMore[data-v-71d5e826]{background:none}.fourMore[data-v-71d5e826],.imageSwiper[data-v-71d5e826]{margin:0 auto}.imageSwiper img[data-v-71d5e826]{display:block;border-radius:50%;width:100%;height:100%;-o-object-fit:cover;object-fit:cover}.invited[data-v-71d5e826]{opacity:.5}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "c770":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");

var $Error = Error;
var replace = uncurryThis(''.replace);

var TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};


/***/ }),

/***/ "c8af":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "c8ba":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "c934":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_index_css_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a63f");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_index_css_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_index_css_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_index_css_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_7_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_7_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_7_oneOf_1_3_index_css_vue_type_style_index_0_lang_css_shadow__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "c973":
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "c976":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filter = Filter;

var _filterComponent = __webpack_require__("4ec4");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module filter
 */

/**
 * @param {Object} obj
 * @param {string} keyNesting
 * @param {*} val
 */


function setProp(obj, keyNesting, val) {
  const nestedKeys = keyNesting.split(".");
  let currentObj = obj;

  for (let i = 0; i < nestedKeys.length - 1; i++) {
    if (!currentObj[nestedKeys[i]]) {
      currentObj[nestedKeys[i]] = {};
    }

    currentObj = currentObj[nestedKeys[i]];
  }

  currentObj[nestedKeys[nestedKeys.length - 1]] = val;
}
/**
 * Construct a new Filter.
 * @constructor
 * @param {string} userId The user ID for this filter.
 * @param {string=} filterId The filter ID if known.
 * @prop {string} userId The user ID of the filter
 * @prop {?string} filterId The filter ID
 */


function Filter(userId, filterId) {
  this.userId = userId;
  this.filterId = filterId;
  this.definition = {};
}

Filter.LAZY_LOADING_MESSAGES_FILTER = {
  lazy_load_members: true
};
/**
 * Get the ID of this filter on your homeserver (if known)
 * @return {?Number} The filter ID
 */

Filter.prototype.getFilterId = function () {
  return this.filterId;
};
/**
 * Get the JSON body of the filter.
 * @return {Object} The filter definition
 */


Filter.prototype.getDefinition = function () {
  return this.definition;
};
/**
 * Set the JSON body of the filter
 * @param {Object} definition The filter definition
 */


Filter.prototype.setDefinition = function (definition) {
  this.definition = definition; // This is all ported from synapse's FilterCollection()
  // definitions look something like:
  // {
  //   "room": {
  //     "rooms": ["!abcde:example.com"],
  //     "not_rooms": ["!123456:example.com"],
  //     "state": {
  //       "types": ["m.room.*"],
  //       "not_rooms": ["!726s6s6q:example.com"],
  //       "lazy_load_members": true,
  //     },
  //     "timeline": {
  //       "limit": 10,
  //       "types": ["m.room.message"],
  //       "not_rooms": ["!726s6s6q:example.com"],
  //       "not_senders": ["@spam:example.com"]
  //       "contains_url": true
  //     },
  //     "ephemeral": {
  //       "types": ["m.receipt", "m.typing"],
  //       "not_rooms": ["!726s6s6q:example.com"],
  //       "not_senders": ["@spam:example.com"]
  //     }
  //   },
  //   "presence": {
  //     "types": ["m.presence"],
  //     "not_senders": ["@alice:example.com"]
  //   },
  //   "event_format": "client",
  //   "event_fields": ["type", "content", "sender"]
  // }

  const room_filter_json = definition.room; // consider the top level rooms/not_rooms filter

  const room_filter_fields = {};

  if (room_filter_json) {
    if (room_filter_json.rooms) {
      room_filter_fields.rooms = room_filter_json.rooms;
    }

    if (room_filter_json.rooms) {
      room_filter_fields.not_rooms = room_filter_json.not_rooms;
    }

    this._include_leave = room_filter_json.include_leave || false;
  }

  this._room_filter = new _filterComponent.FilterComponent(room_filter_fields);
  this._room_timeline_filter = new _filterComponent.FilterComponent(room_filter_json ? room_filter_json.timeline || {} : {}); // don't bother porting this from synapse yet:
  // this._room_state_filter =
  //     new FilterComponent(room_filter_json.state || {});
  // this._room_ephemeral_filter =
  //     new FilterComponent(room_filter_json.ephemeral || {});
  // this._room_account_data_filter =
  //     new FilterComponent(room_filter_json.account_data || {});
  // this._presence_filter =
  //     new FilterComponent(definition.presence || {});
  // this._account_data_filter =
  //     new FilterComponent(definition.account_data || {});
};
/**
 * Get the room.timeline filter component of the filter
 * @return {FilterComponent} room timeline filter component
 */


Filter.prototype.getRoomTimelineFilterComponent = function () {
  return this._room_timeline_filter;
};
/**
 * Filter the list of events based on whether they are allowed in a timeline
 * based on this filter
 * @param {MatrixEvent[]} events  the list of events being filtered
 * @return {MatrixEvent[]} the list of events which match the filter
 */


Filter.prototype.filterRoomTimeline = function (events) {
  return this._room_timeline_filter.filter(this._room_filter.filter(events));
};
/**
 * Set the max number of events to return for each room's timeline.
 * @param {Number} limit The max number of events to return for each room.
 */


Filter.prototype.setTimelineLimit = function (limit) {
  setProp(this.definition, "room.timeline.limit", limit);
};

Filter.prototype.setLazyLoadMembers = function (enabled) {
  setProp(this.definition, "room.state.lazy_load_members", !!enabled);
};
/**
 * Control whether left rooms should be included in responses.
 * @param {boolean} includeLeave True to make rooms the user has left appear
 * in responses.
 */


Filter.prototype.setIncludeLeaveRooms = function (includeLeave) {
  setProp(this.definition, "room.include_leave", includeLeave);
};
/**
 * Create a filter from existing data.
 * @static
 * @param {string} userId
 * @param {string} filterId
 * @param {Object} jsonObj
 * @return {Filter}
 */


Filter.fromJson = function (userId, filterId, jsonObj) {
  const filter = new Filter(userId, filterId);
  filter.setDefinition(jsonObj);
  return filter;
};

/***/ }),

/***/ "c9b8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),

/***/ "ca84":
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__("e330");
var hasOwn = __webpack_require__("1a2d");
var toIndexedObject = __webpack_require__("fc6a");
var indexOf = __webpack_require__("4d64").indexOf;
var hiddenKeys = __webpack_require__("d012");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "cb2d":
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__("1626");
var definePropertyModule = __webpack_require__("9bf2");
var makeBuiltIn = __webpack_require__("13d2");
var defineGlobalProperty = __webpack_require__("6374");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ "cc12":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isObject = __webpack_require__("861d");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "ccdd":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".fadeTr-enter-active{-webkit-transition:opacity .3s ease-in;transition:opacity .3s ease-in;-webkit-transition-delay:.1s;transition-delay:.1s}.fadeTr-leave-active{-webkit-transition:opacity .1s ease-out;transition:opacity .1s ease-out}.fadeTr-enter,.fadeTr-leave-to{opacity:0}.slide-enter-active,.slide-leave-active{-webkit-transition:all 1s;transition:all 1s}.slide-enter,.slide-leave-to{opacity:0;-webkit-transform:translateX(30px);transform:translateX(30px)}.dg-backdrop-enter-active{-webkit-animation:dg-fadeIn .3s;animation:dg-fadeIn .3s}.dg-backdrop-leave-active{-webkit-animation:dg-fadeOut .5s;animation:dg-fadeOut .5s}.dg-fade-enter-active{-webkit-animation:dg-fadeIn .6s ease-out;animation:dg-fadeIn .6s ease-out}.dg-fade-leave-active{-webkit-animation:dg-fadeOut .6s ease-out;animation:dg-fadeOut .6s ease-out}@-webkit-keyframes dg-fadeIn{0%{opacity:0}to{opacity:1}}@keyframes dg-fadeIn{0%{opacity:0}to{opacity:1}}@-webkit-keyframes dg-fadeOut{0%{opacity:1}to{opacity:0}}@keyframes dg-fadeOut{0%{opacity:1}to{opacity:0}}.dg-zoom-enter-active{-webkit-animation:dg-zoomIn .3s ease-out;animation:dg-zoomIn .3s ease-out}.dg-zoom-leave-active{-webkit-animation:dg-zoomOut .4s ease-out;animation:dg-zoomOut .4s ease-out}@-webkit-keyframes dg-zoomIn{0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}50%{opacity:1}}@keyframes dg-zoomIn{0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}50%{opacity:1}}@-webkit-keyframes dg-zoomOut{0%{opacity:1}50%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}to{opacity:0}}@keyframes dg-zoomOut{0%{opacity:1}50%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}to{opacity:0}}.dg-bounce-enter-active{-webkit-animation:dg-bounceIn .6s;animation:dg-bounceIn .6s}.dg-bounce-leave-active{-webkit-animation:dg-zoomOut .6s;animation:dg-zoomOut .6s}@-webkit-keyframes dg-bounceIn{0%{opacity:0;-webkit-transform:scale(.3);transform:scale(.3)}40%{opacity:1;-webkit-transform:scale(1.06);transform:scale(1.06)}60%{-webkit-transform:scale(.92);transform:scale(.92)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes dg-bounceIn{0%{opacity:0;-webkit-transform:scale(.3);transform:scale(.3)}40%{opacity:1;-webkit-transform:scale(1.06);transform:scale(1.06)}60%{-webkit-transform:scale(.92);transform:scale(.92)}to{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes dg-bounceOut{0%{-webkit-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(.95);transform:scale(.95)}50%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1)}to{opacity:0;-webkit-transform:scale(.3);transform:scale(.3)}}@keyframes dg-bounceOut{0%{-webkit-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(.95);transform:scale(.95)}50%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1)}to{opacity:0;-webkit-transform:scale(.3);transform:scale(.3)}}.dg-btn-loader{width:100%;height:100%;position:absolute;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;top:0;left:0}.dg-btn-loader .dg-circles{width:100%;display:block;text-align:center}.dg-btn-loader .dg-circle{width:.9em;height:.9em;opacity:0;background-color:#09a2e3;display:inline-block;border-radius:50%;-webkit-animation-name:dg-circle-oscillation;animation-name:dg-circle-oscillation;-webkit-animation-duration:.5875s;animation-duration:.5875s;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-direction:normal;animation-direction:normal}.dg-btn-loader .dg-circle:not(:last-child){margin-right:8px}.dg-btn-loader .dg-circle:first-child{-webkit-animation-delay:.1195s;animation-delay:.1195s}.dg-btn-loader .dg-circle:nth-child(2){-webkit-animation-delay:.2755s;animation-delay:.2755s}.dg-btn-loader .dg-circle:nth-child(3){-webkit-animation-delay:.3485s;animation-delay:.3485s}@-webkit-keyframes dg-circle-oscillation{50%{opacity:1}}@keyframes dg-circle-oscillation{50%{opacity:1}}body.dg-open{width:100%;height:100%;overflow:hidden}.dg-container *{-webkit-box-sizing:border-box;box-sizing:border-box}.dg-container [disabled]{cursor:not-allowed;opacity:.3}.dg-backdrop{background-color:rgba(0,0,0,.8)}.dg-backdrop,.dg-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:5000}.dg-content-cont{width:100%;font-family:inherit}.dg-main-content{width:98%;max-width:400px;padding:15px;border-radius:5px;margin:25px auto;background-color:#fff}.dg-content{font-size:16px;line-height:1.3em}.dg-title{margin:0 0 10px 0;padding:0;font-size:18px}.dg-content-body{border-bottom:2px solid #e1e6ea;padding-bottom:15px}.dg-content-footer{position:relative;padding:15px 0 0}.dg-form{background-color:#f8f8ff;padding:10px;margin-bottom:-15px}.dg-content-cont--floating{position:absolute;top:35%;-webkit-transform:translateY(-70%);transform:translateY(-70%);margin-top:0}@media (max-height:700px){.dg-content-cont--floating{position:relative;top:10%;-webkit-transform:none;transform:none;margin-top:0}}.dg-btn{display:inline-block;position:relative;min-width:80px;padding:6px 20px;border-radius:4px;outline:0;border:2px solid transparent;text-align:center;text-decoration:none;cursor:pointer;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;font-size:16px;font-weight:700}.dg-btn:active,.dg-btn:focus,.dg-btn:link{outline:none}.dg-btn::-moz-focus-inner{border:0}.dg-btn--cancel{color:#fefefe;background-color:#0096d9}.dg-btn--ok{color:#0096d9;background-color:#fefefe;border-color:#0096d9}.dg-pull-right{float:right}.dg-btn.dg-btn--loading .dg-btn-content{visibility:hidden}.dg-clear:before{content:\" \";display:block;clear:both}.dg-content-body--has-title .dg-content{font-size:14px}.dg-container--has-input .dg-main-content{max-width:450px}.dg-container--has-input .dg-content{margin-bottom:15px}.dg-container--has-input .dg-content-body{border-bottom:none}.dg-container--has-input .dg-form{border:1px solid #e1e6ea;border-bottom:none;border-top-left-radius:4px;border-top-right-radius:4px}.dg-container--has-input .dg-content-footer{background-color:#f8f8ff;border:1px solid #e1e6ea;border-top:none;border-bottom-left-radius:4px;border-bottom-right-radius:4px;padding:0 10px 10px}.dg-container .dg-highlight-1{color:#ff8c00;font-weight:700;border-bottom:1px solid #2ba5ff}.dg-container .dg-highlight-2{color:#2ba5ff;font-weight:700;border-bottom:1px solid #ff8c00}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "cde8":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("47a0");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("4233703c", content, shadowRoot)
};

/***/ }),

/***/ "cee4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var bind = __webpack_require__("1d2b");
var Axios = __webpack_require__("0a06");
var mergeConfig = __webpack_require__("4a7b");
var defaults = __webpack_require__("2444");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__("7a77");
axios.CancelToken = __webpack_require__("8df4");
axios.isCancel = __webpack_require__("2e67");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__("0df6");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__("5f02");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "cf98":
/***/ (function(module, exports) {

module.exports = {
  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },
  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },
  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },
  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },
  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },
  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },
  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },
  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },
  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },
  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },
  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },
  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },
  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },
  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },
  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },
  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },
  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },
  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },
  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },
  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },
  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },
  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },
  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },
  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },
  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }
};


/***/ }),

/***/ "d012":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "d039":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "d066":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("da84");
var isCallable = __webpack_require__("1626");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "d0f2":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MatrixBaseApis = MatrixBaseApis;

var _serviceTypes = __webpack_require__("788e");

var _logger = __webpack_require__("63c7");

var _pushprocessor = __webpack_require__("ef06");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _httpApi = __webpack_require__("1c8f");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.
Copyright 2019 Michael Telatynski <7t3chguy@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * This is an internal module. MatrixBaseApis is currently only meant to be used
 * by {@link client~MatrixClient}.
 *
 * @module base-apis
 */


function termsUrlForService(serviceType, baseUrl) {
  switch (serviceType) {
    case _serviceTypes.SERVICE_TYPES.IS:
      return baseUrl + _httpApi.PREFIX_IDENTITY_V2 + '/terms';

    case _serviceTypes.SERVICE_TYPES.IM:
      return baseUrl + '/_matrix/integrations/v1/terms';

    default:
      throw new Error('Unsupported service type');
  }
}
/**
 * Low-level wrappers for the Matrix APIs
 *
 * @constructor
 *
 * @param {Object} opts Configuration options
 *
 * @param {string} opts.baseUrl Required. The base URL to the client-server
 * HTTP API.
 *
 * @param {string} opts.idBaseUrl Optional. The base identity server URL for
 * identity server requests.
 *
 * @param {Function} opts.request Required. The function to invoke for HTTP
 * requests. The value of this property is typically <code>require("request")
 * </code> as it returns a function which meets the required interface. See
 * {@link requestFunction} for more information.
 *
 * @param {string} opts.accessToken The access_token for this user.
 *
 * @param {IdentityServerProvider} [opts.identityServer]
 * Optional. A provider object with one function `getAccessToken`, which is a
 * callback that returns a Promise<String> of an identity access token to supply
 * with identity requests. If the object is unset, no access token will be
 * supplied.
 * See also https://github.com/vector-im/element-web/issues/10615 which seeks to
 * replace the previous approach of manual access tokens params with this
 * callback throughout the SDK.
 *
 * @param {Number=} opts.localTimeoutMs Optional. The default maximum amount of
 * time to wait before timing out HTTP requests. If not specified, there is no
 * timeout.
 *
 * @param {Object} opts.queryParams Optional. Extra query parameters to append
 * to all requests with this client. Useful for application services which require
 * <code>?user_id=</code>.
 *
 * @param {boolean} [opts.useAuthorizationHeader = false] Set to true to use
 * Authorization header instead of query param to send the access token to the server.
 */


function MatrixBaseApis(opts) {
  utils.checkObjectHasKeys(opts, ["baseUrl", "request"]);
  this.baseUrl = opts.baseUrl;
  this.idBaseUrl = opts.idBaseUrl;
  this.identityServer = opts.identityServer;
  const httpOpts = {
    baseUrl: opts.baseUrl,
    idBaseUrl: opts.idBaseUrl,
    accessToken: opts.accessToken,
    request: opts.request,
    prefix: _httpApi.PREFIX_R0,
    onlyData: true,
    extraParams: opts.queryParams,
    localTimeoutMs: opts.localTimeoutMs,
    useAuthorizationHeader: opts.useAuthorizationHeader
  };
  this._http = new _httpApi.MatrixHttpApi(this, httpOpts);
  this._txnCtr = 0;
}
/**
 * Get the Homeserver URL of this client
 * @return {string} Homeserver URL of this client
 */


MatrixBaseApis.prototype.getHomeserverUrl = function () {
  return this.baseUrl;
};
/**
 * Get the Identity Server URL of this client
 * @param {boolean} stripProto whether or not to strip the protocol from the URL
 * @return {string} Identity Server URL of this client
 */


MatrixBaseApis.prototype.getIdentityServerUrl = function () {
  let stripProto = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (stripProto && (this.idBaseUrl.startsWith("http://") || this.idBaseUrl.startsWith("https://"))) {
    return this.idBaseUrl.split("://")[1];
  }

  return this.idBaseUrl;
};
/**
 * Set the Identity Server URL of this client
 * @param {string} url New Identity Server URL
 */


MatrixBaseApis.prototype.setIdentityServerUrl = function (url) {
  this.idBaseUrl = utils.ensureNoTrailingSlash(url);

  this._http.setIdBaseUrl(this.idBaseUrl);
};
/**
 * Get the access token associated with this account.
 * @return {?String} The access_token or null
 */


MatrixBaseApis.prototype.getAccessToken = function () {
  return this._http.opts.accessToken || null;
};
/**
 * @return {boolean} true if there is a valid access_token for this client.
 */


MatrixBaseApis.prototype.isLoggedIn = function () {
  return this._http.opts.accessToken !== undefined;
};
/**
 * Make up a new transaction id
 *
 * @return {string} a new, unique, transaction id
 */


MatrixBaseApis.prototype.makeTxnId = function () {
  return "m" + new Date().getTime() + "." + this._txnCtr++;
}; // Registration/Login operations
// =============================

/**
 * Check whether a username is available prior to registration. An error response
 * indicates an invalid/unavailable username.
 * @param {string} username The username to check the availability of.
 * @return {Promise} Resolves: to `true`.
 */


MatrixBaseApis.prototype.isUsernameAvailable = function (username) {
  return this._http.authedRequest(undefined, "GET", '/register/available', {
    username: username
  }).then(response => {
    return response.available;
  });
};
/**
 * @param {string} username
 * @param {string} password
 * @param {string} sessionId
 * @param {Object} auth
 * @param {Object} bindThreepids Set key 'email' to true to bind any email
 *     threepid uses during registration in the ID server. Set 'msisdn' to
 *     true to bind msisdn.
 * @param {string} guestAccessToken
 * @param {string} inhibitLogin
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.register = function (username, password, sessionId, auth, bindThreepids, guestAccessToken, inhibitLogin, callback) {
  // backwards compat
  if (bindThreepids === true) {
    bindThreepids = {
      email: true
    };
  } else if (bindThreepids === null || bindThreepids === undefined) {
    bindThreepids = {};
  }

  if (typeof inhibitLogin === 'function') {
    callback = inhibitLogin;
    inhibitLogin = undefined;
  }

  if (sessionId) {
    auth.session = sessionId;
  }

  const params = {
    auth: auth
  };

  if (username !== undefined && username !== null) {
    params.username = username;
  }

  if (password !== undefined && password !== null) {
    params.password = password;
  }

  if (bindThreepids.email) {
    params.bind_email = true;
  }

  if (bindThreepids.msisdn) {
    params.bind_msisdn = true;
  }

  if (guestAccessToken !== undefined && guestAccessToken !== null) {
    params.guest_access_token = guestAccessToken;
  }

  if (inhibitLogin !== undefined && inhibitLogin !== null) {
    params.inhibit_login = inhibitLogin;
  } // Temporary parameter added to make the register endpoint advertise
  // msisdn flows. This exists because there are clients that break
  // when given stages they don't recognise. This parameter will cease
  // to be necessary once these old clients are gone.
  // Only send it if we send any params at all (the password param is
  // mandatory, so if we send any params, we'll send the password param)


  if (password !== undefined && password !== null) {
    params.x_show_msisdn = true;
  }

  return this.registerRequest(params, undefined, callback);
};
/**
 * Register a guest account.
 * This method returns the auth info needed to create a new authenticated client,
 * Remember to call `setGuest(true)` on the (guest-)authenticated client, e.g:
 * ```javascript
 * const tmpClient = await sdk.createClient(MATRIX_INSTANCE);
 * const { user_id, device_id, access_token } = tmpClient.registerGuest();
 * const client = createClient({
 *   baseUrl: MATRIX_INSTANCE,
 *   accessToken: access_token,
 *   userId: user_id,
 *   deviceId: device_id,
 * })
 * client.setGuest(true);
 * ```
 *
 * @param {Object=} opts Registration options
 * @param {Object} opts.body JSON HTTP body to provide.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: JSON object that contains:
 *                   { user_id, device_id, access_token, home_server }
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.registerGuest = function (opts, callback) {
  opts = opts || {};
  opts.body = opts.body || {};
  return this.registerRequest(opts.body, "guest", callback);
};
/**
 * @param {Object} data   parameters for registration request
 * @param {string=} kind  type of user to register. may be "guest"
 * @param {module:client.callback=} callback
 * @return {Promise} Resolves: to the /register response
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.registerRequest = function (data, kind, callback) {
  const params = {};

  if (kind) {
    params.kind = kind;
  }

  return this._http.request(callback, "POST", "/register", params, data);
};
/**
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.loginFlows = function (callback) {
  return this._http.request(callback, "GET", "/login");
};
/**
 * @param {string} loginType
 * @param {Object} data
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.login = function (loginType, data, callback) {
  const login_data = {
    type: loginType
  }; // merge data into login_data

  utils.extend(login_data, data);
  return this._http.authedRequest((error, response) => {
    if (response && response.access_token && response.user_id) {
      this._http.opts.accessToken = response.access_token;
      this.credentials = {
        userId: response.user_id
      };
    }

    if (callback) {
      callback(error, response);
    }
  }, "POST", "/login", undefined, login_data);
};
/**
 * @param {string} user
 * @param {string} password
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.loginWithPassword = function (user, password, callback) {
  return this.login("m.login.password", {
    user: user,
    password: password
  }, callback);
};
/**
 * @param {string} relayState URL Callback after SAML2 Authentication
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.loginWithSAML2 = function (relayState, callback) {
  return this.login("m.login.saml2", {
    relay_state: relayState
  }, callback);
};
/**
 * @param {string} redirectUrl The URL to redirect to after the HS
 * authenticates with CAS.
 * @return {string} The HS URL to hit to begin the CAS login process.
 */


MatrixBaseApis.prototype.getCasLoginUrl = function (redirectUrl) {
  return this.getSsoLoginUrl(redirectUrl, "cas");
};
/**
 * @param {string} redirectUrl The URL to redirect to after the HS
 *     authenticates with the SSO.
 * @param {string} loginType The type of SSO login we are doing (sso or cas).
 *     Defaults to 'sso'.
 * @param {string} idpId The ID of the Identity Provider being targeted, optional.
 * @return {string} The HS URL to hit to begin the SSO login process.
 */


MatrixBaseApis.prototype.getSsoLoginUrl = function (redirectUrl, loginType, idpId) {
  if (loginType === undefined) {
    loginType = "sso";
  }

  let prefix = _httpApi.PREFIX_R0;
  let url = "/login/" + loginType + "/redirect";

  if (idpId) {
    url += "/" + idpId;
    prefix = "/_matrix/client/unstable/org.matrix.msc2858";
  }

  return this._http.getUrl(url, {
    redirectUrl
  }, prefix);
};
/**
 * @param {string} token Login token previously received from homeserver
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.loginWithToken = function (token, callback) {
  return this.login("m.login.token", {
    token: token
  }, callback);
};
/**
 * Logs out the current session.
 * Obviously, further calls that require authorisation should fail after this
 * method is called. The state of the MatrixClient object is not affected:
 * it is up to the caller to either reset or destroy the MatrixClient after
 * this method succeeds.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: On success, the empty object
 */


MatrixBaseApis.prototype.logout = function (callback) {
  return this._http.authedRequest(callback, "POST", '/logout');
};
/**
 * Deactivates the logged-in account.
 * Obviously, further calls that require authorisation should fail after this
 * method is called. The state of the MatrixClient object is not affected:
 * it is up to the caller to either reset or destroy the MatrixClient after
 * this method succeeds.
 * @param {object} auth Optional. Auth data to supply for User-Interactive auth.
 * @param {boolean} erase Optional. If set, send as `erase` attribute in the
 * JSON request body, indicating whether the account should be erased. Defaults
 * to false.
 * @return {Promise} Resolves: On success, the empty object
 */


MatrixBaseApis.prototype.deactivateAccount = function (auth, erase) {
  if (typeof erase === 'function') {
    throw new Error('deactivateAccount no longer accepts a callback parameter');
  }

  const body = {};

  if (auth) {
    body.auth = auth;
  }

  if (erase !== undefined) {
    body.erase = erase;
  }

  return this._http.authedRequest(undefined, "POST", '/account/deactivate', undefined, body);
};
/**
 * Get the fallback URL to use for unknown interactive-auth stages.
 *
 * @param {string} loginType     the type of stage being attempted
 * @param {string} authSessionId the auth session ID provided by the homeserver
 *
 * @return {string} HS URL to hit to for the fallback interface
 */


MatrixBaseApis.prototype.getFallbackAuthUrl = function (loginType, authSessionId) {
  const path = utils.encodeUri("/auth/$loginType/fallback/web", {
    $loginType: loginType
  });
  return this._http.getUrl(path, {
    session: authSessionId
  }, _httpApi.PREFIX_R0);
}; // Room operations
// ===============

/**
 * Create a new room.
 * @param {Object} options a list of options to pass to the /createRoom API.
 * @param {string} options.room_alias_name The alias localpart to assign to
 * this room.
 * @param {string} options.visibility Either 'public' or 'private'.
 * @param {string[]} options.invite A list of user IDs to invite to this room.
 * @param {string} options.name The name to give this room.
 * @param {string} options.topic The topic to give this room.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: <code>{room_id: {string},
 * room_alias: {string(opt)}}</code>
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.createRoom = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (options, callback) {
    // some valid options include: room_alias_name, visibility, invite
    // inject the id_access_token if inviting 3rd party addresses
    const invitesNeedingToken = (options.invite_3pid || []).filter(i => !i.id_access_token);

    if (invitesNeedingToken.length > 0 && this.identityServer && this.identityServer.getAccessToken && (yield this.doesServerAcceptIdentityAccessToken())) {
      const identityAccessToken = yield this.identityServer.getAccessToken();

      if (identityAccessToken) {
        for (const invite of invitesNeedingToken) {
          invite.id_access_token = identityAccessToken;
        }
      }
    }

    return this._http.authedRequest(callback, "POST", "/createRoom", undefined, options);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Fetches relations for a given event
 * @param {string} roomId the room of the event
 * @param {string} eventId the id of the event
 * @param {string} relationType the rel_type of the relations requested
 * @param {string} eventType the event type of the relations requested
 * @param {Object} opts options with optional values for the request.
 * @param {Object} opts.from the pagination token returned from a previous request as `next_batch` to return following relations.
 * @return {Object} the response, with chunk and next_batch.
 */


MatrixBaseApis.prototype.fetchRelations = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (roomId, eventId, relationType, eventType, opts) {
    const queryParams = {};

    if (opts.from) {
      queryParams.from = opts.from;
    }

    const queryString = utils.encodeParams(queryParams);
    const path = utils.encodeUri("/rooms/$roomId/relations/$eventId/$relationType/$eventType?" + queryString, {
      $roomId: roomId,
      $eventId: eventId,
      $relationType: relationType,
      $eventType: eventType
    });
    const response = yield this._http.authedRequest(undefined, "GET", path, null, null, {
      prefix: _httpApi.PREFIX_UNSTABLE
    });
    return response;
  });

  return function (_x3, _x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * @param {string} roomId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.roomState = function (roomId, callback) {
  const path = utils.encodeUri("/rooms/$roomId/state", {
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "GET", path);
};
/**
 * Get an event in a room by its event id.
 * @param {string} roomId
 * @param {string} eventId
 * @param {module:client.callback} callback Optional.
 *
 * @return {Promise} Resolves to an object containing the event.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.fetchRoomEvent = function (roomId, eventId, callback) {
  const path = utils.encodeUri("/rooms/$roomId/event/$eventId", {
    $roomId: roomId,
    $eventId: eventId
  });
  return this._http.authedRequest(callback, "GET", path);
};
/**
 * @param {string} roomId
 * @param {string} includeMembership the membership type to include in the response
 * @param {string} excludeMembership the membership type to exclude from the response
 * @param {string} atEventId the id of the event for which moment in the timeline the members should be returned for
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: dictionary of userid to profile information
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.members = function (roomId, includeMembership, excludeMembership, atEventId, callback) {
  const queryParams = {};

  if (includeMembership) {
    queryParams.membership = includeMembership;
  }

  if (excludeMembership) {
    queryParams.not_membership = excludeMembership;
  }

  if (atEventId) {
    queryParams.at = atEventId;
  }

  const queryString = utils.encodeParams(queryParams);
  const path = utils.encodeUri("/rooms/$roomId/members?" + queryString, {
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "GET", path);
};
/**
 * Upgrades a room to a new protocol version
 * @param {string} roomId
 * @param {string} newVersion The target version to upgrade to
 * @return {Promise} Resolves: Object with key 'replacement_room'
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.upgradeRoom = function (roomId, newVersion) {
  const path = utils.encodeUri("/rooms/$roomId/upgrade", {
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "POST", path, undefined, {
    new_version: newVersion
  });
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Group summary object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getGroupSummary = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/summary", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Group profile object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getGroupProfile = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/profile", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {string} groupId
 * @param {Object} profile The group profile object
 * @param {string=} profile.name Name of the group
 * @param {string=} profile.avatar_url MXC avatar URL
 * @param {string=} profile.short_description A short description of the room
 * @param {string=} profile.long_description A longer HTML description of the room
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setGroupProfile = function (groupId, profile) {
  const path = utils.encodeUri("/groups/$groupId/profile", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "POST", path, undefined, profile);
};
/**
 * @param {string} groupId
 * @param {object} policy The join policy for the group. Must include at
 *     least a 'type' field which is 'open' if anyone can join the group
 *     the group without prior approval, or 'invite' if an invite is
 *     required to join.
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setGroupJoinPolicy = function (groupId, policy) {
  const path = utils.encodeUri("/groups/$groupId/settings/m.join_policy", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {
    'm.join_policy': policy
  });
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Group users list object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getGroupUsers = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/users", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Group users list object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getGroupInvitedUsers = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/invited_users", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Group rooms list object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getGroupRooms = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/rooms", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {string} groupId
 * @param {string} userId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.inviteUserToGroup = function (groupId, userId) {
  const path = utils.encodeUri("/groups/$groupId/admin/users/invite/$userId", {
    $groupId: groupId,
    $userId: userId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} userId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.removeUserFromGroup = function (groupId, userId) {
  const path = utils.encodeUri("/groups/$groupId/admin/users/remove/$userId", {
    $groupId: groupId,
    $userId: userId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} userId
 * @param {string} roleId Optional.
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addUserToGroupSummary = function (groupId, userId, roleId) {
  const path = utils.encodeUri(roleId ? "/groups/$groupId/summary/$roleId/users/$userId" : "/groups/$groupId/summary/users/$userId", {
    $groupId: groupId,
    $roleId: roleId,
    $userId: userId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} userId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.removeUserFromGroupSummary = function (groupId, userId) {
  const path = utils.encodeUri("/groups/$groupId/summary/users/$userId", {
    $groupId: groupId,
    $userId: userId
  });
  return this._http.authedRequest(undefined, "DELETE", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} roomId
 * @param {string} categoryId Optional.
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addRoomToGroupSummary = function (groupId, roomId, categoryId) {
  const path = utils.encodeUri(categoryId ? "/groups/$groupId/summary/$categoryId/rooms/$roomId" : "/groups/$groupId/summary/rooms/$roomId", {
    $groupId: groupId,
    $categoryId: categoryId,
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} roomId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.removeRoomFromGroupSummary = function (groupId, roomId) {
  const path = utils.encodeUri("/groups/$groupId/summary/rooms/$roomId", {
    $groupId: groupId,
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "DELETE", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {string} roomId
 * @param {bool} isPublic Whether the room-group association is visible to non-members
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addRoomToGroup = function (groupId, roomId, isPublic) {
  if (isPublic === undefined) {
    isPublic = true;
  }

  const path = utils.encodeUri("/groups/$groupId/admin/rooms/$roomId", {
    $groupId: groupId,
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {
    "m.visibility": {
      type: isPublic ? "public" : "private"
    }
  });
};
/**
 * Configure the visibility of a room-group association.
 * @param {string} groupId
 * @param {string} roomId
 * @param {bool} isPublic Whether the room-group association is visible to non-members
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.updateGroupRoomVisibility = function (groupId, roomId, isPublic) {
  // NB: The /config API is generic but there's not much point in exposing this yet as synapse
  //     is the only server to implement this. In future we should consider an API that allows
  //     arbitrary configuration, i.e. "config/$configKey".
  const path = utils.encodeUri("/groups/$groupId/admin/rooms/$roomId/config/m.visibility", {
    $groupId: groupId,
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {
    type: isPublic ? "public" : "private"
  });
};
/**
 * @param {string} groupId
 * @param {string} roomId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.removeRoomFromGroup = function (groupId, roomId) {
  const path = utils.encodeUri("/groups/$groupId/admin/rooms/$roomId", {
    $groupId: groupId,
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "DELETE", path, undefined, {});
};
/**
 * @param {string} groupId
 * @param {Object} opts Additional options to send alongside the acceptance.
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.acceptGroupInvite = function (groupId) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  const path = utils.encodeUri("/groups/$groupId/self/accept_invite", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, opts || {});
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.joinGroup = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/self/join", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @param {string} groupId
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.leaveGroup = function (groupId) {
  const path = utils.encodeUri("/groups/$groupId/self/leave", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {});
};
/**
 * @return {Promise} Resolves: The groups to which the user is joined
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getJoinedGroups = function () {
  const path = utils.encodeUri("/joined_groups");
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * @param {Object} content Request content
 * @param {string} content.localpart The local part of the desired group ID
 * @param {Object} content.profile Group profile object
 * @return {Promise} Resolves: Object with key group_id: id of the created group
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.createGroup = function (content) {
  const path = utils.encodeUri("/create_group");
  return this._http.authedRequest(undefined, "POST", path, undefined, content);
};
/**
 * @param {string[]} userIds List of user IDs
 * @return {Promise} Resolves: Object as exmaple below
 *
 *     {
 *         "users": {
 *             "@bob:example.com": {
 *                 "+example:example.com"
 *             }
 *         }
 *     }
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getPublicisedGroups = function (userIds) {
  const path = utils.encodeUri("/publicised_groups");
  return this._http.authedRequest(undefined, "POST", path, undefined, {
    user_ids: userIds
  });
};
/**
 * @param {string} groupId
 * @param {bool} isPublic Whether the user's membership of this group is made public
 * @return {Promise} Resolves: Empty object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setGroupPublicity = function (groupId, isPublic) {
  const path = utils.encodeUri("/groups/$groupId/self/update_publicity", {
    $groupId: groupId
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, {
    publicise: isPublic
  });
};
/**
 * Retrieve a state event.
 * @param {string} roomId
 * @param {string} eventType
 * @param {string} stateKey
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getStateEvent = function (roomId, eventType, stateKey, callback) {
  const pathParams = {
    $roomId: roomId,
    $eventType: eventType,
    $stateKey: stateKey
  };
  let path = utils.encodeUri("/rooms/$roomId/state/$eventType", pathParams);

  if (stateKey !== undefined) {
    path = utils.encodeUri(path + "/$stateKey", pathParams);
  }

  return this._http.authedRequest(callback, "GET", path);
};
/**
 * @param {string} roomId
 * @param {string} eventType
 * @param {Object} content
 * @param {string} stateKey
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.sendStateEvent = function (roomId, eventType, content, stateKey, callback) {
  const pathParams = {
    $roomId: roomId,
    $eventType: eventType,
    $stateKey: stateKey
  };
  let path = utils.encodeUri("/rooms/$roomId/state/$eventType", pathParams);

  if (stateKey !== undefined) {
    path = utils.encodeUri(path + "/$stateKey", pathParams);
  }

  return this._http.authedRequest(callback, "PUT", path, undefined, content);
};
/**
 * @param {string} roomId
 * @param {Number} limit
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.roomInitialSync = function (roomId, limit, callback) {
  if (utils.isFunction(limit)) {
    callback = limit;
    limit = undefined;
  }

  const path = utils.encodeUri("/rooms/$roomId/initialSync", {
    $roomId: roomId
  });

  if (!limit) {
    limit = 30;
  }

  return this._http.authedRequest(callback, "GET", path, {
    limit: limit
  });
};
/**
 * Set a marker to indicate the point in a room before which the user has read every
 * event. This can be retrieved from room account data (the event type is `m.fully_read`)
 * and displayed as a horizontal line in the timeline that is visually distinct to the
 * position of the user's own read receipt.
 * @param {string} roomId ID of the room that has been read
 * @param {string} rmEventId ID of the event that has been read
 * @param {string} rrEventId ID of the event tracked by the read receipt. This is here
 * for convenience because the RR and the RM are commonly updated at the same time as
 * each other. Optional.
 * @param {object} opts Options for the read markers.
 * @param {object} opts.hidden True to hide the read receipt from other users. <b>This
 * property is currently unstable and may change in the future.</b>
 * @return {Promise} Resolves: the empty object, {}.
 */


MatrixBaseApis.prototype.setRoomReadMarkersHttpRequest = function (roomId, rmEventId, rrEventId, opts) {
  const path = utils.encodeUri("/rooms/$roomId/read_markers", {
    $roomId: roomId
  });
  const content = {
    "m.fully_read": rmEventId,
    "m.read": rrEventId,
    "m.hidden": Boolean(opts ? opts.hidden : false)
  };
  return this._http.authedRequest(undefined, "POST", path, undefined, content);
};
/**
 * @return {Promise} Resolves: A list of the user's current rooms
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getJoinedRooms = function () {
  const path = utils.encodeUri("/joined_rooms");
  return this._http.authedRequest(undefined, "GET", path);
};
/**
 * Retrieve membership info. for a room.
 * @param {string} roomId ID of the room to get membership for
 * @return {Promise} Resolves: A list of currently joined users
 *                                 and their profile data.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getJoinedRoomMembers = function (roomId) {
  const path = utils.encodeUri("/rooms/$roomId/joined_members", {
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "GET", path);
}; // Room Directory operations
// =========================

/**
 * @param {Object} options Options for this request
 * @param {string} options.server The remote server to query for the room list.
 *                                Optional. If unspecified, get the local home
 *                                server's public room list.
 * @param {number} options.limit Maximum number of entries to return
 * @param {string} options.since Token to paginate from
 * @param {object} options.filter Filter parameters
 * @param {string} options.filter.generic_search_term String to search for
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.publicRooms = function (options, callback) {
  if (typeof options == 'function') {
    callback = options;
    options = {};
  }

  if (options === undefined) {
    options = {};
  }

  const query_params = {};

  if (options.server) {
    query_params.server = options.server;
    delete options.server;
  }

  if (Object.keys(options).length === 0 && Object.keys(query_params).length === 0) {
    return this._http.authedRequest(callback, "GET", "/publicRooms");
  } else {
    return this._http.authedRequest(callback, "POST", "/publicRooms", query_params, options);
  }
};
/**
 * Create an alias to room ID mapping.
 * @param {string} alias The room alias to create.
 * @param {string} roomId The room ID to link the alias to.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.createAlias = function (alias, roomId, callback) {
  const path = utils.encodeUri("/directory/room/$alias", {
    $alias: alias
  });
  const data = {
    room_id: roomId
  };
  return this._http.authedRequest(callback, "PUT", path, undefined, data);
};
/**
 * Delete an alias to room ID mapping.  This alias must be on your local server
 * and you must have sufficient access to do this operation.
 * @param {string} alias The room alias to delete.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.deleteAlias = function (alias, callback) {
  const path = utils.encodeUri("/directory/room/$alias", {
    $alias: alias
  });
  return this._http.authedRequest(callback, "DELETE", path, undefined, undefined);
};
/**
 * @param {string} roomId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: an object with an `aliases` property, containing an array of local aliases
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.unstableGetLocalAliases = function (roomId, callback) {
  const path = utils.encodeUri("/rooms/$roomId/aliases", {
    $roomId: roomId
  });
  const prefix = _httpApi.PREFIX_UNSTABLE + "/org.matrix.msc2432";
  return this._http.authedRequest(callback, "GET", path, null, null, {
    prefix
  });
};
/**
 * Get room info for the given alias.
 * @param {string} alias The room alias to resolve.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Object with room_id and servers.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getRoomIdForAlias = function (alias, callback) {
  // TODO: deprecate this or resolveRoomAlias
  const path = utils.encodeUri("/directory/room/$alias", {
    $alias: alias
  });
  return this._http.authedRequest(callback, "GET", path);
};
/**
 * @param {string} roomAlias
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.resolveRoomAlias = function (roomAlias, callback) {
  // TODO: deprecate this or getRoomIdForAlias
  const path = utils.encodeUri("/directory/room/$alias", {
    $alias: roomAlias
  });
  return this._http.request(callback, "GET", path);
};
/**
 * Get the visibility of a room in the current HS's room directory
 * @param {string} roomId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getRoomDirectoryVisibility = function (roomId, callback) {
  const path = utils.encodeUri("/directory/list/room/$roomId", {
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "GET", path);
};
/**
 * Set the visbility of a room in the current HS's room directory
 * @param {string} roomId
 * @param {string} visibility "public" to make the room visible
 *                 in the public directory, or "private" to make
 *                 it invisible.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setRoomDirectoryVisibility = function (roomId, visibility, callback) {
  const path = utils.encodeUri("/directory/list/room/$roomId", {
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, {
    "visibility": visibility
  });
};
/**
 * Set the visbility of a room bridged to a 3rd party network in
 * the current HS's room directory.
 * @param {string} networkId the network ID of the 3rd party
 *                 instance under which this room is published under.
 * @param {string} roomId
 * @param {string} visibility "public" to make the room visible
 *                 in the public directory, or "private" to make
 *                 it invisible.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setRoomDirectoryVisibilityAppService = function (networkId, roomId, visibility, callback) {
  const path = utils.encodeUri("/directory/list/appservice/$networkId/$roomId", {
    $networkId: networkId,
    $roomId: roomId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, {
    "visibility": visibility
  });
}; // User Directory Operations
// =========================

/**
 * Query the user directory with a term matching user IDs, display names and domains.
 * @param {object} opts options
 * @param {string} opts.term the term with which to search.
 * @param {number} opts.limit the maximum number of results to return. The server will
 *                 apply a limit if unspecified.
 * @return {Promise} Resolves: an array of results.
 */


MatrixBaseApis.prototype.searchUserDirectory = function (opts) {
  const body = {
    search_term: opts.term
  };

  if (opts.limit !== undefined) {
    body.limit = opts.limit;
  }

  return this._http.authedRequest(undefined, "POST", "/user_directory/search", undefined, body);
}; // Media operations
// ================

/**
 * Upload a file to the media repository on the home server.
 *
 * @param {object} file The object to upload. On a browser, something that
 *   can be sent to XMLHttpRequest.send (typically a File).  Under node.js,
 *   a a Buffer, String or ReadStream.
 *
 * @param {object} opts  options object
 *
 * @param {string=} opts.name   Name to give the file on the server. Defaults
 *   to <tt>file.name</tt>.
 *
 * @param {boolean=} opts.includeFilename if false will not send the filename,
 *   e.g for encrypted file uploads where filename leaks are undesirable.
 *   Defaults to true.
 *
 * @param {string=} opts.type   Content-type for the upload. Defaults to
 *   <tt>file.type</tt>, or <tt>applicaton/octet-stream</tt>.
 *
 * @param {boolean=} opts.rawResponse Return the raw body, rather than
 *   parsing the JSON. Defaults to false (except on node.js, where it
 *   defaults to true for backwards compatibility).
 *
 * @param {boolean=} opts.onlyContentUri Just return the content URI,
 *   rather than the whole body. Defaults to false (except on browsers,
 *   where it defaults to true for backwards compatibility). Ignored if
 *   opts.rawResponse is true.
 *
 * @param {Function=} opts.callback Deprecated. Optional. The callback to
 *    invoke on success/failure. See the promise return values for more
 *    information.
 *
 * @param {Function=} opts.progressHandler Optional. Called when a chunk of
 *    data has been uploaded, with an object containing the fields `loaded`
 *    (number of bytes transferred) and `total` (total size, if known).
 *
 * @return {Promise} Resolves to response object, as
 *    determined by this.opts.onlyData, opts.rawResponse, and
 *    opts.onlyContentUri.  Rejects with an error (usually a MatrixError).
 */


MatrixBaseApis.prototype.uploadContent = function (file, opts) {
  return this._http.uploadContent(file, opts);
};
/**
 * Cancel a file upload in progress
 * @param {Promise} promise The promise returned from uploadContent
 * @return {boolean} true if canceled, otherwise false
 */


MatrixBaseApis.prototype.cancelUpload = function (promise) {
  return this._http.cancelUpload(promise);
};
/**
 * Get a list of all file uploads in progress
 * @return {array} Array of objects representing current uploads.
 * Currently in progress is element 0. Keys:
 *  - promise: The promise associated with the upload
 *  - loaded: Number of bytes uploaded
 *  - total: Total number of bytes to upload
 */


MatrixBaseApis.prototype.getCurrentUploads = function () {
  return this._http.getCurrentUploads();
}; // Profile operations
// ==================

/**
 * @param {string} userId
 * @param {string} info The kind of info to retrieve (e.g. 'displayname',
 * 'avatar_url').
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getProfileInfo = function (userId, info, callback) {
  if (utils.isFunction(info)) {
    callback = info;
    info = undefined;
  }

  const path = info ? utils.encodeUri("/profile/$userId/$info", {
    $userId: userId,
    $info: info
  }) : utils.encodeUri("/profile/$userId", {
    $userId: userId
  });
  return this._http.authedRequest(callback, "GET", path);
}; // Account operations
// ==================

/**
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getThreePids = function (callback) {
  const path = "/account/3pid";
  return this._http.authedRequest(callback, "GET", path, undefined, undefined);
};
/**
 * Add a 3PID to your homeserver account and optionally bind it to an identity
 * server as well. An identity server is required as part of the `creds` object.
 *
 * This API is deprecated, and you should instead use `addThreePidOnly`
 * for homeservers that support it.
 *
 * @param {Object} creds
 * @param {boolean} bind
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: on success
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addThreePid = function (creds, bind, callback) {
  const path = "/account/3pid";
  const data = {
    'threePidCreds': creds,
    'bind': bind
  };
  return this._http.authedRequest(callback, "POST", path, null, data);
};
/**
 * Add a 3PID to your homeserver account. This API does not use an identity
 * server, as the homeserver is expected to handle 3PID ownership validation.
 *
 * You can check whether a homeserver supports this API via
 * `doesServerSupportSeparateAddAndBind`.
 *
 * @param {Object} data A object with 3PID validation data from having called
 * `account/3pid/<medium>/requestToken` on the homeserver.
 * @return {Promise} Resolves: on success
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addThreePidOnly = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (data) {
    const path = "/account/3pid/add";
    const prefix = (yield this.isVersionSupported("r0.6.0")) ? _httpApi.PREFIX_R0 : _httpApi.PREFIX_UNSTABLE;
    return this._http.authedRequest(undefined, "POST", path, null, data, {
      prefix
    });
  });

  return function (_x8) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Bind a 3PID for discovery onto an identity server via the homeserver. The
 * identity server handles 3PID ownership validation and the homeserver records
 * the new binding to track where all 3PIDs for the account are bound.
 *
 * You can check whether a homeserver supports this API via
 * `doesServerSupportSeparateAddAndBind`.
 *
 * @param {Object} data A object with 3PID validation data from having called
 * `validate/<medium>/requestToken` on the identity server. It should also
 * contain `id_server` and `id_access_token` fields as well.
 * @return {Promise} Resolves: on success
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.bindThreePid = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* (data) {
    const path = "/account/3pid/bind";
    const prefix = (yield this.isVersionSupported("r0.6.0")) ? _httpApi.PREFIX_R0 : _httpApi.PREFIX_UNSTABLE;
    return this._http.authedRequest(undefined, "POST", path, null, data, {
      prefix
    });
  });

  return function (_x9) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Unbind a 3PID for discovery on an identity server via the homeserver. The
 * homeserver removes its record of the binding to keep an updated record of
 * where all 3PIDs for the account are bound.
 *
 * @param {string} medium The threepid medium (eg. 'email')
 * @param {string} address The threepid address (eg. 'bob@example.com')
 *        this must be as returned by getThreePids.
 * @return {Promise} Resolves: on success
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.unbindThreePid = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* (medium, address) {
    const path = "/account/3pid/unbind";
    const data = {
      medium,
      address,
      id_server: this.getIdentityServerUrl(true)
    };
    const prefix = (yield this.isVersionSupported("r0.6.0")) ? _httpApi.PREFIX_R0 : _httpApi.PREFIX_UNSTABLE;
    return this._http.authedRequest(undefined, "POST", path, null, data, {
      prefix
    });
  });

  return function (_x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * @param {string} medium The threepid medium (eg. 'email')
 * @param {string} address The threepid address (eg. 'bob@example.com')
 *        this must be as returned by getThreePids.
 * @return {Promise} Resolves: The server response on success
 *     (generally the empty JSON object)
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.deleteThreePid = function (medium, address) {
  const path = "/account/3pid/delete";
  const data = {
    'medium': medium,
    'address': address
  };
  return this._http.authedRequest(undefined, "POST", path, null, data);
};
/**
 * Make a request to change your password.
 * @param {Object} authDict
 * @param {string} newPassword The new desired password.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setPassword = function (authDict, newPassword, callback) {
  const path = "/account/password";
  const data = {
    'auth': authDict,
    'new_password': newPassword
  };
  return this._http.authedRequest(callback, "POST", path, null, data);
}; // Device operations
// =================

/**
 * Gets all devices recorded for the logged-in user
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getDevices = function () {
  return this._http.authedRequest(undefined, 'GET', "/devices", undefined, undefined);
};
/**
 * Gets specific device details for the logged-in user
 * @param {string} device_id  device to query
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getDevice = function (device_id) {
  const path = utils.encodeUri("/devices/$device_id", {
    $device_id: device_id
  });
  return this._http.authedRequest(undefined, 'GET', path, undefined, undefined);
};
/**
 * Update the given device
 *
 * @param {string} device_id  device to update
 * @param {Object} body       body of request
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setDeviceDetails = function (device_id, body) {
  const path = utils.encodeUri("/devices/$device_id", {
    $device_id: device_id
  });
  return this._http.authedRequest(undefined, "PUT", path, undefined, body);
};
/**
 * Delete the given device
 *
 * @param {string} device_id  device to delete
 * @param {object} auth Optional. Auth data to supply for User-Interactive auth.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.deleteDevice = function (device_id, auth) {
  const path = utils.encodeUri("/devices/$device_id", {
    $device_id: device_id
  });
  const body = {};

  if (auth) {
    body.auth = auth;
  }

  return this._http.authedRequest(undefined, "DELETE", path, undefined, body);
};
/**
 * Delete multiple device
 *
 * @param {string[]} devices IDs of the devices to delete
 * @param {object} auth Optional. Auth data to supply for User-Interactive auth.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.deleteMultipleDevices = function (devices, auth) {
  const body = {
    devices
  };

  if (auth) {
    body.auth = auth;
  }

  const path = "/delete_devices";
  return this._http.authedRequest(undefined, "POST", path, undefined, body);
}; // Push operations
// ===============

/**
 * Gets all pushers registered for the logged-in user
 *
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Array of objects representing pushers
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getPushers = function (callback) {
  const path = "/pushers";
  return this._http.authedRequest(callback, "GET", path, undefined, undefined);
};
/**
 * Adds a new pusher or updates an existing pusher
 *
 * @param {Object} pusher Object representing a pusher
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: Empty json object on success
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setPusher = function (pusher, callback) {
  const path = "/pushers/set";
  return this._http.authedRequest(callback, "POST", path, null, pusher);
};
/**
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getPushRules = function (callback) {
  return this._http.authedRequest(callback, "GET", "/pushrules/").then(rules => {
    return _pushprocessor.PushProcessor.rewriteDefaultRules(rules);
  });
};
/**
 * @param {string} scope
 * @param {string} kind
 * @param {string} ruleId
 * @param {Object} body
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.addPushRule = function (scope, kind, ruleId, body, callback) {
  // NB. Scope not uri encoded because devices need the '/'
  const path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId", {
    $kind: kind,
    $ruleId: ruleId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, body);
};
/**
 * @param {string} scope
 * @param {string} kind
 * @param {string} ruleId
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.deletePushRule = function (scope, kind, ruleId, callback) {
  // NB. Scope not uri encoded because devices need the '/'
  const path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId", {
    $kind: kind,
    $ruleId: ruleId
  });
  return this._http.authedRequest(callback, "DELETE", path);
};
/**
 * Enable or disable a push notification rule.
 * @param {string} scope
 * @param {string} kind
 * @param {string} ruleId
 * @param {boolean} enabled
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setPushRuleEnabled = function (scope, kind, ruleId, enabled, callback) {
  const path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId/enabled", {
    $kind: kind,
    $ruleId: ruleId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, {
    "enabled": enabled
  });
};
/**
 * Set the actions for a push notification rule.
 * @param {string} scope
 * @param {string} kind
 * @param {string} ruleId
 * @param {array} actions
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: result object
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.setPushRuleActions = function (scope, kind, ruleId, actions, callback) {
  const path = utils.encodeUri("/pushrules/" + scope + "/$kind/$ruleId/actions", {
    $kind: kind,
    $ruleId: ruleId
  });
  return this._http.authedRequest(callback, "PUT", path, undefined, {
    "actions": actions
  });
}; // Search
// ======

/**
 * Perform a server-side search.
 * @param {Object} opts
 * @param {string} opts.next_batch the batch token to pass in the query string
 * @param {Object} opts.body the JSON object to pass to the request body.
 * @param {module:client.callback} callback Optional.
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.search = function (opts, callback) {
  const queryparams = {};

  if (opts.next_batch) {
    queryparams.next_batch = opts.next_batch;
  }

  return this._http.authedRequest(callback, "POST", "/search", queryparams, opts.body);
}; // Crypto
// ======

/**
 * Upload keys
 *
 * @param {Object} content  body of upload request
 *
 * @param {Object=} opts this method no longer takes any opts,
 *  used to take opts.device_id but this was not removed from the spec as a redundant parameter
 *
 * @param {module:client.callback=} callback
 *
 * @return {Promise} Resolves: result object. Rejects: with
 *     an error response ({@link module:http-api.MatrixError}).
 */


MatrixBaseApis.prototype.uploadKeysRequest = function (content, opts, callback) {
  return this._http.authedRequest(callback, "POST", "/keys/upload", undefined, content);
};

MatrixBaseApis.prototype.uploadKeySignatures = function (content) {
  return this._http.authedRequest(undefined, "POST", '/keys/signatures/upload', undefined, content, {
    prefix: _httpApi.PREFIX_UNSTABLE
  });
};
/**
 * Download device keys
 *
 * @param {string[]} userIds  list of users to get keys for
 *
 * @param {Object=} opts
 *
 * @param {string=} opts.token   sync token to pass in the query request, to help
 *   the HS give the most recent results
 *
 * @return {Promise} Resolves: result object. Rejects: with
 *     an error response ({@link module:http-api.MatrixError}).
 */


MatrixBaseApis.prototype.downloadKeysForUsers = function (userIds, opts) {
  if (utils.isFunction(opts)) {
    // opts used to be 'callback'.
    throw new Error('downloadKeysForUsers no longer accepts a callback parameter');
  }

  opts = opts || {};
  const content = {
    device_keys: {}
  };

  if ('token' in opts) {
    content.token = opts.token;
  }

  userIds.forEach(u => {
    content.device_keys[u] = [];
  });
  return this._http.authedRequest(undefined, "POST", "/keys/query", undefined, content);
};
/**
 * Claim one-time keys
 *
 * @param {string[]} devices  a list of [userId, deviceId] pairs
 *
 * @param {string} [key_algorithm = signed_curve25519]  desired key type
 *
 * @param {number} [timeout] the time (in milliseconds) to wait for keys from remote
 *     servers
 *
 * @return {Promise} Resolves: result object. Rejects: with
 *     an error response ({@link module:http-api.MatrixError}).
 */


MatrixBaseApis.prototype.claimOneTimeKeys = function (devices, key_algorithm, timeout) {
  const queries = {};

  if (key_algorithm === undefined) {
    key_algorithm = "signed_curve25519";
  }

  for (let i = 0; i < devices.length; ++i) {
    const userId = devices[i][0];
    const deviceId = devices[i][1];
    const query = queries[userId] || {};
    queries[userId] = query;
    query[deviceId] = key_algorithm;
  }

  const content = {
    one_time_keys: queries
  };

  if (timeout) {
    content.timeout = timeout;
  }

  const path = "/keys/claim";
  return this._http.authedRequest(undefined, "POST", path, undefined, content);
};
/**
 * Ask the server for a list of users who have changed their device lists
 * between a pair of sync tokens
 *
 * @param {string} oldToken
 * @param {string} newToken
 *
 * @return {Promise} Resolves: result object. Rejects: with
 *     an error response ({@link module:http-api.MatrixError}).
 */


MatrixBaseApis.prototype.getKeyChanges = function (oldToken, newToken) {
  const qps = {
    from: oldToken,
    to: newToken
  };
  const path = "/keys/changes";
  return this._http.authedRequest(undefined, "GET", path, qps, undefined);
};

MatrixBaseApis.prototype.uploadDeviceSigningKeys = function (auth, keys) {
  const data = Object.assign({}, keys);
  if (auth) Object.assign(data, {
    auth
  });
  return this._http.authedRequest(undefined, "POST", "/keys/device_signing/upload", undefined, data, {
    prefix: _httpApi.PREFIX_UNSTABLE
  });
}; // Identity Server Operations
// ==========================

/**
 * Register with an Identity Server using the OpenID token from the user's
 * Homeserver, which can be retrieved via
 * {@link module:client~MatrixClient#getOpenIdToken}.
 *
 * Note that the `/account/register` endpoint (as well as IS authentication in
 * general) was added as part of the v2 API version.
 *
 * @param {object} hsOpenIdToken
 * @return {Promise} Resolves: with object containing an Identity
 * Server access token.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.registerWithIdentityServer = function (hsOpenIdToken) {
  if (!this.idBaseUrl) {
    throw new Error("No Identity Server base URL set");
  }

  const uri = this.idBaseUrl + _httpApi.PREFIX_IDENTITY_V2 + "/account/register";
  return this._http.requestOtherUrl(undefined, "POST", uri, null, hsOpenIdToken);
};
/**
 * Requests an email verification token directly from an identity server.
 *
 * This API is used as part of binding an email for discovery on an identity
 * server. The validation data that results should be passed to the
 * `bindThreePid` method to complete the binding process.
 *
 * @param {string} email The email address to request a token for
 * @param {string} clientSecret A secret binary string generated by the client.
 *                 It is recommended this be around 16 ASCII characters.
 * @param {number} sendAttempt If an identity server sees a duplicate request
 *                 with the same sendAttempt, it will not send another email.
 *                 To request another email to be sent, use a larger value for
 *                 the sendAttempt param as was used in the previous request.
 * @param {string} nextLink Optional If specified, the client will be redirected
 *                 to this link after validation.
 * @param {module:client.callback} callback Optional.
 * @param {string} identityAccessToken The `access_token` field of the identity
 * server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 * @throws Error if no identity server is set
 */


MatrixBaseApis.prototype.requestEmailToken = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* (email, clientSecret, sendAttempt, nextLink, callback, identityAccessToken) {
    const params = {
      client_secret: clientSecret,
      email: email,
      send_attempt: sendAttempt,
      next_link: nextLink
    };
    return yield this._http.idServerRequest(callback, "POST", "/validate/email/requestToken", params, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
  });

  return function (_x12, _x13, _x14, _x15, _x16, _x17) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Requests a MSISDN verification token directly from an identity server.
 *
 * This API is used as part of binding a MSISDN for discovery on an identity
 * server. The validation data that results should be passed to the
 * `bindThreePid` method to complete the binding process.
 *
 * @param {string} phoneCountry The ISO 3166-1 alpha-2 code for the country in
 *                 which phoneNumber should be parsed relative to.
 * @param {string} phoneNumber The phone number, in national or international
 *                 format
 * @param {string} clientSecret A secret binary string generated by the client.
 *                 It is recommended this be around 16 ASCII characters.
 * @param {number} sendAttempt If an identity server sees a duplicate request
 *                 with the same sendAttempt, it will not send another SMS.
 *                 To request another SMS to be sent, use a larger value for
 *                 the sendAttempt param as was used in the previous request.
 * @param {string} nextLink Optional If specified, the client will be redirected
 *                 to this link after validation.
 * @param {module:client.callback} callback Optional.
 * @param {string} identityAccessToken The `access_token` field of the Identity
 * Server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: TODO
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 * @throws Error if no identity server is set
 */


MatrixBaseApis.prototype.requestMsisdnToken = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator(function* (phoneCountry, phoneNumber, clientSecret, sendAttempt, nextLink, callback, identityAccessToken) {
    const params = {
      client_secret: clientSecret,
      country: phoneCountry,
      phone_number: phoneNumber,
      send_attempt: sendAttempt,
      next_link: nextLink
    };
    return yield this._http.idServerRequest(callback, "POST", "/validate/msisdn/requestToken", params, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
  });

  return function (_x18, _x19, _x20, _x21, _x22, _x23, _x24) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Submits a MSISDN token to the identity server
 *
 * This is used when submitting the code sent by SMS to a phone number.
 * The ID server has an equivalent API for email but the js-sdk does
 * not expose this, since email is normally validated by the user clicking
 * a link rather than entering a code.
 *
 * @param {string} sid The sid given in the response to requestToken
 * @param {string} clientSecret A secret binary string generated by the client.
 *                 This must be the same value submitted in the requestToken call.
 * @param {string} msisdnToken The MSISDN token, as enetered by the user.
 * @param {string} identityAccessToken The `access_token` field of the Identity
 * Server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: Object, currently with no parameters.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 * @throws Error if No ID server is set
 */


MatrixBaseApis.prototype.submitMsisdnToken = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator(function* (sid, clientSecret, msisdnToken, identityAccessToken) {
    const params = {
      sid: sid,
      client_secret: clientSecret,
      token: msisdnToken
    };
    return yield this._http.idServerRequest(undefined, "POST", "/validate/msisdn/submitToken", params, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
  });

  return function (_x25, _x26, _x27, _x28) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Submits a MSISDN token to an arbitrary URL.
 *
 * This is used when submitting the code sent by SMS to a phone number in the
 * newer 3PID flow where the homeserver validates 3PID ownership (as part of
 * `requestAdd3pidMsisdnToken`). The homeserver response may include a
 * `submit_url` to specify where the token should be sent, and this helper can
 * be used to pass the token to this URL.
 *
 * @param {string} url The URL to submit the token to
 * @param {string} sid The sid given in the response to requestToken
 * @param {string} clientSecret A secret binary string generated by the client.
 *                 This must be the same value submitted in the requestToken call.
 * @param {string} msisdnToken The MSISDN token, as enetered by the user.
 *
 * @return {Promise} Resolves: Object, currently with no parameters.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.submitMsisdnTokenOtherUrl = function (url, sid, clientSecret, msisdnToken) {
  const params = {
    sid: sid,
    client_secret: clientSecret,
    token: msisdnToken
  };
  return this._http.requestOtherUrl(undefined, "POST", url, undefined, params);
};
/**
 * Gets the V2 hashing information from the identity server. Primarily useful for
 * lookups.
 * @param {string} identityAccessToken The access token for the identity server.
 * @returns {Promise<object>} The hashing information for the identity server.
 */


MatrixBaseApis.prototype.getIdentityHashDetails = function (identityAccessToken) {
  return this._http.idServerRequest(undefined, "GET", "/hash_details", null, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
};
/**
 * Performs a hashed lookup of addresses against the identity server. This is
 * only supported on identity servers which have at least the version 2 API.
 * @param {Array<Array<string,string>>} addressPairs An array of 2 element arrays.
 * The first element of each pair is the address, the second is the 3PID medium.
 * Eg: ["email@example.org", "email"]
 * @param {string} identityAccessToken The access token for the identity server.
 * @returns {Promise<Array<{address, mxid}>>} A collection of address mappings to
 * found MXIDs. Results where no user could be found will not be listed.
 */


MatrixBaseApis.prototype.identityHashedLookup = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator(function* (addressPairs, // [["email@example.org", "email"], ["10005550000", "msisdn"]]
  identityAccessToken) {
    const params = {// addresses: ["email@example.org", "10005550000"],
      // algorithm: "sha256",
      // pepper: "abc123"
    }; // Get hash information first before trying to do a lookup

    const hashes = yield this.getIdentityHashDetails(identityAccessToken);

    if (!hashes || !hashes['lookup_pepper'] || !hashes['algorithms']) {
      throw new Error("Unsupported identity server: bad response");
    }

    params['pepper'] = hashes['lookup_pepper'];
    const localMapping = {// hashed identifier => plain text address
      // For use in this function's return format
    }; // When picking an algorithm, we pick the hashed over no hashes

    if (hashes['algorithms'].includes('sha256')) {
      // Abuse the olm hashing
      const olmutil = new global.Olm.Utility();
      params["addresses"] = addressPairs.map(p => {
        const addr = p[0].toLowerCase(); // lowercase to get consistent hashes

        const med = p[1].toLowerCase();
        const hashed = olmutil.sha256(`${addr} ${med} ${params['pepper']}`).replace(/\+/g, '-').replace(/\//g, '_'); // URL-safe base64
        // Map the hash to a known (case-sensitive) address. We use the case
        // sensitive version because the caller might be expecting that.

        localMapping[hashed] = p[0];
        return hashed;
      });
      params["algorithm"] = "sha256";
    } else if (hashes['algorithms'].includes('none')) {
      params["addresses"] = addressPairs.map(p => {
        const addr = p[0].toLowerCase(); // lowercase to get consistent hashes

        const med = p[1].toLowerCase();
        const unhashed = `${addr} ${med}`; // Map the unhashed values to a known (case-sensitive) address. We use
        // the case sensitive version because the caller might be expecting that.

        localMapping[unhashed] = p[0];
        return unhashed;
      });
      params["algorithm"] = "none";
    } else {
      throw new Error("Unsupported identity server: unknown hash algorithm");
    }

    const response = yield this._http.idServerRequest(undefined, "POST", "/lookup", params, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
    if (!response || !response['mappings']) return []; // no results

    const foundAddresses = [
      /* {address: "plain@example.org", mxid} */
    ];

    for (const hashed of Object.keys(response['mappings'])) {
      const mxid = response['mappings'][hashed];
      const plainAddress = localMapping[hashed];

      if (!plainAddress) {
        throw new Error("Identity server returned more results than expected");
      }

      foundAddresses.push({
        address: plainAddress,
        mxid
      });
    }

    return foundAddresses;
  });

  return function (_x29, _x30) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Looks up the public Matrix ID mapping for a given 3rd party
 * identifier from the Identity Server
 *
 * @param {string} medium The medium of the threepid, eg. 'email'
 * @param {string} address The textual address of the threepid
 * @param {module:client.callback} callback Optional.
 * @param {string} identityAccessToken The `access_token` field of the Identity
 * Server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: A threepid mapping
 *                                 object or the empty object if no mapping
 *                                 exists
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.lookupThreePid = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator(function* (medium, address, callback, identityAccessToken) {
    // Note: we're using the V2 API by calling this function, but our
    // function contract requires a V1 response. We therefore have to
    // convert it manually.
    const response = yield this.identityHashedLookup([[address, medium]], identityAccessToken);
    const result = response.find(p => p.address === address);

    if (!result) {
      if (callback) callback(null, {});
      return {};
    }

    const mapping = {
      address,
      medium,
      mxid: result.mxid // We can't reasonably fill these parameters:
      // not_before
      // not_after
      // ts
      // signatures

    };
    if (callback) callback(null, mapping);
    return mapping;
  });

  return function (_x31, _x32, _x33, _x34) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Looks up the public Matrix ID mappings for multiple 3PIDs.
 *
 * @param {Array.<Array.<string>>} query Array of arrays containing
 * [medium, address]
 * @param {string} identityAccessToken The `access_token` field of the Identity
 * Server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: Lookup results from IS.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.bulkLookupThreePids = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator(function* (query, identityAccessToken) {
    // Note: we're using the V2 API by calling this function, but our
    // function contract requires a V1 response. We therefore have to
    // convert it manually.
    const response = yield this.identityHashedLookup( // We have to reverse the query order to get [address, medium] pairs
    query.map(p => [p[1], p[0]]), identityAccessToken);
    const v1results = [];

    for (const mapping of response) {
      const originalQuery = query.find(p => p[1] === mapping.address);

      if (!originalQuery) {
        throw new Error("Identity sever returned unexpected results");
      }

      v1results.push([originalQuery[0], // medium
      mapping.address, mapping.mxid]);
    }

    return {
      threepids: v1results
    };
  });

  return function (_x35, _x36) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Get account info from the Identity Server. This is useful as a neutral check
 * to verify that other APIs are likely to approve access by testing that the
 * token is valid, terms have been agreed, etc.
 *
 * @param {string} identityAccessToken The `access_token` field of the Identity
 * Server `/account/register` response (see {@link registerWithIdentityServer}).
 *
 * @return {Promise} Resolves: an object with account info.
 * @return {module:http-api.MatrixError} Rejects: with an error response.
 */


MatrixBaseApis.prototype.getIdentityAccount = function (identityAccessToken) {
  return this._http.idServerRequest(undefined, "GET", "/account", undefined, _httpApi.PREFIX_IDENTITY_V2, identityAccessToken);
}; // Direct-to-device messaging
// ==========================

/**
 * Send an event to a specific list of devices
 *
 * @param {string} eventType  type of event to send
 * @param {Object.<string, Object<string, Object>>} contentMap
 *    content to send. Map from user_id to device_id to content object.
 * @param {string=} txnId     transaction id. One will be made up if not
 *    supplied.
 * @return {Promise} Resolves to the result object
 */


MatrixBaseApis.prototype.sendToDevice = function (eventType, contentMap, txnId) {
  const path = utils.encodeUri("/sendToDevice/$eventType/$txnId", {
    $eventType: eventType,
    $txnId: txnId ? txnId : this.makeTxnId()
  });
  const body = {
    messages: contentMap
  };
  const targets = Object.keys(contentMap).reduce((obj, key) => {
    obj[key] = Object.keys(contentMap[key]);
    return obj;
  }, {});

  _logger.logger.log(`PUT ${path}`, targets);

  return this._http.authedRequest(undefined, "PUT", path, undefined, body);
}; // Third party Lookup API
// ======================

/**
 * Get the third party protocols that can be reached using
 * this HS
 * @return {Promise} Resolves to the result object
 */


MatrixBaseApis.prototype.getThirdpartyProtocols = function () {
  return this._http.authedRequest(undefined, "GET", "/thirdparty/protocols", undefined, undefined).then(response => {
    // sanity check
    if (!response || typeof response !== 'object') {
      throw new Error(`/thirdparty/protocols did not return an object: ${response}`);
    }

    return response;
  });
};
/**
 * Get information on how a specific place on a third party protocol
 * may be reached.
 * @param {string} protocol The protocol given in getThirdpartyProtocols()
 * @param {object} params Protocol-specific parameters, as given in the
 *                        response to getThirdpartyProtocols()
 * @return {Promise} Resolves to the result object
 */


MatrixBaseApis.prototype.getThirdpartyLocation = function (protocol, params) {
  const path = utils.encodeUri("/thirdparty/location/$protocol", {
    $protocol: protocol
  });
  return this._http.authedRequest(undefined, "GET", path, params, undefined);
};
/**
 * Get information on how a specific user on a third party protocol
 * may be reached.
 * @param {string} protocol The protocol given in getThirdpartyProtocols()
 * @param {object} params Protocol-specific parameters, as given in the
 *                        response to getThirdpartyProtocols()
 * @return {Promise} Resolves to the result object
 */


MatrixBaseApis.prototype.getThirdpartyUser = function (protocol, params) {
  const path = utils.encodeUri("/thirdparty/user/$protocol", {
    $protocol: protocol
  });
  return this._http.authedRequest(undefined, "GET", path, params, undefined);
};

MatrixBaseApis.prototype.getTerms = function (serviceType, baseUrl) {
  const url = termsUrlForService(serviceType, baseUrl);
  return this._http.requestOtherUrl(undefined, 'GET', url);
};

MatrixBaseApis.prototype.agreeToTerms = function (serviceType, baseUrl, accessToken, termsUrls) {
  const url = termsUrlForService(serviceType, baseUrl);
  const headers = {
    Authorization: "Bearer " + accessToken
  };
  return this._http.requestOtherUrl(undefined, 'POST', url, null, {
    user_accepts: termsUrls
  }, {
    headers
  });
};
/**
 * Reports an event as inappropriate to the server, which may then notify the appropriate people.
 * @param {string} roomId The room in which the event being reported is located.
 * @param {string} eventId The event to report.
 * @param {number} score The score to rate this content as where -100 is most offensive and 0 is inoffensive.
 * @param {string} reason The reason the content is being reported. May be blank.
 * @returns {Promise} Resolves to an empty object if successful
 */


MatrixBaseApis.prototype.reportEvent = function (roomId, eventId, score, reason) {
  const path = utils.encodeUri("/rooms/$roomId/report/$eventId", {
    $roomId: roomId,
    $eventId: eventId
  });
  return this._http.authedRequest(undefined, "POST", path, null, {
    score,
    reason
  });
};
/**
 * Fetches or paginates a summary of a space as defined by MSC2946
 * @param {string} roomId The ID of the space-room to use as the root of the summary.
 * @param {number?} maxRoomsPerSpace The maximum number of rooms to return per subspace.
 * @param {boolean?} suggestedOnly Whether to only return rooms with suggested=true.
 * @param {boolean?} autoJoinOnly Whether to only return rooms with auto_join=true.
 * @param {number?} limit The maximum number of rooms to return in total.
 * @param {string?} batch The opaque token to paginate a previous summary request.
 * @returns {Promise} the response, with next_batch, rooms, events fields.
 */


MatrixBaseApis.prototype.getSpaceSummary = function (roomId, maxRoomsPerSpace, suggestedOnly, autoJoinOnly, limit, batch) {
  const path = utils.encodeUri("/rooms/$roomId/spaces", {
    $roomId: roomId
  });
  return this._http.authedRequest(undefined, "POST", path, null, {
    max_rooms_per_space: maxRoomsPerSpace,
    suggested_only: suggestedOnly,
    auto_join_only: autoJoinOnly,
    limit,
    batch
  }, {
    prefix: "/_matrix/client/unstable/org.matrix.msc2946"
  });
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "d15f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Group = Group;

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _events = __webpack_require__("faa1");
/*
Copyright 2017 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/group
 */

/**
 * Construct a new Group.
 *
 * @param {string} groupId The ID of this group.
 *
 * @prop {string} groupId The ID of this group.
 * @prop {string} name The human-readable display name for this group.
 * @prop {string} avatarUrl The mxc URL for this group's avatar.
 * @prop {string} myMembership The logged in user's membership of this group
 * @prop {Object} inviter Infomation about the user who invited the logged in user
 *       to the group, if myMembership is 'invite'.
 * @prop {string} inviter.userId The user ID of the inviter
 */


function Group(groupId) {
  this.groupId = groupId;
  this.name = null;
  this.avatarUrl = null;
  this.myMembership = null;
  this.inviter = null;
}

utils.inherits(Group, _events.EventEmitter);

Group.prototype.setProfile = function (name, avatarUrl) {
  if (this.name === name && this.avatarUrl === avatarUrl) return;
  this.name = name || this.groupId;
  this.avatarUrl = avatarUrl;
  this.emit("Group.profile", this);
};

Group.prototype.setMyMembership = function (membership) {
  if (this.myMembership === membership) return;
  this.myMembership = membership;
  this.emit("Group.myMembership", this);
};
/**
 * Sets the 'inviter' property. This does not emit an event (the inviter
 * will only change when the user is revited / reinvited to a room),
 * so set this before setting myMembership.
 * @param {Object} inviter Infomation about who invited us to the room
 */


Group.prototype.setInviter = function (inviter) {
  this.inviter = inviter;
};
/**
 * Fires whenever a group's profile information is updated.
 * This means the 'name' and 'avatarUrl' properties.
 * @event module:client~MatrixClient#"Group.profile"
 * @param {Group} group The group whose profile was updated.
 * @example
 * matrixClient.on("Group.profile", function(group){
 *   var name = group.name;
 * });
 */

/**
 * Fires whenever the logged in user's membership status of
 * the group is updated.
 * @event module:client~MatrixClient#"Group.myMembership"
 * @param {Group} group The group in which the user's membership changed
 * @example
 * matrixClient.on("Group.myMembership", function(group){
 *   var myMembership = group.myMembership;
 * });
 */

/***/ }),

/***/ "d164":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "d1e7":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "d233":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var formats = __webpack_require__("b313");

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var hexTable = (function () {
    var array = [];
    for (var i = 0; i < 256; ++i) {
        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
}());

var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
        var item = queue.pop();
        var obj = item.obj[item.prop];

        if (isArray(obj)) {
            var compacted = [];

            for (var j = 0; j < obj.length; ++j) {
                if (typeof obj[j] !== 'undefined') {
                    compacted.push(obj[j]);
                }
            }

            item.obj[item.prop] = compacted;
        }
    }
};

var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
        if (typeof source[i] !== 'undefined') {
            obj[i] = source[i];
        }
    }

    return obj;
};

var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */
    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (isArray(target)) {
            target.push(source);
        } else if (target && typeof target === 'object') {
            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {
                target[source] = true;
            }
        } else {
            return [target, source];
        }

        return target;
    }

    if (!target || typeof target !== 'object') {
        return [target].concat(source);
    }

    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
        mergeTarget = arrayToObject(target, options);
    }

    if (isArray(target) && isArray(source)) {
        source.forEach(function (item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
                    target[i] = merge(targetItem, item, options);
                } else {
                    target.push(item);
                }
            } else {
                target[i] = item;
            }
        });
        return target;
    }

    return Object.keys(source).reduce(function (acc, key) {
        var value = source[key];

        if (has.call(acc, key)) {
            acc[key] = merge(acc[key], value, options);
        } else {
            acc[key] = value;
        }
        return acc;
    }, mergeTarget);
};

var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function (acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};

var decode = function (str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, ' ');
    if (charset === 'iso-8859-1') {
        // unescape never throws, no try...catch needed:
        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};

var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
        return str;
    }

    var string = str;
    if (typeof str === 'symbol') {
        string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== 'string') {
        string = String(str);
    }

    if (charset === 'iso-8859-1') {
        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
        });
    }

    var out = '';
    for (var i = 0; i < string.length; ++i) {
        var c = string.charCodeAt(i);

        if (
            c === 0x2D // -
            || c === 0x2E // .
            || c === 0x5F // _
            || c === 0x7E // ~
            || (c >= 0x30 && c <= 0x39) // 0-9
            || (c >= 0x41 && c <= 0x5A) // a-z
            || (c >= 0x61 && c <= 0x7A) // A-Z
            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )
        ) {
            out += string.charAt(i);
            continue;
        }

        if (c < 0x80) {
            out = out + hexTable[c];
            continue;
        }

        if (c < 0x800) {
            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        if (c < 0xD800 || c >= 0xE000) {
            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
            continue;
        }

        i += 1;
        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
        /* eslint operator-linebreak: [2, "before"] */
        out += hexTable[0xF0 | (c >> 18)]
            + hexTable[0x80 | ((c >> 12) & 0x3F)]
            + hexTable[0x80 | ((c >> 6) & 0x3F)]
            + hexTable[0x80 | (c & 0x3F)];
    }

    return out;
};

var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
        var item = queue[i];
        var obj = item.obj[item.prop];

        var keys = Object.keys(obj);
        for (var j = 0; j < keys.length; ++j) {
            var key = keys[j];
            var val = obj[key];
            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
                queue.push({ obj: obj, prop: key });
                refs.push(val);
            }
        }
    }

    compactQueue(queue);

    return value;
};

var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== 'object') {
        return false;
    }

    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};

var combine = function combine(a, b) {
    return [].concat(a, b);
};

var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) {
            mapped.push(fn(val[i]));
        }
        return mapped;
    }
    return fn(val);
};

module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};


/***/ }),

/***/ "d270":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".chats-list .searchWrapperEA[data-v-57da332f]{margin-top:.5em}.removeRoom[data-v-57da332f]{width:62px;height:100%;background:rgb(var(--color-bad));border-radius:3px}.removeRoom i[data-v-57da332f]{color:#fff}.chatsearchingempty[data-v-57da332f]{padding:2em;text-align:center}.chatsearchingempty span[data-v-57da332f]{font-size:1.5em;font-weight:100}.generatekeys[data-v-57da332f],.inviteUserDiv[data-v-57da332f]{margin-top:.5em;margin-bottom:1em}.generatekeys .generatekeysButton[data-v-57da332f],.generatekeys .inviteButton[data-v-57da332f],.inviteUserDiv .generatekeysButton[data-v-57da332f],.inviteUserDiv .inviteButton[data-v-57da332f]{background-color:rgb(var(--color-bg-orange));color:#fff;width:100%;height:34px;font-size:.9em;border-radius:30px;position:relative;cursor:pointer}.generatekeys .generatekeysButton i[data-v-57da332f],.generatekeys .inviteButton i[data-v-57da332f],.inviteUserDiv .generatekeysButton i[data-v-57da332f],.inviteUserDiv .inviteButton i[data-v-57da332f]{position:absolute;right:0;top:0;line-height:34px;width:50px;text-align:center}[data-v-57da332f] .statusIcon{font-size:.8em}.desktopList .card-content[data-v-57da332f]{position:absolute;width:100%;left:0;right:0;height:60px}.bout .desktopList .card-content[data-v-57da332f]{height:70px;contain:strict}.selectedForShare[data-v-57da332f]{background:rgba(var(--color-shadow-base),.8)!important}.selectedForShare .paddingwrapper[data-v-57da332f]{position:absolute;left:50px;top:100px;bottom:100px;right:50px;overflow:hidden;border-radius:50%}.selectedForShare .paddingwrapper .chatwrapper[data-v-57da332f]{position:absolute;background:rgb(var(--background-total-theme));left:-50px;top:-100px;bottom:-100px;right:-50px}.selectedForShare[data-v-57da332f] .chatInputWrapper{display:none}.previewWrapper[data-v-57da332f]:last-child{border-bottom:0}.swipeout-list[data-v-57da332f]{display:flex;flex-direction:column}.startnewchat[data-v-57da332f],.unauthorized[data-v-57da332f]{padding:2em 0;text-align:center}.startnewchat .buttonWrapper[data-v-57da332f],.unauthorized .buttonWrapper[data-v-57da332f]{padding:1em}.startnewchat .captionWrapper[data-v-57da332f],.unauthorized .captionWrapper[data-v-57da332f]{padding:1em;text-align:center}.startnewchat .captionWrapper span[data-v-57da332f],.unauthorized .captionWrapper span[data-v-57da332f]{font-size:1.5em;font-weight:100}.card[data-v-57da332f]{width:100%;border-radius:3px}.inviteUserDivWrapper[data-v-57da332f]{transition:.3s}.chats-list.minimized:not(.active) .inviteUserDivWrapper[data-v-57da332f],.chats-list.minimized:not(.active) .startnewchat[data-v-57da332f],.chats-list.minimized:not(.active) .unauthorized[data-v-57da332f],.unauthorized.minimized[data-v-57da332f]:not(.active){display:none}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "d2bb":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__("e330");
var anObject = __webpack_require__("825a");
var aPossiblePrototype = __webpack_require__("3bbe");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "d2d9":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".fade-enter-active[data-v-108c57b8],.fade-leave-active[data-v-108c57b8]{transition-duration:.3s;transition-property:opacity;transition-timing-function:ease}.fade-enter[data-v-108c57b8],.fade-leave-active[data-v-108c57b8]{opacity:0}@-webkit-keyframes fadeInDown-data-v-108c57b8{0%{transform:translate3d(0,-40px,0)}to{transform:translateZ(0);opacity:1}}@keyframes fadeInDown-data-v-108c57b8{0%{transform:translate3d(0,-40px,0)}to{transform:translateZ(0);opacity:1}}.fade-in-down-leave-to[data-v-108c57b8]{opacity:0;transition:opacity .3s}.fade-in-down-enter[data-v-108c57b8]{opacity:0;transform:translate3d(0,-40px,0)}.fade-in-down-enter-to[data-v-108c57b8]{opacity:0;-webkit-animation-duration:.7s;animation-duration:.7s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:fadeInDown-data-v-108c57b8;animation-name:fadeInDown-data-v-108c57b8}@-webkit-keyframes fadeInRight-data-v-108c57b8{0%{transform:translate3d(40px,0,0)}to{transform:translateZ(0);opacity:1}}@keyframes fadeInRight-data-v-108c57b8{0%{transform:translate3d(40px,0,0)}to{transform:translateZ(0);opacity:1}}.fade-in-right-leave-to[data-v-108c57b8]{opacity:0;transition:opacity .1s}.fade-in-right-enter[data-v-108c57b8]{opacity:0;transform:translate3d(40px,0,0)}.fade-in-right-enter-to[data-v-108c57b8]{opacity:0;-webkit-animation-duration:.2s;animation-duration:.2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:fadeInRight-data-v-108c57b8;animation-name:fadeInRight-data-v-108c57b8}@-webkit-keyframes fadeInUp-data-v-108c57b8{0%{transform:translate3d(0,40px,0)}to{transform:translateZ(0);opacity:1}}@keyframes fadeInUp-data-v-108c57b8{0%{transform:translate3d(0,40px,0)}to{transform:translateZ(0);opacity:1}}.fade-in-up-leave-to[data-v-108c57b8]{opacity:0;transition:opacity .3s}.fade-in-up-enter[data-v-108c57b8]{opacity:0;transform:translate3d(0,40px,0)}.fade-in-up-enter-to[data-v-108c57b8]{opacity:0;-webkit-animation-duration:.7s;animation-duration:.7s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:fadeInUp-data-v-108c57b8;animation-name:fadeInUp-data-v-108c57b8}@-webkit-keyframes fadeInLeft-data-v-108c57b8{0%{transform:translate3d(-40px,0,0)}to{transform:translateZ(0);opacity:1}}@keyframes fadeInLeft-data-v-108c57b8{0%{transform:translate3d(-40px,0,0)}to{transform:translateZ(0);opacity:1}}.fade-in-left-leave-to[data-v-108c57b8]{opacity:0;transition:opacity .3s}.fade-in-left-enter[data-v-108c57b8]{opacity:0;transform:translate3d(-40px,0,0)}.fade-in-left-enter-to[data-v-108c57b8]{opacity:0;-webkit-animation-duration:.7s;animation-duration:.7s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:fadeInLeft-data-v-108c57b8;animation-name:fadeInLeft-data-v-108c57b8}.zoom-enter-active[data-v-108c57b8],.zoom-leave-active[data-v-108c57b8]{transition-duration:.3s;transition-property:all;transition-timing-function:ease}.zoom-enter[data-v-108c57b8],.zoom-leave-to[data-v-108c57b8]{opacity:0;transform:scale(0)}.flip-x-enter-active[data-v-108c57b8],.flip-x-leave-active[data-v-108c57b8]{transition-duration:.3s;transition-property:all;transition-timing-function:ease}.flip-x-enter[data-v-108c57b8],.flip-x-leave-to[data-v-108c57b8]{transform:rotateX(-180deg);opacity:0}.flip-y-enter-active[data-v-108c57b8],.flip-y-leave-active[data-v-108c57b8]{transition-duration:.3s;transition-property:all;transition-timing-function:ease}.flip-y-enter[data-v-108c57b8],.flip-y-leave-to[data-v-108c57b8]{transform:rotateY(-180deg);opacity:0}.overlay-right[data-v-108c57b8]{position:fixed;top:0;left:0;height:100vh;width:0;background:var(--overlay-bg);transition-duration:var(--transition-duration)}.overlay-right-enter~.overlay-right[data-v-108c57b8],.overlay-right-leave-to~.overlay-right[data-v-108c57b8]{width:0}.overlay-right-enter-active~.overlay-right[data-v-108c57b8],.overlay-right-leave-active~.overlay-right[data-v-108c57b8]{width:100vw}.overlay-right-enter-active~.overlay-right[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-right-leave-active~.overlay-right[data-v-108c57b8]{transition-timing-function:ease-out}.overlay-right-enter-active[data-v-108c57b8],.overlay-right-leave-active[data-v-108c57b8],.overlay-top[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-top[data-v-108c57b8]{position:fixed;top:0;left:0;height:0;width:100vw;background:var(--overlay-bg)}.overlay-down-enter~.overlay-top[data-v-108c57b8],.overlay-down-leave-to~.overlay-top[data-v-108c57b8]{height:0}.overlay-down-enter-active~.overlay-top[data-v-108c57b8],.overlay-down-leave-active~.overlay-top[data-v-108c57b8]{height:100vh}.overlay-down-enter-active~.overlay-top[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-down-leave-active~.overlay-top[data-v-108c57b8]{transition-timing-function:ease-out}.overlay-bottom[data-v-108c57b8],.overlay-down-enter-active[data-v-108c57b8],.overlay-down-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-bottom[data-v-108c57b8]{position:fixed;bottom:0;left:0;height:0;width:100vw;background:var(--overlay-bg)}.overlay-up-enter~.overlay-bottom[data-v-108c57b8],.overlay-up-leave-to~.overlay-bottom[data-v-108c57b8]{height:0}.overlay-up-enter-active~.overlay-bottom[data-v-108c57b8],.overlay-up-leave-active~.overlay-bottom[data-v-108c57b8]{height:100vh}.overlay-up-enter-active~.overlay-bottom[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-up-leave-active~.overlay-bottom[data-v-108c57b8]{transition-timing-function:ease-out}.overlay-up-enter-active[data-v-108c57b8],.overlay-up-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-left[data-v-108c57b8]{position:fixed;top:0;right:0;height:100vh;width:0;background:var(--overlay-bg);transition-duration:.35s}.overlay-left-enter~.overlay-left[data-v-108c57b8],.overlay-left-leave-to~.overlay-left[data-v-108c57b8]{width:0}.overlay-left-enter-active~.overlay-left[data-v-108c57b8],.overlay-left-leave-active~.overlay-left[data-v-108c57b8]{width:100vw}.overlay-left-enter-active~.overlay-left[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-left-leave-active~.overlay-left[data-v-108c57b8]{transition-timing-function:ease-out}.overlay-left-enter-active[data-v-108c57b8],.overlay-left-leave-active[data-v-108c57b8]{transition-duration:.35s}.overlay-up-full-enter-active~.overlay-bottom[data-v-108c57b8],.overlay-up-full-enter~.overlay-bottom[data-v-108c57b8],.overlay-up-full-leave-active~.overlay-bottom[data-v-108c57b8]{height:100vh}.overlay-up-full-enter-active~.overlay-bottom[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-up-full-enter-active~.overlay-bottom[data-v-108c57b8],.overlay-up-full-enter-to~.overlay-bottom[data-v-108c57b8]{display:none}.overlay-up-full-enter-to~.overlay-top[data-v-108c57b8]{height:0}.overlay-up-full-leave-active~.overlay-top[data-v-108c57b8]{transition-timing-function:ease}.overlay-up-full-enter-active~.overlay-top[data-v-108c57b8],.overlay-up-full-enter-to~.overlay-top[data-v-108c57b8],.overlay-up-full-enter~.overlay-top[data-v-108c57b8]{transition-duration:unset!important;height:100vh}.overlay-up-full-enter-active[data-v-108c57b8],.overlay-up-full-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-right-full-enter-active~.overlay-left[data-v-108c57b8],.overlay-right-full-enter~.overlay-left[data-v-108c57b8],.overlay-right-full-leave-active~.overlay-left[data-v-108c57b8]{width:100vw}.overlay-right-full-enter-active~.overlay-left[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-right-full-enter-active~.overlay-left[data-v-108c57b8],.overlay-right-full-enter-to~.overlay-left[data-v-108c57b8]{display:none}.overlay-right-full-enter-to~.overlay-right[data-v-108c57b8]{width:0}.overlay-right-full-leave-active~.overlay-right[data-v-108c57b8]{transition-timing-function:ease}.overlay-right-full-enter-active~.overlay-right[data-v-108c57b8],.overlay-right-full-enter-to~.overlay-right[data-v-108c57b8],.overlay-right-full-enter~.overlay-right[data-v-108c57b8]{transition-duration:unset!important;width:100vw}.overlay-right-full-enter-active[data-v-108c57b8],.overlay-right-full-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-down-full-enter~.overlay-top[data-v-108c57b8]{height:100vh}.overlay-down-full-enter-to~.overlay-bottom[data-v-108c57b8]{height:0}.overlay-down-full-enter-active~.overlay-top[data-v-108c57b8],.overlay-down-full-leave-active~.overlay-top[data-v-108c57b8]{height:100vh}.overlay-down-full-enter-active~.overlay-top[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-down-full-leave-active~.overlay-bottom[data-v-108c57b8]{transition-timing-function:ease}.overlay-down-full-enter-active[data-v-108c57b8],.overlay-down-full-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-down-full-enter-active~.overlay-top[data-v-108c57b8],.overlay-down-full-enter-to~.overlay-top[data-v-108c57b8]{display:none}.overlay-down-full-enter-active~.overlay-bottom[data-v-108c57b8],.overlay-down-full-enter-to~.overlay-bottom[data-v-108c57b8],.overlay-down-full-enter~.overlay-bottom[data-v-108c57b8]{transition-duration:unset!important;height:100vh}.overlay-left-full-enter-active~.overlay-right[data-v-108c57b8],.overlay-left-full-enter~.overlay-right[data-v-108c57b8],.overlay-left-full-leave-active~.overlay-right[data-v-108c57b8]{width:100vw}.overlay-left-full-enter-active~.overlay-right[data-v-108c57b8]{transition-timing-function:ease-in}.overlay-left-full-enter-active~.overlay-right[data-v-108c57b8],.overlay-left-full-enter-to~.overlay-right[data-v-108c57b8]{display:none}.overlay-left-full-enter-to~.overlay-left[data-v-108c57b8]{width:0}.overlay-left-full-leave-active~.overlay-left[data-v-108c57b8]{transition-timing-function:ease}.overlay-left-full-enter-active~.overlay-left[data-v-108c57b8],.overlay-left-full-enter-to~.overlay-left[data-v-108c57b8],.overlay-left-full-enter~.overlay-left[data-v-108c57b8]{transition-duration:unset!important;width:100vw}.overlay-left-full-enter-active[data-v-108c57b8],.overlay-left-full-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-up-down-enter~.overlay-bottom[data-v-108c57b8],.overlay-up-down-enter~.overlay-top[data-v-108c57b8]{height:0}.overlay-up-down-leave-active~.overlay-bottom[data-v-108c57b8],.overlay-up-down-leave-to~.overlay-bottom[data-v-108c57b8],.overlay-up-down-leave-to~.overlay-top[data-v-108c57b8]{height:51vh}.overlay-up-down-enter-active~.overlay-bottom[data-v-108c57b8],.overlay-up-down-enter-active~.overlay-top[data-v-108c57b8],.overlay-up-down-leave-active~.overlay-bottom[data-v-108c57b8],.overlay-up-down-leave-active~.overlay-top[data-v-108c57b8]{transition-timing-function:ease}.overlay-up-down-enter-active[data-v-108c57b8],.overlay-up-down-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}.overlay-left-right-enter~.overlay-left[data-v-108c57b8],.overlay-left-right-enter~.overlay-right[data-v-108c57b8]{width:0}.overlay-left-right-leave-active~.overlay-left[data-v-108c57b8],.overlay-left-right-leave-to~.overlay-left[data-v-108c57b8],.overlay-left-right-leave-to~.overlay-right[data-v-108c57b8]{width:51vw}.overlay-left-right-enter-active~.overlay-left[data-v-108c57b8],.overlay-left-right-enter-active~.overlay-right[data-v-108c57b8],.overlay-left-right-leave-active~.overlay-left[data-v-108c57b8],.overlay-left-right-leave-active~.overlay-right[data-v-108c57b8]{transition-timing-function:ease}.overlay-left-right-enter-active[data-v-108c57b8],.overlay-left-right-leave-active[data-v-108c57b8]{transition-duration:var(--transition-duration)}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "d35c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__("8b5c");
var utils = __webpack_require__("a593");
var InterceptorManager = __webpack_require__("aa4a");
var dispatchRequest = __webpack_require__("0176");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "d3b8":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("abf7");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("40e4817a", content, shadowRoot)
};

/***/ }),

/***/ "d3ff":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contact/index.vue?vue&type=template&id=7650772c&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:{'bin' : _vm.pocketnet, 'bout' : !_vm.pocketnet, minimized: _vm.minimized, fix : _vm.pocketnet, active: _vm.active, 'isBlocked': _vm.blocked},attrs:{"id":"contact"}},[_c('div',{staticClass:"viewWrapper"},[_c('div',{staticClass:"uviewwr"},[_c('userView',{attrs:{"userinfo":_vm.contact,"blocked":_vm.blocked}})],1)]),(_vm.contact.id !== _vm.activeuser.id)?_c('div',{staticClass:"actionsWrapper"},[_c('contactActions',{attrs:{"contact":_vm.contact,"blocked":_vm.blocked}})],1):_c('div',{staticClass:"actionsWrapper"},[_c('div',{staticClass:"youw"},[_vm._v(" It is you ")])])])}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contact/index.vue?vue&type=template&id=7650772c&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contact/view/index.vue?vue&type=template&id=756bd822&scoped=true&
var viewvue_type_template_id_756bd822_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"contactView"}},[_c('div',{staticClass:"imageWrapper"},[_c('userpic',{attrs:{"userinfo":_vm.contact}})],1),_c('div',{staticClass:"nameWrapper"},[_c('span',[_vm._v(_vm._s(_vm.contact.name))])])])}
var viewvue_type_template_id_756bd822_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contact/view/index.vue?vue&type=template&id=756bd822&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contact/view?vue&type=script&lang=js&

/* harmony default export */ var view_vue_type_script_lang_js_ = ({
  name: 'contactView',
  props: {
    contact: Object
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/contact/view?vue&type=script&lang=js&
 /* harmony default export */ var contact_view_vue_type_script_lang_js_ = (view_vue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/contact/view/index.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("d5de")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  contact_view_vue_type_script_lang_js_,
  viewvue_type_template_id_756bd822_scoped_true_render,
  viewvue_type_template_id_756bd822_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "756bd822",
  null
  ,true
)

/* harmony default export */ var view = (component.exports);
// EXTERNAL MODULE: ./src/components/user/view/pnuser/index.vue + 4 modules
var pnuser = __webpack_require__("42cd");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contact/actions/index.vue?vue&type=template&id=6fd14ec6&scoped=true&
var actionsvue_type_template_id_6fd14ec6_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"contactActions"}},[_c('div',{staticClass:"actions"},[(_vm.tetatetid)?_c('div',{staticClass:"actionWrapper"},[(!_vm.blocked)?_c('router-link',{attrs:{"to":'chat?id=' + _vm.tetatetid + '&u=' + _vm.contact.id}},[(_vm.readyChat.length !== 0)?_c('button',{staticClass:"button bright rounded small"},[_vm._v(_vm._s(_vm.$t("caption.moveToChat"))+" "),_c('i',{staticClass:"far fa-comment-alt"})]):_c('button',{staticClass:"button bright rounded small"},[_vm._v(_vm._s(_vm.$t("button.starChatButton"))),_c('i',{staticClass:"far fa-comment-alt"})])]):_vm._e()],1):_vm._e(),(_vm.blocked)?_c('button',{staticClass:"unBlockButton",on:{"click":function($event){return _vm.unblock()}}},[_vm._v(_vm._s(_vm.$t("button.unblock")))]):_c('button',{staticClass:"blockButton",on:{"click":function($event){return _vm.blockUser()}}},[_vm._v(_vm._s(_vm.$t("button.blockUser")))])])])}
var actionsvue_type_template_id_6fd14ec6_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contact/actions/index.vue?vue&type=template&id=6fd14ec6&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contact/actions?vue&type=script&lang=js&

/* harmony default export */ var actions_vue_type_script_lang_js_ = ({
  name: 'contactActions',
  props: {
    contact: Object,
    blocked: Boolean
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    tetatetid: function () {
      return this.core.mtrx.kit.tetatetid(this.contact, this.core.user.userinfo);
    },
    readyChat: function () {
      var chats = this.$store.state.chats;
      var chatID = this.tetatetid;
      return _.filter(chats, chat => chat.info.title.replace(/#/, '') === chatID);
    }
  }),
  methods: {
    chat: function () {
      this.core.mtrx.kit.tetatetid(this.contact, this.core.user.userinfo);
    },

    blockUser() {
      this.core.mtrx.blockUser(this.contact.id).catch(e => {
        console.error(e);
      });
    },

    unblock() {
      this.core.mtrx.unblockUser(this.contact.id).catch(e => {
        console.error(e);
      });
    }

  }
});
// CONCATENATED MODULE: ./src/components/contact/actions?vue&type=script&lang=js&
 /* harmony default export */ var contact_actions_vue_type_script_lang_js_ = (actions_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/contact/actions/index.vue



function actions_injectStyles (context) {
  
  var style0 = __webpack_require__("9205")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var actions_component = Object(componentNormalizer["a" /* default */])(
  contact_actions_vue_type_script_lang_js_,
  actionsvue_type_template_id_6fd14ec6_scoped_true_render,
  actionsvue_type_template_id_6fd14ec6_scoped_true_staticRenderFns,
  false,
  actions_injectStyles,
  "6fd14ec6",
  null
  ,true
)

/* harmony default export */ var actions = (actions_component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contact?vue&type=script&lang=js&




/* harmony default export */ var contact_vue_type_script_lang_js_ = ({
  name: 'contact',
  props: {
    contact: Object
  },
  components: {
    contactView: view,
    contactActions: actions,
    userView: pnuser["a" /* default */]
  },
  data: function () {
    return {
      loading: false
    };
  },
  created: () => {},
  watch: {//$route: 'getdata'
  },

  mounted() {
    this.$store.commit('active', true);
    this.$store.commit('blockactive', {
      value: true,
      item: 'contact'
    });
  },

  destroyed() {
    this.$store.commit('blockactive', {
      value: false,
      item: 'contact'
    });
  },

  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    activeuser: function () {
      return this.core.user.userinfo;
    },
    blocked: function () {
      if (this.$store.state.chats.length !== 0) {
        return this.core.mtrx.blockeduser(this.contact.id);
      }
    },
    pocketnet: state => state.pocketnet,
    minimized: state => state.minimized,
    active: state => state.active
  }),
  methods: {}
});
// CONCATENATED MODULE: ./src/components/contact?vue&type=script&lang=js&
 /* harmony default export */ var components_contact_vue_type_script_lang_js_ = (contact_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/contact/index.vue



function contact_injectStyles (context) {
  
  var style0 = __webpack_require__("81bf")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var contact_component = Object(componentNormalizer["a" /* default */])(
  components_contact_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  contact_injectStyles,
  "7650772c",
  null
  ,true
)

/* harmony default export */ var contact = __webpack_exports__["default"] = (contact_component.exports);

/***/ }),

/***/ "d485":
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = __webpack_require__("faa1").EventEmitter;
var inherits = __webpack_require__("3fb5");

inherits(Stream, EE);
Stream.Readable = __webpack_require__("0ac3");
Stream.Writable = __webpack_require__("af7e");
Stream.Duplex = __webpack_require__("7c16");
Stream.Transform = __webpack_require__("89fd");
Stream.PassThrough = __webpack_require__("51a2");

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};


/***/ }),

/***/ "d5de":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_756bd822_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("704f");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_756bd822_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_756bd822_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_756bd822_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_756bd822_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "d613":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoomType = exports.RoomCreateTypeField = exports.MsgType = exports.EventType = void 0;
/*
Copyright 2020 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

let EventType;
exports.EventType = EventType;

(function (EventType) {
  EventType["RoomCanonicalAlias"] = "m.room.canonical_alias";
  EventType["RoomCreate"] = "m.room.create";
  EventType["RoomJoinRules"] = "m.room.join_rules";
  EventType["RoomMember"] = "m.room.member";
  EventType["RoomThirdPartyInvite"] = "m.room.third_party_invite";
  EventType["RoomPowerLevels"] = "m.room.power_levels";
  EventType["RoomName"] = "m.room.name";
  EventType["RoomTopic"] = "m.room.topic";
  EventType["RoomAvatar"] = "m.room.avatar";
  EventType["RoomPinnedEvents"] = "m.room.pinned_events";
  EventType["RoomEncryption"] = "m.room.encryption";
  EventType["RoomHistoryVisibility"] = "m.room.history_visibility";
  EventType["RoomGuestAccess"] = "m.room.guest_access";
  EventType["RoomServerAcl"] = "m.room.server_acl";
  EventType["RoomTombstone"] = "m.room.tombstone";
  EventType["RoomAliases"] = "m.room.aliases";
  EventType["SpaceChild"] = "org.matrix.msc1772.space.child";
  EventType["SpaceParent"] = "org.matrix.msc1772.space.parent";
  EventType["RoomRedaction"] = "m.room.redaction";
  EventType["RoomMessage"] = "m.room.message";
  EventType["RoomMessageEncrypted"] = "m.room.encrypted";
  EventType["Sticker"] = "m.sticker";
  EventType["CallInvite"] = "m.call.invite";
  EventType["CallCandidates"] = "m.call.candidates";
  EventType["CallAnswer"] = "m.call.answer";
  EventType["CallHangup"] = "m.call.hangup";
  EventType["CallReject"] = "m.call.reject";
  EventType["CallSelectAnswer"] = "m.call.select_answer";
  EventType["CallNegotiate"] = "m.call.negotiate";
  EventType["CallReplaces"] = "m.call.replaces";
  EventType["KeyVerificationRequest"] = "m.key.verification.request";
  EventType["KeyVerificationStart"] = "m.key.verification.start";
  EventType["KeyVerificationCancel"] = "m.key.verification.cancel";
  EventType["KeyVerificationMac"] = "m.key.verification.mac";
  EventType["KeyVerificationDone"] = "m.key.verification.done";
  EventType["RoomMessageFeedback"] = "m.room.message.feedback";
  EventType["Typing"] = "m.typing";
  EventType["Receipt"] = "m.receipt";
  EventType["Presence"] = "m.presence";
  EventType["FullyRead"] = "m.fully_read";
  EventType["Tag"] = "m.tag";
  EventType["PushRules"] = "m.push_rules";
  EventType["Direct"] = "m.direct";
  EventType["IgnoredUserList"] = "m.ignored_user_list";
  EventType["RoomKey"] = "m.room_key";
  EventType["RoomKeyRequest"] = "m.room_key_request";
  EventType["ForwardedRoomKey"] = "m.forwarded_room_key";
  EventType["Dummy"] = "m.dummy";
})(EventType || (exports.EventType = EventType = {}));

let MsgType;
exports.MsgType = MsgType;

(function (MsgType) {
  MsgType["Text"] = "m.text";
  MsgType["Emote"] = "m.emote";
  MsgType["Notice"] = "m.notice";
  MsgType["Image"] = "m.image";
  MsgType["File"] = "m.file";
  MsgType["Audio"] = "m.audio";
  MsgType["Location"] = "m.location";
  MsgType["Video"] = "m.video";
})(MsgType || (exports.MsgType = MsgType = {}));

const RoomCreateTypeField = "org.matrix.msc1772.type"; // Spaces MSC1772

exports.RoomCreateTypeField = RoomCreateTypeField;
let RoomType;
exports.RoomType = RoomType;

(function (RoomType) {
  RoomType["Space"] = "org.matrix.msc1772.space";
})(RoomType || (exports.RoomType = RoomType = {}));

/***/ }),

/***/ "d6cc":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e33cd7cc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("0c96");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e33cd7cc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e33cd7cc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e33cd7cc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_e33cd7cc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "d6dd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__("966d");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = Object.create(__webpack_require__("3a7c"));
util.inherits = __webpack_require__("3fb5");
/*</replacement>*/

var Readable = __webpack_require__("6f2e");
var Writable = __webpack_require__("6ffa");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "d854":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "error", function() { return error; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "byError", function() { return byError; });
var errors = {
  500: 'networkerror',
  401: 'unauthorized',
  511: 'needcredentials',
  527: 'emptyresponse',
  600: "Wrong token",
  601: "Can not login",
  602: "Empty response"
};

function error(code, _error) {
  return {
    code,
    error: _error || errors[code] || "undefined",
    isError: true
  };
}

function byError(_error) {
  if (!_error) return null;

  var code = _.findKey(errors, text => {
    return text == _error;
  });

  if (code) {
    return error(code);
  }

  return _error;
}



/***/ }),

/***/ "d924":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("7ffb");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("2d7346b2", content, shadowRoot)
};

/***/ }),

/***/ "d925":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "d97d":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".new[data-v-9218004e]{color:rgb(var(--color-good))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "d9b5":
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__("d066");
var isCallable = __webpack_require__("1626");
var isPrototypeOf = __webpack_require__("3a9b");
var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "d9e2":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-unused-vars -- required for functions `.length` */
var $ = __webpack_require__("23e7");
var global = __webpack_require__("da84");
var apply = __webpack_require__("2ba4");
var wrapErrorConstructorWithCause = __webpack_require__("e5cb");

var WEB_ASSEMBLY = 'WebAssembly';
var WebAssembly = global[WEB_ASSEMBLY];

var FORCED = Error('e', { cause: 7 }).cause !== 7;

var exportGlobalErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  var O = {};
  O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED);
  $({ global: true, constructor: true, arity: 1, forced: FORCED }, O);
};

var exportWebAssemblyErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  if (WebAssembly && WebAssembly[ERROR_NAME]) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED);
    $({ target: WEB_ASSEMBLY, stat: true, constructor: true, arity: 1, forced: FORCED }, O);
  }
};

// https://github.com/tc39/proposal-error-cause
exportGlobalErrorCauseWrapper('Error', function (init) {
  return function Error(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('EvalError', function (init) {
  return function EvalError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('RangeError', function (init) {
  return function RangeError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
  return function ReferenceError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
  return function SyntaxError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('TypeError', function (init) {
  return function TypeError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('URIError', function (init) {
  return function URIError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
  return function CompileError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
  return function LinkError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
  return function RuntimeError(message) { return apply(init, this, arguments); };
});


/***/ }),

/***/ "da84":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "da9d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineWindow = TimelineWindow;
exports.TimelineIndex = TimelineIndex;

var _eventTimeline = __webpack_require__("e685");

var _logger = __webpack_require__("63c7");
/*
Copyright 2016 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** @module timeline-window */

/**
 * @private
 */


const DEBUG = false;
/**
 * @private
 */

const debuglog = DEBUG ? _logger.logger.log.bind(_logger.logger) : function () {};
/**
 * the number of times we ask the server for more events before giving up
 *
 * @private
 */

const DEFAULT_PAGINATE_LOOP_LIMIT = 5;
/**
 * Construct a TimelineWindow.
 *
 * <p>This abstracts the separate timelines in a Matrix {@link
 * module:models/room|Room} into a single iterable thing. It keeps track of
 * the start and endpoints of the window, which can be advanced with the help
 * of pagination requests.
 *
 * <p>Before the window is useful, it must be initialised by calling {@link
 * module:timeline-window~TimelineWindow#load|load}.
 *
 * <p>Note that the window will not automatically extend itself when new events
 * are received from /sync; you should arrange to call {@link
 * module:timeline-window~TimelineWindow#paginate|paginate} on {@link
 * module:client~MatrixClient.event:"Room.timeline"|Room.timeline} events.
 *
 * @param {MatrixClient} client   MatrixClient to be used for context/pagination
 *   requests.
 *
 * @param {EventTimelineSet} timelineSet  The timelineSet to track
 *
 * @param {Object} [opts] Configuration options for this window
 *
 * @param {number} [opts.windowLimit = 1000] maximum number of events to keep
 *    in the window. If more events are retrieved via pagination requests,
 *    excess events will be dropped from the other end of the window.
 *
 * @constructor
 */

function TimelineWindow(client, timelineSet, opts) {
  opts = opts || {};
  this._client = client;
  this._timelineSet = timelineSet; // these will be TimelineIndex objects; they delineate the 'start' and
  // 'end' of the window.
  //
  // _start.index is inclusive; _end.index is exclusive.

  this._start = null;
  this._end = null;
  this._eventCount = 0;
  this._windowLimit = opts.windowLimit || 1000;
}
/**
 * Initialise the window to point at a given event, or the live timeline
 *
 * @param {string} [initialEventId]   If given, the window will contain the
 *    given event
 * @param {number} [initialWindowSize = 20]   Size of the initial window
 *
 * @return {Promise}
 */


TimelineWindow.prototype.load = function (initialEventId, initialWindowSize) {
  const self = this;
  initialWindowSize = initialWindowSize || 20; // given an EventTimeline, find the event we were looking for, and initialise our
  // fields so that the event in question is in the middle of the window.

  const initFields = function (timeline) {
    let eventIndex;
    const events = timeline.getEvents();

    if (!initialEventId) {
      // we were looking for the live timeline: initialise to the end
      eventIndex = events.length;
    } else {
      for (let i = 0; i < events.length; i++) {
        if (events[i].getId() == initialEventId) {
          eventIndex = i;
          break;
        }
      }

      if (eventIndex === undefined) {
        throw new Error("getEventTimeline result didn't include requested event");
      }
    }

    const endIndex = Math.min(events.length, eventIndex + Math.ceil(initialWindowSize / 2));
    const startIndex = Math.max(0, endIndex - initialWindowSize);
    self._start = new TimelineIndex(timeline, startIndex - timeline.getBaseIndex());
    self._end = new TimelineIndex(timeline, endIndex - timeline.getBaseIndex());
    self._eventCount = endIndex - startIndex;
  }; // We avoid delaying the resolution of the promise by a reactor tick if
  // we already have the data we need, which is important to keep room-switching
  // feeling snappy.
  //


  if (initialEventId) {
    const timeline = this._timelineSet.getTimelineForEvent(initialEventId);

    if (timeline) {
      // hot-path optimization to save a reactor tick by replicating the sync check getTimelineForEvent does.
      initFields(timeline);
      return Promise.resolve(timeline);
    }

    const prom = this._client.getEventTimeline(this._timelineSet, initialEventId);

    return prom.then(initFields);
  } else {
    const tl = this._timelineSet.getLiveTimeline();

    initFields(tl);
    return Promise.resolve();
  }
};
/**
 * Get the TimelineIndex of the window in the given direction.
 *
 * @param {string} direction   EventTimeline.BACKWARDS to get the TimelineIndex
 * at the start of the window; EventTimeline.FORWARDS to get the TimelineIndex at
 * the end.
 *
 * @return {TimelineIndex} The requested timeline index if one exists, null
 * otherwise.
 */


TimelineWindow.prototype.getTimelineIndex = function (direction) {
  if (direction == _eventTimeline.EventTimeline.BACKWARDS) {
    return this._start;
  } else if (direction == _eventTimeline.EventTimeline.FORWARDS) {
    return this._end;
  } else {
    throw new Error("Invalid direction '" + direction + "'");
  }
};
/**
 * Try to extend the window using events that are already in the underlying
 * TimelineIndex.
 *
 * @param {string} direction   EventTimeline.BACKWARDS to try extending it
 *   backwards; EventTimeline.FORWARDS to try extending it forwards.
 * @param {number} size   number of events to try to extend by.
 *
 * @return {boolean} true if the window was extended, false otherwise.
 */


TimelineWindow.prototype.extend = function (direction, size) {
  const tl = this.getTimelineIndex(direction);

  if (!tl) {
    debuglog("TimelineWindow: no timeline yet");
    return false;
  }

  const count = direction == _eventTimeline.EventTimeline.BACKWARDS ? tl.retreat(size) : tl.advance(size);

  if (count) {
    this._eventCount += count;
    debuglog("TimelineWindow: increased cap by " + count + " (now " + this._eventCount + ")"); // remove some events from the other end, if necessary

    const excess = this._eventCount - this._windowLimit;

    if (excess > 0) {
      this.unpaginate(excess, direction != _eventTimeline.EventTimeline.BACKWARDS);
    }

    return true;
  }

  return false;
};
/**
 * Check if this window can be extended
 *
 * <p>This returns true if we either have more events, or if we have a
 * pagination token which means we can paginate in that direction. It does not
 * necessarily mean that there are more events available in that direction at
 * this time.
 *
 * @param {string} direction   EventTimeline.BACKWARDS to check if we can
 *   paginate backwards; EventTimeline.FORWARDS to check if we can go forwards
 *
 * @return {boolean} true if we can paginate in the given direction
 */


TimelineWindow.prototype.canPaginate = function (direction) {
  const tl = this.getTimelineIndex(direction);

  if (!tl) {
    debuglog("TimelineWindow: no timeline yet");
    return false;
  }

  if (direction == _eventTimeline.EventTimeline.BACKWARDS) {
    if (tl.index > tl.minIndex()) {
      return true;
    }
  } else {
    if (tl.index < tl.maxIndex()) {
      return true;
    }
  }

  return Boolean(tl.timeline.getNeighbouringTimeline(direction) || tl.timeline.getPaginationToken(direction));
};
/**
 * Attempt to extend the window
 *
 * @param {string} direction   EventTimeline.BACKWARDS to extend the window
 *    backwards (towards older events); EventTimeline.FORWARDS to go forwards.
 *
 * @param {number} size   number of events to try to extend by. If fewer than this
 *    number are immediately available, then we return immediately rather than
 *    making an API call.
 *
 * @param {boolean} [makeRequest = true] whether we should make API calls to
 *    fetch further events if we don't have any at all. (This has no effect if
 *    the room already knows about additional events in the relevant direction,
 *    even if there are fewer than 'size' of them, as we will just return those
 *    we already know about.)
 *
 * @param {number} [requestLimit = 5] limit for the number of API requests we
 *    should make.
 *
 * @return {Promise} Resolves to a boolean which is true if more events
 *    were successfully retrieved.
 */


TimelineWindow.prototype.paginate = function (direction, size, makeRequest, requestLimit) {
  // Either wind back the message cap (if there are enough events in the
  // timeline to do so), or fire off a pagination request.
  if (makeRequest === undefined) {
    makeRequest = true;
  }

  if (requestLimit === undefined) {
    requestLimit = DEFAULT_PAGINATE_LOOP_LIMIT;
  }

  const tl = this.getTimelineIndex(direction);

  if (!tl) {
    debuglog("TimelineWindow: no timeline yet");
    return Promise.resolve(false);
  }

  if (tl.pendingPaginate) {
    return tl.pendingPaginate;
  } // try moving the cap


  if (this.extend(direction, size)) {
    return Promise.resolve(true);
  }

  if (!makeRequest || requestLimit === 0) {
    // todo: should we return something different to indicate that there
    // might be more events out there, but we haven't found them yet?
    return Promise.resolve(false);
  } // try making a pagination request


  const token = tl.timeline.getPaginationToken(direction);

  if (!token) {
    debuglog("TimelineWindow: no token");
    return Promise.resolve(false);
  }

  debuglog("TimelineWindow: starting request");
  const self = this;

  const prom = this._client.paginateEventTimeline(tl.timeline, {
    backwards: direction == _eventTimeline.EventTimeline.BACKWARDS,
    limit: size
  }).finally(function () {
    tl.pendingPaginate = null;
  }).then(function (r) {
    debuglog("TimelineWindow: request completed with result " + r);

    if (!r) {
      // end of timeline
      return false;
    } // recurse to advance the index into the results.
    //
    // If we don't get any new events, we want to make sure we keep asking
    // the server for events for as long as we have a valid pagination
    // token. In particular, we want to know if we've actually hit the
    // start of the timeline, or if we just happened to know about all of
    // the events thanks to https://matrix.org/jira/browse/SYN-645.
    //
    // On the other hand, we necessarily want to wait forever for the
    // server to make its mind up about whether there are other events,
    // because it gives a bad user experience
    // (https://github.com/vector-im/vector-web/issues/1204).


    return self.paginate(direction, size, true, requestLimit - 1);
  });

  tl.pendingPaginate = prom;
  return prom;
};
/**
 * Remove `delta` events from the start or end of the timeline.
 *
 * @param {number}  delta           number of events to remove from the timeline
 * @param {boolean} startOfTimeline if events should be removed from the start
 *     of the timeline.
 */


TimelineWindow.prototype.unpaginate = function (delta, startOfTimeline) {
  const tl = startOfTimeline ? this._start : this._end; // sanity-check the delta

  if (delta > this._eventCount || delta < 0) {
    throw new Error("Attemting to unpaginate " + delta + " events, but " + "only have " + this._eventCount + " in the timeline");
  }

  while (delta > 0) {
    const count = startOfTimeline ? tl.advance(delta) : tl.retreat(delta);

    if (count <= 0) {
      // sadness. This shouldn't be possible.
      throw new Error("Unable to unpaginate any further, but still have " + this._eventCount + " events");
    }

    delta -= count;
    this._eventCount -= count;
    debuglog("TimelineWindow.unpaginate: dropped " + count + " (now " + this._eventCount + ")");
  }
};
/**
 * Get a list of the events currently in the window
 *
 * @return {MatrixEvent[]} the events in the window
 */


TimelineWindow.prototype.getEvents = function () {
  if (!this._start) {
    // not yet loaded
    return [];
  }

  const result = []; // iterate through each timeline between this._start and this._end
  // (inclusive).

  let timeline = this._start.timeline;

  while (true) {
    const events = timeline.getEvents(); // For the first timeline in the chain, we want to start at
    // this._start.index. For the last timeline in the chain, we want to
    // stop before this._end.index. Otherwise, we want to copy all of the
    // events in the timeline.
    //
    // (Note that both this._start.index and this._end.index are relative
    // to their respective timelines' BaseIndex).
    //

    let startIndex = 0;
    let endIndex = events.length;

    if (timeline === this._start.timeline) {
      startIndex = this._start.index + timeline.getBaseIndex();
    }

    if (timeline === this._end.timeline) {
      endIndex = this._end.index + timeline.getBaseIndex();
    }

    for (let i = startIndex; i < endIndex; i++) {
      result.push(events[i]);
    } // if we're not done, iterate to the next timeline.


    if (timeline === this._end.timeline) {
      break;
    } else {
      timeline = timeline.getNeighbouringTimeline(_eventTimeline.EventTimeline.FORWARDS);
    }
  }

  return result;
};
/**
 * a thing which contains a timeline reference, and an index into it.
 *
 * @constructor
 * @param {EventTimeline} timeline
 * @param {number} index
 * @private
 */


function TimelineIndex(timeline, index) {
  this.timeline = timeline; // the indexes are relative to BaseIndex, so could well be negative.

  this.index = index;
}
/**
 * @return {number} the minimum possible value for the index in the current
 *    timeline
 */


TimelineIndex.prototype.minIndex = function () {
  return this.timeline.getBaseIndex() * -1;
};
/**
 * @return {number} the maximum possible value for the index in the current
 *    timeline (exclusive - ie, it actually returns one more than the index
 *    of the last element).
 */


TimelineIndex.prototype.maxIndex = function () {
  return this.timeline.getEvents().length - this.timeline.getBaseIndex();
};
/**
 * Try move the index forward, or into the neighbouring timeline
 *
 * @param {number} delta  number of events to advance by
 * @return {number} number of events successfully advanced by
 */


TimelineIndex.prototype.advance = function (delta) {
  if (!delta) {
    return 0;
  } // first try moving the index in the current timeline. See if there is room
  // to do so.


  let cappedDelta;

  if (delta < 0) {
    // we want to wind the index backwards.
    //
    // (this.minIndex() - this.index) is a negative number whose magnitude
    // is the amount of room we have to wind back the index in the current
    // timeline. We cap delta to this quantity.
    cappedDelta = Math.max(delta, this.minIndex() - this.index);

    if (cappedDelta < 0) {
      this.index += cappedDelta;
      return cappedDelta;
    }
  } else {
    // we want to wind the index forwards.
    //
    // (this.maxIndex() - this.index) is a (positive) number whose magnitude
    // is the amount of room we have to wind forward the index in the current
    // timeline. We cap delta to this quantity.
    cappedDelta = Math.min(delta, this.maxIndex() - this.index);

    if (cappedDelta > 0) {
      this.index += cappedDelta;
      return cappedDelta;
    }
  } // the index is already at the start/end of the current timeline.
  //
  // next see if there is a neighbouring timeline to switch to.


  const neighbour = this.timeline.getNeighbouringTimeline(delta < 0 ? _eventTimeline.EventTimeline.BACKWARDS : _eventTimeline.EventTimeline.FORWARDS);

  if (neighbour) {
    this.timeline = neighbour;

    if (delta < 0) {
      this.index = this.maxIndex();
    } else {
      this.index = this.minIndex();
    }

    debuglog("paginate: switched to new neighbour"); // recurse, using the next timeline

    return this.advance(delta);
  }

  return 0;
};
/**
 * Try move the index backwards, or into the neighbouring timeline
 *
 * @param {number} delta  number of events to retreat by
 * @return {number} number of events successfully retreated by
 */


TimelineIndex.prototype.retreat = function (delta) {
  return this.advance(delta * -1) * -1;
};

/***/ }),

/***/ "daf5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "dbce":
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__("7037")["default"];

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "dc14":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__("b7d1")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__("429b");
/*</replacement>*/


var Buffer = __webpack_require__("b639").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__("4681");

var _require = __webpack_require__("0db6"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__("c9b8").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__("3fb5")(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__("b19a");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__("b19a"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba"), __webpack_require__("4362")))

/***/ }),

/***/ "dc31":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("a593");
var bind = __webpack_require__("651d");
var Axios = __webpack_require__("d35c");
var defaults = __webpack_require__("8b5c");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__("480d");
axios.CancelToken = __webpack_require__("827e");
axios.isCancel = __webpack_require__("0a3f");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__("8ec6");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "dc4a":
/***/ (function(module, exports, __webpack_require__) {

var aCallable = __webpack_require__("59ed");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "dcd0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__("d6dd");

/*<replacement>*/
var util = Object.create(__webpack_require__("3a7c"));
util.inherits = __webpack_require__("3fb5");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "dd47":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c8f458dc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("be6a");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c8f458dc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c8f458dc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c8f458dc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_c8f458dc_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "dd5f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

var _interopRequireDefault = __webpack_require__("4ea4");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InteractiveAuth = InteractiveAuth;

var _url = _interopRequireDefault(__webpack_require__("0b16"));

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");
/*
Copyright 2016 OpenMarket Ltd
Copyright 2017 Vector Creations Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** @module interactive-auth */


const EMAIL_STAGE_TYPE = "m.login.email.identity";
const MSISDN_STAGE_TYPE = "m.login.msisdn";
/**
 * Abstracts the logic used to drive the interactive auth process.
 *
 * <p>Components implementing an interactive auth flow should instantiate one of
 * these, passing in the necessary callbacks to the constructor. They should
 * then call attemptAuth, which will return a promise which will resolve or
 * reject when the interactive-auth process completes.
 *
 * <p>Meanwhile, calls will be made to the startAuthStage and doRequest
 * callbacks, and information gathered from the user can be submitted with
 * submitAuthDict.
 *
 * @constructor
 * @alias module:interactive-auth
 *
 * @param {object} opts  options object
 *
 * @param {object} opts.matrixClient A matrix client to use for the auth process
 *
 * @param {object?} opts.authData error response from the last request. If
 *    null, a request will be made with no auth before starting.
 *
 * @param {function(object?): Promise} opts.doRequest
 *     called with the new auth dict to submit the request. Also passes a
 *     second deprecated arg which is a flag set to true if this request
 *     is a background request. The busyChanged callback should be used
 *     instead of the backfround flag. Should return a promise which resolves
 *     to the successful response or rejects with a MatrixError.
 *
 * @param {function(bool): Promise} opts.busyChanged
 *     called whenever the interactive auth logic becomes busy submitting
 *     information provided by the user or finsihes. After this has been
 *     called with true the UI should indicate that a request is in progress
 *     until it is called again with false.
 *
 * @param {function(string, object?)} opts.stateUpdated
 *     called when the status of the UI auth changes, ie. when the state of
 *     an auth stage changes of when the auth flow moves to a new stage.
 *     The arguments are: the login type (eg m.login.password); and an object
 *     which is either an error or an informational object specific to the
 *     login type. If the 'errcode' key is defined, the object is an error,
 *     and has keys:
 *         errcode: string, the textual error code, eg. M_UNKNOWN
 *         error: string, human readable string describing the error
 *
 *     The login type specific objects are as follows:
 *         m.login.email.identity:
 *          * emailSid: string, the sid of the active email auth session
 *
 * @param {object?} opts.inputs Inputs provided by the user and used by different
 *     stages of the auto process. The inputs provided will affect what flow is chosen.
 *
 * @param {string?} opts.inputs.emailAddress An email address. If supplied, a flow
 *     using email verification will be chosen.
 *
 * @param {string?} opts.inputs.phoneCountry An ISO two letter country code. Gives
 *     the country that opts.phoneNumber should be resolved relative to.
 *
 * @param {string?} opts.inputs.phoneNumber A phone number. If supplied, a flow
 *     using phone number validation will be chosen.
 *
 * @param {string?} opts.sessionId If resuming an existing interactive auth session,
 *     the sessionId of that session.
 *
 * @param {string?} opts.clientSecret If resuming an existing interactive auth session,
 *     the client secret for that session
 *
 * @param {string?} opts.emailSid If returning from having completed m.login.email.identity
 *     auth, the sid for the email verification session.
 *
 * @param {function?} opts.requestEmailToken A function that takes the email address (string),
 *     clientSecret (string), attempt number (int) and sessionId (string) and calls the
 *     relevant requestToken function and returns the promise returned by that function.
 *     If the resulting promise rejects, the rejection will propagate through to the
 *     attemptAuth promise.
 *
 */

function InteractiveAuth(opts) {
  this._matrixClient = opts.matrixClient;
  this._data = opts.authData || {};
  this._requestCallback = opts.doRequest;
  this._busyChangedCallback = opts.busyChanged; // startAuthStage included for backwards compat

  this._stateUpdatedCallback = opts.stateUpdated || opts.startAuthStage;
  this._resolveFunc = null;
  this._rejectFunc = null;
  this._inputs = opts.inputs || {};
  this._requestEmailTokenCallback = opts.requestEmailToken;
  if (opts.sessionId) this._data.session = opts.sessionId;
  this._clientSecret = opts.clientSecret || this._matrixClient.generateClientSecret();
  this._emailSid = opts.emailSid;
  if (this._emailSid === undefined) this._emailSid = null;
  this._requestingEmailToken = false;
  this._chosenFlow = null;
  this._currentStage = null; // if we are currently trying to submit an auth dict (which includes polling)
  // the promise the will resolve/reject when it completes

  this._submitPromise = null;
}

InteractiveAuth.prototype = {
  /**
   * begin the authentication process.
   *
   * @return {Promise} which resolves to the response on success,
   * or rejects with the error on failure. Rejects with NoAuthFlowFoundError if
   *     no suitable authentication flow can be found
   */
  attemptAuth: function () {
    // This promise will be quite long-lived and will resolve when the
    // request is authenticated and completes successfully.
    return new Promise((resolve, reject) => {
      this._resolveFunc = resolve;
      this._rejectFunc = reject;
      const hasFlows = this._data && this._data.flows; // if we have no flows, try a request to acquire the flows

      if (!hasFlows) {
        if (this._busyChangedCallback) this._busyChangedCallback(true); // use the existing sessionid, if one is present.

        let auth = null;

        if (this._data.session) {
          auth = {
            session: this._data.session
          };
        }

        this._doRequest(auth).finally(() => {
          if (this._busyChangedCallback) this._busyChangedCallback(false);
        });
      } else {
        this._startNextAuthStage();
      }
    });
  },

  /**
   * Poll to check if the auth session or current stage has been
   * completed out-of-band. If so, the attemptAuth promise will
   * be resolved.
   */
  poll: function () {
    var _ref = _asyncToGenerator(function* () {
      if (!this._data.session) return; // likewise don't poll if there is no auth session in progress

      if (!this._resolveFunc) return; // if we currently have a request in flight, there's no point making
      // another just to check what the status is

      if (this._submitPromise) return;
      let authDict = {};

      if (this._currentStage == EMAIL_STAGE_TYPE) {
        // The email can be validated out-of-band, but we need to provide the
        // creds so the HS can go & check it.
        if (this._emailSid) {
          const creds = {
            sid: this._emailSid,
            client_secret: this._clientSecret
          };

          if (yield this._matrixClient.doesServerRequireIdServerParam()) {
            const idServerParsedUrl = _url.default.parse(this._matrixClient.getIdentityServerUrl());

            creds.id_server = idServerParsedUrl.host;
          }

          authDict = {
            type: EMAIL_STAGE_TYPE,
            // TODO: Remove `threepid_creds` once servers support proper UIA
            // See https://github.com/matrix-org/synapse/issues/5665
            // See https://github.com/matrix-org/matrix-doc/issues/2220
            threepid_creds: creds,
            threepidCreds: creds
          };
        }
      }

      this.submitAuthDict(authDict, true);
    });

    return function poll() {
      return _ref.apply(this, arguments);
    };
  }(),

  /**
   * get the auth session ID
   *
   * @return {string} session id
   */
  getSessionId: function () {
    return this._data ? this._data.session : undefined;
  },

  /**
   * get the client secret used for validation sessions
   * with the ID server.
   *
   * @return {string} client secret
   */
  getClientSecret: function () {
    return this._clientSecret;
  },

  /**
   * get the server params for a given stage
   *
   * @param {string} loginType login type for the stage
   * @return {object?} any parameters from the server for this stage
   */
  getStageParams: function (loginType) {
    let params = {};

    if (this._data && this._data.params) {
      params = this._data.params;
    }

    return params[loginType];
  },

  getChosenFlow() {
    return this._chosenFlow;
  },

  /**
   * submit a new auth dict and fire off the request. This will either
   * make attemptAuth resolve/reject, or cause the startAuthStage callback
   * to be called for a new stage.
   *
   * @param {object} authData new auth dict to send to the server. Should
   *    include a `type` propterty denoting the login type, as well as any
   *    other params for that stage.
   * @param {bool} background If true, this request failing will not result
   *    in the attemptAuth promise being rejected. This can be set to true
   *    for requests that just poll to see if auth has been completed elsewhere.
   */
  submitAuthDict: function () {
    var _ref2 = _asyncToGenerator(function* (authData, background) {
      if (!this._resolveFunc) {
        throw new Error("submitAuthDict() called before attemptAuth()");
      }

      if (!background && this._busyChangedCallback) {
        this._busyChangedCallback(true);
      } // if we're currently trying a request, wait for it to finish
      // as otherwise we can get multiple 200 responses which can mean
      // things like multiple logins for register requests.
      // (but discard any expections as we only care when its done,
      // not whether it worked or not)


      while (this._submitPromise) {
        try {
          yield this._submitPromise;
        } catch (e) {}
      } // use the sessionid from the last request, if one is present.


      let auth;

      if (this._data.session) {
        auth = {
          session: this._data.session
        };
        utils.extend(auth, authData);
      } else {
        auth = authData;
      }

      try {
        // NB. the 'background' flag is deprecated by the busyChanged
        // callback and is here for backwards compat
        this._submitPromise = this._doRequest(auth, background);
        yield this._submitPromise;
      } finally {
        this._submitPromise = null;

        if (!background && this._busyChangedCallback) {
          this._busyChangedCallback(false);
        }
      }
    });

    return function submitAuthDict(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }(),

  /**
   * Gets the sid for the email validation session
   * Specific to m.login.email.identity
   *
   * @returns {string} The sid of the email auth session
   */
  getEmailSid: function () {
    return this._emailSid;
  },

  /**
   * Sets the sid for the email validation session
   * This must be set in order to successfully poll for completion
   * of the email validation.
   * Specific to m.login.email.identity
   *
   * @param {string} sid The sid for the email validation session
   */
  setEmailSid: function (sid) {
    this._emailSid = sid;
  },

  /**
   * Fire off a request, and either resolve the promise, or call
   * startAuthStage.
   *
   * @private
   * @param {object?} auth new auth dict, including session id
   * @param {bool?} background If true, this request is a background poll, so it
   *    failing will not result in the attemptAuth promise being rejected.
   *    This can be set to true for requests that just poll to see if auth has
   *    been completed elsewhere.
   */
  _doRequest: function () {
    var _ref3 = _asyncToGenerator(function* (auth, background) {
      try {
        const result = yield this._requestCallback(auth, background);

        this._resolveFunc(result);

        this._resolveFunc = null;
        this._rejectFunc = null;
      } catch (error) {
        // sometimes UI auth errors don't come with flows
        const errorFlows = error.data ? error.data.flows : null;
        const haveFlows = this._data.flows || Boolean(errorFlows);

        if (error.httpStatus !== 401 || !error.data || !haveFlows) {
          // doesn't look like an interactive-auth failure.
          if (!background) {
            this._rejectFunc(error);
          } else {
            // We ignore all failures here (even non-UI auth related ones)
            // since we don't want to suddenly fail if the internet connection
            // had a blip whilst we were polling
            _logger.logger.log("Background poll request failed doing UI auth: ignoring", error);
          }
        } // if the error didn't come with flows, completed flows or session ID,
        // copy over the ones we have. Synapse sometimes sends responses without
        // any UI auth data (eg. when polling for email validation, if the email
        // has not yet been validated). This appears to be a Synapse bug, which
        // we workaround here.


        if (!error.data.flows && !error.data.completed && !error.data.session) {
          error.data.flows = this._data.flows;
          error.data.completed = this._data.completed;
          error.data.session = this._data.session;
        }

        this._data = error.data;

        try {
          this._startNextAuthStage();
        } catch (e) {
          this._rejectFunc(e);

          this._resolveFunc = null;
          this._rejectFunc = null;
        }

        if (!this._emailSid && !this._requestingEmailToken && this._chosenFlow.stages.includes('m.login.email.identity')) {
          // If we've picked a flow with email auth, we send the email
          // now because we want the request to fail as soon as possible
          // if the email address is not valid (ie. already taken or not
          // registered, depending on what the operation is).
          this._requestingEmailToken = true;

          try {
            const requestTokenResult = yield this._requestEmailTokenCallback(this._inputs.emailAddress, this._clientSecret, 1, // TODO: Multiple send attempts?
            this._data.session);
            this._emailSid = requestTokenResult.sid; // NB. promise is not resolved here - at some point, doRequest
            // will be called again and if the user has jumped through all
            // the hoops correctly, auth will be complete and the request
            // will succeed.
            // Also, we should expose the fact that this request has compledted
            // so clients can know that the email has actually been sent.
          } catch (e) {
            // we failed to request an email token, so fail the request.
            // This could be due to the email already beeing registered
            // (or not being registered, depending on what we're trying
            // to do) or it could be a network failure. Either way, pass
            // the failure up as the user can't complete auth if we can't
            // send the email, for whatever reason.
            this._rejectFunc(e);

            this._resolveFunc = null;
            this._rejectFunc = null;
          } finally {
            this._requestingEmailToken = false;
          }
        }
      }
    });

    return function _doRequest(_x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }(),

  /**
   * Pick the next stage and call the callback
   *
   * @private
   * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found
   */
  _startNextAuthStage: function () {
    const nextStage = this._chooseStage();

    if (!nextStage) {
      throw new Error("No incomplete flows from the server");
    }

    this._currentStage = nextStage;

    if (nextStage === 'm.login.dummy') {
      this.submitAuthDict({
        type: 'm.login.dummy'
      });
      return;
    }

    if (this._data && this._data.errcode || this._data.error) {
      this._stateUpdatedCallback(nextStage, {
        errcode: this._data.errcode || "",
        error: this._data.error || ""
      });

      return;
    }

    const stageStatus = {};

    if (nextStage == EMAIL_STAGE_TYPE) {
      stageStatus.emailSid = this._emailSid;
    }

    this._stateUpdatedCallback(nextStage, stageStatus);
  },

  /**
   * Pick the next auth stage
   *
   * @private
   * @return {string?} login type
   * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found
   */
  _chooseStage: function () {
    if (this._chosenFlow === null) {
      this._chosenFlow = this._chooseFlow();
    }

    _logger.logger.log("Active flow => %s", JSON.stringify(this._chosenFlow));

    const nextStage = this._firstUncompletedStage(this._chosenFlow);

    _logger.logger.log("Next stage: %s", nextStage);

    return nextStage;
  },

  /**
   * Pick one of the flows from the returned list
   * If a flow using all of the inputs is found, it will
   * be returned, otherwise, null will be returned.
   *
   * Only flows using all given inputs are chosen because it
   * is likley to be surprising if the user provides a
   * credential and it is not used. For example, for registration,
   * this could result in the email not being used which would leave
   * the account with no means to reset a password.
   *
   * @private
   * @return {object} flow
   * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found
   */
  _chooseFlow: function () {
    const flows = this._data.flows || []; // we've been given an email or we've already done an email part

    const haveEmail = Boolean(this._inputs.emailAddress) || Boolean(this._emailSid);
    const haveMsisdn = Boolean(this._inputs.phoneCountry) && Boolean(this._inputs.phoneNumber);

    for (const flow of flows) {
      let flowHasEmail = false;
      let flowHasMsisdn = false;

      for (const stage of flow.stages) {
        if (stage === EMAIL_STAGE_TYPE) {
          flowHasEmail = true;
        } else if (stage == MSISDN_STAGE_TYPE) {
          flowHasMsisdn = true;
        }
      }

      if (flowHasEmail == haveEmail && flowHasMsisdn == haveMsisdn) {
        return flow;
      }
    } // Throw an error with a fairly generic description, but with more
    // information such that the app can give a better one if so desired.


    const err = new Error("No appropriate authentication flow found");
    err.name = 'NoAuthFlowFoundError';
    err.required_stages = [];
    if (haveEmail) err.required_stages.push(EMAIL_STAGE_TYPE);
    if (haveMsisdn) err.required_stages.push(MSISDN_STAGE_TYPE);
    err.available_flows = flows;
    throw err;
  },

  /**
   * Get the first uncompleted stage in the given flow
   *
   * @private
   * @param {object} flow
   * @return {string} login type
   */
  _firstUncompletedStage: function (flow) {
    const completed = (this._data || {}).completed || [];

    for (let i = 0; i < flow.stages.length; ++i) {
      const stageType = flow.stages[i];

      if (completed.indexOf(stageType) === -1) {
        return stageType;
      }
    }
  }
};

/***/ }),

/***/ "de24":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("2931");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("2456b184", content, shadowRoot)
};

/***/ }),

/***/ "de56":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_incomingMessage_vue_vue_type_style_index_0_id_6b3704ba_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("739c");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_incomingMessage_vue_vue_type_style_index_0_id_6b3704ba_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_incomingMessage_vue_vue_type_style_index_0_id_6b3704ba_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_incomingMessage_vue_vue_type_style_index_0_id_6b3704ba_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_incomingMessage_vue_vue_type_style_index_0_id_6b3704ba_lang_sass_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "deb1":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".userspicwrapper[data-v-792279b0]{width:44px;height:44px;background:rgb(var(--background-main));line-height:44px;text-align:center;font-size:.8em;color:rgb(var(--color-bg-ac-2));position:relative}.userspicwrapper[data-v-792279b0],.userspicwrapper[data-v-792279b0] .bgimage{border-radius:50%}.swiperWrapperFlex[data-v-792279b0]{margin:0 auto}.icon[data-v-792279b0]{position:absolute;right:70%;top:70%;font-size:1em;width:20px;height:20px;line-height:20px;background:transparent;border-radius:20px;color:rgb(var(--color-txt-gray));opacity:.8;z-index:3}.icon.active[data-v-792279b0]{color:rgb(var(--color-txt-ac))}.unseen[data-v-792279b0]{position:absolute;width:22px;height:22px;right:-10%;bottom:-10%;background:rgba(var(--color-bg-ac),.9);line-height:22px;text-align:center;font-weight:500;border-radius:50%;z-index:5;font-size:.6em;color:rgb(var(--text-on-bg-ac-color))}.userspic[data-v-792279b0]{position:relative}.iconPreview[data-v-792279b0]{width:44px;height:44px;border-radius:50%}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "df7c":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "e07b":
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__("5a76")
var RIPEMD160 = __webpack_require__("b5ca")
var sha = __webpack_require__("69f2")
var Buffer = __webpack_require__("8707").Buffer

var checkParameters = __webpack_require__("7d2a")
var defaultEncoding = __webpack_require__("9f9d")
var toBuffer = __webpack_require__("8be6")

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2


/***/ }),

/***/ "e099":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "e163":
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__("1a2d");
var isCallable = __webpack_require__("1626");
var toObject = __webpack_require__("7b0b");
var sharedKey = __webpack_require__("f772");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es-x/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "e177":
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__("d039");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "e1d0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__("232d");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "e2c5":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("4acf");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("0f44ac1c", content, shadowRoot)
};

/***/ }),

/***/ "e330":
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__("40d5");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);

module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "e372":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("ad71");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__("dc14");
exports.Duplex = __webpack_require__("b19a");
exports.Transform = __webpack_require__("27bf");
exports.PassThrough = __webpack_require__("780f");
exports.finished = __webpack_require__("903c");
exports.pipeline = __webpack_require__("5d1c");


/***/ }),

/***/ "e391":
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__("577e");

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};


/***/ }),

/***/ "e3db":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "e508":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/* unused harmony export DynamicScroller */
/* unused harmony export DynamicScrollerItem */
/* unused harmony export IdState */
/* unused harmony export RecycleScroller */
/* harmony import */ var vue_resize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("252c");
/* harmony import */ var vue_observe_visibility__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("85fe");
/* harmony import */ var scrollparent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("ed83");
/* harmony import */ var scrollparent__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(scrollparent__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("a026");





var config = {
  itemsLimit: 1000
};

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelper(o) {
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var it,
      normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var props = {
  items: {
    type: Array,
    required: true
  },
  keyField: {
    type: String,
    default: 'id'
  },
  direction: {
    type: String,
    default: 'vertical',
    validator: function validator(value) {
      return ['vertical', 'horizontal'].includes(value);
    }
  }
};
function simpleArray() {
  return this.items.length && _typeof(this.items[0]) !== 'object';
}

var supportsPassive = false;

if (typeof window !== 'undefined') {
  supportsPassive = false;

  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get() {
        supportsPassive = true;
      }
    });
    window.addEventListener('test', null, opts);
  } catch (e) {}
}

var uid = 0;
var script = {
  name: 'RecycleScroller',
  components: {
    ResizeObserver: vue_resize__WEBPACK_IMPORTED_MODULE_0__[/* ResizeObserver */ "a"]
  },
  directives: {
    ObserveVisibility: vue_observe_visibility__WEBPACK_IMPORTED_MODULE_1__[/* ObserveVisibility */ "a"]
  },
  props: _objectSpread2({}, props, {
    itemSize: {
      type: Number,
      default: null
    },
    minItemSize: {
      type: [Number, String],
      default: null
    },
    sizeField: {
      type: String,
      default: 'size'
    },
    typeField: {
      type: String,
      default: 'type'
    },
    buffer: {
      type: Number,
      default: 200
    },
    pageMode: {
      type: Boolean,
      default: false
    },
    prerender: {
      type: Number,
      default: 0
    },
    emitUpdate: {
      type: Boolean,
      default: false
    }
  }),
  data: function data() {
    return {
      pool: [],
      totalSize: 0,
      ready: false,
      hoverKey: null
    };
  },
  computed: {
    sizes: function sizes() {
      if (this.itemSize === null) {
        var sizes = {
          '-1': {
            accumulator: 0
          }
        };
        var items = this.items;
        var field = this.sizeField;
        var minItemSize = this.minItemSize;
        var computedMinSize = 10000;
        var accumulator = 0;
        var current;

        for (var i = 0, l = items.length; i < l; i++) {
          current = items[i][field] || minItemSize;

          if (current < computedMinSize) {
            computedMinSize = current;
          }

          accumulator += current;
          sizes[i] = {
            accumulator: accumulator,
            size: current
          };
        } // eslint-disable-next-line


        this.$_computedMinItemSize = computedMinSize;
        return sizes;
      }

      return [];
    },
    simpleArray: simpleArray
  },
  watch: {
    items: function items() {
      this.updateVisibleItems(true);
    },
    pageMode: function pageMode() {
      this.applyPageMode();
      this.updateVisibleItems(false);
    },
    sizes: {
      handler: function handler() {
        this.updateVisibleItems(false);
      },
      deep: true
    }
  },
  created: function created() {
    this.$_startIndex = 0;
    this.$_endIndex = 0;
    this.$_views = new Map();
    this.$_unusedViews = new Map();
    this.$_scrollDirty = false;
    this.$_lastUpdateScrollPosition = 0; // In SSR mode, we also prerender the same number of item for the first render
    // to avoir mismatch between server and client templates

    if (this.prerender) {
      this.$_prerender = true;
      this.updateVisibleItems(false);
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.applyPageMode();
    this.$nextTick(function () {
      // In SSR mode, render the real number of visible items
      _this.$_prerender = false;

      _this.updateVisibleItems(true);

      _this.ready = true;
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.removeListeners();
  },
  methods: {
    addView: function addView(pool, index, item, key, type) {
      var view = {
        item: item,
        position: 0
      };
      var nonReactive = {
        id: uid++,
        index: index,
        used: true,
        key: key,
        type: type
      };
      Object.defineProperty(view, 'nr', {
        configurable: false,
        value: nonReactive
      });
      pool.push(view);
      return view;
    },
    unuseView: function unuseView(view) {
      var fake = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var unusedViews = this.$_unusedViews;
      var type = view.nr.type;
      var unusedPool = unusedViews.get(type);

      if (!unusedPool) {
        unusedPool = [];
        unusedViews.set(type, unusedPool);
      }

      unusedPool.push(view);

      if (!fake) {
        view.nr.used = false;
        view.position = -9999;
        this.$_views.delete(view.nr.key);
      }
    },
    handleResize: function handleResize() {
      this.$emit('resize');
      if (this.ready) this.updateVisibleItems(false);
    },
    handleScroll: function handleScroll(event) {
      var _this2 = this;

      if (!this.$_scrollDirty) {
        this.$_scrollDirty = true;
        requestAnimationFrame(function () {
          _this2.$_scrollDirty = false;

          var _this2$updateVisibleI = _this2.updateVisibleItems(false, true),
              continuous = _this2$updateVisibleI.continuous; // It seems sometimes chrome doesn't fire scroll event :/
          // When non continous scrolling is ending, we force a refresh


          if (!continuous) {
            clearTimeout(_this2.$_refreshTimout);
            _this2.$_refreshTimout = setTimeout(_this2.handleScroll, 100);
          }
        });
      }
    },
    handleVisibilityChange: function handleVisibilityChange(isVisible, entry) {
      var _this3 = this;

      if (this.ready) {
        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {
          this.$emit('visible');
          requestAnimationFrame(function () {
            _this3.updateVisibleItems(false);
          });
        } else {
          this.$emit('hidden');
        }
      }
    },
    updateVisibleItems: function updateVisibleItems(checkItem) {
      var checkPositionDiff = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var itemSize = this.itemSize;
      var minItemSize = this.$_computedMinItemSize;
      var typeField = this.typeField;
      var keyField = this.simpleArray ? null : this.keyField;
      var items = this.items;
      var count = items.length;
      var sizes = this.sizes;
      var views = this.$_views;
      var unusedViews = this.$_unusedViews;
      var pool = this.pool;
      var startIndex, endIndex;
      var totalSize;

      if (!count) {
        startIndex = endIndex = totalSize = 0;
      } else if (this.$_prerender) {
        startIndex = 0;
        endIndex = this.prerender;
        totalSize = null;
      } else {
        var scroll = this.getScroll(); // Skip update if use hasn't scrolled enough

        if (checkPositionDiff) {
          var positionDiff = scroll.start - this.$_lastUpdateScrollPosition;
          if (positionDiff < 0) positionDiff = -positionDiff;

          if (itemSize === null && positionDiff < minItemSize || positionDiff < itemSize) {
            return {
              continuous: true
            };
          }
        }

        this.$_lastUpdateScrollPosition = scroll.start;
        var buffer = this.buffer;
        scroll.start -= buffer;
        scroll.end += buffer; // Variable size mode

        if (itemSize === null) {
          var h;
          var a = 0;
          var b = count - 1;
          var i = ~~(count / 2);
          var oldI; // Searching for startIndex

          do {
            oldI = i;
            h = sizes[i].accumulator;

            if (h < scroll.start) {
              a = i;
            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {
              b = i;
            }

            i = ~~((a + b) / 2);
          } while (i !== oldI);

          i < 0 && (i = 0);
          startIndex = i; // For container style

          totalSize = sizes[count - 1].accumulator; // Searching for endIndex

          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++) {
          }

          if (endIndex === -1) {
            endIndex = items.length - 1;
          } else {
            endIndex++; // Bounds

            endIndex > count && (endIndex = count);
          }
        } else {
          // Fixed size mode
          startIndex = ~~(scroll.start / itemSize);
          endIndex = Math.ceil(scroll.end / itemSize); // Bounds

          startIndex < 0 && (startIndex = 0);
          endIndex > count && (endIndex = count);
          totalSize = count * itemSize;
        }
      }

      if (endIndex - startIndex > config.itemsLimit) {
        this.itemsLimitError();
      }

      this.totalSize = totalSize;
      var view;
      var continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex;

      if (this.$_continuous !== continuous) {
        if (continuous) {
          views.clear();
          unusedViews.clear();

          for (var _i = 0, l = pool.length; _i < l; _i++) {
            view = pool[_i];
            this.unuseView(view);
          }
        }

        this.$_continuous = continuous;
      } else if (continuous) {
        for (var _i2 = 0, _l = pool.length; _i2 < _l; _i2++) {
          view = pool[_i2];

          if (view.nr.used) {
            // Update view item index
            if (checkItem) {
              view.nr.index = items.findIndex(function (item) {
                return keyField ? item[keyField] === view.item[keyField] : item === view.item;
              });
            } // Check if index is still in visible range


            if (view.nr.index === -1 || view.nr.index < startIndex || view.nr.index >= endIndex) {
              this.unuseView(view);
            }
          }
        }
      }

      var unusedIndex = continuous ? null : new Map();
      var item, type, unusedPool;
      var v;

      for (var _i3 = startIndex; _i3 < endIndex; _i3++) {
        item = items[_i3];
        var key = keyField ? item[keyField] : item;

        if (key == null) {
          throw new Error("Key is ".concat(key, " on item (keyField is '").concat(keyField, "')"));
        }

        view = views.get(key);

        if (!itemSize && !sizes[_i3].size) {
          if (view) this.unuseView(view);
          continue;
        } // No view assigned to item


        if (!view) {
          type = item[typeField];
          unusedPool = unusedViews.get(type);

          if (continuous) {
            // Reuse existing view
            if (unusedPool && unusedPool.length) {
              view = unusedPool.pop();
              view.item = item;
              view.nr.used = true;
              view.nr.index = _i3;
              view.nr.key = key;
              view.nr.type = type;
            } else {
              view = this.addView(pool, _i3, item, key, type);
            }
          } else {
            // Use existing view
            // We don't care if they are already used
            // because we are not in continous scrolling
            v = unusedIndex.get(type) || 0;

            if (!unusedPool || v >= unusedPool.length) {
              view = this.addView(pool, _i3, item, key, type);
              this.unuseView(view, true);
              unusedPool = unusedViews.get(type);
            }

            view = unusedPool[v];
            view.item = item;
            view.nr.used = true;
            view.nr.index = _i3;
            view.nr.key = key;
            view.nr.type = type;
            unusedIndex.set(type, v + 1);
            v++;
          }

          views.set(key, view);
        } else {
          view.nr.used = true;
          view.item = item;
        } // Update position


        if (itemSize === null) {
          view.position = sizes[_i3 - 1].accumulator;
        } else {
          view.position = _i3 * itemSize;
        }
      }

      this.$_startIndex = startIndex;
      this.$_endIndex = endIndex;
      if (this.emitUpdate) this.$emit('update', startIndex, endIndex); // After the user has finished scrolling
      // Sort views so text selection is correct

      clearTimeout(this.$_sortTimer);
      this.$_sortTimer = setTimeout(this.sortViews, 300);
      return {
        continuous: continuous
      };
    },
    getListenerTarget: function getListenerTarget() {
      var target = scrollparent__WEBPACK_IMPORTED_MODULE_2___default()(this.$el); // Fix global scroll target for Chrome and Safari

      if (window.document && (target === window.document.documentElement || target === window.document.body)) {
        target = window;
      }

      return target;
    },
    getScroll: function getScroll() {
      var el = this.$el,
          direction = this.direction;
      var isVertical = direction === 'vertical';
      var scrollState;

      if (this.pageMode) {
        var bounds = el.getBoundingClientRect();
        var boundsSize = isVertical ? bounds.height : bounds.width;
        var start = -(isVertical ? bounds.top : bounds.left);
        var size = isVertical ? window.innerHeight : window.innerWidth;

        if (start < 0) {
          size += start;
          start = 0;
        }

        if (start + size > boundsSize) {
          size = boundsSize - start;
        }

        scrollState = {
          start: start,
          end: start + size
        };
      } else if (isVertical) {
        scrollState = {
          start: el.scrollTop,
          end: el.scrollTop + el.clientHeight
        };
      } else {
        scrollState = {
          start: el.scrollLeft,
          end: el.scrollLeft + el.clientWidth
        };
      }

      return scrollState;
    },
    applyPageMode: function applyPageMode() {
      if (this.pageMode) {
        this.addListeners();
      } else {
        this.removeListeners();
      }
    },
    addListeners: function addListeners() {
      this.listenerTarget = this.getListenerTarget();
      this.listenerTarget.addEventListener('scroll', this.handleScroll, supportsPassive ? {
        passive: true
      } : false);
      this.listenerTarget.addEventListener('resize', this.handleResize);
    },
    removeListeners: function removeListeners() {
      if (!this.listenerTarget) {
        return;
      }

      this.listenerTarget.removeEventListener('scroll', this.handleScroll);
      this.listenerTarget.removeEventListener('resize', this.handleResize);
      this.listenerTarget = null;
    },
    scrollToItem: function scrollToItem(index) {
      var scroll;

      if (this.itemSize === null) {
        scroll = index > 0 ? this.sizes[index - 1].accumulator : 0;
      } else {
        scroll = index * this.itemSize;
      }

      this.scrollToPosition(scroll);
    },
    scrollToPosition: function scrollToPosition(position) {
      if (this.direction === 'vertical') {
        this.$el.scrollTop = position;
      } else {
        this.$el.scrollLeft = position;
      }
    },
    itemsLimitError: function itemsLimitError() {
      var _this4 = this;

      setTimeout(function () {
        console.log('It seems the scroller element isn\'t scrolling, so it tries to render all the items at once.', 'Scroller:', _this4.$el);
        console.log('Make sure the scroller has a fixed height (or width) and \'overflow-y\' (or \'overflow-x\') set to \'auto\' so it can scroll correctly and only render the items visible in the scroll viewport.');
      });
      throw new Error('Rendered items limit reached');
    },
    sortViews: function sortViews() {
      this.pool.sort(function (viewA, viewB) {
        return viewA.nr.index - viewB.nr.index;
      });
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
const __vue_script__ = script;
/* template */
var __vue_render__ = function() {
  var _obj, _obj$1;
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    {
      directives: [
        {
          name: "observe-visibility",
          rawName: "v-observe-visibility",
          value: _vm.handleVisibilityChange,
          expression: "handleVisibilityChange"
        }
      ],
      staticClass: "vue-recycle-scroller",
      class:
        ((_obj = {
          ready: _vm.ready,
          "page-mode": _vm.pageMode
        }),
        (_obj["direction-" + _vm.direction] = true),
        _obj),
      on: {
        "&scroll": function($event) {
          return _vm.handleScroll($event)
        }
      }
    },
    [
      _vm.$slots.before
        ? _c(
            "div",
            { staticClass: "vue-recycle-scroller__slot" },
            [_vm._t("before")],
            2
          )
        : _vm._e(),
      _vm._v(" "),
      _c(
        "div",
        {
          ref: "wrapper",
          staticClass: "vue-recycle-scroller__item-wrapper",
          style:
            ((_obj$1 = {}),
            (_obj$1[_vm.direction === "vertical" ? "minHeight" : "minWidth"] =
              _vm.totalSize + "px"),
            _obj$1)
        },
        _vm._l(_vm.pool, function(view) {
          return _c(
            "div",
            {
              key: view.nr.id,
              staticClass: "vue-recycle-scroller__item-view",
              class: { hover: _vm.hoverKey === view.nr.key },
              style: _vm.ready
                ? {
                    transform:
                      "translate" +
                      (_vm.direction === "vertical" ? "Y" : "X") +
                      "(" +
                      view.position +
                      "px)"
                  }
                : null,
              on: {
                mouseenter: function($event) {
                  _vm.hoverKey = view.nr.key;
                },
                mouseleave: function($event) {
                  _vm.hoverKey = null;
                }
              }
            },
            [
              _vm._t("default", null, {
                item: view.item,
                index: view.nr.index,
                active: view.nr.used
              })
            ],
            2
          )
        }),
        0
      ),
      _vm._v(" "),
      _vm.$slots.after
        ? _c(
            "div",
            { staticClass: "vue-recycle-scroller__slot" },
            [_vm._t("after")],
            2
          )
        : _vm._e(),
      _vm._v(" "),
      _c("ResizeObserver", { on: { notify: _vm.handleResize } })
    ],
    1
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  const __vue_inject_styles__ = undefined;
  /* scoped */
  const __vue_scope_id__ = undefined;
  /* module identifier */
  const __vue_module_identifier__ = undefined;
  /* functional template */
  const __vue_is_functional_template__ = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__ = normalizeComponent(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    false,
    undefined,
    undefined,
    undefined
  );

var script$1 = {
  name: 'DynamicScroller',
  components: {
    RecycleScroller: __vue_component__
  },
  inheritAttrs: false,
  provide: function provide() {
    if (typeof ResizeObserver !== 'undefined') {
      this.$_resizeObserver = new ResizeObserver(function (entries) {
        var _iterator = _createForOfIteratorHelper(entries),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (entry.target) {
              var event = new CustomEvent('resize', {
                detail: {
                  contentRect: entry.contentRect
                }
              });
              entry.target.dispatchEvent(event);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
    }

    return {
      vscrollData: this.vscrollData,
      vscrollParent: this,
      vscrollResizeObserver: this.$_resizeObserver
    };
  },
  props: _objectSpread2({}, props, {
    minItemSize: {
      type: [Number, String],
      required: true
    }
  }),
  data: function data() {
    return {
      vscrollData: {
        active: true,
        sizes: {},
        validSizes: {},
        keyField: this.keyField,
        simpleArray: false
      }
    };
  },
  computed: {
    simpleArray: simpleArray,
    itemsWithSize: function itemsWithSize() {
      var result = [];
      var items = this.items,
          keyField = this.keyField,
          simpleArray = this.simpleArray;
      var sizes = this.vscrollData.sizes;

      for (var i = 0; i < items.length; i++) {
        var item = items[i];
        var id = simpleArray ? i : item[keyField];
        var size = sizes[id];

        if (typeof size === 'undefined' && !this.$_undefinedMap[id]) {
          size = 0;
        }

        result.push({
          item: item,
          id: id,
          size: size
        });
      }

      return result;
    },
    listeners: function listeners() {
      var listeners = {};

      for (var key in this.$listeners) {
        if (key !== 'resize' && key !== 'visible') {
          listeners[key] = this.$listeners[key];
        }
      }

      return listeners;
    }
  },
  watch: {
    items: function items() {
      this.forceUpdate(false);
    },
    simpleArray: {
      handler: function handler(value) {
        this.vscrollData.simpleArray = value;
      },
      immediate: true
    },
    direction: function direction(value) {
      this.forceUpdate(true);
    }
  },
  created: function created() {
    this.$_updates = [];
    this.$_undefinedSizes = 0;
    this.$_undefinedMap = {};
  },
  activated: function activated() {
    this.vscrollData.active = true;
  },
  deactivated: function deactivated() {
    this.vscrollData.active = false;
  },
  methods: {
    onScrollerResize: function onScrollerResize() {
      var scroller = this.$refs.scroller;

      if (scroller) {
        this.forceUpdate();
      }

      this.$emit('resize');
    },
    onScrollerVisible: function onScrollerVisible() {
      this.$emit('vscroll:update', {
        force: false
      });
      this.$emit('visible');
    },
    forceUpdate: function forceUpdate() {
      var clear = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (clear || this.simpleArray) {
        this.vscrollData.validSizes = {};
      }

      this.$emit('vscroll:update', {
        force: true
      });
    },
    scrollToItem: function scrollToItem(index) {
      var scroller = this.$refs.scroller;
      if (scroller) scroller.scrollToItem(index);
    },
    getItemSize: function getItemSize(item) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var id = this.simpleArray ? index != null ? index : this.items.indexOf(item) : item[this.keyField];
      return this.vscrollData.sizes[id] || 0;
    },
    scrollToBottom: function scrollToBottom() {
      var _this = this;

      if (this.$_scrollingToBottom) return;
      this.$_scrollingToBottom = true;
      var el = this.$el; // Item is inserted to the DOM

      this.$nextTick(function () {
        el.scrollTop = el.scrollHeight + 5000; // Item sizes are computed

        var cb = function cb() {
          el.scrollTop = el.scrollHeight + 5000;
          requestAnimationFrame(function () {
            el.scrollTop = el.scrollHeight + 5000;

            if (_this.$_undefinedSizes === 0) {
              _this.$_scrollingToBottom = false;
            } else {
              requestAnimationFrame(cb);
            }
          });
        };

        requestAnimationFrame(cb);
      });
    }
  }
};

/* script */
const __vue_script__$1 = script$1;

/* template */
var __vue_render__$1 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "RecycleScroller",
    _vm._g(
      _vm._b(
        {
          ref: "scroller",
          attrs: {
            items: _vm.itemsWithSize,
            "min-item-size": _vm.minItemSize,
            direction: _vm.direction,
            "key-field": "id"
          },
          on: { resize: _vm.onScrollerResize, visible: _vm.onScrollerVisible },
          scopedSlots: _vm._u(
            [
              {
                key: "default",
                fn: function(ref) {
                  var itemWithSize = ref.item;
                  var index = ref.index;
                  var active = ref.active;
                  return [
                    _vm._t("default", null, null, {
                      item: itemWithSize.item,
                      index: index,
                      active: active,
                      itemWithSize: itemWithSize
                    })
                  ]
                }
              }
            ],
            null,
            true
          )
        },
        "RecycleScroller",
        _vm.$attrs,
        false
      ),
      _vm.listeners
    ),
    [
      _vm._v(" "),
      _c("template", { slot: "before" }, [_vm._t("before")], 2),
      _vm._v(" "),
      _c("template", { slot: "after" }, [_vm._t("after")], 2)
    ],
    2
  )
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;

  /* style */
  const __vue_inject_styles__$1 = undefined;
  /* scoped */
  const __vue_scope_id__$1 = undefined;
  /* module identifier */
  const __vue_module_identifier__$1 = undefined;
  /* functional template */
  const __vue_is_functional_template__$1 = false;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$1 = normalizeComponent(
    { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
    __vue_inject_styles__$1,
    __vue_script__$1,
    __vue_scope_id__$1,
    __vue_is_functional_template__$1,
    __vue_module_identifier__$1,
    false,
    undefined,
    undefined,
    undefined
  );

var script$2 = {
  name: 'DynamicScrollerItem',
  inject: ['vscrollData', 'vscrollParent', 'vscrollResizeObserver'],
  props: {
    // eslint-disable-next-line vue/require-prop-types
    item: {
      required: true
    },
    watchData: {
      type: Boolean,
      default: false
    },

    /**
     * Indicates if the view is actively used to display an item.
     */
    active: {
      type: Boolean,
      required: true
    },
    index: {
      type: Number,
      default: undefined
    },
    sizeDependencies: {
      type: [Array, Object],
      default: null
    },
    emitResize: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    id: function id() {
      return this.vscrollData.simpleArray ? this.index : this.item[this.vscrollData.keyField];
    },
    size: function size() {
      return this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id] || 0;
    },
    finalActive: function finalActive() {
      return this.active && this.vscrollData.active;
    }
  },
  watch: {
    watchData: 'updateWatchData',
    id: function id() {
      if (!this.size) {
        this.onDataUpdate();
      }
    },
    finalActive: function finalActive(value) {
      if (!this.size) {
        if (value) {
          if (!this.vscrollParent.$_undefinedMap[this.id]) {
            this.vscrollParent.$_undefinedSizes++;
            this.vscrollParent.$_undefinedMap[this.id] = true;
          }
        } else {
          if (this.vscrollParent.$_undefinedMap[this.id]) {
            this.vscrollParent.$_undefinedSizes--;
            this.vscrollParent.$_undefinedMap[this.id] = false;
          }
        }
      }

      if (this.vscrollResizeObserver) {
        if (value) {
          this.observeSize();
        } else {
          this.unobserveSize();
        }
      } else if (value && this.$_pendingVScrollUpdate === this.id) {
        this.updateSize();
      }
    }
  },
  created: function created() {
    var _this = this;

    if (this.$isServer) return;
    this.$_forceNextVScrollUpdate = null;
    this.updateWatchData();

    if (!this.vscrollResizeObserver) {
      var _loop = function _loop(k) {
        _this.$watch(function () {
          return _this.sizeDependencies[k];
        }, _this.onDataUpdate);
      };

      for (var k in this.sizeDependencies) {
        _loop(k);
      }

      this.vscrollParent.$on('vscroll:update', this.onVscrollUpdate);
      this.vscrollParent.$on('vscroll:update-size', this.onVscrollUpdateSize);
    }
  },
  mounted: function mounted() {
    if (this.vscrollData.active) {
      this.updateSize();
      this.observeSize();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.vscrollParent.$off('vscroll:update', this.onVscrollUpdate);
    this.vscrollParent.$off('vscroll:update-size', this.onVscrollUpdateSize);
    this.unobserveSize();
  },
  methods: {
    updateSize: function updateSize() {
      if (this.finalActive) {
        if (this.$_pendingSizeUpdate !== this.id) {
          this.$_pendingSizeUpdate = this.id;
          this.$_forceNextVScrollUpdate = null;
          this.$_pendingVScrollUpdate = null;
          this.computeSize(this.id);
        }
      } else {
        this.$_forceNextVScrollUpdate = this.id;
      }
    },
    updateWatchData: function updateWatchData() {
      var _this2 = this;

      if (this.watchData) {
        this.$_watchData = this.$watch('data', function () {
          _this2.onDataUpdate();
        }, {
          deep: true
        });
      } else if (this.$_watchData) {
        this.$_watchData();
        this.$_watchData = null;
      }
    },
    onVscrollUpdate: function onVscrollUpdate(_ref) {
      var force = _ref.force;

      // If not active, sechedule a size update when it becomes active
      if (!this.finalActive && force) {
        this.$_pendingVScrollUpdate = this.id;
      }

      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {
        this.updateSize();
      }
    },
    onDataUpdate: function onDataUpdate() {
      this.updateSize();
    },
    computeSize: function computeSize(id) {
      var _this3 = this;

      this.$nextTick(function () {
        if (_this3.id === id) {
          var width = _this3.$el.offsetWidth;
          var height = _this3.$el.offsetHeight;

          _this3.applySize(width, height);
        }

        _this3.$_pendingSizeUpdate = null;
      });
    },
    applySize: function applySize(width, height) {
      var size = Math.round(this.vscrollParent.direction === 'vertical' ? height : width);

      if (size && this.size !== size) {
        if (this.vscrollParent.$_undefinedMap[this.id]) {
          this.vscrollParent.$_undefinedSizes--;
          this.vscrollParent.$_undefinedMap[this.id] = undefined;
        }

        this.$set(this.vscrollData.sizes, this.id, size);
        this.$set(this.vscrollData.validSizes, this.id, true);
        if (this.emitResize) this.$emit('resize', this.id);
      }
    },
    observeSize: function observeSize() {
      if (!this.vscrollResizeObserver) return;
      this.vscrollResizeObserver.observe(this.$el.parentNode);
      this.$el.parentNode.addEventListener('resize', this.onResize);
    },
    unobserveSize: function unobserveSize() {
      if (!this.vscrollResizeObserver) return;
      this.vscrollResizeObserver.unobserve(this.$el.parentNode);
      this.$el.parentNode.removeEventListener('resize', this.onResize);
    },
    onResize: function onResize(event) {
      var _event$detail$content = event.detail.contentRect,
          width = _event$detail$content.width,
          height = _event$detail$content.height;
      this.applySize(width, height);
    }
  },
  render: function render(h) {
    return h(this.tag, this.$slots.default);
  }
};

/* script */
const __vue_script__$2 = script$2;

/* template */

  /* style */
  const __vue_inject_styles__$2 = undefined;
  /* scoped */
  const __vue_scope_id__$2 = undefined;
  /* module identifier */
  const __vue_module_identifier__$2 = undefined;
  /* functional template */
  const __vue_is_functional_template__$2 = undefined;
  /* style inject */
  
  /* style inject SSR */
  
  /* style inject shadow dom */
  

  
  const __vue_component__$2 = normalizeComponent(
    {},
    __vue_inject_styles__$2,
    __vue_script__$2,
    __vue_scope_id__$2,
    __vue_is_functional_template__$2,
    __vue_module_identifier__$2,
    false,
    undefined,
    undefined,
    undefined
  );

function IdState () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$idProp = _ref.idProp,
      idProp = _ref$idProp === void 0 ? function (vm) {
    return vm.item.id;
  } : _ref$idProp;

  var store = {};
  var vm = new vue__WEBPACK_IMPORTED_MODULE_3__["default"]({
    data: function data() {
      return {
        store: store
      };
    }
  }); // @vue/component

  return {
    data: function data() {
      return {
        idState: null
      };
    },
    created: function created() {
      var _this = this;

      this.$_id = null;

      if (typeof idProp === 'function') {
        this.$_getId = function () {
          return idProp.call(_this, _this);
        };
      } else {
        this.$_getId = function () {
          return _this[idProp];
        };
      }

      this.$watch(this.$_getId, {
        handler: function handler(value) {
          var _this2 = this;

          this.$nextTick(function () {
            _this2.$_id = value;
          });
        },
        immediate: true
      });
      this.$_updateIdState();
    },
    beforeUpdate: function beforeUpdate() {
      this.$_updateIdState();
    },
    methods: {
      /**
       * Initialize an idState
       * @param {number|string} id Unique id for the data
       */
      $_idStateInit: function $_idStateInit(id) {
        var factory = this.$options.idState;

        if (typeof factory === 'function') {
          var data = factory.call(this, this);
          vm.$set(store, id, data);
          this.$_id = id;
          return data;
        } else {
          throw new Error('[mixin IdState] Missing `idState` function on component definition.');
        }
      },

      /**
       * Ensure idState is created and up-to-date
       */
      $_updateIdState: function $_updateIdState() {
        var id = this.$_getId();

        if (id == null) {
          console.warn("No id found for IdState with idProp: '".concat(idProp, "'."));
        }

        if (id !== this.$_id) {
          if (!store[id]) {
            this.$_idStateInit(id);
          }

          this.idState = store[id];
        }
      }
    }
  };
}

function registerComponents(Vue, prefix) {
  Vue.component("".concat(prefix, "recycle-scroller"), __vue_component__);
  Vue.component("".concat(prefix, "RecycleScroller"), __vue_component__);
  Vue.component("".concat(prefix, "dynamic-scroller"), __vue_component__$1);
  Vue.component("".concat(prefix, "DynamicScroller"), __vue_component__$1);
  Vue.component("".concat(prefix, "dynamic-scroller-item"), __vue_component__$2);
  Vue.component("".concat(prefix, "DynamicScrollerItem"), __vue_component__$2);
}

var plugin = {
  // eslint-disable-next-line no-undef
  version: "1.0.10",
  install: function install(Vue, options) {
    var finalOptions = Object.assign({}, {
      installComponents: true,
      componentsPrefix: ''
    }, options);

    for (var key in finalOptions) {
      if (typeof finalOptions[key] !== 'undefined') {
        config[key] = finalOptions[key];
      }
    }

    if (finalOptions.installComponents) {
      registerComponents(Vue, finalOptions.componentsPrefix);
    }
  }
};

var GlobalVue = null;

if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}

if (GlobalVue) {
  GlobalVue.use(plugin);
}

/* harmony default export */ __webpack_exports__["a"] = (plugin);

//# sourceMappingURL=vue-virtual-scroller.esm.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "e5cb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__("d066");
var hasOwn = __webpack_require__("1a2d");
var createNonEnumerableProperty = __webpack_require__("9112");
var isPrototypeOf = __webpack_require__("3a9b");
var setPrototypeOf = __webpack_require__("d2bb");
var copyConstructorProperties = __webpack_require__("e893");
var proxyAccessor = __webpack_require__("aeb0");
var inheritIfRequired = __webpack_require__("7156");
var normalizeStringArgument = __webpack_require__("e391");
var installErrorCause = __webpack_require__("ab36");
var clearErrorStack = __webpack_require__("c770");
var ERROR_STACK_INSTALLABLE = __webpack_require__("b980");
var DESCRIPTORS = __webpack_require__("83ab");
var IS_PURE = __webpack_require__("c430");

module.exports = function (FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
  var STACK_TRACE_LIMIT = 'stackTraceLimit';
  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
  var path = FULL_NAME.split('.');
  var ERROR_NAME = path[path.length - 1];
  var OriginalError = getBuiltIn.apply(null, path);

  if (!OriginalError) return;

  var OriginalErrorPrototype = OriginalError.prototype;

  // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006
  if (!IS_PURE && hasOwn(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;

  if (!FORCED) return OriginalError;

  var BaseError = getBuiltIn('Error');

  var WrappedError = wrapper(function (a, b) {
    var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
    if (message !== undefined) createNonEnumerableProperty(result, 'message', message);
    if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(result, 'stack', clearErrorStack(result.stack, 2));
    if (this && isPrototypeOf(OriginalErrorPrototype, this)) inheritIfRequired(result, this, WrappedError);
    if (arguments.length > OPTIONS_POSITION) installErrorCause(result, arguments[OPTIONS_POSITION]);
    return result;
  });

  WrappedError.prototype = OriginalErrorPrototype;

  if (ERROR_NAME !== 'Error') {
    if (setPrototypeOf) setPrototypeOf(WrappedError, BaseError);
    else copyConstructorProperties(WrappedError, BaseError, { name: true });
  } else if (DESCRIPTORS && STACK_TRACE_LIMIT in OriginalError) {
    proxyAccessor(WrappedError, OriginalError, STACK_TRACE_LIMIT);
    proxyAccessor(WrappedError, OriginalError, 'prepareStackTrace');
  }

  copyConstructorProperties(WrappedError, OriginalError);

  if (!IS_PURE) try {
    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
    if (OriginalErrorPrototype.name !== ERROR_NAME) {
      createNonEnumerableProperty(OriginalErrorPrototype, 'name', ERROR_NAME);
    }
    OriginalErrorPrototype.constructor = WrappedError;
  } catch (error) { /* empty */ }

  return WrappedError;
};


/***/ }),

/***/ "e683":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "e685":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventTimeline = EventTimeline;

var _roomState = __webpack_require__("420b");
/*
Copyright 2016, 2017 OpenMarket Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module models/event-timeline
 */

/**
 * Construct a new EventTimeline
 *
 * <p>An EventTimeline represents a contiguous sequence of events in a room.
 *
 * <p>As well as keeping track of the events themselves, it stores the state of
 * the room at the beginning and end of the timeline, and pagination tokens for
 * going backwards and forwards in the timeline.
 *
 * <p>In order that clients can meaningfully maintain an index into a timeline,
 * the EventTimeline object tracks a 'baseIndex'. This starts at zero, but is
 * incremented when events are prepended to the timeline. The index of an event
 * relative to baseIndex therefore remains constant.
 *
 * <p>Once a timeline joins up with its neighbour, they are linked together into a
 * doubly-linked list.
 *
 * @param {EventTimelineSet} eventTimelineSet the set of timelines this is part of
 * @constructor
 */


function EventTimeline(eventTimelineSet) {
  this._eventTimelineSet = eventTimelineSet;
  this._roomId = eventTimelineSet.room ? eventTimelineSet.room.roomId : null;
  this._events = [];
  this._baseIndex = 0;
  this._startState = new _roomState.RoomState(this._roomId);
  this._startState.paginationToken = null;
  this._endState = new _roomState.RoomState(this._roomId);
  this._endState.paginationToken = null;
  this._prevTimeline = null;
  this._nextTimeline = null; // this is used by client.js

  this._paginationRequests = {
    'b': null,
    'f': null
  };
  this._name = this._roomId + ":" + new Date().toISOString();
}
/**
 * Symbolic constant for methods which take a 'direction' argument:
 * refers to the start of the timeline, or backwards in time.
 */


EventTimeline.BACKWARDS = "b";
/**
 * Symbolic constant for methods which take a 'direction' argument:
 * refers to the end of the timeline, or forwards in time.
 */

EventTimeline.FORWARDS = "f";
/**
 * Initialise the start and end state with the given events
 *
 * <p>This can only be called before any events are added.
 *
 * @param {MatrixEvent[]} stateEvents list of state events to initialise the
 * state with.
 * @throws {Error} if an attempt is made to call this after addEvent is called.
 */

EventTimeline.prototype.initialiseState = function (stateEvents) {
  if (this._events.length > 0) {
    throw new Error("Cannot initialise state after events are added");
  } // We previously deep copied events here and used different copies in
  // the oldState and state events: this decision seems to date back
  // quite a way and was apparently made to fix a bug where modifications
  // made to the start state leaked through to the end state.
  // This really shouldn't be possible though: the events themselves should
  // not change. Duplicating the events uses a lot of extra memory,
  // so we now no longer do it. To assert that they really do never change,
  // freeze them! Note that we can't do this for events in general:
  // although it looks like the only things preventing us are the
  // 'status' flag, forwardLooking (which is only set once when adding to the
  // timeline) and possibly the sender (which seems like it should never be
  // reset but in practice causes a lot of the tests to break).


  for (const e of stateEvents) {
    Object.freeze(e);
  }

  this._startState.setStateEvents(stateEvents);

  this._endState.setStateEvents(stateEvents);
};
/**
 * Forks the (live) timeline, taking ownership of the existing directional state of this timeline.
 * All attached listeners will keep receiving state updates from the new live timeline state.
 * The end state of this timeline gets replaced with an independent copy of the current RoomState,
 * and will need a new pagination token if it ever needs to paginate forwards.

 * @param {string} direction   EventTimeline.BACKWARDS to get the state at the
 *   start of the timeline; EventTimeline.FORWARDS to get the state at the end
 *   of the timeline.
 *
 * @return {EventTimeline} the new timeline
 */


EventTimeline.prototype.forkLive = function (direction) {
  const forkState = this.getState(direction);
  const timeline = new EventTimeline(this._eventTimelineSet);
  timeline._startState = forkState.clone(); // Now clobber the end state of the new live timeline with that from the
  // previous live timeline. It will be identical except that we'll keep
  // using the same RoomMember objects for the 'live' set of members with any
  // listeners still attached

  timeline._endState = forkState; // Firstly, we just stole the current timeline's end state, so it needs a new one.
  // Make an immutable copy of the state so back pagination will get the correct sentinels.

  this._endState = forkState.clone();
  return timeline;
};
/**
 * Creates an independent timeline, inheriting the directional state from this timeline.
 *
 * @param {string} direction   EventTimeline.BACKWARDS to get the state at the
 *   start of the timeline; EventTimeline.FORWARDS to get the state at the end
 *   of the timeline.
 *
 * @return {EventTimeline} the new timeline
 */


EventTimeline.prototype.fork = function (direction) {
  const forkState = this.getState(direction);
  const timeline = new EventTimeline(this._eventTimelineSet);
  timeline._startState = forkState.clone();
  timeline._endState = forkState.clone();
  return timeline;
};
/**
 * Get the ID of the room for this timeline
 * @return {string} room ID
 */


EventTimeline.prototype.getRoomId = function () {
  return this._roomId;
};
/**
 * Get the filter for this timeline's timelineSet (if any)
 * @return {Filter} filter
 */


EventTimeline.prototype.getFilter = function () {
  return this._eventTimelineSet.getFilter();
};
/**
 * Get the timelineSet for this timeline
 * @return {EventTimelineSet} timelineSet
 */


EventTimeline.prototype.getTimelineSet = function () {
  return this._eventTimelineSet;
};
/**
 * Get the base index.
 *
 * <p>This is an index which is incremented when events are prepended to the
 * timeline. An individual event therefore stays at the same index in the array
 * relative to the base index (although note that a given event's index may
 * well be less than the base index, thus giving that event a negative relative
 * index).
 *
 * @return {number}
 */


EventTimeline.prototype.getBaseIndex = function () {
  return this._baseIndex;
};
/**
 * Get the list of events in this context
 *
 * @return {MatrixEvent[]} An array of MatrixEvents
 */


EventTimeline.prototype.getEvents = function () {
  return this._events;
};
/**
 * Get the room state at the start/end of the timeline
 *
 * @param {string} direction   EventTimeline.BACKWARDS to get the state at the
 *   start of the timeline; EventTimeline.FORWARDS to get the state at the end
 *   of the timeline.
 *
 * @return {RoomState} state at the start/end of the timeline
 */


EventTimeline.prototype.getState = function (direction) {
  if (direction == EventTimeline.BACKWARDS) {
    return this._startState;
  } else if (direction == EventTimeline.FORWARDS) {
    return this._endState;
  } else {
    throw new Error("Invalid direction '" + direction + "'");
  }
};
/**
 * Get a pagination token
 *
 * @param {string} direction   EventTimeline.BACKWARDS to get the pagination
 *   token for going backwards in time; EventTimeline.FORWARDS to get the
 *   pagination token for going forwards in time.
 *
 * @return {?string} pagination token
 */


EventTimeline.prototype.getPaginationToken = function (direction) {
  return this.getState(direction).paginationToken;
};
/**
 * Set a pagination token
 *
 * @param {?string} token       pagination token
 *
 * @param {string} direction    EventTimeline.BACKWARDS to set the pagination
 *   token for going backwards in time; EventTimeline.FORWARDS to set the
 *   pagination token for going forwards in time.
 */


EventTimeline.prototype.setPaginationToken = function (token, direction) {
  this.getState(direction).paginationToken = token;
};
/**
 * Get the next timeline in the series
 *
 * @param {string} direction EventTimeline.BACKWARDS to get the previous
 *   timeline; EventTimeline.FORWARDS to get the next timeline.
 *
 * @return {?EventTimeline} previous or following timeline, if they have been
 * joined up.
 */


EventTimeline.prototype.getNeighbouringTimeline = function (direction) {
  if (direction == EventTimeline.BACKWARDS) {
    return this._prevTimeline;
  } else if (direction == EventTimeline.FORWARDS) {
    return this._nextTimeline;
  } else {
    throw new Error("Invalid direction '" + direction + "'");
  }
};
/**
 * Set the next timeline in the series
 *
 * @param {EventTimeline} neighbour previous/following timeline
 *
 * @param {string} direction EventTimeline.BACKWARDS to set the previous
 *   timeline; EventTimeline.FORWARDS to set the next timeline.
 *
 * @throws {Error} if an attempt is made to set the neighbouring timeline when
 * it is already set.
 */


EventTimeline.prototype.setNeighbouringTimeline = function (neighbour, direction) {
  if (this.getNeighbouringTimeline(direction)) {
    throw new Error("timeline already has a neighbouring timeline - " + "cannot reset neighbour (direction: " + direction + ")");
  }

  if (direction == EventTimeline.BACKWARDS) {
    this._prevTimeline = neighbour;
  } else if (direction == EventTimeline.FORWARDS) {
    this._nextTimeline = neighbour;
  } else {
    throw new Error("Invalid direction '" + direction + "'");
  } // make sure we don't try to paginate this timeline


  this.setPaginationToken(null, direction);
};
/**
 * Add a new event to the timeline, and update the state
 *
 * @param {MatrixEvent} event   new event
 * @param {boolean}  atStart     true to insert new event at the start
 */


EventTimeline.prototype.addEvent = function (event, atStart) {
  const stateContext = atStart ? this._startState : this._endState; // only call setEventMetadata on the unfiltered timelineSets

  const timelineSet = this.getTimelineSet();

  if (timelineSet.room && timelineSet.room.getUnfilteredTimelineSet() === timelineSet) {
    EventTimeline.setEventMetadata(event, stateContext, atStart); // modify state

    if (event.isState()) {
      stateContext.setStateEvents([event]); // it is possible that the act of setting the state event means we
      // can set more metadata (specifically sender/target props), so try
      // it again if the prop wasn't previously set. It may also mean that
      // the sender/target is updated (if the event set was a room member event)
      // so we want to use the *updated* member (new avatar/name) instead.
      //
      // However, we do NOT want to do this on member events if we're going
      // back in time, else we'll set the .sender value for BEFORE the given
      // member event, whereas we want to set the .sender value for the ACTUAL
      // member event itself.

      if (!event.sender || event.getType() === "m.room.member" && !atStart) {
        EventTimeline.setEventMetadata(event, stateContext, atStart);
      }
    }
  }

  let insertIndex;

  if (atStart) {
    insertIndex = 0;
  } else {
    insertIndex = this._events.length;
  }

  this._events.splice(insertIndex, 0, event); // insert element


  if (atStart) {
    this._baseIndex++;
  }
};
/**
 * Static helper method to set sender and target properties
 *
 * @param {MatrixEvent} event   the event whose metadata is to be set
 * @param {RoomState} stateContext  the room state to be queried
 * @param {bool} toStartOfTimeline  if true the event's forwardLooking flag is set false
 */


EventTimeline.setEventMetadata = function (event, stateContext, toStartOfTimeline) {
  // set sender and target properties
  event.sender = stateContext.getSentinelMember(event.getSender());

  if (event.getType() === "m.room.member") {
    event.target = stateContext.getSentinelMember(event.getStateKey());
  }

  if (event.isState()) {
    // room state has no concept of 'old' or 'current', but we want the
    // room state to regress back to previous values if toStartOfTimeline
    // is set, which means inspecting prev_content if it exists. This
    // is done by toggling the forwardLooking flag.
    if (toStartOfTimeline) {
      event.forwardLooking = false;
    }
  }
};
/**
 * Remove an event from the timeline
 *
 * @param {string} eventId  ID of event to be removed
 * @return {?MatrixEvent} removed event, or null if not found
 */


EventTimeline.prototype.removeEvent = function (eventId) {
  for (let i = this._events.length - 1; i >= 0; i--) {
    const ev = this._events[i];

    if (ev.getId() == eventId) {
      this._events.splice(i, 1);

      if (i < this._baseIndex) {
        this._baseIndex--;
      }

      return ev;
    }
  }

  return null;
};
/**
 * Return a string to identify this timeline, for debugging
 *
 * @return {string} name for this timeline
 */


EventTimeline.prototype.toString = function () {
  return this._name;
};

/***/ }),

/***/ "e6a5":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".m-message-container{position:fixed;z-index:1010;pointer-events:none;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-sizing:border-box;box-sizing:border-box;padding:15px}.m-message-container.is-top-center,.m-message-container.is-top-left,.m-message-container.is-top-right{width:100%;top:0;left:0}.m-message-container.is-top-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-top-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-top-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.is-center{width:100%;height:100%;left:0;top:0;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.m-message-container.is-bottom-center,.m-message-container.is-bottom-left,.m-message-container.is-bottom-right{bottom:0;left:0;width:100%;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}.m-message-container.is-bottom-left{-webkit-box-align:start;-ms-flex-align:start;align-items:flex-start}.m-message-container.is-bottom-center{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.m-message-container.is-bottom-right{-webkit-box-align:end;-ms-flex-align:end;align-items:flex-end}.m-message-container.has-mask{background-color:hsla(0,0%,100%,.5);width:100%;height:100%;pointer-events:all}.m-message-wrapper{display:inline-block;max-width:500px}.m-message-wrapper+.m-message-wrapper{margin-top:15px}.m-message-wrapper:after,.m-message-wrapper:before{content:\"\";clear:both;display:table}.m-message{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:10px 16px;font-size:14px;overflow:hidden;border-radius:4px;-webkit-box-shadow:0 1px 8px rgba(0,0,0,.15);box-shadow:0 1px 8px rgba(0,0,0,.15);color:rgba(0,0,0,.65);background:hsla(0,0%,100%,.95);pointer-events:all;position:relative}.m-message,.m-message-icons{-webkit-box-sizing:border-box;box-sizing:border-box}.m-message-icons{float:left;margin-right:10px}.m-message--title{font-size:14px;font-weight:600;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.m-message-content{-webkit-box-sizing:border-box;box-sizing:border-box;overflow:auto;width:100%}.m-message--description{line-height:1.6;color:#777}.m-message--title+.m-message--description{margin-top:5px}.m-message--icon{width:25px;height:25px;vertical-align:middle;display:inline-block;border-radius:50%}.m-message--control{position:relative;height:100%;-ms-flex-item-align:start;align-self:flex-start;white-space:nowrap;margin-right:-5px;margin-left:10px}.m-message--button{border:none;outline:none;background:none;cursor:pointer;font-size:15px;color:#646464;font-weight:600;padding:0;width:20px;height:20px;line-height:20px;text-align:center;vertical-align:middle}.m-message--button:hover{color:#f56c6c}.m-message--arrow-down.is-collapsed{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.m-message-fade-enter-active{-webkit-animation:m-message-fade-in-down .3s;animation:m-message-fade-in-down .3s}.m-message-fade-leave-active{-webkit-animation:m-message-fade-out .3s;animation:m-message-fade-out .3s}@-webkit-keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes m-message-fade-in-down{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}to{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}@keyframes m-message-fade-out{0%{opacity:1;margin-top:0}to{opacity:0;margin-top:-45px}}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "e71b":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("ac2a");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("57787042", content, shadowRoot)
};

/***/ }),

/***/ "e7aa":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("d2d9");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("072cea7e", content, shadowRoot)
};

/***/ }),

/***/ "e7e1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016-2017 Dmitry Chestnykh, Tony Arcieri
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
const wipe_1 = __webpack_require__("ffd9");
// Powers of x mod poly in GF(2).
const POWX = new Uint8Array([
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
    0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f,
]);
// FIPS-197 Figure 7. S-box substitution values in hexadecimal format.
const SBOX0 = new Uint8Array([
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
]);
// FIPS-197 Figure 14.  Inverse S-box substitution values in hexadecimal format.
const SBOX1 = new Uint8Array([
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
]);
// Encryption and decryption tables.
// Will be computed by initialize() when the first AES instance is created.
let isInitialized = false;
let Te0;
let Te1;
let Te2;
let Te3;
let Td0;
let Td1;
let Td2;
let Td3;
/**
 * Polyfill for the AES block cipher.
 *
 * This implementation uses lookup tables, so it's susceptible to cache-timing
 * side-channel attacks. A constant-time version we tried was super slow (a few
 * kilobytes per second), so we'll have to live with it.
 *
 * Key size: 16 or 32 bytes, block size: 16 bytes.
 */
class PolyfillAes {
    /**
     * Constructs AES with the given 16 or 32-byte key
     * for AES-128 or AES-256.
     */
    constructor(keyData) {
        if (!isInitialized) {
            initialize();
        }
        // Only AES-128 and AES-256 supported. AES-192 is not.
        if (keyData.length !== 16 && keyData.length !== 32) {
            throw new Error(`Miscreant: invalid key length: ${keyData.length} (expected 16 or 32 bytes)`);
        }
        this._encKey = expandKey(keyData);
        this._emptyPromise = Promise.resolve(this);
    }
    /**
     * Cleans expanded keys from memory, setting them to zeros.
     */
    clear() {
        if (this._encKey) {
            wipe_1.wipe(this._encKey);
        }
        return this;
    }
    /**
     * Encrypt 16-byte block in-place, replacing its contents with ciphertext.
     *
     * This function should not be used to encrypt data without any
     * cipher mode! It should only be used to implement a cipher mode.
     * This library uses it to implement AES-SIV.
     */
    encryptBlock(block) {
        const src = block.data;
        const dst = block.data;
        let s0 = readUint32BE(src, 0);
        let s1 = readUint32BE(src, 4);
        let s2 = readUint32BE(src, 8);
        let s3 = readUint32BE(src, 12);
        // First round just XORs input with key.
        s0 ^= this._encKey[0];
        s1 ^= this._encKey[1];
        s2 ^= this._encKey[2];
        s3 ^= this._encKey[3];
        let t0 = 0;
        let t1 = 0;
        let t2 = 0;
        let t3 = 0;
        // Middle rounds shuffle using tables.
        // Number of rounds is set by length of expanded key.
        const nr = this._encKey.length / 4 - 2; // - 2: one above, one more below
        let k = 4;
        for (let r = 0; r < nr; r++) {
            t0 = this._encKey[k + 0] ^ Te0[(s0 >>> 24) & 0xff] ^ Te1[(s1 >>> 16) & 0xff] ^
                Te2[(s2 >>> 8) & 0xff] ^ Te3[s3 & 0xff];
            t1 = this._encKey[k + 1] ^ Te0[(s1 >>> 24) & 0xff] ^ Te1[(s2 >>> 16) & 0xff] ^
                Te2[(s3 >>> 8) & 0xff] ^ Te3[s0 & 0xff];
            t2 = this._encKey[k + 2] ^ Te0[(s2 >>> 24) & 0xff] ^ Te1[(s3 >>> 16) & 0xff] ^
                Te2[(s0 >>> 8) & 0xff] ^ Te3[s1 & 0xff];
            t3 = this._encKey[k + 3] ^ Te0[(s3 >>> 24) & 0xff] ^ Te1[(s0 >>> 16) & 0xff] ^
                Te2[(s1 >>> 8) & 0xff] ^ Te3[s2 & 0xff];
            k += 4;
            s0 = t0;
            s1 = t1;
            s2 = t2;
            s3 = t3;
        }
        // Last round uses s-box directly and XORs to produce output.
        s0 = (SBOX0[t0 >>> 24] << 24) | (SBOX0[(t1 >>> 16) & 0xff]) << 16 |
            (SBOX0[(t2 >>> 8) & 0xff]) << 8 | (SBOX0[t3 & 0xff]);
        s1 = (SBOX0[t1 >>> 24] << 24) | (SBOX0[(t2 >>> 16) & 0xff]) << 16 |
            (SBOX0[(t3 >>> 8) & 0xff]) << 8 | (SBOX0[t0 & 0xff]);
        s2 = (SBOX0[t2 >>> 24] << 24) | (SBOX0[(t3 >>> 16) & 0xff]) << 16 |
            (SBOX0[(t0 >>> 8) & 0xff]) << 8 | (SBOX0[t1 & 0xff]);
        s3 = (SBOX0[t3 >>> 24] << 24) | (SBOX0[(t0 >>> 16) & 0xff]) << 16 |
            (SBOX0[(t1 >>> 8) & 0xff]) << 8 | (SBOX0[t2 & 0xff]);
        s0 ^= this._encKey[k + 0];
        s1 ^= this._encKey[k + 1];
        s2 ^= this._encKey[k + 2];
        s3 ^= this._encKey[k + 3];
        writeUint32BE(s0, dst, 0);
        writeUint32BE(s1, dst, 4);
        writeUint32BE(s2, dst, 8);
        writeUint32BE(s3, dst, 12);
        return this._emptyPromise;
    }
}
exports.default = PolyfillAes;
// Initialize generates encryption and decryption tables.
function initialize() {
    const poly = (1 << 8) | (1 << 4) | (1 << 3) | (1 << 1) | (1 << 0);
    function mul(b, c) {
        let i = b;
        let j = c;
        let s = 0;
        for (let k = 1; k < 0x100 && j !== 0; k <<= 1) {
            // Invariant: k == 1<<n, i == b * x^n
            if ((j & k) !== 0) {
                // s += i in GF(2); xor in binary
                s ^= i;
                j ^= k; // turn off bit to end loop early
            }
            // i *= x in GF(2) modulo the polynomial
            i <<= 1;
            if ((i & 0x100) !== 0) {
                i ^= poly;
            }
        }
        return s;
    }
    const rot = (x) => (x << 24) | (x >>> 8);
    // Generate encryption tables.
    Te0 = new Uint32Array(256);
    Te1 = new Uint32Array(256);
    Te2 = new Uint32Array(256);
    Te3 = new Uint32Array(256);
    for (let i = 0; i < 256; i++) {
        const s = SBOX0[i];
        let w = (mul(s, 2) << 24) | (s << 16) | (s << 8) | mul(s, 3);
        Te0[i] = w;
        w = rot(w);
        Te1[i] = w;
        w = rot(w);
        Te2[i] = w;
        w = rot(w);
        Te3[i] = w;
        w = rot(w);
    }
    // Generate decryption tables.
    Td0 = new Uint32Array(256);
    Td1 = new Uint32Array(256);
    Td2 = new Uint32Array(256);
    Td3 = new Uint32Array(256);
    for (let i = 0; i < 256; i++) {
        const s = SBOX1[i];
        let w = (mul(s, 0xe) << 24) | (mul(s, 0x9) << 16) |
            (mul(s, 0xd) << 8) | mul(s, 0xb);
        Td0[i] = w;
        w = rot(w);
        Td1[i] = w;
        w = rot(w);
        Td2[i] = w;
        w = rot(w);
        Td3[i] = w;
        w = rot(w);
    }
    isInitialized = true;
}
// Reads 4 bytes from array starting at offset as big-endian
// unsigned 32-bit integer and returns it.
function readUint32BE(array, offset = 0) {
    return ((array[offset] << 24) |
        (array[offset + 1] << 16) |
        (array[offset + 2] << 8) |
        array[offset + 3]) >>> 0;
}
// Writes 4-byte big-endian representation of 32-bit unsigned
// value to byte array starting at offset.
//
// If byte array is not given, creates a new 4-byte one.
//
// Returns the output byte array.
function writeUint32BE(value, out = new Uint8Array(4), offset = 0) {
    out[offset + 0] = value >>> 24;
    out[offset + 1] = value >>> 16;
    out[offset + 2] = value >>> 8;
    out[offset + 3] = value >>> 0;
    return out;
}
// Apply sbox0 to each byte in w.
function subw(w) {
    return ((SBOX0[(w >>> 24) & 0xff]) << 24) |
        ((SBOX0[(w >>> 16) & 0xff]) << 16) |
        ((SBOX0[(w >>> 8) & 0xff]) << 8) |
        (SBOX0[w & 0xff]);
}
// Rotate
function rotw(w) {
    return (w << 8) | (w >>> 24);
}
function expandKey(key) {
    const encKey = new Uint32Array(key.length + 28);
    const nk = key.length / 4 | 0;
    const n = encKey.length;
    for (let i = 0; i < nk; i++) {
        encKey[i] = readUint32BE(key, i * 4);
    }
    for (let i = nk; i < n; i++) {
        let t = encKey[i - 1];
        if (i % nk === 0) {
            t = subw(rotw(t)) ^ (POWX[i / nk - 1] << 24);
        }
        else if (nk > 6 && i % nk === 4) {
            t = subw(t);
        }
        encKey[i] = encKey[i - nk] ^ t;
    }
    return encKey;
}


/***/ }),

/***/ "e7f6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ade3");
/* harmony import */ var _user_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("4f5a");
/* harmony import */ var _functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("3139");


/*require("@/application/vendors/btc.js")*/



class PNUser extends _user_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
  constructor() {
    super(...arguments);

    Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(this, "matrixCredentials", function () {
      var password = bitcoin.crypto.sha256(bitcoin.crypto.sha256(Buffer.from(this.credentials.privateKey))).toString('hex');
      return Promise.resolve({
        address: this.credentials.address,
        password: password,
        type: "m.login.password",
        user: this.credentials.address,
        sessionId: "",
        username: this.credentials.address.toLowerCase()
      });
    });

    Object(C_inetpub2020_wwwroot_bastyon_chat_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(this, "path33", function (n) {
      return "m/33'/0'/0'/" + n + "'";
    });
  }

  initKeysProcess() {
    return this.initKeys().catch(update => {
      if (!update || !_.isNumber(update)) {
        return Promise.reject(update);
      }

      return new Promise((resolve, reject) => {
        if (this.keysupdatetimeout) clearTimeout(this.keysupdatetimeout);
        this.keysupdatetimeout = setTimeout(function () {
          initKeysProcess().then(resolve).catch(reject);
        }, update);
      });
    });
  }

  initKeys() {
    if (!this.state) return Promise.reject();

    if (this.userinfo.name && !this.userinfo.deleted && (!this.userinfo.keys || !this.userinfo.keys.length)) {
      if (window.POCKETNETINSTANCE) {
        window.POCKETNETINSTANCE.platform.sdk.keys.init().then(r => {
          if (r == 'exist') {
            return Promise.reject(60000);
          }

          if (r == 'processing') {
            return Promise.reject(60000);
          }

          return Promise.reject(r);
        }).catch(e => {
          //// say pocketnet to manual update
          return Promise.reject();
        });
      }

      return Promise.reject();
    }

    return Promise.resolve();
  }

  generateKeysLS(key, address) {
    var lsstorage = {};

    try {
      lsstorage = JSON.parse(localStorage['wifkeya'] || '{}');
    } catch (e) {}

    if (lsstorage.address != address) lsstorage = {};
    lsstorage.address = address;
    lsstorage.storage || (lsstorage.storage = []);
    var {
      ckeys
    } = this.generateKeys(key, lsstorage.storage);
    localStorage['wifkeya'] = JSON.stringify(lsstorage);
    return ckeys;
  }

  generateKeys(key, storage) {
    var ckeys = [];
    if (!storage) storage = [];

    if (key) {
      for (var i = 1; i < 13; i++) {
        var d = storage[i - 1] || bitcoin.bip32.fromSeed(key).derivePath(this.path33(i)).toWIF();
        storage[i - 1] = d;
        var keyPair = bitcoin.ECPair.fromWIF(d);
        ckeys.push({
          pair: keyPair,
          public: keyPair.publicKey.toString('hex'),
          private: keyPair.privateKey
        });
      }
    }

    return {
      ckeys,
      storage
    };
  }

  generateprivate() {}

  checkCredentials() {
    if (!this.credentials) {
      return Promise.reject('unauthorized');
    }

    var decodedAddress = _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].hexDecode(this.credentials.address);

    try {
      var key = Buffer.from(this.credentials.privateKey, 'hex');
      /*let keyPair = bitcoin.ECPair.fromPrivateKey(key)
        let address = bitcoin.payments['p2pkh']({ pubkey: keyPair.publicKey }).address
        if (address != decodedAddress){
          this.credentials.address = f.hexEncode(address)
      }*/

      setTimeout(() => {
        this.private = this.generateKeysLS(key, decodedAddress);
      }, 1000);
    } catch (e) {
      this.state = 0;
      return Promise.reject('unauthorized');
    }

    return this.core.api.pocketnet.userStateMe(decodedAddress).then(r => {
      //return Promise.reject('unknown')
      this.state = 1;
      return Promise.resolve(this.state);
    }).catch(e => {
      //this.state = 1
      return Promise.reject('unknown');
    });
  }

  convertUser(info) {
    return {
      image: info.i || '',
      name: info.name ? decodeURI(info.name) : '',
      id: _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].hexEncode(info.address),
      source: info,
      keys: _.filter((info.k || "").split(','), function (f) {
        return f;
      }),
      deleted: info.deleted,
      nocache: info.nocache || false
    };
  }

  searchContacts(text) {
    let core = this.core;
    return this.core.api.pocketnet.search(text).then(infos => {
      infos = _.map(infos, info => {
        info.nocache = true;
        return this.convertUser(info);
      });
      this.setUsersInfo(infos);
      return Promise.resolve(infos);
    });
  }

  userInfo(reload) {
    return this.usersInfo(this.credentials.address, false, reload).then(info => {
      this.userinfo = info[0]; //this.userinfo.deleted = true

      return Promise.resolve(info[0]);
    });
  }

  usersInfo(addresses, dontdecode, reload) {
    if (!_.isArray(addresses)) addresses = [addresses];
    if (!dontdecode) addresses = _.map(addresses, function (a) {
      return _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].hexDecode(a);
    });
    return this.core.api.pocketnet.userInfoCached(addresses, reload).then(infos => {
      infos = _.map(infos, info => {
        return this.convertUser(info);
      });
      this.setUsersInfo(infos, reload);
      return Promise.resolve(infos);
    });
  }

  signature(str, exp) {
    if (!str) str = 'pocketnetproxy';
    if (!exp) exp = 360;

    try {
      var keyPair = bitcoin.ECPair.fromPrivateKey(Buffer.from(this.credentials.privateKey, 'hex'));
      const currentMomentInUTC = new Date().toISOString();
      var nonce = 'date=' + currentMomentInUTC + ",exp=" + exp + ',s=' + _functions_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].hexEncode(str);
      var signature = keyPair.sign(bitcoin.crypto.sha256(Buffer.from(nonce)));
      var sobj = {
        nonce: nonce,
        signature: signature.toString('hex'),
        pubkey: keyPair.publicKey.toString('hex'),
        address: this.credentials.address,
        v: 1
      };
    } catch (e) {
      return null;
    }

    return sobj;
  }

  getContacts() {
    if (this.state) {
      return Promise.resolve([]);
      return this.userInfo().then(info => {
        var addresses = _.map(info.source.subscribes, s => {
          return s.adddress;
        });

        return this.usersInfo(addresses, true);
      }).then(c => {
        super.setContacts(c);
        return Promise.resolve(c);
      });
    }

    return Promise.reject('unauthorized');
  }

}

/* harmony default export */ __webpack_exports__["a"] = (PNUser);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("b639").Buffer))

/***/ }),

/***/ "e86a":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0438bc11_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6a45");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0438bc11_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0438bc11_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0438bc11_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_9_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_9_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_9_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_9_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_0438bc11_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "e893":
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__("1a2d");
var ownKeys = __webpack_require__("56ef");
var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
var definePropertyModule = __webpack_require__("9bf2");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "e8d4":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_f0734632_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("9a55");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_f0734632_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_f0734632_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_f0734632_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_f0734632_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "eb25":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebStorageSessionStore = WebStorageSessionStore;

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _logger = __webpack_require__("63c7");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module store/session/webstorage
 */


const DEBUG = false; // set true to enable console logging.

const E2E_PREFIX = "session.e2e.";
/**
 * Construct a web storage session store, capable of storing account keys,
 * session keys and access tokens.
 * @constructor
 * @param {WebStorage} webStore A web storage implementation, e.g.
 * 'window.localStorage' or 'window.sessionStorage' or a custom implementation.
 * @throws if the supplied 'store' does not meet the Storage interface of the
 * WebStorage API.
 */

function WebStorageSessionStore(webStore) {
  this.store = webStore;

  if (!utils.isFunction(webStore.getItem) || !utils.isFunction(webStore.setItem) || !utils.isFunction(webStore.removeItem) || !utils.isFunction(webStore.key) || typeof webStore.length !== 'number') {
    throw new Error("Supplied webStore does not meet the WebStorage API interface");
  }
}

WebStorageSessionStore.prototype = {
  /**
   * Remove the stored end to end account for the logged-in user.
   */
  removeEndToEndAccount: function () {
    this.store.removeItem(KEY_END_TO_END_ACCOUNT);
  },

  /**
   * Load the end to end account for the logged-in user.
   * Note that the end-to-end account is now stored in the
   * crypto store rather than here: this remains here so
   * old sessions can be migrated out of the session store.
   * @return {?string} Base64 encoded account.
   */
  getEndToEndAccount: function () {
    return this.store.getItem(KEY_END_TO_END_ACCOUNT);
  },

  /**
   * Retrieves the known devices for all users.
   * @return {object} A map from user ID to map of device ID to keys for the device.
   */
  getAllEndToEndDevices: function () {
    const prefix = keyEndToEndDevicesForUser('');
    const devices = {};

    for (let i = 0; i < this.store.length; ++i) {
      const key = this.store.key(i);
      const userId = key.substr(prefix.length);
      if (key.startsWith(prefix)) devices[userId] = getJsonItem(this.store, key);
    }

    return devices;
  },
  getEndToEndDeviceTrackingStatus: function () {
    return getJsonItem(this.store, KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS);
  },

  /**
   * Get the sync token corresponding to the device list.
   *
   * @return {String?} token
   */
  getEndToEndDeviceSyncToken: function () {
    return getJsonItem(this.store, KEY_END_TO_END_DEVICE_SYNC_TOKEN);
  },

  /**
   * Removes all end to end device data from the store
   */
  removeEndToEndDeviceData: function () {
    removeByPrefix(this.store, keyEndToEndDevicesForUser(''));
    removeByPrefix(this.store, KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS);
    removeByPrefix(this.store, KEY_END_TO_END_DEVICE_SYNC_TOKEN);
  },

  /**
   * Retrieve the end-to-end sessions between the logged-in user and another
   * device.
   * @param {string} deviceKey The public key of the other device.
   * @return {object} A map from sessionId to Base64 end-to-end session.
   */
  getEndToEndSessions: function (deviceKey) {
    return getJsonItem(this.store, keyEndToEndSessions(deviceKey));
  },

  /**
   * Retrieve all end-to-end sessions between the logged-in user and other
   * devices.
   * @return {object} A map of {deviceKey -> {sessionId -> session pickle}}
   */
  getAllEndToEndSessions: function () {
    const deviceKeys = getKeysWithPrefix(this.store, keyEndToEndSessions(''));
    const results = {};

    for (const k of deviceKeys) {
      const unprefixedKey = k.substr(keyEndToEndSessions('').length);
      results[unprefixedKey] = getJsonItem(this.store, k);
    }

    return results;
  },

  /**
   * Remove all end-to-end sessions from the store
   * This is used after migrating sessions awat from the sessions store.
   */
  removeAllEndToEndSessions: function () {
    removeByPrefix(this.store, keyEndToEndSessions(''));
  },

  /**
   * Retrieve a list of all known inbound group sessions
   *
   * @return {{senderKey: string, sessionId: string}}
   */
  getAllEndToEndInboundGroupSessionKeys: function () {
    const prefix = E2E_PREFIX + 'inboundgroupsessions/';
    const result = [];

    for (let i = 0; i < this.store.length; i++) {
      const key = this.store.key(i);

      if (!key.startsWith(prefix)) {
        continue;
      } // we can't use split, as the components we are trying to split out
      // might themselves contain '/' characters. We rely on the
      // senderKey being a (32-byte) curve25519 key, base64-encoded
      // (hence 43 characters long).


      result.push({
        senderKey: key.substr(prefix.length, 43),
        sessionId: key.substr(prefix.length + 44)
      });
    }

    return result;
  },
  getEndToEndInboundGroupSession: function (senderKey, sessionId) {
    const key = keyEndToEndInboundGroupSession(senderKey, sessionId);
    return this.store.getItem(key);
  },
  removeAllEndToEndInboundGroupSessions: function () {
    removeByPrefix(this.store, E2E_PREFIX + 'inboundgroupsessions/');
  },

  /**
   * Get the end-to-end state for all rooms
   * @return {object} roomId -> object with the end-to-end info for the room.
   */
  getAllEndToEndRooms: function () {
    const roomKeys = getKeysWithPrefix(this.store, keyEndToEndRoom(''));
    const results = {};

    for (const k of roomKeys) {
      const unprefixedKey = k.substr(keyEndToEndRoom('').length);
      results[unprefixedKey] = getJsonItem(this.store, k);
    }

    return results;
  },
  removeAllEndToEndRooms: function () {
    removeByPrefix(this.store, keyEndToEndRoom(''));
  },
  setLocalTrustedBackupPubKey: function (pubkey) {
    this.store.setItem(KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY, pubkey);
  },
  // XXX: This store is deprecated really, but added this as a temporary
  // thing until cross-signing lands.
  getLocalTrustedBackupPubKey: function () {
    return this.store.getItem(KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY);
  }
};
const KEY_END_TO_END_ACCOUNT = E2E_PREFIX + "account";
const KEY_END_TO_END_DEVICE_SYNC_TOKEN = E2E_PREFIX + "device_sync_token";
const KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS = E2E_PREFIX + "device_tracking";
const KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY = E2E_PREFIX + "trusted_backup_pubkey";

function keyEndToEndDevicesForUser(userId) {
  return E2E_PREFIX + "devices/" + userId;
}

function keyEndToEndSessions(deviceKey) {
  return E2E_PREFIX + "sessions/" + deviceKey;
}

function keyEndToEndInboundGroupSession(senderKey, sessionId) {
  return E2E_PREFIX + "inboundgroupsessions/" + senderKey + "/" + sessionId;
}

function keyEndToEndRoom(roomId) {
  return E2E_PREFIX + "rooms/" + roomId;
}

function getJsonItem(store, key) {
  try {
    // if the key is absent, store.getItem() returns null, and
    // JSON.parse(null) === null, so this returns null.
    return JSON.parse(store.getItem(key));
  } catch (e) {
    debuglog("Failed to get key %s: %s", key, e);
    debuglog(e.stack);
  }

  return null;
}

function getKeysWithPrefix(store, prefix) {
  const results = [];

  for (let i = 0; i < store.length; ++i) {
    const key = store.key(i);
    if (key.startsWith(prefix)) results.push(key);
  }

  return results;
}

function removeByPrefix(store, prefix) {
  const toRemove = [];

  for (let i = 0; i < store.length; ++i) {
    const key = store.key(i);
    if (key.startsWith(prefix)) toRemove.push(key);
  }

  for (const key of toRemove) {
    store.removeItem(key);
  }
}

function debuglog() {
  if (DEBUG) {
    _logger.logger.log(...arguments);
  }
}

/***/ }),

/***/ "eb93":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".actionWrapper[data-v-6fd14ec6]{padding:.5em}.actions[data-v-6fd14ec6]{display:flex;justify-content:center;flex-direction:column;align-items:center}.blockButton[data-v-6fd14ec6]{margin-top:100px;color:rgb(var(--color-bad))}.unBlockButton[data-v-6fd14ec6]{margin-top:100px;color:rgb(var(--color-good))}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "ebaa":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("3139");


var FocusListener = function (platform) {
  var self = this;
  var inited = false;
  var unfocustime = null;
  self.focus = true;
  self.clbks = {
    resume: {},
    pause: {}
  };
  window.focus();

  var resume = function (e, resume) {
    var focustime = platform.currentTime();
    var time = focustime - (unfocustime || focustime);
    self.focus = true;
    /*if (time > 120 && (window.cordova)) {
       
    }*/

    _.each(self.clbks.resume, function (c) {
      c(time);
    });

    if (self.titleManager) {
      self.titleManager.clear();
    }
  };

  var pause = function () {
    self.focus = false;
    unfocustime = platform.currentTime();

    _.each(self.clbks.pause, function (c) {
      c();
    });
  };

  self.init = function () {
    inited = true;

    if (window.cordova) {
      document.addEventListener("pause", pause, false);
      document.addEventListener("resume", resume, false);
      return;
    }

    window.addEventListener('blur', pause);
    window.addEventListener('focus', resume);
  };

  self.destroy = function () {
    self.clbk = {
      resume: {},
      pause: {}
    };
    if (!inited) return;

    if (window.cordova) {
      document.removeEventListener("pause", pause, false);
      document.removeEventListener("resume", resume, false);
      return;
    }

    window.removeEventListener('blur', pause);
    window.removeEventListener('focus', resume);
    inited = false;
  };

  return self;
};

var OnlineListener = function (platform) {
  var self = this;
  var interval = null;
  var offlinetime = null;
  self.online = _functions__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].deep(window, 'navigator.onLine');
  self.clbks = {
    online: {},
    offline: {}
  };

  if (!self.online) {
    offlinetime = platform.currentTime();
  }

  self.init = function () {
    /*interval = f.retry(function () {
          var online = f.deep(window, 'navigator.onLine');
          if (self.online != online) {
              self.online = online;
              return true;
          }
        }, function () {
          if (!self.online) {
              var onlinetime = platform.currentTime()
            var time = onlinetime - (offlinetime || onlinetime)
              _.each(self.clbks.online, function (c) {
                c(time)
            })
        }
        else {
              offlinetime = platform.currentTime()
              _.each(self.clbks.offline, function (c) {
                c()
            })
        }
          self.init();
      }, 50)*/
  };

  self.destroy = function () {
    if (interval) {
      clearInterval(interval);
      interval = null;
    }

    self.clbks = {
      online: {},
      offline: {}
    };
  };

  return self;
};

/* harmony default export */ __webpack_exports__["a"] = ({
  focus: FocusListener,
  online: OnlineListener
});

/***/ }),

/***/ "ebb5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var NATIVE_ARRAY_BUFFER = __webpack_require__("a981");
var DESCRIPTORS = __webpack_require__("83ab");
var global = __webpack_require__("da84");
var isCallable = __webpack_require__("1626");
var isObject = __webpack_require__("861d");
var hasOwn = __webpack_require__("1a2d");
var classof = __webpack_require__("f5df");
var tryToString = __webpack_require__("0d51");
var createNonEnumerableProperty = __webpack_require__("9112");
var defineBuiltIn = __webpack_require__("cb2d");
var defineProperty = __webpack_require__("9bf2").f;
var isPrototypeOf = __webpack_require__("3a9b");
var getPrototypeOf = __webpack_require__("e163");
var setPrototypeOf = __webpack_require__("d2bb");
var wellKnownSymbol = __webpack_require__("b622");
var uid = __webpack_require__("90e3");
var InternalStateModule = __webpack_require__("69f3");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var TypeError = global.TypeError;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME, Constructor, Prototype;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};

var isView = function isView(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return klass === 'DataView'
    || hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var getTypedArrayConstructor = function (it) {
  var proto = getPrototypeOf(it);
  if (!isObject(proto)) return;
  var state = getInternalState(proto);
  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
};

var isTypedArray = function (it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;
  throw TypeError(tryToString(C) + ' is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced, options) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) { /* empty */ }
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) { /* empty */ }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      defineBuiltIn(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
  else NATIVE_ARRAY_BUFFER_VIEWS = false;
}

for (NAME in BigIntArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray = function TypedArray() {
    throw TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineProperty(TypedArrayPrototype, TO_STRING_TAG, { get: function () {
    return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  getTypedArrayConstructor: getTypedArrayConstructor,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};


/***/ }),

/***/ "ecec":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/userspic/many.vue?vue&type=template&id=71d5e826&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return (_vm.userinfo.length > 1)?_c('div',{staticClass:"aboutRoomAvatar"},[(_vm.userinfo.length < 5)?_c('div',{staticClass:"small"},[_c('div',{staticClass:"userinfopicwrapper",class:{'twoAvatars': _vm.userinfo.length === 2, 'threeAvatars' : _vm.userinfo.length === 3, 'fourAvatars' : _vm.userinfo.length === 4}},_vm._l((_vm.userinfo),function(user,i){return _c('div',{staticClass:"userwrapper"},[_c('userpic',{attrs:{"status":_vm.status[user.id],"userinfo":user}})],1)}),0)]):_c('div',{staticClass:"swiperWrapper"},[_c('div',{staticClass:"swiperWrapperFlex noswipepnt"},_vm._l((_vm.userinfo),function(user,i){return _c('div',{staticClass:"imageSwiper"},[_c('userpic',{attrs:{"status":_vm.status[user.id],"userinfo":user}})],1)}),0)])]):_vm._e()}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/assets/userspic/many.vue?vue&type=template&id=71d5e826&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/assets/userspic/many.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/* harmony default export */ var manyvue_type_script_lang_js_ = ({
  props: {
    userinfo: Array,
    slidesPerView: Number,
    status: {
      type: Object,
      default: {}
    }
  },
  data: function () {
    return {};
  }
});
// CONCATENATED MODULE: ./src/components/assets/userspic/many.vue?vue&type=script&lang=js&
 /* harmony default export */ var userspic_manyvue_type_script_lang_js_ = (manyvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/assets/userspic/many.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("1570")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  userspic_manyvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  injectStyles,
  "71d5e826",
  null
  ,true
)

/* harmony default export */ var many = __webpack_exports__["a"] = (component.exports);

/***/ }),

/***/ "ed03":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _asyncToGenerator = __webpack_require__("c973").default;

__webpack_require__("d9e2");

var _interopRequireWildcard = __webpack_require__("dbce");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IndexedDBStore = IndexedDBStore;

var _memory = __webpack_require__("696c");

var utils = _interopRequireWildcard(__webpack_require__("3987"));

var _events = __webpack_require__("faa1");

var _indexeddbLocalBackend = __webpack_require__("9e54");

var _indexeddbRemoteBackend = __webpack_require__("0b9e");

var _user = __webpack_require__("87d6");

var _event = __webpack_require__("a120");

var _logger = __webpack_require__("63c7");
/*
Copyright 2017 Vector Creations Ltd
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/* eslint-disable @babel/no-invalid-this */

/**
 * This is an internal module. See {@link IndexedDBStore} for the public class.
 * @module store/indexeddb
 */
// If this value is too small we'll be writing very often which will cause
// noticable stop-the-world pauses. If this value is too big we'll be writing
// so infrequently that the /sync size gets bigger on reload. Writing more
// often does not affect the length of the pause since the entire /sync
// response is persisted each time.


const WRITE_DELAY_MS = 1000 * 60 * 5; // once every 5 minutes

/**
 * Construct a new Indexed Database store, which extends MemoryStore.
 *
 * This store functions like a MemoryStore except it periodically persists
 * the contents of the store to an IndexedDB backend.
 *
 * All data is still kept in-memory but can be loaded from disk by calling
 * <code>startup()</code>. This can make startup times quicker as a complete
 * sync from the server is not required. This does not reduce memory usage as all
 * the data is eagerly fetched when <code>startup()</code> is called.
 * <pre>
 * let opts = { indexedDB: window.indexedDB, localStorage: window.localStorage };
 * let store = new IndexedDBStore(opts);
 * await store.startup(); // load from indexed db
 * let client = sdk.createClient({
 *     store: store,
 * });
 * client.startClient();
 * client.on("sync", function(state, prevState, data) {
 *     if (state === "PREPARED") {
 *         console.log("Started up, now with go faster stripes!");
 *     }
 * });
 * </pre>
 *
 * @constructor
 * @extends MemoryStore
 * @param {Object} opts Options object.
 * @param {Object} opts.indexedDB The Indexed DB interface e.g.
 * <code>window.indexedDB</code>
 * @param {string=} opts.dbName Optional database name. The same name must be used
 * to open the same database.
 * @param {string=} opts.workerScript Optional URL to a script to invoke a web
 * worker with to run IndexedDB queries on the web worker. The IndexedDbStoreWorker
 * class is provided for this purpose and requires the application to provide a
 * trivial wrapper script around it.
 * @param {Object=} opts.workerApi The webWorker API object. If omitted, the global Worker
 * object will be used if it exists.
 * @prop {IndexedDBStoreBackend} backend The backend instance. Call through to
 * this API if you need to perform specific indexeddb actions like deleting the
 * database.
 */

function IndexedDBStore(opts) {
  _memory.MemoryStore.call(this, opts);

  if (!opts.indexedDB) {
    throw new Error('Missing required option: indexedDB');
  }

  if (opts.workerScript) {
    // try & find a webworker-compatible API
    let workerApi = opts.workerApi;

    if (!workerApi) {
      // default to the global Worker object (which is where it in a browser)
      workerApi = global.Worker;
    }

    this.backend = new _indexeddbRemoteBackend.RemoteIndexedDBStoreBackend(opts.workerScript, opts.dbName, workerApi);
  } else {
    this.backend = new _indexeddbLocalBackend.LocalIndexedDBStoreBackend(opts.indexedDB, opts.dbName);
  }

  this.startedUp = false;
  this._syncTs = 0; // Records the last-modified-time of each user at the last point we saved
  // the database, such that we can derive the set if users that have been
  // modified since we last saved.

  this._userModifiedMap = {// user_id : timestamp
  };
}

utils.inherits(IndexedDBStore, _memory.MemoryStore);
utils.extend(IndexedDBStore.prototype, _events.EventEmitter.prototype);

IndexedDBStore.exists = function (indexedDB, dbName) {
  return _indexeddbLocalBackend.LocalIndexedDBStoreBackend.exists(indexedDB, dbName);
};
/**
 * @return {Promise} Resolved when loaded from indexed db.
  */


IndexedDBStore.prototype.startup = function () {
  if (this.startedUp) {
    _logger.logger.log(`IndexedDBStore.startup: already started`);

    return Promise.resolve();
  }

  _logger.logger.log(`IndexedDBStore.startup: connecting to backend`);

  return this.backend.connect().then(() => {
    _logger.logger.log(`IndexedDBStore.startup: loading presence events`);

    return this.backend.getUserPresenceEvents();
  }).then(userPresenceEvents => {
    _logger.logger.log(`IndexedDBStore.startup: processing presence events`);

    userPresenceEvents.forEach(_ref => {
      let [userId, rawEvent] = _ref;
      const u = new _user.User(userId);

      if (rawEvent) {
        u.setPresenceEvent(new _event.MatrixEvent(rawEvent));
      }

      this._userModifiedMap[u.userId] = u.getLastModifiedTime();
      this.storeUser(u);
    });
  });
};
/**
 * @return {Promise} Resolves with a sync response to restore the
 * client state to where it was at the last save, or null if there
 * is no saved sync data.
 */


IndexedDBStore.prototype.getSavedSync = degradable(function () {
  return this.backend.getSavedSync();
}, "getSavedSync");
/** @return {Promise<bool>} whether or not the database was newly created in this session. */

IndexedDBStore.prototype.isNewlyCreated = degradable(function () {
  return this.backend.isNewlyCreated();
}, "isNewlyCreated");
/**
 * @return {Promise} If there is a saved sync, the nextBatch token
 * for this sync, otherwise null.
 */

IndexedDBStore.prototype.getSavedSyncToken = degradable(function () {
  return this.backend.getNextBatchToken();
}, "getSavedSyncToken"),
/**
 * Delete all data from this store.
 * @return {Promise} Resolves if the data was deleted from the database.
 */
IndexedDBStore.prototype.deleteAllData = degradable(function () {
  _memory.MemoryStore.prototype.deleteAllData.call(this);

  return this.backend.clearDatabase().then(() => {
    _logger.logger.log("Deleted indexeddb data.");
  }, err => {
    _logger.logger.error(`Failed to delete indexeddb data: ${err}`);

    throw err;
  });
});
/**
 * Whether this store would like to save its data
 * Note that obviously whether the store wants to save or
 * not could change between calling this function and calling
 * save().
 *
 * @return {boolean} True if calling save() will actually save
 *     (at the time this function is called).
 */

IndexedDBStore.prototype.wantsSave = function () {
  const now = Date.now();
  return now - this._syncTs > WRITE_DELAY_MS;
};
/**
 * Possibly write data to the database.
 *
 * @param {bool} force True to force a save to happen
 * @return {Promise} Promise resolves after the write completes
 *     (or immediately if no write is performed)
 */


IndexedDBStore.prototype.save = function (force) {
  if (force || this.wantsSave()) {
    return this._reallySave();
  }

  return Promise.resolve();
};

IndexedDBStore.prototype._reallySave = degradable(function () {
  this._syncTs = Date.now(); // set now to guard against multi-writes
  // work out changed users (this doesn't handle deletions but you
  // can't 'delete' users as they are just presence events).

  const userTuples = [];

  for (const u of this.getUsers()) {
    if (this._userModifiedMap[u.userId] === u.getLastModifiedTime()) continue;
    if (!u.events.presence) continue;
    userTuples.push([u.userId, u.events.presence.event]); // note that we've saved this version of the user

    this._userModifiedMap[u.userId] = u.getLastModifiedTime();
  }

  return this.backend.syncToDatabase(userTuples);
});
IndexedDBStore.prototype.setSyncData = degradable(function (syncData) {
  return this.backend.setSyncData(syncData);
}, "setSyncData");
/**
 * Returns the out-of-band membership events for this room that
 * were previously loaded.
 * @param {string} roomId
 * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members
 * @returns {null} in case the members for this room haven't been stored yet
 */

IndexedDBStore.prototype.getOutOfBandMembers = degradable(function (roomId) {
  return this.backend.getOutOfBandMembers(roomId);
}, "getOutOfBandMembers");
/**
 * Stores the out-of-band membership events for this room. Note that
 * it still makes sense to store an empty array as the OOB status for the room is
 * marked as fetched, and getOutOfBandMembers will return an empty array instead of null
 * @param {string} roomId
 * @param {event[]} membershipEvents the membership events to store
 * @returns {Promise} when all members have been stored
 */

IndexedDBStore.prototype.setOutOfBandMembers = degradable(function (roomId, membershipEvents) {
  _memory.MemoryStore.prototype.setOutOfBandMembers.call(this, roomId, membershipEvents);

  return this.backend.setOutOfBandMembers(roomId, membershipEvents);
}, "setOutOfBandMembers");
IndexedDBStore.prototype.clearOutOfBandMembers = degradable(function (roomId) {
  _memory.MemoryStore.prototype.clearOutOfBandMembers.call(this);

  return this.backend.clearOutOfBandMembers(roomId);
}, "clearOutOfBandMembers");
IndexedDBStore.prototype.getClientOptions = degradable(function () {
  return this.backend.getClientOptions();
}, "getClientOptions");
IndexedDBStore.prototype.storeClientOptions = degradable(function (options) {
  _memory.MemoryStore.prototype.storeClientOptions.call(this, options);

  return this.backend.storeClientOptions(options);
}, "storeClientOptions");
/**
 * All member functions of `IndexedDBStore` that access the backend use this wrapper to
 * watch for failures after initial store startup, including `QuotaExceededError` as
 * free disk space changes, etc.
 *
 * When IndexedDB fails via any of these paths, we degrade this back to a `MemoryStore`
 * in place so that the current operation and all future ones are in-memory only.
 *
 * @param {Function} func The degradable work to do.
 * @param {String} fallback The method name for fallback.
 * @returns {Function} A wrapped member function.
 */

function degradable(func, fallback) {
  return /*#__PURE__*/_asyncToGenerator(function* () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    try {
      return yield func.call(this, ...args);
    } catch (e) {
      _logger.logger.error("IndexedDBStore failure, degrading to MemoryStore", e);

      this.emit("degraded", e);

      try {
        // We try to delete IndexedDB after degrading since this store is only a
        // cache (the app will still function correctly without the data).
        // It's possible that deleting repair IndexedDB for the next app load,
        // potenially by making a little more space available.
        _logger.logger.log("IndexedDBStore trying to delete degraded data");

        yield this.backend.clearDatabase();

        _logger.logger.log("IndexedDBStore delete after degrading succeeeded");
      } catch (e) {
        _logger.logger.warn("IndexedDBStore delete after degrading failed", e);
      } // Degrade the store from being an instance of `IndexedDBStore` to instead be
      // an instance of `MemoryStore` so that future API calls use the memory path
      // directly and skip IndexedDB entirely. This should be safe as
      // `IndexedDBStore` already extends from `MemoryStore`, so we are making the
      // store become its parent type in a way. The mutator methods of
      // `IndexedDBStore` also maintain the state that `MemoryStore` uses (many are
      // not overridden at all).


      Object.setPrototypeOf(this, _memory.MemoryStore.prototype);

      if (fallback) {
        return yield _memory.MemoryStore.prototype[fallback].call(this, ...args);
      }
    }
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

/***/ }),

/***/ "ed83":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
}(this, function () {
  var regex = /(auto|scroll)/;

  var parents = function (node, ps) {
    if (node.parentNode === null) { return ps; }

    return parents(node.parentNode, ps.concat([node]));
  };

  var style = function (node, prop) {
    return getComputedStyle(node, null).getPropertyValue(prop);
  };

  var overflow = function (node) {
    return style(node, "overflow") + style(node, "overflow-y") + style(node, "overflow-x");
  };

  var scroll = function (node) {
   return regex.test(overflow(node));
  };

  var scrollParent = function (node) {
    if (!(node instanceof HTMLElement || node instanceof SVGElement)) {
      return ;
    }

    var ps = parents(node.parentNode, []);

    for (var i = 0; i < ps.length; i += 1) {
      if (scroll(ps[i])) {
        return ps[i];
      }
    }

    return document.scrollingElement || document.documentElement;
  };

  return scrollParent;
}));


/***/ }),

/***/ "edd4":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"addPublicChatName\":\"Add Public Chat Name\",\"createPublicChat\":\"Create public chat\",\"chatTopic\":\"Topic renamed\",\"publicRoomTitle\":\"Public Room\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"Upload files\",\"header\":\"header\",\"dragAndDropAFile\":\"Drag and drop file\",\"chatInvite\":\"You were invited to chat with:\",\"cantJoin\":\"You can't join to chat with:\",\"chatInviteDecline\":\"You can join in chat or decline invitation\",\"creatorLeft\":\"Because creator left the room\",\"encrypted\":\"Encrypted\",\"noImages\":\"There are no images in this chat yet\",\"noFiles\":\"There are no files in this chat yet\",\"inviteUser\":\"Invite User\",\"invite\":\"Invite\",\"add\":\"Add\",\"mute\":\"Mute\",\"unmute\":\"Unmute\",\"leave\":\"Leave\",\"Info\":\"Info\",\"new\":\"New\",\"typing\":\"typing\",\"accNotFound\":\"Your registration is in progress, please wait...\",\"emptyList\":\"list is empty ( filtered or just empty )\",\"welcome\":\"Welcome to chat\",\"startNewChat\":\"Start a new chat\",\"chats\":\"Chats\",\"shareWith\":\"Share with\",\"newChat\":\"New Chat\",\"moveToChat\":\"Move to chat\",\"queryNoResults\":\"Query reports no results\",\"needMoreCharacters\":\"Need more characters for result\",\"createGroup\":\"Create Group\",\"unabletoDecrypt\":\"* Unable to decrypt\",\"messageDeleted\":\"Message Deleted\",\"sentImage\":\"sent image\",\"sentVoiceMessage\":\"sent a voice message\",\"invitationToChat\":\"Invitation to chat\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"left the chat\",\"joined\":\"joined\",\"chatRenamed\":\"Chat renamed to \",\"recentComment\":\"Recent comment:\",\"share\":\"SHARE\",\"followers\":\"Followers\",\"reputation\":\"Reputation\",\"unsubscribe\":\"Unsubscribe\",\"following\":\"Following\",\"theme\":\"Theme:\",\"contacts\":\"Contacts\",\"phoneContacts\":\"Phone contacts\",\"chooseInviteMedia\":\"Please choose how you want to invite:\",\"admin\":\"Admin\",\"moderator\":\"Moderator\",\"videocall\":\"Video Call\",\"call\":\"Call\",\"leaveAndDelete\":\"Leave and Delete\",\"donate\":\"Donate\",\"makeModerator\":\"Make Moderator\",\"ban\":\"Ban\",\"kick\":\"Kick\",\"members\":\"Members\",\"media\":\"Media\",\"files\":\"Files\",\"contactsList\":\"Contacts List\",\"send\":\"send\",\"pageCaption\":\"Page caption\",\"caption\":\"Caption\",\"text\":\"text\",\"placeholder\":\"placeholder\",\"sendTransactionTo\":\"Send Transaction To\",\"toBePaidByReceiver\":\"To be paid by Receiver\",\"toBePaidBySender\":\"To be paid by Sender\",\"source\":\"Source\",\"amount\":\"Amount\",\"receiver\":\"Receiver\",\"message\":\"Message\",\"includeFeesInAmount\":\"Include Fees in Amount\",\"transactionFees\":\"Transaction Fees\",\"totalAmount\":\"Total amount\",\"balanceTooLow\":\"Balance too low\",\"transactionError\":\"Error, can't make the transaction\",\"calculateFees\":\"Calculate Fees\",\"startChatWith\":\"Start chat with\",\"searchResult\":\"Search result\",\"joinedInTheChat\":\"joined the chat\",\"invited\":\"invited \",\"hasInvited\":\"has invited \",\"inTheChat\":\" in the chat\",\"banned\":\"banned\",\"andRoom\":\"and room\",\"left\":\"left\",\"theChat\":\" the chat \",\"made\":\"made \",\"aModerator\":\" a moderator\",\"editedChatNameTo \":\"edited chat name to \",\"somebody\":\"Somebody\",\"sent\":\"sent\",\"PKOINto\":\" PKOIN to \",\"response\":\"Response\",\"messagefrom\":\"Forwarded message from\",\"edited\":\"Edited\",\"settings\":\"Settings\",\"unauthorized\":\"Unauthorized\",\"search\":\"Search\",\"replyOnMessage\":\"Reply on Message\",\"editMessage\":\"Edit Message\",\"inviteFriend\":\"Invite friends\",\"emptyContactList\":\"Contacts list is empty\",\"joinApp\":\"Please connect with me for secure chat.\",\"hasInvitedToJoin\":\"It is private and NOT connected to your phone number. Let's chat!\",\"contactsempty\":\"You do not have contacts yet, find them in the search\",\"usernotgen\":\"User did not generate their encryption keys yet. You will be able to chat them when their keys are generated.\",\"younotgen\":\"Please wait a minute, Your encryption keys are being generated...\",\"messageRead\":\"Message read\",\"open\":\"Open\",\"You\":\"You\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"Email\",\"refillNamePlaceholder\":\"Refill name\"},\"message\":{},\"button\":{\"starChatButton\":\"Start chat\",\"decline\":\"Decline\",\"declineandignore\":\"Ignore User\",\"join\":\"Join\",\"ok\":\"Ok\",\"save\":\"Save\",\"copy\":\"Copy\",\"forward\":\"Forward\",\"delete\":\"Delete\",\"reply\":\"Reply\",\"share\":\"Share\",\"download\":\"Download\",\"downloaded\":\"Downloaded\",\"goToPocketnetProfile\":\"Go to profile\",\"sendFile\":\"Send File\",\"takePhotoOrVideo\":\"Send image\",\"sendCoins\":\"Send coins\",\"edit\":\"Edit\",\"select\":\"Select\",\"block\":\"Block\",\"unblock\":\"Unblock\",\"blockUser\":\"Block user\",\"Complain\":\"Complain\"},\"type\":{\"publicgroup\":\"Create Public group\",\"privategroup\":\"Create Private group\",\"one\":\"One on one chat\"},\"typelabel\":{\"publicgroup\":\"Public group creation\",\"privategroup\":\"Private group creation\",\"one\":\"One on one chat creation\"},\"yes\":\"Yes\",\"cancel\":\"Cancel\",\"teamMessages\":{\"1-title\":\"Welcome to Bastyon Private Chat!\",\"1-list1\":\"Private messenger that is NOT connected to your phone number\",\"1-list2\":\"End-To-End Encryption of every 1-on-1 conversation by default\",\"1-list3\":\"All images sent or received through chat are stored encrypted\",\"1-list4\":\"History of messages is saved for 7 days only\",\"2-title\":\"A Huge Announcement! Pocketnet application is now called Bastyon!\",\"2-message1\":\"The domain will be moved to Bastyon.com. We released the following major updates recently:\",\"2-list1\":\"Private encrypted messenger not connected to your phone number\",\"2-list2\":\"Ability to donate PKOIN to bloggers\",\"2-list3\":\"Video and Live Streaming\",\"2-message2\":\"Invite your friends now and be a part of the big future of decentralized internet!\",\"2-button\":\"Invite friends\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "edeb":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b480");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "eeb4":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".bgimage[data-v-5d20f73c]{width:100%;height:100%;opacity:0;transition:.3s}.bgimage.loaded[data-v-5d20f73c]{opacity:1}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "ef06":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushProcessor = PushProcessor;

var _utils = __webpack_require__("3987");

var _logger = __webpack_require__("63c7");
/*
Copyright 2015, 2016 OpenMarket Ltd
Copyright 2017 New Vector Ltd

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/**
 * @module pushprocessor
 */


const RULEKINDS_IN_ORDER = ['override', 'content', 'room', 'sender', 'underride']; // The default override rules to apply to the push rules that arrive from the server.
// We do this for two reasons:
//   1. Synapse is unlikely to send us the push rule in an incremental sync - see
//      https://github.com/matrix-org/synapse/pull/4867#issuecomment-481446072 for
//      more details.
//   2. We often want to start using push rules ahead of the server supporting them,
//      and so we can put them here.

const DEFAULT_OVERRIDE_RULES = [{
  // For homeservers which don't support MSC1930 yet
  rule_id: ".m.rule.tombstone",
  default: true,
  enabled: true,
  conditions: [{
    kind: "event_match",
    key: "type",
    pattern: "m.room.tombstone"
  }, {
    kind: "event_match",
    key: "state_key",
    pattern: ""
  }],
  actions: ["notify", {
    set_tweak: "highlight",
    value: true
  }]
}, {
  // For homeservers which don't support MSC2153 yet
  rule_id: ".m.rule.reaction",
  default: true,
  enabled: true,
  conditions: [{
    kind: "event_match",
    key: "type",
    pattern: "m.reaction"
  }],
  actions: ["dont_notify"]
}];
/**
 * Construct a Push Processor.
 * @constructor
 * @param {Object} client The Matrix client object to use
 */

function PushProcessor(client) {
  const cachedGlobToRegex = {// $glob: RegExp,
  };

  const matchingRuleFromKindSet = (ev, kindset) => {
    for (let ruleKindIndex = 0; ruleKindIndex < RULEKINDS_IN_ORDER.length; ++ruleKindIndex) {
      const kind = RULEKINDS_IN_ORDER[ruleKindIndex];
      const ruleset = kindset[kind];

      if (!ruleset) {
        continue;
      }

      for (let ruleIndex = 0; ruleIndex < ruleset.length; ++ruleIndex) {
        const rule = ruleset[ruleIndex];

        if (!rule.enabled) {
          continue;
        }

        const rawrule = templateRuleToRaw(kind, rule);

        if (!rawrule) {
          continue;
        }

        if (this.ruleMatchesEvent(rawrule, ev)) {
          rule.kind = kind;
          return rule;
        }
      }
    }

    return null;
  };

  const templateRuleToRaw = function (kind, tprule) {
    const rawrule = {
      'rule_id': tprule.rule_id,
      'actions': tprule.actions,
      'conditions': []
    };

    switch (kind) {
      case 'underride':
      case 'override':
        rawrule.conditions = tprule.conditions;
        break;

      case 'room':
        if (!tprule.rule_id) {
          return null;
        }

        rawrule.conditions.push({
          'kind': 'event_match',
          'key': 'room_id',
          'value': tprule.rule_id
        });
        break;

      case 'sender':
        if (!tprule.rule_id) {
          return null;
        }

        rawrule.conditions.push({
          'kind': 'event_match',
          'key': 'user_id',
          'value': tprule.rule_id
        });
        break;

      case 'content':
        if (!tprule.pattern) {
          return null;
        }

        rawrule.conditions.push({
          'kind': 'event_match',
          'key': 'content.body',
          'pattern': tprule.pattern
        });
        break;
    }

    return rawrule;
  };

  const eventFulfillsCondition = function (cond, ev) {
    const condition_functions = {
      "event_match": eventFulfillsEventMatchCondition,
      "contains_display_name": eventFulfillsDisplayNameCondition,
      "room_member_count": eventFulfillsRoomMemberCountCondition,
      "sender_notification_permission": eventFulfillsSenderNotifPermCondition
    };

    if (condition_functions[cond.kind]) {
      return condition_functions[cond.kind](cond, ev);
    } // unknown conditions: we previously matched all unknown conditions,
    // but given that rules can be added to the base rules on a server,
    // it's probably better to not match unknown conditions.


    return false;
  };

  const eventFulfillsSenderNotifPermCondition = function (cond, ev) {
    const notifLevelKey = cond['key'];

    if (!notifLevelKey) {
      return false;
    }

    const room = client.getRoom(ev.getRoomId());

    if (!room || !room.currentState) {
      return false;
    } // Note that this should not be the current state of the room but the state at
    // the point the event is in the DAG. Unfortunately the js-sdk does not store
    // this.


    return room.currentState.mayTriggerNotifOfType(notifLevelKey, ev.getSender());
  };

  const eventFulfillsRoomMemberCountCondition = function (cond, ev) {
    if (!cond.is) {
      return false;
    }

    const room = client.getRoom(ev.getRoomId());

    if (!room || !room.currentState || !room.currentState.members) {
      return false;
    }

    const memberCount = room.currentState.getJoinedMemberCount();
    const m = cond.is.match(/^([=<>]*)([0-9]*)$/);

    if (!m) {
      return false;
    }

    const ineq = m[1];
    const rhs = parseInt(m[2]);

    if (isNaN(rhs)) {
      return false;
    }

    switch (ineq) {
      case '':
      case '==':
        return memberCount == rhs;

      case '<':
        return memberCount < rhs;

      case '>':
        return memberCount > rhs;

      case '<=':
        return memberCount <= rhs;

      case '>=':
        return memberCount >= rhs;

      default:
        return false;
    }
  };

  const eventFulfillsDisplayNameCondition = function (cond, ev) {
    let content = ev.getContent();

    if (ev.isEncrypted() && ev.getClearContent()) {
      content = ev.getClearContent();
    }

    if (!content || !content.body || typeof content.body != 'string') {
      return false;
    }

    const room = client.getRoom(ev.getRoomId());

    if (!room || !room.currentState || !room.currentState.members || !room.currentState.getMember(client.credentials.userId)) {
      return false;
    }

    const displayName = room.currentState.getMember(client.credentials.userId).name; // N.B. we can't use \b as it chokes on unicode. however \W seems to be okay
    // as shorthand for [^0-9A-Za-z_].

    const pat = new RegExp("(^|\\W)" + (0, _utils.escapeRegExp)(displayName) + "(\\W|$)", 'i');
    return content.body.search(pat) > -1;
  };

  const eventFulfillsEventMatchCondition = function (cond, ev) {
    if (!cond.key) {
      return false;
    }

    const val = valueForDottedKey(cond.key, ev);

    if (typeof val !== 'string') {
      return false;
    }

    if (cond.value) {
      return cond.value === val;
    }

    if (typeof cond.pattern !== 'string') {
      return false;
    }

    let regex;

    if (cond.key == 'content.body') {
      regex = createCachedRegex('(^|\\W)', cond.pattern, '(\\W|$)');
    } else {
      regex = createCachedRegex('^', cond.pattern, '$');
    }

    return !!val.match(regex);
  };

  const createCachedRegex = function (prefix, glob, suffix) {
    if (cachedGlobToRegex[glob]) {
      return cachedGlobToRegex[glob];
    }

    cachedGlobToRegex[glob] = new RegExp(prefix + (0, _utils.globToRegexp)(glob) + suffix, 'i');
    return cachedGlobToRegex[glob];
  };

  const valueForDottedKey = function (key, ev) {
    const parts = key.split('.');
    let val; // special-case the first component to deal with encrypted messages

    const firstPart = parts[0];

    if (firstPart === 'content') {
      val = ev.getContent();
      parts.shift();
    } else if (firstPart === 'type') {
      val = ev.getType();
      parts.shift();
    } else {
      // use the raw event for any other fields
      val = ev.event;
    }

    while (parts.length > 0) {
      const thisPart = parts.shift();

      if ((0, _utils.isNullOrUndefined)(val[thisPart])) {
        return null;
      }

      val = val[thisPart];
    }

    return val;
  };

  const matchingRuleForEventWithRulesets = function (ev, rulesets) {
    if (!rulesets) {
      return null;
    }

    if (ev.getSender() === client.credentials.userId) {
      return null;
    }

    return matchingRuleFromKindSet(ev, rulesets.global);
  };

  const pushActionsForEventAndRulesets = function (ev, rulesets) {
    const rule = matchingRuleForEventWithRulesets(ev, rulesets);

    if (!rule) {
      return {};
    }

    const actionObj = PushProcessor.actionListToActionsObject(rule.actions); // Some actions are implicit in some situations: we add those here

    if (actionObj.tweaks.highlight === undefined) {
      // if it isn't specified, highlight if it's a content
      // rule but otherwise not
      actionObj.tweaks.highlight = rule.kind == 'content';
    }

    return actionObj;
  };

  this.ruleMatchesEvent = function (rule, ev) {
    let ret = true;

    for (let i = 0; i < rule.conditions.length; ++i) {
      const cond = rule.conditions[i];
      ret &= eventFulfillsCondition(cond, ev);
    } //console.log("Rule "+rule.rule_id+(ret ? " matches" : " doesn't match"));


    return ret;
  };
  /**
   * Get the user's push actions for the given event
   *
   * @param {module:models/event.MatrixEvent} ev
   *
   * @return {PushAction}
   */


  this.actionsForEvent = function (ev) {
    return pushActionsForEventAndRulesets(ev, client.pushRules);
  };
  /**
   * Get one of the users push rules by its ID
   *
   * @param {string} ruleId The ID of the rule to search for
   * @return {object} The push rule, or null if no such rule was found
   */


  this.getPushRuleById = function (ruleId) {
    for (const scope of ['global']) {
      if (client.pushRules[scope] === undefined) continue;

      for (const kind of RULEKINDS_IN_ORDER) {
        if (client.pushRules[scope][kind] === undefined) continue;

        for (const rule of client.pushRules[scope][kind]) {
          if (rule.rule_id === ruleId) return rule;
        }
      }
    }

    return null;
  };
}
/**
 * Convert a list of actions into a object with the actions as keys and their values
 * eg. [ 'notify', { set_tweak: 'sound', value: 'default' } ]
 *     becomes { notify: true, tweaks: { sound: 'default' } }
 * @param {array} actionlist The actions list
 *
 * @return {object} A object with key 'notify' (true or false) and an object of actions
 */


PushProcessor.actionListToActionsObject = function (actionlist) {
  const actionobj = {
    'notify': false,
    'tweaks': {}
  };

  for (let i = 0; i < actionlist.length; ++i) {
    const action = actionlist[i];

    if (action === 'notify') {
      actionobj.notify = true;
    } else if (typeof action === 'object') {
      if (action.value === undefined) {
        action.value = true;
      }

      actionobj.tweaks[action.set_tweak] = action.value;
    }
  }

  return actionobj;
};
/**
 * Rewrites conditions on a client's push rules to match the defaults
 * where applicable. Useful for upgrading push rules to more strict
 * conditions when the server is falling behind on defaults.
 * @param {object} incomingRules The client's existing push rules
 * @returns {object} The rewritten rules
 */


PushProcessor.rewriteDefaultRules = function (incomingRules) {
  let newRules = JSON.parse(JSON.stringify(incomingRules)); // deep clone
  // These lines are mostly to make the tests happy. We shouldn't run into these
  // properties missing in practice.

  if (!newRules) newRules = {};
  if (!newRules.global) newRules.global = {};
  if (!newRules.global.override) newRules.global.override = []; // Merge the client-level defaults with the ones from the server

  const globalOverrides = newRules.global.override;

  for (const override of DEFAULT_OVERRIDE_RULES) {
    const existingRule = globalOverrides.find(r => r.rule_id === override.rule_id);

    if (existingRule) {
      // Copy over the actions, default, and conditions. Don't touch the user's
      // preference.
      existingRule.default = override.default;
      existingRule.conditions = override.conditions;
      existingRule.actions = override.actions;
    } else {
      // Add the rule
      const ruleId = override.rule_id;

      _logger.logger.warn(`Adding default global override for ${ruleId}`);

      globalOverrides.push(override);
    }
  }

  return newRules;
};
/**
 * @typedef {Object} PushAction
 * @type {Object}
 * @property {boolean} notify Whether this event should notify the user or not.
 * @property {Object} tweaks How this event should be notified.
 * @property {boolean} tweaks.highlight Whether this event should be highlighted
 * on the UI.
 * @property {boolean} tweaks.sound Whether this notification should produce a
 * noise.
 */

/***/ }),

/***/ "f024":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_33d22462_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b79a");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_33d22462_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_33d22462_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_33d22462_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_33d22462_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "f0bc":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_bgimage_vue_vue_type_style_index_0_id_5d20f73c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("0dbb");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_bgimage_vue_vue_type_style_index_0_id_5d20f73c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_bgimage_vue_vue_type_style_index_0_id_5d20f73c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_bgimage_vue_vue_type_style_index_0_id_5d20f73c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_bgimage_vue_vue_type_style_index_0_id_5d20f73c_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "f206":
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {


/* styles */
__webpack_require__(8)

var Component = __webpack_require__(6)(
  /* script */
  __webpack_require__(1),
  /* template */
  __webpack_require__(7),
  /* scopeId */
  "data-v-25adc6c0",
  /* cssModules */
  null
)

module.exports = Component.exports


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils__ = __webpack_require__(3);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



var DEFAULT_COLOR_CHECKED = '#75c791';
var DEFAULT_COLOR_UNCHECKED = '#bfcbd9';
var DEFAULT_LABEL_CHECKED = 'on';
var DEFAULT_LABEL_UNCHECKED = 'off';
var DEFAULT_SWITCH_COLOR = '#fff';

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'ToggleButton',
  props: {
    value: {
      type: Boolean,
      default: false
    },
    name: {
      type: String
    },
    disabled: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String
    },
    sync: {
      type: Boolean,
      default: false
    },
    speed: {
      type: Number,
      default: 300
    },
    color: {
      type: [String, Object],
      validator: function validator(value) {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* isString */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'checked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'unchecked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'disabled');
      }
    },
    switchColor: {
      type: [String, Object],
      validator: function validator(value) {
        return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["a" /* isString */])(value) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'checked') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["b" /* has */])(value, 'unchecked');
      }
    },
    cssColors: {
      type: Boolean,
      default: false
    },
    labels: {
      type: [Boolean, Object],
      default: false,
      validator: function validator(value) {
        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? value.checked || value.unchecked : typeof value === 'boolean';
      }
    },
    height: {
      type: Number,
      default: 22
    },
    width: {
      type: Number,
      default: 50
    },
    margin: {
      type: Number,
      default: 3
    },
    fontSize: {
      type: Number
    }
  },
  computed: {
    className: function className() {
      var toggled = this.toggled,
          disabled = this.disabled;


      return ['vue-js-switch', {
        toggled: toggled,
        disabled: disabled
      }];
    },
    coreStyle: function coreStyle() {
      return {
        width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.width),
        height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.height),
        backgroundColor: this.cssColors ? null : this.disabled ? this.colorDisabled : this.colorCurrent,
        borderRadius: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(Math.round(this.height / 2))
      };
    },
    buttonRadius: function buttonRadius() {
      return this.height - this.margin * 2;
    },
    distance: function distance() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.width - this.height + this.margin);
    },
    buttonStyle: function buttonStyle() {
      var transition = 'transform ' + this.speed + 'ms';
      var margin = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.margin);

      var transform = this.toggled ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["d" /* translate3d */])(this.distance, margin) : __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["d" /* translate3d */])(margin, margin);

      var background = this.switchColor ? this.switchColorCurrent : null;

      return {
        width: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.buttonRadius),
        height: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.buttonRadius),
        transition: transition,
        transform: transform,
        background: background
      };
    },
    labelStyle: function labelStyle() {
      return {
        lineHeight: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.height),
        fontSize: this.fontSize ? __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["c" /* px */])(this.fontSize) : null
      };
    },
    colorChecked: function colorChecked() {
      var color = this.color;


      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["e" /* isObject */])(color)) {
        return color || DEFAULT_COLOR_CHECKED;
      }

      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(color, 'checked', DEFAULT_COLOR_CHECKED);
    },
    colorUnchecked: function colorUnchecked() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.color, 'unchecked', DEFAULT_COLOR_UNCHECKED);
    },
    colorDisabled: function colorDisabled() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.color, 'disabled', this.colorCurrent);
    },
    colorCurrent: function colorCurrent() {
      return this.toggled ? this.colorChecked : this.colorUnchecked;
    },
    labelChecked: function labelChecked() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.labels, 'checked', DEFAULT_LABEL_CHECKED);
    },
    labelUnchecked: function labelUnchecked() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.labels, 'unchecked', DEFAULT_LABEL_UNCHECKED);
    },
    switchColorChecked: function switchColorChecked() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.switchColor, 'checked', DEFAULT_SWITCH_COLOR);
    },
    switchColorUnchecked: function switchColorUnchecked() {
      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["f" /* get */])(this.switchColor, 'unchecked', DEFAULT_SWITCH_COLOR);
    },
    switchColorCurrent: function switchColorCurrent() {
      var switchColor = this.switchColor;


      if (!__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__utils__["e" /* isObject */])(this.switchColor)) {
        return this.switchColor || DEFAULT_SWITCH_COLOR;
      }

      return this.toggled ? this.switchColorChecked : this.switchColorUnchecked;
    }
  },
  watch: {
    value: function value(_value) {
      if (this.sync) {
        this.toggled = !!_value;
      }
    }
  },
  data: function data() {
    return {
      toggled: !!this.value
    };
  },

  methods: {
    toggle: function toggle(event) {
      var toggled = !this.toggled;

      if (!this.sync) {
        this.toggled = toggled;
      }

      this.$emit('input', toggled);
      this.$emit('change', {
        value: toggled,
        tag: this.tag,
        srcEvent: event
      });
    }
  }
});

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button_vue__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Button_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Button_vue__);
/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, "ToggleButton", function() { return __WEBPACK_IMPORTED_MODULE_0__Button_vue___default.a; });


var installed = false;

/* harmony default export */ __webpack_exports__["default"] = ({
  install: function install(Vue) {
    if (installed) {
      return;
    }

    Vue.component('ToggleButton', __WEBPACK_IMPORTED_MODULE_0__Button_vue___default.a);
    installed = true;
  }
});



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isString; });
/* unused harmony export isBoolean */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return px; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return translate3d; });
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isString = function isString(value) {
  return typeof value === 'string';
};

var isBoolean = function isBoolean(value) {
  return typeof value === 'boolean';
};

var isObject = function isObject(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
};

var has = function has(object, key) {
  return isObject(object) && object.hasOwnProperty(key);
};

var get = function get(object, key, defaultValue) {
  return has(object, key) ? object[key] : defaultValue;
};

var px = function px(value) {
  return value + 'px';
};

var translate3d = function translate3d(x, y) {
  var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0px';

  return 'translate3d(' + x + ', ' + y + ', ' + z + ')';
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(5)();
// imports


// module
exports.push([module.i, ".vue-js-switch[data-v-25adc6c0]{display:inline-block;position:relative;vertical-align:middle;user-select:none;font-size:10px;cursor:pointer}.vue-js-switch .v-switch-input[data-v-25adc6c0]{opacity:0;position:absolute;width:1px;height:1px}.vue-js-switch .v-switch-label[data-v-25adc6c0]{position:absolute;top:0;font-weight:600;color:#fff;z-index:1}.vue-js-switch .v-switch-label.v-left[data-v-25adc6c0]{left:10px}.vue-js-switch .v-switch-label.v-right[data-v-25adc6c0]{right:10px}.vue-js-switch .v-switch-core[data-v-25adc6c0]{display:block;position:relative;box-sizing:border-box;outline:0;margin:0;transition:border-color .3s,background-color .3s;user-select:none}.vue-js-switch .v-switch-core .v-switch-button[data-v-25adc6c0]{display:block;position:absolute;overflow:hidden;top:0;left:0;border-radius:100%;background-color:#fff;z-index:2}.vue-js-switch.disabled[data-v-25adc6c0]{pointer-events:none;opacity:.6}", ""]);

// exports


/***/ }),
/* 5 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function() {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		var result = [];
		for(var i = 0; i < this.length; i++) {
			var item = this[i];
			if(item[2]) {
				result.push("@media " + item[2] + "{" + item[1] + "}");
			} else {
				result.push(item[1]);
			}
		}
		return result.join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = Object.create(options.computed || null)
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
    options.computed = computed
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    class: _vm.className
  }, [_c('input', {
    staticClass: "v-switch-input",
    attrs: {
      "type": "checkbox",
      "name": _vm.name,
      "disabled": _vm.disabled
    },
    domProps: {
      "checked": _vm.value
    },
    on: {
      "change": function($event) {
        $event.stopPropagation();
        return _vm.toggle($event)
      }
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "v-switch-core",
    style: (_vm.coreStyle)
  }, [_c('div', {
    staticClass: "v-switch-button",
    style: (_vm.buttonStyle)
  })]), _vm._v(" "), (_vm.labels) ? [(_vm.toggled) ? _c('span', {
    staticClass: "v-switch-label v-left",
    style: (_vm.labelStyle)
  }, [_vm._t("checked", [
    [_vm._v(_vm._s(_vm.labelChecked))]
  ])], 2) : _c('span', {
    staticClass: "v-switch-label v-right",
    style: (_vm.labelStyle)
  }, [_vm._t("unchecked", [
    [_vm._v(_vm._s(_vm.labelUnchecked))]
  ])], 2)] : _vm._e()], 2)
},staticRenderFns: []}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(4);
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var update = __webpack_require__(9)("2283861f", content, true);

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/

var hasDocument = typeof document !== 'undefined'

if (typeof DEBUG !== 'undefined' && DEBUG) {
  if (!hasDocument) {
    throw new Error(
    'vue-style-loader cannot be used in a non-browser environment. ' +
    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
  ) }
}

var listToStyles = __webpack_require__(10)

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

var stylesInDom = {/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/}

var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
var singletonElement = null
var singletonCounter = 0
var isProduction = false
var noop = function () {}

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

module.exports = function (parentId, list, _isProduction) {
  isProduction = _isProduction

  var styles = listToStyles(parentId, list)
  addStylesToDom(styles)

  return function update (newList) {
    var mayRemove = []
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i]
      var domStyle = stylesInDom[item.id]
      domStyle.refs--
      mayRemove.push(domStyle)
    }
    if (newList) {
      styles = listToStyles(parentId, newList)
      addStylesToDom(styles)
    } else {
      styles = []
    }
    for (var i = 0; i < mayRemove.length; i++) {
      var domStyle = mayRemove[i]
      if (domStyle.refs === 0) {
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j]()
        }
        delete stylesInDom[domStyle.id]
      }
    }
  }
}

function addStylesToDom (styles /* Array<StyleObject> */) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var domStyle = stylesInDom[item.id]
    if (domStyle) {
      domStyle.refs++
      for (var j = 0; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j])
      }
      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j]))
      }
      if (domStyle.parts.length > item.parts.length) {
        domStyle.parts.length = item.parts.length
      }
    } else {
      var parts = []
      for (var j = 0; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j]))
      }
      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
    }
  }
}

function createStyleElement () {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  head.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */) {
  var update, remove
  var styleElement = document.querySelector('style[data-vue-ssr-id~="' + obj.id + '"]')

  if (styleElement) {
    if (isProduction) {
      // has SSR styles and in production mode.
      // simply do nothing.
      return noop
    } else {
      // has SSR styles but in dev mode.
      // for some reason Chrome can't handle source map in server-rendered
      // style tags - source maps in <style> only works if the style tag is
      // created and inserted dynamically. So we remove the server rendered
      // styles and inject new ones.
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  if (isOldIE) {
    // use singleton mode for IE9.
    var styleIndex = singletonCounter++
    styleElement = singletonElement || (singletonElement = createStyleElement())
    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
  } else {
    // use multi-style-tag mode in all other cases
    styleElement = createStyleElement()
    update = applyToTag.bind(null, styleElement)
    remove = function () {
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  update(obj)

  return function updateStyle (newObj /* StyleObjectPart */) {
    if (newObj) {
      if (newObj.css === obj.css &&
          newObj.media === obj.media &&
          newObj.sourceMap === obj.sourceMap) {
        return
      }
      update(obj = newObj)
    } else {
      remove()
    }
  }
}

var replaceText = (function () {
  var textStore = []

  return function (index, replacement) {
    textStore[index] = replacement
    return textStore.filter(Boolean).join('\n')
  }
})()

function applyToSingletonTag (styleElement, index, remove, obj) {
  var css = remove ? '' : obj.css

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = replaceText(index, css)
  } else {
    var cssNode = document.createTextNode(css)
    var childNodes = styleElement.childNodes
    if (childNodes[index]) styleElement.removeChild(childNodes[index])
    if (childNodes.length) {
      styleElement.insertBefore(cssNode, childNodes[index])
    } else {
      styleElement.appendChild(cssNode)
    }
  }
}

function applyToTag (styleElement, obj) {
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
module.exports = function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}


/***/ })
/******/ ]);
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "f408":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomString = randomString;
exports.randomLowercaseString = randomLowercaseString;
exports.randomUppercaseString = randomUppercaseString;
/*
Copyright 2018 New Vector Ltd
Copyright 2019 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

const LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
const UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const DIGITS = "0123456789";

function randomString(len) {
  return randomStringFrom(len, UPPERCASE + LOWERCASE + DIGITS);
}

function randomLowercaseString(len) {
  return randomStringFrom(len, LOWERCASE);
}

function randomUppercaseString(len) {
  return randomStringFrom(len, UPPERCASE);
}

function randomStringFrom(len, chars) {
  let ret = "";

  for (let i = 0; i < len; ++i) {
    ret += chars.charAt(Math.floor(Math.random() * chars.length));
  }

  return ret;
}

/***/ }),

/***/ "f576":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var inherits = __webpack_require__("3fb5")
var HashBase = __webpack_require__("93e6")
var Buffer = __webpack_require__("8707").Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5


/***/ }),

/***/ "f5af":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("15aa");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("0ae72481", content, shadowRoot)
};

/***/ }),

/***/ "f5df":
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
var isCallable = __webpack_require__("1626");
var classofRaw = __webpack_require__("c6b6");
var wellKnownSymbol = __webpack_require__("b622");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "f60b":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__("b639")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "f693":
/***/ (function(module) {

module.exports = JSON.parse("{\"caption\":{\"create\":\"Create\",\"addPublicChatName\":\"Add Public Chat Name\",\"addGroupNamePlaceHolder\":\"Add Group Name\",\"createPublicChat\":\"Create public chat\",\"chatTopic\":\"Topic renamed\",\"publicRoomTitle\":\"Public Room\",\"asModerator\":\"as moderator\",\"marked\":\"marked\",\"unmarked\":\"unmarked\",\"removeBan\":\"Remove Ban\",\"cancelModeration\":\"Remove moderation\",\"uploadFiles\":\"Télécharger fichiers\",\"header\":\"En-tête\",\"dragAndDropAFile\":\"Glisser déposer fichier\",\"chatInvite\":\"Vous avez été invité à discuter avec:\",\"cantJoin\":\"Vous ne pouvez pas rejoindre la conversation avec:\",\"chatInviteDecline\":\"Vous pouvez rejoindre la conversation ou refuser l'invitation\",\"creatorLeft\":\"Car l'administrateur a quitté la conversation\",\"encrypted\":\"Encrypté\",\"noImages\":\"Il n'y a pas encore d'images dans la conversation\",\"noFiles\":\"Il n'y a pas encore d'files dans la conversation\",\"inviteUser\":\"Inviter utilisateur\",\"invite\":\"Inviter\",\"add\":\"Ajouter\",\"mute\":\"Mode silence\",\"unmute\":\"Mode son\",\"leave\":\"Quitter\",\"Info\":\"Info\",\"new\":\"Nouveau\",\"typing\":\"en train d'écrire\",\"accNotFound\":\"Votre inscription est en cours, veuillez patienter...\",\"emptyList\":\"liste vide (filtrée ou juste vide)\",\"welcome\":\"Bienvenue sur Pocketnet chat\",\"startNewChat\":\"Commencer une conversation\",\"chats\":\"Conversations\",\"shareWith\":\"Partager avec\",\"newChat\":\"Nouvelle conversation\",\"moveToChat\":\"Aller à la conversation\",\"queryNoResults\":\"Auncun résulats\",\"needMoreCharacters\":\"Veuillez saisir plus de caractères\",\"createGroup\":\"Créer groupe\",\"unabletoDecrypt\":\"* Impossible de decrypter\",\"messageDeleted\":\"Message supprimé\",\"sentImage\":\"envoyé image\",\"sentVoiceMessage\":\"envoyé un message vocal\",\"invitationToChat\":\"Invitation à discuter\",\"invitationToRoom\":\"Invitation to room\",\"leftChat\":\"a quitté la conversation\",\"joined\":\"a rejoint\",\"chatRenamed\":\"Conversation renommé en \",\"recentComment\":\"Commentaire récent:\",\"share\":\"PARTAGER\",\"followers\":\"Abonnés:\",\"reputation\":\"Réputation:\",\"following\":\"Abonnements:\",\"theme\":\"Thème:\",\"contacts\":\"Contacts\",\"phoneContacts\":\"Contacts téléphone\",\"chooseInviteMedia\":\"Veuillez choisir comment inviter:\",\"admin\":\"Administrateur\",\"moderator\":\"Modérateur\",\"videocall\":\"Appel Vidéo\",\"call\":\"Appel\",\"leaveAndDelete\":\"Quitter et supprimer\",\"donate\":\"Faire un don\",\"makeModerator\":\"Définir comme Modérateur\",\"ban\":\"Bannir\",\"kick\":\"Expulser\",\"members\":\"Membres\",\"media\":\"Médias\",\"files\":\"Fichiers\",\"contactsList\":\"Liste de contacts\",\"send\":\"envoyer\",\"pageCaption\":\"Légende de page\",\"caption\":\"Légende\",\"text\":\"Texte\",\"placeholder\":\"placeholder\",\"sendTransactionTo\":\"Envoyer transaction à\",\"toBePaidByReceiver\":\"Payé par le receveur\",\"toBePaidBySender\":\"Payé par l'expéditeur\",\"source\":\"Source\",\"amount\":\"Montant\",\"receiver\":\"Receveur\",\"message\":\"Message\",\"includeFeesInAmount\":\"Inclure les frais dans le montant\",\"transactionFees\":\"Frais de transaction\",\"totalAmount\":\"Montant total\",\"balanceTooLow\":\"Solde trop faible\",\"transactionError\":\"Erreur, la transaction ne peut être effectuée\",\"calculateFees\":\"Calculer les frais\",\"startChatWith\":\"Discuter avec:\",\"searchResult\":\"Résultat de la recherche\",\"joinedInTheChat\":\"à rejoint la conversation\",\"invited\":\"invité \",\"hasInvited\":\"invité \",\"inTheChat\":\" dans la conversation\",\"banned\":\"banni\",\"andRoom\":\"et conversation\",\"left\":\"quiité\",\"theChat\":\" la conversation \",\"made\":\"fait \",\"aModerator\":\" un modérateur\",\"editedChatNameTo \":\"edité le nom de la conversation en \",\"somebody\":\"Quelqu'un\",\"sent\":\"a envoyé\",\"PKOINto\":\" PKOIN à \",\"response\":\"Réponse\",\"messagefrom\":\"Transférer message de\",\"edited\":\"Edité\",\"settings\":\"Paramètres\",\"unauthorized\":\"Non autorisé\",\"search\":\"Recherche\",\"replyOnMessage\":\"Répondre au message\",\"editMessage\":\"Editer message\",\"inviteFriend\":\"Inviter des amis\",\"emptyContactList\":\"Liste de contacts vide\",\"joinApp\":\"Rejoindre Pocketnet\",\"hasInvitedToJoin\":\"vous a invité à rejoindre Pocketnet\",\"contactsempty\":\"Vous n'avez pas encore de contacts, vous pouvez utiliser la recherche\",\"usernotgen\":\"User did not generate their encryption keys yet. You will be able to chat them when their keys are generated.\",\"younotgen\":\"Please wait a minute, Your encryption keys are being generated...\",\"chatsearchingempty\":\"No chats found for the specified filter\",\"sendmessage\":\"Send message\"},\"input\":{\"patientEmailPlaceholder\":\"Email\",\"refillNamePlaceholder\":\"Saisissez à nouveau le nom\"},\"message\":{},\"button\":{\"starChatButton\":\"Commencer une conversation \",\"decline\":\"Refuser\",\"declineandignore\":\"Ignorer utilisateur\",\"join\":\"Rejoindre\",\"ok\":\"Ok\",\"copy\":\"Copier\",\"forward\":\"Transférer\",\"delete\":\"Supprimer\",\"save\":\"Enregistrer\",\"reply\":\"Répondre\",\"share\":\"Partager\",\"download\":\"Télécharger\",\"downloaded\":\"Téléchargé\",\"goToPocketnetProfile\":\"Aller au profile Pocketnet\",\"sendFile\":\"Envoyer fichier\",\"takePhotoOrVideo\":\"Envoyer image\",\"sendCoins\":\"Envoyer PKOIN\",\"edit\":\"Editer\",\"select\":\"Sélectionner\",\"block\":\"Bloquer\",\"unblock\":\"Débloquer\",\"blockUser\":\"Bloquer utilisateur\"},\"yes\":\"Oui\",\"cancel\":\"Annuler\",\"teamMessages\":{\"1-title\":\"Bienvenue sur la messagerie privée Bastyon!\",\"1-list1\":\"Messagerie privée qui n'est PAS connectée à votre numéro de téléphone\",\"1-list2\":\"Chiffrement de bout en bout pour chaque conversation\",\"1-list3\":\"Toutes les images envoyées ou reçues par le biais du chat sont stockées sous forme cryptée\",\"1-list4\":\"L'historique des messages est conservé pendant 7 jours uniquement\",\"2-title\":\"Bonne nouvelle! L'application Pocketnet s'appelle désormais Bastyon!\",\"2-message1\":\"Le domaine sera déplacé vers Bastyon.com. Nous avons récemment publié les mises à jour majeures suivantes:\",\"2-list1\":\"Messagerie privée cryptée non connectée à votre numéro de téléphone\",\"2-list2\":\"Possibilité de faire des dons en PKOIN aux blogueurs\",\"2-list3\":\"Vidéo et Streaming en direct\",\"2-message2\":\"Invitez dès maintenant vos amis et faites partie du grand avenir de l'internet décentralisé!\",\"2-button\":\"Inviter des amis\"},\"sendingerror\":\"An error occurred while sending the message\",\"details\":\"Details\",\"settings_pin\":\"Pin chat window\",\"checked\":\"Yes\",\"unchecked\":\"No\",\"settings_read\":\"Send read receipts\",\"messagewasburn\":\"This message remains only in the memory of your device\",\"messagewillburn\":\"The message will be deleted soon\",\"micaccessbrowser\":\"Access to the microphone is restricted, please check your browser settings.\",\"micaccesscommonproblem\":\"Sorry, for some reason it is not possible to record voice messages on the device\",\"micaccesscordova\":\"Access to the microphone is restricted, please check your device settings.\",\"micdevicenotfound\":\"Audio recording device not found\"}");

/***/ }),

/***/ "f6b4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "f6f7":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("24a6");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("5f2561d6", content, shadowRoot)
};

/***/ }),

/***/ "f726":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#wai-logotype .items[data-v-e33cd7cc]{display:flex;align-items:center}#wai-logotype .items .item.label[data-v-e33cd7cc]{padding-left:.25em;font-weight:700}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "f772":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("5692");
var uid = __webpack_require__("90e3");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "f922":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "#preloader[data-v-3e6353d6]{position:fixed;top:0;left:0;right:0;bottom:0;background:transparent;z-index:3500}#preloader .iospreloadercenter[data-v-3e6353d6]{position:absolute;left:50%;top:50%;margin-left:-33px;margin-top:-33px}#preloader.minimized[data-v-3e6353d6]{display:none}#preloader.minimized.active[data-v-3e6353d6]{display:block;width:344px;right:.5em;bottom:1em;top:124px;left:auto}.default .preloader[data-v-3e6353d6]{height:90px;text-align:center;overflow:hidden;padding:10px 0;margin:0 auto;filter:url(#love);position:absolute;left:50%;top:50%;margin-top:-45px;margin-left:-60px;opacity:.85}.default .preloader span[data-v-3e6353d6]{width:20px;height:20px;background-color:transparent;display:inline-block;border-radius:50%;margin:10px}.spinner-eff[data-v-3e6353d6]{position:relative;width:66px;height:66px}.spinner-eff .spinner-bar[data-v-3e6353d6]:after,.spinner-eff .spinner-bar[data-v-3e6353d6]:before,.spinner-eff[data-v-3e6353d6]:after,.spinner-eff[data-v-3e6353d6]:before{content:\"\";display:block}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "f978":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/contacts/list/index.vue?vue&type=template&id=691bf714&scoped=true&
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"contactList",class:{minimized: _vm.minimized}},[_c('RecycleScroller',{staticClass:"scroller",attrs:{"page-mode":"","items":_vm.users,"item-size":60,"key-field":"id"},scopedSlots:_vm._u([{key:"default",fn:function(ref){
var item = ref.item;
return [_c('div',{staticClass:"previewWrapper minimizeex"},[(_vm.mode === 'Contacts' || _vm.mode === 'Select')?_c('div',{staticClass:"previewContact",on:{"click":function($event){return _vm.navigateToProfile(item.id, item)}}},[_c('preview',{attrs:{"contact":item,"mode":_vm.mode}})],1):_vm._e(),(_vm.mode === 'Selectmany')?_c('div',{staticClass:"previewBox",on:{"click":function($event){return _vm.toggleUser(item)}}},[_c('div',{staticClass:"previewContactSelect"},[_c('preview',{attrs:{"mode":_vm.mode,"contact":item}})],1),_c('div',{staticClass:"checkBox"},[(_vm.selected[item.id])?_c('i',{staticClass:"far fa-check-circle"}):_vm._e(),(!_vm.selected[item.id])?_c('i',{staticClass:"far fa-circle"}):_vm._e()])]):_vm._e()])]}}])})],1)}
var staticRenderFns = []


// CONCATENATED MODULE: ./src/components/contacts/list/index.vue?vue&type=template&id=691bf714&scoped=true&

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// EXTERNAL MODULE: ./src/components/contacts/preview/index.vue + 4 modules
var preview = __webpack_require__("92a6");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"056ad8cc-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/utils/ModalWindow.vue?vue&type=template&id=96a5a68e&scoped=true&
var ModalWindowvue_type_template_id_96a5a68e_scoped_true_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"mod-wrapper"},[_c('div',{staticClass:"modal-window"},[_c('span',{staticClass:"message"},[_vm._v(_vm._s(_vm.message))]),_c('button',{staticClass:"btn",on:{"click":_vm.close}},[_vm._v("OK")])])])}
var ModalWindowvue_type_template_id_96a5a68e_scoped_true_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/utils/ModalWindow.vue?vue&type=template&id=96a5a68e&scoped=true&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/utils/ModalWindow.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
/* harmony default export */ var ModalWindowvue_type_script_lang_js_ = ({
  name: 'ModalWindow',
  props: ['message'],
  methods: {
    close() {
      this.$emit('Close');
    }

  }
});
// CONCATENATED MODULE: ./src/components/utils/ModalWindow.vue?vue&type=script&lang=js&
 /* harmony default export */ var utils_ModalWindowvue_type_script_lang_js_ = (ModalWindowvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__("2877");

// CONCATENATED MODULE: ./src/components/utils/ModalWindow.vue



function injectStyles (context) {
  
  var style0 = __webpack_require__("706e")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var component = Object(componentNormalizer["a" /* default */])(
  utils_ModalWindowvue_type_script_lang_js_,
  ModalWindowvue_type_template_id_96a5a68e_scoped_true_render,
  ModalWindowvue_type_template_id_96a5a68e_scoped_true_staticRenderFns,
  false,
  injectStyles,
  "96a5a68e",
  null
  ,true
)

/* harmony default export */ var ModalWindow = (component.exports);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--13-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./src/components/contacts/list?vue&type=script&lang=js&



/* harmony default export */ var list_vue_type_script_lang_js_ = ({
  name: "contactsList",
  data: function () {
    return {
      loading: false
    };
  },
  components: {
    preview: preview["a" /* default */],
    ModalWindow: ModalWindow
  },
  props: {
    mode: {
      default: '',
      type: String
    },
    users: Array,
    selected: Object,
    title: String
  },
  watch: {//$route: 'getdata'
  },
  computed: Object(vuex_esm["c" /* mapState */])({
    auth: state => state.auth,
    minimized: state => state.minimized,
    ...Object(vuex_esm["b" /* mapActions */])(['PREPARE_USERDATA']),
    ...Object(vuex_esm["c" /* mapState */])(['contactsMap', 'signedUpUsers'])
  }),
  methods: {
    select(contact) {
      this.$emit('select', contact);
    },

    navigateToProfile(id, contact) {
      if (this.mode == "Select") {
        this.select(contact);
      } else {
        this.$router.push({
          path: `/contact?id=${id}`
        }).catch(e => {});
      }
    },

    toggleUser(contact) {
      this.$emit('toggleUser', contact.id);
    }

  },

  mounted() {}

});
// CONCATENATED MODULE: ./src/components/contacts/list?vue&type=script&lang=js&
 /* harmony default export */ var contacts_list_vue_type_script_lang_js_ = (list_vue_type_script_lang_js_); 
// CONCATENATED MODULE: ./src/components/contacts/list/index.vue



function list_injectStyles (context) {
  
  var style0 = __webpack_require__("ff89")
if (style0.__inject__) style0.__inject__(context)

}

/* normalize component */

var list_component = Object(componentNormalizer["a" /* default */])(
  contacts_list_vue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  list_injectStyles,
  "691bf714",
  null
  ,true
)

/* harmony default export */ var list = __webpack_exports__["default"] = (list_component.exports);

/***/ }),

/***/ "f9d6":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9b340a7a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("306e");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9b340a7a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9b340a7a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9b340a7a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_9b340a7a_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "faa1":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "fafe":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("abac");
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add CSS to Shadow Root
var add = __webpack_require__("35d6").default
module.exports.__inject__ = function (shadowRoot) {
  add("662871c4", content, shadowRoot)
};

/***/ }),

/***/ "fbbb":
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, ".searchWrapper[data-v-1774f2a8]{display:flex;overflow:hidden;background:rgb(var(--background-secondary-theme));border-radius:30px;color:rgb(var(--neutral-grad-2));align-items:center}.searchWrapper .inputWrapper[data-v-1774f2a8]{flex-grow:1}.searchWrapper .inputWrapper input[data-v-1774f2a8]{padding:.75em 1em;padding-right:0;width:100%;font-size:.9em}.searchWrapper .iconWrapper[data-v-1774f2a8]{text-align:center;width:50px}.searchWrapper .iconWrapper i[data-v-1774f2a8]{font-size:.8em}#search.minimized:not(.active) .searchWrapper[data-v-1774f2a8]{border-radius:0;background:transparent;padding:0}#search.minimized:not(.active) .searchWrapper .inputWrapper[data-v-1774f2a8]{display:none}#search.minimized:not(.active) .searchWrapper .iconWrapper[data-v-1774f2a8]{text-align:center;width:44px;height:44px;line-height:44px;padding:0;border-radius:50%;background:rgba(var(--color-txt-gray-dark),.4);color:rgba(var(--color-txt-gray-dark),.8)}#search.minimized:not(.active) .searchWrapper .iconWrapper i[data-v-1774f2a8]{font-size:.8em}", ""]);
// Exports
module.exports = exports;


/***/ }),

/***/ "fc6a":
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__("44ad");
var requireObjectCoercible = __webpack_require__("1d80");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "fca4":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_lang_sass_shadow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7e58");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_lang_sass_shadow__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_lang_sass_shadow__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_lang_sass_shadow__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_1_lang_sass_shadow__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "fdbf":
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__("4930");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "fdca":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_791cf1f7_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2724");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_791cf1f7_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_791cf1f7_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_791cf1f7_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_style_index_0_id_791cf1f7_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "fe93":
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var data = __webpack_require__("6de4");

function escapeRegexp(str) {
  return str.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
}

var REPLACE_RE = RegExp(Object.keys(data).map(escapeRegexp).join('|'), 'g');

function replace_fn(match) {
  return data[match];
}

function unhomoglyph(str) {
  return str.replace(REPLACE_RE, replace_fn);
}

module.exports = unhomoglyph;


/***/ }),

/***/ "ff6c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_time_vue_vue_type_style_index_0_id_9218004e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("246d");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_time_vue_vue_type_style_index_0_id_9218004e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_time_vue_vue_type_style_index_0_id_9218004e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_time_vue_vue_type_style_index_0_id_9218004e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_node_modules_cache_loader_dist_cjs_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_time_vue_vue_type_style_index_0_id_9218004e_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "ff89":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_691bf714_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("fafe");
/* harmony import */ var _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_691bf714_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_691bf714_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_691bf714_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_ref_10_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_10_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_2_node_modules_postcss_loader_src_index_js_ref_10_oneOf_1_3_node_modules_sass_loader_dist_cjs_js_ref_10_oneOf_1_4_index_sass_vue_type_style_index_0_id_691bf714_scoped_true_lang_sass___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));


/***/ }),

/***/ "ffd9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Sets all values in the given array to zero and returns it.
 *
 * The fact that it sets bytes to zero can be relied on.
 *
 * There is no guarantee that this function makes data disappear from memory,
 * as runtime implementation can, for example, have copying garbage collector
 * that will make copies of sensitive data before we wipe it. Or that an
 * operating system will write our data to swap or sleep image. Another thing
 * is that an optimizing compiler can remove calls to this function or make it
 * no-op. There's nothing we can do with it, so we just do our best and hope
 * that everything will be okay and good will triumph over evil.
 */
function wipe(array) {
    // Right now it's similar to array.fill(0). If it turns
    // out that runtimes optimize this call away, maybe
    // we can try something else.
    for (let i = 0; i < array.length; i++) {
        array[i] = 0;
    }
    return array;
}
exports.wipe = wipe;


/***/ })

/******/ });
//# sourceMappingURL=matrix-element.js.map